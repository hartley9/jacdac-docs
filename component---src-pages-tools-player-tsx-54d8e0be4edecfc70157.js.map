{"version":3,"file":"component---src-pages-tools-player-tsx-54d8e0be4edecfc70157.js","mappings":"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","sources":["webpack://jacdac-docs/./jacdac-ts/src/jdom/logparser.ts","webpack://jacdac-docs/./src/components/hooks/useWindowPaste.ts","webpack://jacdac-docs/./src/components/trace/TraceAnalyzer.tsx","webpack://jacdac-docs/./src/pages/tools/player.tsx"],"sourcesContent":["import { arrayConcatMany, fromHex } from \"./utils\"\nimport JDBus from \"./bus\"\nimport Packet from \"./packet\"\nimport TracePlayer from \"./trace/traceplayer\"\nimport Frame from \"./frame\"\nimport Trace from \"./trace/trace\"\nimport { META_TRACE, META_TRACE_DESCRIPTION } from \"./constants\"\n\n/**\n * Parse a trace text file\n * @param contents\n * @returns\n * @category Trace\n */\nexport function parseTrace(contents: string): Trace {\n    const description: string[] = []\n    const packets: Packet[] = []\n    contents?.split(/\\r?\\n/).forEach(ln => {\n        // parse data\n        const m = /^(\\d+.?\\d*)\\s+([a-f0-9]{12,})/i.exec(ln)\n        if (!m) {\n            // might be a stack trace\n            if (/^\\s+at\\s/.test(ln)) {\n                const lastPacket = packets[packets.length - 1]\n                if (lastPacket) {\n                    let trace = (lastPacket.meta[META_TRACE] as string) || \"\"\n                    trace += ln + \"\\n\"\n                    lastPacket.meta[META_TRACE] = trace\n                }\n            } else {\n                // probably junk data\n                if (packets.length == 0) description.push(ln)\n            }\n            return\n        }\n\n        const timestamp = parseInt(m[1])\n        const data = fromHex(m[2])\n        // add to array\n        const pkt = Packet.fromBinary(data, timestamp)\n        pkt.meta[META_TRACE_DESCRIPTION] = ln.substring(m[0].length).trim()\n        packets.push(pkt)\n    })\n    if (packets.length)\n        return new Trace(packets, {\n            description: description.join(\"\\n\").trim(),\n        })\n    else return undefined\n}\n\n/**\n * Parses a logic analyzer log into a trace\n * @param logcontents\n * @returns\n * @category Trace\n */\nexport function parseLogicLog(logcontents: string): Frame[] {\n    if (!logcontents) return undefined\n\n    const res: Frame[] = []\n    let frameBytes = []\n    let lastTime = 0\n    for (const ln of logcontents.split(/\\r?\\n/)) {\n        let m = /^JD (\\d+) ([0-9a-f]+)/i.exec(ln)\n        if (m) {\n            res.push({\n                timestamp: parseInt(m[1]),\n                data: fromHex(m[2]),\n            })\n            continue\n        }\n\n        /** Windows, logic 1.*\nTime [s],Value,Parity Error,Framing Error\n0.042909760000000,0x00,,Error\n0.042980320000000,0xD4,,\n0.042990240000000,0x81,,\n0.043000160000000,0x10,,\n0.043010240000000,0x00,,\n0.043020160000000,0xE8,,\n0.043030240000000,0xDF,,\n0.043040160000000,0xCB,,\n0.043050240000000,0xD1,,\n0.043060160000000,0x97,,\n0.043070240000000,0x34,,\n0.043080160000000,0x37,,\n0.043090240000000,0x48,,\n0.043100160000000,0x0C,,\n0.043110080000000,0x00,,\n0.043120160000000,0x00,,\n0.043130080000000,0x00,,\n0.043140160000000,0x00,,\n0.043150080000000,0x00,,\n0.043160160000000,0x00,,\n0.043170080000000,0x00,,\n0.043180160000000,0xCA,,\n0.043190080000000,0x1F,,\n0.043200160000000,0xDC,,\n0.043210080000000,0x12,,\n0.043220160000000,0x46,,\n0.043230080000000,0x47,,\n0.043240160000000,0x27,,\n0.043250080000000,0x1F,,\n0.043264800000000,0x00,,Error\n0.063968960000000,0x00,,Error\n         */\n        m = /^([\\d.]+),(?:Async Serial,)?.*(0x[A-F0-9][A-F0-9])/.exec(ln)\n        if (!m) continue\n        const tm = parseFloat(m[1])\n        if (lastTime && tm - lastTime > 0.1) {\n            res.push({\n                timestamp: lastTime * 1000,\n                data: new Uint8Array(frameBytes),\n                info: \"timeout\",\n            })\n            frameBytes = []\n            lastTime = 0\n        }\n\n        lastTime = tm\n        if (/(framing error|Error)/.test(ln)) {\n            if (frameBytes.length > 0)\n                res.push({\n                    timestamp: lastTime * 1000,\n                    data: new Uint8Array(frameBytes),\n                })\n            frameBytes = []\n            lastTime = 0\n        } else {\n            frameBytes.push(parseInt(m[2]))\n        }\n    }\n\n    return res\n}\n\n/**\n * Replays a parsed logic log\n * @param bus\n * @param frames\n * @param speed\n * @category Trace\n */\nexport function replayLogicLog(\n    bus: JDBus,\n    frames: Frame[],\n    speed?: number\n): void {\n    const packets = arrayConcatMany(\n        frames.map(frame => Packet.fromFrame(frame.data, frame.timestamp))\n    )\n    const player = new TracePlayer(bus, speed)\n    player.trace = new Trace(packets)\n    bus.clear(packets[0].timestamp)\n    player.start()\n}\n","import { useCallback } from \"react\"\nimport useWindowEvent from \"./useWindowEvent\"\n\nexport default function useWindowPaste(onPaste: (text: string) => void) {\n    const cb = useCallback(\n        (e: ClipboardEvent) => {\n            e.preventDefault()\n            const text = e.clipboardData.getData(\"text\")\n            onPaste(text)\n        },\n        [onPaste]\n    )\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    useWindowEvent(<any>\"paste\", cb)\n}\n","import React, { useCallback, useContext } from \"react\"\nimport PacketsContext from \"../PacketsContext\"\nimport { parseTrace } from \"../../../jacdac-ts/src/jdom/logparser\"\nimport useWindowPaste from \"../hooks/useWindowPaste\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport useBus from \"../../jacdac/useBus\"\nimport useChange from \"../../jacdac/useChange\"\nimport { Container } from \"@mui/material\"\n\nexport default function TraceAnalyzer() {\n    const bus = useBus()\n    const { replayTrace, setReplayTrace } = useContext(PacketsContext)\n    const importTrace = useCallback(\n        (text: string) => {\n            const trace = parseTrace(text)\n            setReplayTrace(trace)\n        },\n        [setReplayTrace]\n    )\n    useWindowPaste(importTrace)\n    const traceText = useChange(\n        bus,\n        _ => {\n            if (_) replayTrace?.resolveDevices(_)\n            return replayTrace?.serializeToText()\n        },\n        [replayTrace]\n    )\n\n    if (!traceText)\n        return (\n            <Container>\n                <p>\n                    No trace loaded.{\" \"}\n                    <Link to=\"/software/traces\">\n                        Learn how to collect a trace.\n                    </Link>\n                </p>\n            </Container>\n        )\n\n    return <pre>{traceText}</pre>\n}\n","import React from \"react\"\nimport TraceAnalyzer from \"../../components/trace/TraceAnalyzer\"\n\nexport default function Page() {\n    return <TraceAnalyzer />\n}\n"],"names":["arrayConcatMany","fromHex","Packet","TracePlayer","Trace","META_TRACE","META_TRACE_DESCRIPTION","parseTrace","contents","description","packets","split","forEach","ln","m","exec","test","lastPacket","length","trace","meta","push","timestamp","parseInt","data","pkt","fromBinary","substring","trim","join","undefined","parseLogicLog","logcontents","res","frameBytes","lastTime","tm","parseFloat","Uint8Array","info","replayLogicLog","bus","frames","speed","map","frame","fromFrame","player","clear","start","useCallback","useWindowEvent","useWindowPaste","onPaste","cb","e","preventDefault","text","clipboardData","getData","React","useContext","PacketsContext","Link","useBus","useChange","Container","TraceAnalyzer","replayTrace","setReplayTrace","importTrace","traceText","_","resolveDevices","serializeToText","Page"],"sourceRoot":""}