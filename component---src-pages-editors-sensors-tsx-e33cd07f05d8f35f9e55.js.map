{"version":3,"file":"component---src-pages-editors-sensors-tsx-e33cd07f05d8f35f9e55.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/blockly/dsl/datasetdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/datavardsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/sensorsdsl.ts","webpack://jacdac-docs/./src/components/hooks/useLocationSearchParam.ts","webpack://jacdac-docs/./src/components/blockly/SensorsBlockEditor.tsx","webpack://jacdac-docs/./src/pages/editors/sensors.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { Workspace, alert } from \"blockly\"\nimport BuiltinDataSetField from \"../fields/BuiltinDataSetField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    ButtonDefinition,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { resolveWorkspaceServices } from \"../WorkspaceContext\"\nimport FileSaveField from \"../fields/FileSaveField\"\nimport { saveCSV } from \"./workers/csv.proxy\"\nimport FileOpenField from \"../fields/FileOpenField\"\nimport palette from \"./palette\"\nimport { importCSVFilesIntoWorkspace } from \"../../fs/fs\"\n\nconst DATA_DATASET_BUILTIN_BLOCK = \"data_dataset_builtin\"\nconst DATA_ADD_DATASET_CALLBACK = \"data_add_dataset_variable\"\nconst DATA_LOAD_FILE_BLOCK = \"data_load_file\"\nconst DATA_SAVE_FILE_BLOCK = \"data_save_file\"\n\nconst [datasetColour] = palette()\nconst dataSetDsl: BlockDomainSpecificLanguage = {\n    id: \"dataSets\",\n    createBlocks: () => [\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_DATASET_BUILTIN_BLOCK,\n            message0: \"dataset %1\",\n            tooltip: \"Loads a builtin dataset\",\n            args0: [\n                {\n                    type: BuiltinDataSetField.KEY,\n                    name: \"dataset\",\n                },\n            ],\n            inputsInline: false,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: datasetColour,\n            template: \"meta\",\n            dataPreviewField: true,\n            transformData: identityTransformData,\n        },\n        {\n            kind: \"block\",\n            type: DATA_LOAD_FILE_BLOCK,\n            message0: \"load dataset from file %1\",\n            args0: [\n                {\n                    type: FileOpenField.KEY,\n                    name: \"file\",\n                },\n            ],\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: datasetColour,\n            template: \"meta\",\n            inputsInline: false,\n            dataPreviewField: true,\n            transformData: identityTransformData,\n        },\n        {\n            kind: \"block\",\n            type: DATA_SAVE_FILE_BLOCK,\n            message0: \"save dataset to file %1\",\n            args0: [\n                {\n                    type: FileSaveField.KEY,\n                    name: \"file\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: datasetColour,\n            template: \"meta\",\n            inputsInline: false,\n            dataPreviewField: \"after\",\n            transformData: async (block, data) => {\n                const file = block.getField(\"file\") as FileSaveField\n                if (file?.fileHandle && data)\n                    await saveCSV(file.fileHandle, data)\n                return data\n            },\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Data sets\",\n            colour: datasetColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DATASET_BUILTIN_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_LOAD_FILE_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SAVE_FILE_BLOCK,\n                },\n                <ButtonDefinition>{\n                    kind: \"button\",\n                    text: \"Import dataset\",\n                    callbackKey: DATA_ADD_DATASET_CALLBACK,\n                    callback: (workspace: Workspace) => {\n                        const services = resolveWorkspaceServices(workspace)\n                        const directory = services?.workingDirectory\n                        if (!directory)\n                            alert(\n                                \"You need to open a directory to import a dataset.\"\n                            )\n                        else {\n                            importCSVFilesIntoWorkspace(directory.handle)\n                                .then(() => directory.sync())\n                                .then(() => alert(\"Datasets imported!\"))\n                        }\n                    },\n                },\n            ],\n        },\n    ],\n}\nexport default dataSetDsl\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Block, Events, FieldVariable, Variables } from \"blockly\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    ButtonDefinition,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    VariableInputDefinition,\n    DATA_TABLE_TYPE,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { BlockWithServices, resolveBlockServices } from \"../WorkspaceContext\"\n\nconst DATA_ADD_VARIABLE_CALLBACK = \"data_add_variable\"\nconst DATA_DATAVARIABLE_READ_BLOCK = \"data_dataset_read\"\nconst DATA_DATAVARIABLE_WRITE_BLOCK = \"data_dataset_write\"\n\nconst dataVariablesColour = \"%{BKY_VARIABLES_HUE}\"\nconst dataVarDsl: BlockDomainSpecificLanguage = {\n    id: \"dataVariables\",\n    createBlocks: () => [\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_DATAVARIABLE_READ_BLOCK,\n            message0: \"dataset variable %1\",\n            args0: [\n                <VariableInputDefinition>{\n                    type: \"field_variable\",\n                    name: \"data\",\n                    variable: \"data\",\n                    variableTypes: [DATA_TABLE_TYPE],\n                    defaultType: DATA_TABLE_TYPE,\n                },\n            ],\n            inputsInline: false,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: dataVariablesColour,\n            template: \"meta\",\n            dataPreviewField: \"after\",\n            transformData: (b: Block) => {\n                const services = resolveBlockServices(b)\n                const data = services?.data\n                return Promise.resolve(data)\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_DATAVARIABLE_WRITE_BLOCK,\n            message0: \"store in dataset variable %1\",\n            args0: [\n                <VariableInputDefinition>{\n                    type: \"field_variable\",\n                    name: \"data\",\n                    variable: \"data\",\n                    variableTypes: [DATA_TABLE_TYPE],\n                    defaultType: DATA_TABLE_TYPE,\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: dataVariablesColour,\n            template: \"meta\",\n            dataPreviewField: \"after\",\n            transformData: (b: Block, data: object[]) => {\n                // grab the variable from the block\n                const variable = b.getFieldValue(\"data\")\n                if (!variable) return Promise.resolve(undefined)\n                const readBlocks = b.workspace.getBlocksByType(\n                    DATA_DATAVARIABLE_READ_BLOCK,\n                    false\n                )\n                const readServices = readBlocks\n                    .filter(b => b.isEnabled())\n                    .filter(b => b.getFieldValue(\"data\") === variable)\n                    .map(b => (b as BlockWithServices).jacdacServices)\n                    .filter(services => !!services)\n                readServices.forEach(services => (services.data = data))\n                return Promise.resolve(data)\n            },\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Data variables\",\n            colour: dataVariablesColour,\n            contents: [\n                <ButtonDefinition>{\n                    kind: \"button\",\n                    text: `Add dataset variable`,\n                    callbackKey: DATA_ADD_VARIABLE_CALLBACK,\n                    callback: workspace =>\n                        Variables.createVariableButtonHandler(\n                            workspace,\n                            null,\n                            DATA_TABLE_TYPE\n                        ),\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DATAVARIABLE_READ_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DATAVARIABLE_WRITE_BLOCK,\n                },\n            ],\n        },\n    ],\n    createWorkspaceChangeListener: () => (event: Events.Abstract) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const { type, blockId } = event as any\n        const isBlockChange =\n            type === Events.BLOCK_CHANGE || type === Events.BLOCK_MOVE\n\n        if (isBlockChange || type === Events.FINISHED_LOADING) {\n            const workspace = event.getEventWorkspace_()\n            if (isBlockChange) {\n                const block = workspace.getBlockById(blockId)\n                if (block?.type !== DATA_DATAVARIABLE_WRITE_BLOCK) return // nothing so see here\n            }\n\n            // collect set variables blocks,\n            // and make sure only 1 of them is enabled\n            const setvars = workspace\n                .getBlocksByType(DATA_DATAVARIABLE_WRITE_BLOCK, true)\n                .filter(b => b.isEnabled())\n\n            // mark and sweep variables, leaving one 1 enabled per kind\n            const marked = {}\n            while (setvars.length) {\n                const block = setvars.shift()\n                const variable = (\n                    block.getField(\"data\") as FieldVariable\n                ).getVariable()\n                if (variable) {\n                    const name = variable.name\n                    if (marked[name]) {\n                        if (block.isEnabled()) {\n                            block.setEnabled(false)\n                            block.unplug(true)\n                        }\n                    } else marked[name] = true\n                }\n            }\n        }\n    },\n}\nexport default dataVarDsl\n\nexport function resolveUsedDataVariables(block: Block): {\n    reads?: string[]\n    write?: string\n} {\n    const { type } = block\n    if (type === DATA_DATAVARIABLE_READ_BLOCK) {\n        const field = block.getField(\"data\") as FieldVariable\n        const variable = field.getVariable()\n        if (variable)\n            return {\n                reads: [variable.name],\n            }\n    } else if (type === DATA_DATAVARIABLE_WRITE_BLOCK) {\n        const field = block.getField(\"data\") as FieldVariable\n        const variable = field.getVariable()\n        if (variable)\n            return {\n                write: variable.name,\n            }\n    }\n\n    return {}\n}\n","import {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n    InputDefinition,\n    VariableInputDefinition,\n    sensorsColour,\n    SENSOR_BLOCK,\n    SeparatorDefinition,\n    NumberInputDefinition,\n    TextInputDefinition,\n    DataColumnInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport TwinField from \"../fields/TwinField\"\nimport { ServicesBaseDSL } from \"./servicesbase\"\nimport type {\n    DataRecordWindowRequest,\n    DataMovingAverageRequest,\n} from \"../../../workers/data/dist/node_modules/data.worker\"\nimport { Block } from \"blockly\"\nimport postTransformData from \"./workers/data.proxy\"\nimport DataColumnChooserField from \"../fields/DataColumnChooserField\"\nimport { tidyResolveFieldColumn } from \"../fields/tidy\"\n\nconst RECORD_WINDOW_BLOCK = \"jacdac_record_window\"\nconst MOVING_AVERAGE_BLOCK = \"jacdac_moving_average\"\n\nexport class SensorsBlockDomainSpecificLanguage\n    extends ServicesBaseDSL\n    implements BlockDomainSpecificLanguage\n{\n    id = \"jacdacSensors\"\n\n    createBlocks(options: CreateBlocksOptions): BlockDefinition[] {\n        const colour = sensorsColour\n        return [\n            {\n                kind: \"block\",\n                type: SENSOR_BLOCK,\n                message0: `sensor %1 %2 %3`,\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"service\",\n                        variable: \"none\",\n                        variableTypes: [\"sensor\"],\n                        defaultType: \"sensor\",\n                    },\n                    {\n                        type: \"input_dummy\",\n                    },\n                    <InputDefinition>{\n                        type: TwinField.KEY,\n                        name: \"twin\",\n                    },\n                ],\n                colour,\n                inputsInline: false,\n                tooltip: `Twin of the selected servioce`,\n                nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                helpUrl: \"\",\n                template: \"meta\",\n                transformData: identityTransformData,\n            },\n            <BlockDefinition>{\n                kind: \"block\",\n                type: RECORD_WINDOW_BLOCK,\n                message0: \"record last %1 s\",\n                args0: [\n                    <NumberInputDefinition>{\n                        type: \"field_number\",\n                        name: \"horizon\",\n                        value: 10,\n                    },\n                ],\n                inputsInline: false,\n                previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                colour,\n                template: \"meta\",\n                dataPreviewField: true,\n                transformData: async (\n                    block: Block,\n                    data: { time: number }[],\n                    previousData: { time: number }[]\n                ) => {\n                    const horizon = block.getFieldValue(\"horizon\") || 10\n                    return postTransformData(<DataRecordWindowRequest>{\n                        type: \"record_window\",\n                        data,\n                        previousData,\n                        horizon,\n                    })\n                },\n            },\n            {\n                kind: \"block\",\n                type: MOVING_AVERAGE_BLOCK,\n                message0: \"moving average %1 of %2 horizon %3\",\n                colour,\n                args0: [\n                    <TextInputDefinition>{\n                        type: \"field_input\",\n                        name: \"newcolumn\",\n                        spellcheck: false,\n                    },\n                    <DataColumnInputDefinition>{\n                        type: DataColumnChooserField.KEY,\n                        name: \"column\",\n                        dataType: \"number\",\n                    },\n                    <NumberInputDefinition>{\n                        type: \"field_number\",\n                        name: \"horizon\",\n                        min: 2,\n                        precision: 1,\n                    },\n                ],\n                previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                dataPreviewField: true,\n                transformData: (b: Block, data: object[]) => {\n                    const newcolumn = b.getFieldValue(\"newcolumn\")\n                    const column = tidyResolveFieldColumn(data, b, \"column\", {\n                        type: \"number\",\n                    })\n                    const horizon = Math.max(2, b.getFieldValue(\"horizon\"))\n                    if (!newcolumn || !column) return Promise.resolve(data)\n                    return postTransformData(<DataMovingAverageRequest>{\n                        type: \"moving_average\",\n                        data,\n                        newcolumn,\n                        column,\n                        horizon,\n                    })\n                },\n                template: \"meta\",\n            },\n        ]\n    }\n\n    createCategory(options: CreateCategoryOptions): CategoryDefinition[] {\n        return [\n            {\n                kind: \"category\",\n                name: \"Sensors\",\n                colour: sensorsColour,\n                contents: [\n                    <BlockReference>{\n                        kind: \"block\",\n                        type: SENSOR_BLOCK,\n                    },\n                    <SeparatorDefinition>{\n                        kind: \"sep\",\n                    },\n                    <BlockDefinition>{\n                        kind: \"block\",\n                        type: RECORD_WINDOW_BLOCK,\n                    },\n                    <BlockDefinition>{\n                        kind: \"block\",\n                        type: MOVING_AVERAGE_BLOCK,\n                    },\n                ],\n            },\n        ]\n    }\n}\nconst sensorsDsl = new SensorsBlockDomainSpecificLanguage()\nexport default sensorsDsl\n","import { useMemo } from \"react\"\n\nexport function useLocationSearchParamString(key: string): string {\n    return useMemo(() => {\n        if (typeof window !== \"undefined\") {\n            const url = new URL(window.location.href)\n            return url.searchParams.get(key)\n        }\n        return undefined\n    }, [key])\n}\n\nexport function useLocationSearchParamBoolean(\n    key: string,\n    defaultValue: boolean\n): boolean {\n    return useMemo(() => {\n        if (typeof window !== \"undefined\") {\n            const url = new URL(window.location.href)\n            const v = url.searchParams.get(key)\n            if (v) {\n                if (v === \"1\" || v === \"true\" || v === \"yes\") return true\n                else if (v === \"0\" || v === \"false\" || v === \"no\") return false\n                else return defaultValue\n            }\n            // empty value means true\n            if (url.searchParams.has(key)) return true\n            return defaultValue\n        }\n        return undefined\n    }, [key, defaultValue])\n}\n","import { Grid, NoSsr } from \"@mui/material\"\nimport React, { useContext, useMemo } from \"react\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { BlockProvider } from \"./BlockContext\"\nimport BlockDiagnostics from \"./BlockDiagnostics\"\nimport BlockEditor from \"./BlockEditor\"\nimport FileTabs from \"../fs/FileTabs\"\nimport { WorkspaceFile } from \"./dsl/workspacejson\"\nimport dataDsl from \"./dsl/datadsl\"\nimport chartDsl from \"./dsl/chartdsl\"\nimport fieldsDsl from \"./dsl/fieldsdsl\"\nimport { WORKSPACE_FILENAME } from \"./toolbox\"\nimport FileSystemContext from \"../FileSystemContext\"\nimport { createIFrameDSL } from \"./dsl/iframedsl\"\nimport { useLocationSearchParamBoolean } from \"../hooks/useLocationSearchParam\"\nimport dataVarDsl from \"./dsl/datavardsl\"\nimport sensorsDSL from \"./dsl/sensorsdsl\"\nimport dataSetDsl from \"./dsl/datasetdsl\"\n\nconst SENSORS_EDITOR_ID = \"sensors\"\nconst SENSORS_SOURCE_STORAGE_KEY = \"tools:sensoreditor\"\nconst SENSORS_NEW_FILE_CONTENT = JSON.stringify({\n    editor: SENSORS_EDITOR_ID,\n    xml: \"\",\n} as WorkspaceFile)\n\nfunction SensorsEditorWithContext() {\n    const { fileSystem } = useContext(FileSystemContext)\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            {!!fileSystem && (\n                <Grid item xs={12}>\n                    <FileTabs\n                        newFileName={WORKSPACE_FILENAME}\n                        newFileContent={SENSORS_NEW_FILE_CONTENT}\n                        hideFiles={true}\n                    />\n                </Grid>\n            )}\n            <Grid item xs={12}>\n                <BlockEditor editorId={SENSORS_EDITOR_ID} />\n            </Grid>\n            {Flags.diagnostics && <BlockDiagnostics />}\n        </Grid>\n    )\n}\n\nexport default function DSBlockEditor() {\n    const sensors = useLocationSearchParamBoolean(\"sensors\", true)\n    const dataSet = useLocationSearchParamBoolean(\"dataset\", true)\n    const dataVar = useLocationSearchParamBoolean(\"datavar\", true)\n    const chart = useLocationSearchParamBoolean(\"chart\", true)\n\n    const dsls = useMemo(() => {\n        return [\n            dataSet && dataSetDsl,\n            sensors && sensorsDSL,\n            dataDsl,\n            dataVar && dataVarDsl,\n            chart && chartDsl,\n            fieldsDsl,\n            createIFrameDSL(\"host\", \"*\"),\n        ].filter(dsl => !!dsl)\n    }, [])\n\n    return (\n        <NoSsr>\n            <BlockProvider storageKey={SENSORS_SOURCE_STORAGE_KEY} dsls={dsls}>\n                <SensorsEditorWithContext />\n            </BlockProvider>\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport SensorsBlockEditor from \"../../components/blockly/SensorsBlockEditor\"\n\nexport default function Page() {\n    return <SensorsBlockEditor />\n}\n"],"names":["alert","BuiltinDataSetField","DATA_SCIENCE_STATEMENT_TYPE","identityTransformData","resolveWorkspaceServices","FileSaveField","saveCSV","FileOpenField","palette","importCSVFilesIntoWorkspace","DATA_DATASET_BUILTIN_BLOCK","DATA_ADD_DATASET_CALLBACK","DATA_LOAD_FILE_BLOCK","DATA_SAVE_FILE_BLOCK","datasetColour","dataSetDsl","id","createBlocks","kind","type","message0","tooltip","args0","KEY","name","inputsInline","nextStatement","colour","template","dataPreviewField","transformData","previousStatement","block","data","file","getField","fileHandle","createCategory","contents","text","callbackKey","callback","workspace","services","directory","workingDirectory","handle","then","sync","Events","Variables","DATA_TABLE_TYPE","resolveBlockServices","DATA_ADD_VARIABLE_CALLBACK","DATA_DATAVARIABLE_READ_BLOCK","DATA_DATAVARIABLE_WRITE_BLOCK","dataVariablesColour","dataVarDsl","variable","variableTypes","defaultType","b","Promise","resolve","getFieldValue","undefined","readBlocks","getBlocksByType","readServices","filter","isEnabled","map","jacdacServices","forEach","createVariableButtonHandler","createWorkspaceChangeListener","event","blockId","isBlockChange","BLOCK_CHANGE","BLOCK_MOVE","FINISHED_LOADING","getEventWorkspace_","getBlockById","setvars","marked","length","shift","getVariable","setEnabled","unplug","resolveUsedDataVariables","field","reads","write","sensorsColour","SENSOR_BLOCK","TwinField","ServicesBaseDSL","postTransformData","DataColumnChooserField","tidyResolveFieldColumn","RECORD_WINDOW_BLOCK","MOVING_AVERAGE_BLOCK","SensorsBlockDomainSpecificLanguage","options","helpUrl","value","previousData","horizon","spellcheck","dataType","min","precision","newcolumn","column","Math","max","sensorsDsl","useMemo","useLocationSearchParamString","key","window","url","URL","location","href","searchParams","get","useLocationSearchParamBoolean","defaultValue","v","has","Grid","NoSsr","React","useContext","Flags","BlockProvider","BlockDiagnostics","BlockEditor","FileTabs","dataDsl","chartDsl","fieldsDsl","WORKSPACE_FILENAME","FileSystemContext","createIFrameDSL","sensorsDSL","SENSORS_EDITOR_ID","SENSORS_SOURCE_STORAGE_KEY","SENSORS_NEW_FILE_CONTENT","JSON","stringify","editor","xml","SensorsEditorWithContext","fileSystem","diagnostics","DSBlockEditor","sensors","dataSet","dataVar","chart","dsls","dsl","SensorsBlockEditor","Page"],"sourceRoot":""}