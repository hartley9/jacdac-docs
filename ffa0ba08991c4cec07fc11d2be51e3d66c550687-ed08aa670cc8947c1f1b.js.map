{"version":3,"file":"ffa0ba08991c4cec07fc11d2be51e3d66c550687-ed08aa670cc8947c1f1b.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/blockly/dsl/datadsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/iframedsl.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { Block } from \"blockly\"\nimport DataColumnChooserField from \"../fields/DataColumnChooserField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n    TextInputDefinition,\n    DataColumnInputDefinition,\n    DummyInputDefinition,\n    calcOptions,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport postTransformData from \"./workers/data.proxy\"\nimport type {\n    DataSelectRequest,\n    DataDropRequest,\n    DataArrangeRequest,\n    DataFilterColumnsRequest,\n    DataFilterStringRequest,\n    DataSummarizeRequest,\n    DataSummarizeByGroupRequest,\n    DataMutateColumnsRequest,\n    DataMutateNumberRequest,\n    DataCountRequest,\n    DataBinRequest,\n    DataCorrelationRequest,\n    DataLinearRegressionRequest,\n} from \"../../../workers/data/dist/node_modules/data.worker\"\nimport palette from \"./palette\"\nimport {\n    tidyResolveFieldColumn,\n    tidyResolveFieldColumns,\n    tidySlice,\n} from \"../fields/tidy\"\nimport DataTableField from \"../fields/DataTableField\"\nimport DataPreviewField from \"../fields/DataPreviewField\"\nimport ScatterPlotField from \"../fields/chart/ScatterPlotField\"\n\nconst DATA_ARRANGE_BLOCK = \"data_arrange\"\nconst DATA_SELECT_BLOCK = \"data_select\"\nconst DATA_DROP_BLOCK = \"data_drop\"\nconst DATA_FILTER_COLUMNS_BLOCK = \"data_filter_columns\"\nconst DATA_FILTER_STRING_BLOCK = \"data_filter_string\"\nconst DATA_MUTATE_COLUMNS_BLOCK = \"data_mutate_columns\"\nconst DATA_MUTATE_NUMBER_BLOCK = \"data_mutate_number\"\nconst DATA_SLICE_BLOCK = \"data_slice\"\nconst DATA_SUMMARIZE_BLOCK = \"data_summarize\"\nconst DATA_SUMMARIZE_BY_GROUP_BLOCK = \"data_summarize_by_group\"\nconst DATA_COUNT_BLOCK = \"data_count\"\nconst DATA_BIN_BLOCK = \"data_bin\"\nconst DATA_CORRELATION_BLOCK = \"data_correlation\"\nconst DATA_LINEAR_REGRESSION_BLOCK = \"data_linear_regression\"\nconst DATA_COMMENT_BLOCK = \"data_comment_block\"\n\nconst [, operatorsColour, computeColour, statisticsColour] = palette()\nconst dataDsl: BlockDomainSpecificLanguage = {\n    id: \"dataScience\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: DATA_ARRANGE_BLOCK,\n            message0: \"sort %1 %2\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"order\",\n                    options: [\n                        [\"ascending\", \"ascending\"],\n                        [\"descending\", \"descending\"],\n                    ],\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const order = b.getFieldValue(\"order\")\n                const descending = order === \"descending\"\n                if (!column) return Promise.resolve(data)\n                return postTransformData(<DataArrangeRequest>{\n                    type: \"arrange\",\n                    column,\n                    descending,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_DROP_BLOCK,\n            message0: \"drop %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column3\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2, 3]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                if (!columns?.length) return Promise.resolve(data)\n                return postTransformData(<DataDropRequest>{\n                    type: \"drop\",\n                    columns,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SELECT_BLOCK,\n            message0: \"select %1 %2 %3 %4\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column3\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column4\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2, 3, 4]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                if (!columns?.length) return Promise.resolve(data)\n                return postTransformData(<DataSelectRequest>{\n                    type: \"select\",\n                    columns,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_FILTER_COLUMNS_BLOCK,\n            message0: \"filter %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                const logic = b.getFieldValue(\"logic\")\n                if (columns.length !== 2) return Promise.resolve(data)\n                return postTransformData(<DataFilterColumnsRequest>{\n                    type: \"filter_columns\",\n                    columns,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_FILTER_STRING_BLOCK,\n            message0: \"filter %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"rhs\",\n                    spellcheck: false,\n                    text: \"0\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const logic = b.getFieldValue(\"logic\")\n                const rhs = b.getFieldValue(\"rhs\")\n                if (!column) return Promise.resolve(data)\n                return postTransformData(<DataFilterStringRequest>{\n                    type: \"filter_string\",\n                    column,\n                    logic,\n                    rhs,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_MUTATE_COLUMNS_BLOCK,\n            message0: \"compute column %1 as %2 %3 %4\",\n            colour: computeColour,\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"newcolumn\",\n                    spellcheck: false,\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"lhs\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\"+\", \"plus\"],\n                        [\"-\", \"minus\"],\n                        [\"*\", \"mult\"],\n                        [\"/\", \"div\"],\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"rhs\",\n                    dataType: \"number\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const newcolumn = b.getFieldValue(\"newcolumn\")\n                const lhs = tidyResolveFieldColumn(data, b, \"lhs\", {\n                    type: \"number\",\n                })\n                const rhs = tidyResolveFieldColumn(data, b, \"rhs\", {\n                    type: \"number\",\n                })\n                const logic = b.getFieldValue(\"logic\")\n                if (!newcolumn || !lhs || !rhs) return Promise.resolve(data)\n                return postTransformData(<DataMutateColumnsRequest>{\n                    type: \"mutate_columns\",\n                    newcolumn,\n                    lhs,\n                    rhs,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_MUTATE_NUMBER_BLOCK,\n            message0: \"compute column %1 as %2 %3 %4\",\n            colour: computeColour,\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"newcolumn\",\n                    spellcheck: false,\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"lhs\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\"+\", \"plus\"],\n                        [\"-\", \"minus\"],\n                        [\"*\", \"mult\"],\n                        [\"/\", \"div\"],\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"rhs\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: object[]) => {\n                const newcolumn = b.getFieldValue(\"newcolumn\")\n                const lhs = tidyResolveFieldColumn(data, b, \"lhs\", {\n                    type: \"number\",\n                })\n                const rhs = b.getFieldValue(\"rhs\")\n                const logic = b.getFieldValue(\"logic\")\n                if (!newcolumn || !lhs) return Promise.resolve(data)\n                return postTransformData(<DataMutateNumberRequest>{\n                    type: \"mutate_number\",\n                    newcolumn,\n                    lhs,\n                    rhs,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SUMMARIZE_BLOCK,\n            message0: \"summarize %1 calculate %2\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"calc\",\n                    options: calcOptions,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const columns = tidyResolveFieldColumns(\n                    data,\n                    b,\n                    \"column\",\n                    \"number\"\n                )\n                const calc = b.getFieldValue(\"calc\")\n                return postTransformData(<DataSummarizeRequest>{\n                    type: \"summarize\",\n                    columns,\n                    calc,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SUMMARIZE_BY_GROUP_BLOCK,\n            message0: \"group %1 by %2 calculate %3\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"by\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"calc\",\n                    options: calcOptions,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const by = tidyResolveFieldColumn(data, b, \"by\")\n                const calc = b.getFieldValue(\"calc\")\n                if (!by) return Promise.resolve([])\n                return postTransformData(<DataSummarizeByGroupRequest>{\n                    type: \"summarize_by_group\",\n                    column,\n                    by,\n                    calc,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SLICE_BLOCK,\n            message0: \"take %1 rows from %2\",\n            colour: operatorsColour,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"count\",\n                    min: 1,\n                    precision: 1,\n                    value: 100,\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"operator\",\n                    options: [\n                        [\"head\", \"head\"],\n                        [\"tail\", \"tail\"],\n                        [\"sample\", \"sample\"],\n                    ],\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const count = b.getFieldValue(\"count\")\n                const operator = b.getFieldValue(\"operator\")\n                return tidySlice(data, {\n                    sliceHead: operator === \"head\" ? count : undefined,\n                    sliceTail: operator === \"tail\" ? count : undefined,\n                    sliceSample: operator === \"sample\" ? count : undefined,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_COUNT_BLOCK,\n            message0: \"count distinct %1\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                if (!column) return Promise.resolve([])\n                return postTransformData(<DataCountRequest>{\n                    type: \"count\",\n                    column,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_BIN_BLOCK,\n            message0: \"bin by %1\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                    dataType: \"number\",\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: computeColour,\n            template: \"meta\",\n            dataPreviewField: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\", {\n                    type: \"number\",\n                })\n                if (!column) return Promise.resolve([])\n                return postTransformData(<DataBinRequest>{\n                    type: \"bin\",\n                    column,\n                    data,\n                })\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_CORRELATION_BLOCK,\n            message0: \"correlation of %1 %2 %3 %4 %5\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"x\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"y\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                    compare: true,\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: DataTableField.KEY,\n                    name: \"table\",\n                    transformed: true,\n                    small: true,\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: statisticsColour,\n            template: \"meta\",\n            dataPreviewField: false,\n            passthroughData: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column1 = tidyResolveFieldColumn(data, b, \"x\", {\n                    type: \"number\",\n                })\n                const column2 = tidyResolveFieldColumn(data, b, \"y\", {\n                    type: \"number\",\n                })\n                if (!column1 || !column2) return Promise.resolve([])\n                return postTransformData(<DataCorrelationRequest>{\n                    type: \"correlation\",\n                    column1,\n                    column2,\n                    data,\n                })\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_LINEAR_REGRESSION_BLOCK,\n            message0: \"linear regression of x %1 y %2 %3 %4 %5\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"x\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"y\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                    compare: true,\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: ScatterPlotField.KEY,\n                    name: \"plot\",\n                    linearRegression: true,\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: statisticsColour,\n            template: \"meta\",\n            dataPreviewField: false,\n            passthroughData: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column1 = tidyResolveFieldColumn(data, b, \"x\", {\n                    type: \"number\",\n                })\n                const column2 = tidyResolveFieldColumn(data, b, \"y\", {\n                    type: \"number\",\n                })\n                if (!column1 || !column2) return Promise.resolve([])\n                return postTransformData(<DataLinearRegressionRequest>{\n                    type: \"linear_regression\",\n                    column1,\n                    column2,\n                    data,\n                })\n            },\n        },\n        {\n            kind: \"block\",\n            type: DATA_COMMENT_BLOCK,\n            message0: \"comment %1 %2 %3\",\n            args0: [\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: \"field_multilinetext\",\n                    name: \"text\",\n                    text: \"And then...\",\n                    spellcheck: true,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: operatorsColour,\n            template: \"meta\",\n            inputsInline: false,\n            dataPreviewField: false,\n            transformData: identityTransformData,\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Organize\",\n            colour: operatorsColour,\n            contents: [\n                /*<BlockReference>{\n                    kind: \"block\",\n                    type: DATA_COMMENT_BLOCK,\n                },*/\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_ARRANGE_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SELECT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DROP_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_FILTER_COLUMNS_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_FILTER_STRING_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SLICE_BLOCK,\n                },\n            ],\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Compute\",\n            colour: computeColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_MUTATE_COLUMNS_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_MUTATE_NUMBER_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SUMMARIZE_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SUMMARIZE_BY_GROUP_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_COUNT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_BIN_BLOCK,\n                },\n            ],\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Statistics\",\n            colour: statisticsColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_CORRELATION_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_LINEAR_REGRESSION_BLOCK,\n                },\n            ],\n        },\n    ],\n}\nexport default dataDsl\n","import { Block, Workspace } from \"blockly\"\nimport { CHANGE } from \"../../../../jacdac-ts/src/jdom/constants\"\nimport { inIFrame } from \"../../../../jacdac-ts/src/jdom/iframeclient\"\nimport { randomDeviceId } from \"../../../../jacdac-ts/src/jdom/random\"\nimport type { DataSliceOptions } from \"../../../workers/data/dist/node_modules/data.worker\"\nimport { workspaceToJSON } from \"../jsongenerator\"\nimport {\n    BlockDataSet,\n    BlockDataSetTransform,\n    BlockDefinition,\n    ContentDefinition,\n    resolveBlockDefinition,\n} from \"../toolbox\"\nimport { BlockWithServices, setBlockDataWarning } from \"../WorkspaceContext\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport { WorkspaceFile, WorkspaceJSON } from \"./workspacejson\"\n\nexport interface DslMessage {\n    type?: \"dsl\"\n    id?: string\n    dslid: string\n    action:\n        | \"mount\"\n        | \"unmount\"\n        | \"blocks\"\n        | \"transform\"\n        | \"change\"\n        | \"workspace\"\n        | \"load\"\n        | \"save\"\n        | \"options\"\n        | \"chartexport\"\n}\n\nexport interface DslBlocksResponse extends DslMessage {\n    action: \"blocks\"\n    blocks: BlockDefinition[]\n    category: ContentDefinition[]\n}\n\nexport interface DslTransformMessage extends DslMessage {\n    action: \"transform\"\n    blockId?: string\n    workspace?: WorkspaceJSON\n    dataset?: BlockDataSet\n}\n\nexport interface DslChartExportMessage extends DslMessage {\n    action: \"transform\"\n    blockId?: string\n    spec: unknown\n    slice: DataSliceOptions\n    dataset: BlockDataSet\n    vegaDataset: BlockDataSet\n}\n\nexport interface DslTransformResponse extends DslTransformMessage {\n    warning?: string\n}\n\nexport type DslWorkspaceFileMessage = {\n    action: \"load\" | \"save\"\n} & DslMessage &\n    WorkspaceFile\n\nexport interface DslOptionsMessage extends DslMessage {\n    action: \"options\"\n    options: Record<string, [string, string][]>\n}\n\nclass IFrameDomainSpecificLanguage implements BlockDomainSpecificLanguage {\n    private dslid = randomDeviceId()\n    private blocks: BlockDefinition[] = []\n    private category: ContentDefinition[] = []\n    private pendings: Record<string, (data: DslMessage) => void> = {}\n\n    private _workspace: Workspace\n\n    constructor(readonly id: string, readonly targetOrigin: string) {\n        this.handleMessage = this.handleMessage.bind(this)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    private post(action: string, extras?: object) {\n        const payload = {\n            id: Math.random() + \"\",\n            type: \"dsl\",\n            dslid: this.dslid,\n            action,\n            ...(extras || {}),\n        } as DslMessage\n        window.parent.postMessage(payload, this.targetOrigin)\n        return payload\n    }\n\n    mount(workspace: Workspace) {\n        this._workspace = workspace\n        window.addEventListener(\"message\", this.handleMessage, false)\n        this.post(\"mount\")\n        return () => {\n            this.post(\"unmount\")\n            this._workspace = undefined\n            window.removeEventListener(\"message\", this.handleMessage)\n        }\n    }\n\n    private handleMessage(msg: MessageEvent<DslMessage>) {\n        const { data } = msg\n        if (data.type === \"dsl\" && data.dslid === this.dslid) {\n            const { id, action } = data\n            // check for pending request\n            const pending = id !== undefined && this.pendings[id]\n            if (pending) {\n                delete this.pendings[id]\n                pending(data)\n            }\n            // trigger recomputation\n            switch (action) {\n                case \"change\": {\n                    //console.log(`iframedsl: change requested`)\n                    this._workspace\n                        .getTopBlocks(false)\n                        .filter(\n                            b => resolveBlockDefinition(b.type)?.dsl === this.id\n                        )\n                        .forEach((b: Block) => {\n                            //console.log(`change ${b.id}`)\n                            const { jacdacServices } = b as BlockWithServices\n                            jacdacServices.emit(CHANGE)\n                        })\n                    break\n                }\n                case \"workspace\": {\n                    break\n                }\n            }\n        }\n    }\n\n    private createTransformData(): BlockDataSetTransform {\n        return (blockWithServices, dataset) =>\n            new Promise<BlockDataSet>(resolve => {\n                // TODO fix event ordering\n                const workspace = workspaceToJSON(\n                    blockWithServices.workspace,\n                    [], // TODO pass dsls\n                    [blockWithServices]\n                )\n                const { id } = this.post(\"transform\", {\n                    blockId: blockWithServices.id,\n                    workspace,\n                    dataset,\n                })\n                setTimeout(() => {\n                    if (this.pendings[id]) {\n                        delete this.pendings[id]\n                        console.warn(`iframedsl: transform timeouted`)\n                        resolve(undefined)\n                    }\n                }, 10000)\n                this.pendings[id] = data => {\n                    const { dataset, warning } = data as DslTransformResponse\n                    if (warning) setBlockDataWarning(blockWithServices, warning)\n                    resolve(dataset)\n                }\n            })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    createBlocks(options: CreateBlocksOptions): Promise<BlockDefinition[]> {\n        return new Promise<BlockDefinition[]>(resolve => {\n            const { id } = this.post(\"blocks\")\n            setTimeout(() => {\n                if (this.pendings[id]) {\n                    delete this.pendings[id]\n                    console.warn(\n                        `iframedsl ${this.id}: no blocks returned, giving up`\n                    )\n                    resolve(this.blocks)\n                }\n            }, 3000)\n            this.pendings[id] = data => {\n                const bdata = data as DslBlocksResponse\n                this.blocks = bdata.blocks\n                this.category = bdata.category\n                console.debug(\n                    `iframedsl ${this.id}: loaded ${this.blocks?.length} blocks, ${this.category?.length} categories`\n                )\n                const transformData = this.createTransformData()\n                this.blocks.forEach(\n                    block => (block.transformData = transformData)\n                )\n                resolve(this.blocks)\n            }\n        })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    createCategory(options: CreateCategoryOptions): ContentDefinition[] {\n        return this.category\n    }\n\n    onWorkspaceJSONChange(json: WorkspaceJSON) {\n        this.post(\"workspace\", {\n            workspace: json,\n        })\n    }\n\n    onSave(file: WorkspaceFile) {\n        this.post(\"save\", file)\n    }\n}\n\n/**\n * Creates an iframe DSL if applicable\n * @param targetOrigin\n * @returns\n */\nexport function createIFrameDSL(\n    id: string,\n    targetOrigin = \"*\"\n): BlockDomainSpecificLanguage {\n    return inIFrame() && new IFrameDomainSpecificLanguage(id, targetOrigin)\n}\n"],"names":["DataColumnChooserField","DATA_SCIENCE_STATEMENT_TYPE","identityTransformData","calcOptions","postTransformData","palette","tidyResolveFieldColumn","tidyResolveFieldColumns","tidySlice","DataTableField","DataPreviewField","ScatterPlotField","DATA_ARRANGE_BLOCK","DATA_SELECT_BLOCK","DATA_DROP_BLOCK","DATA_FILTER_COLUMNS_BLOCK","DATA_FILTER_STRING_BLOCK","DATA_MUTATE_COLUMNS_BLOCK","DATA_MUTATE_NUMBER_BLOCK","DATA_SLICE_BLOCK","DATA_SUMMARIZE_BLOCK","DATA_SUMMARIZE_BY_GROUP_BLOCK","DATA_COUNT_BLOCK","DATA_BIN_BLOCK","DATA_CORRELATION_BLOCK","DATA_LINEAR_REGRESSION_BLOCK","DATA_COMMENT_BLOCK","operatorsColour","computeColour","statisticsColour","dataDsl","id","createBlocks","kind","type","message0","colour","args0","KEY","name","options","previousStatement","nextStatement","dataPreviewField","transformData","b","data","column","order","getFieldValue","descending","Promise","resolve","template","columns","map","filter","c","length","logic","spellcheck","text","rhs","dataType","newcolumn","lhs","calc","by","min","precision","value","count","operator","sliceHead","undefined","sliceTail","sliceSample","inputsInline","compare","transformed","small","passthroughData","column1","column2","linearRegression","createCategory","contents","CHANGE","inIFrame","randomDeviceId","workspaceToJSON","resolveBlockDefinition","setBlockDataWarning","IFrameDomainSpecificLanguage","targetOrigin","dslid","blocks","category","pendings","handleMessage","bind","post","action","extras","payload","Math","random","window","parent","postMessage","mount","workspace","_workspace","addEventListener","removeEventListener","msg","pending","getTopBlocks","dsl","forEach","jacdacServices","emit","createTransformData","blockWithServices","dataset","blockId","setTimeout","console","warn","warning","bdata","debug","block","onWorkspaceJSONChange","json","onSave","file","createIFrameDSL"],"sourceRoot":""}