{"version":3,"file":"ffa0ba08991c4cec07fc11d2be51e3d66c550687-ccd0f4bacd9b91670f27.js","mappings":"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","sources":["webpack://jacdac-docs/./jacdac-ts/src/vm/ir.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/symutils.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/compile.ts","webpack://jacdac-docs/./src/components/blockly/dsl/datadsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/iframedsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/servicesbase.ts","webpack://jacdac-docs/./src/components/vm/VMgenerator.ts"],"sourcesContent":["import jsep from \"jsep\"\n\nexport interface VMError {\n    sourceId?: string\n    code?: number\n    message: string\n}\n\nexport interface VMBase {\n    type: \"ite\" | \"cmd\"\n    sourceId?: string\n}\n\nexport interface VMIfThenElse extends VMBase {\n    type: \"ite\"\n    expr: jsep.Expression\n    then?: VMBase[]\n    else?: VMBase[]\n}\n\nexport interface VMCommand extends VMBase {\n    type: \"cmd\"\n    command: jsep.CallExpression\n}\n\nexport interface VMHandler {\n    commands: VMBase[]\n    roles?: string[]\n    errors?: VMError[]\n    // this handler support the editing experience but\n    // should not be compiled down or debugged\n    meta?: boolean\n}\n\nexport interface VMRole {\n    role: string\n    serviceClass: number\n}\n\nexport interface VMProgram {\n    roles: VMRole[]\n    serverRoles: VMRole[]\n    handlers: VMHandler[]\n}\n\nexport type VMFunctionNames =\n    | \"start\"\n    | \"halt\"\n    | \"nop\"\n    | \"label\"\n    | \"jump\"\n    | \"branchOnCondition\"\n    | \"wait\"\n    | \"awaitRegister\"\n    | \"awaitChange\"\n    | \"awaitEvent\"\n    | \"awaitCondition\"\n    | \"writeRegister\"\n    | \"writeLocal\"\n    | \"watch\"\n    | \"log\"\n    | \"roleBound\"\n    | \"roleBoundExpression\"\n    | \"onRoleConnected\"\n    | \"onRoleDisconnected\"\n    | \"raiseEvent\"\n\ntype Context = \"command\" | \"expression\" | \"either\"\n\nexport interface VMFunctionDescription {\n    id: string\n    args: (string | [string, any])[]\n    prompt: string\n    context: Context\n}\n\nexport const VMFunctions: VMFunctionDescription[] = [\n    {\n        id: \"start\",\n        args: [],\n        prompt: `start block`,\n        context: \"command\",\n    },\n    {\n        id: \"halt\",\n        args: [],\n        prompt: `terminates the current handler`,\n        context: \"command\",\n    },\n    {\n        id: \"nop\",\n        args: [],\n        prompt: `no operation`,\n        context: \"command\",\n    },\n    {\n        id: \"label\",\n        args: [\"Identifier\"],\n        prompt: `label target {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"jump\",\n        args: [\"Identifier\"],\n        prompt: `jump to label {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"branchOnCondition\",\n        args: [\"boolean\", \"Identifier\"],\n        prompt: `if {1} then jump to label {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"wait\",\n        args: [\"number\"],\n        prompt: `wait for {1} milliseconds`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitRegister\",\n        args: [\"register\"],\n        prompt: `wait on register {1} to change value`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitChange\",\n        args: [\"register\", \"number\"],\n        prompt: `wait for register {1} to change by {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitCondition\",\n        args: [\"boolean\"],\n        prompt: `wait for condition {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeRegister\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeLocal\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"watch\",\n        args: [\"number\"],\n        prompt: `watch expression {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"log\",\n        args: [\"number\"],\n        prompt: `not used`,\n        context: \"command\",\n    },\n    {\n        id: \"roleBound\",\n        args: [\"Identifier\", \"Identifier\"],\n        prompt: `role {1} {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"roleBoundExpression\",\n        args: [\"Identifier\"],\n        prompt: `is role {1} bound?`,\n        context: \"expression\",\n    },\n    {\n        id: \"onRoleConnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is connected`,\n        context: \"command\",\n    },\n    {\n        id: \"onRoleDisconnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is disconnected`,\n        context: \"command\",\n    },\n]\n","import jsep from \"jsep\"\nimport { VMFunctionDescription } from \"./ir\"\nimport { parseIntFloat } from \"../../jacdac-spec/spectool/jdutils\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function exprVisitor(\n    parent: any,\n    current: any,\n    structVisit: (par: jsep.Expression, curr: jsep.Expression) => void\n) {\n    if (Array.isArray(current)) {\n        ;(current as any[]).forEach(c => exprVisitor(current, c, structVisit))\n    } else if (typeof current === \"object\") {\n        if (parent && current) structVisit(parent, current)\n        Object.keys(current).forEach((key: string) => {\n            exprVisitor(current, current[key], structVisit)\n        })\n    }\n}\n\ninterface Resolve {\n    role: string\n    client: boolean\n    spec: jdspec.ServiceSpec\n    rest: jsep.Expression\n}\n\nexport class SpecSymbolResolver {\n    registers: string[]\n    events: string[]\n    roles: string[]\n\n    constructor(\n        private readonly spec: jdspec.ServiceSpec,\n        private readonly role2spec: (role: string) => {\n            spec: jdspec.ServiceSpec\n            client: boolean\n        },\n        private readonly error: (m: string) => void\n    ) {\n        this.reset()\n    }\n\n    reset() {\n        this.registers = []\n        this.events = []\n        this.roles = []\n    }\n\n    public check(e: jsep.Expression, type: string) {\n        if (!e) {\n            this.error(`expression is undefined`)\n            return false\n        } else if (e.type !== type) {\n            this.error(`expected ${type}; got ${e.type}`)\n            return false\n        }\n        return true\n    }\n\n    public specResolve(e: jsep.Expression): Resolve {\n        let ret: Resolve = undefined\n        if (this.spec) {\n            ret = {\n                role: this.spec.shortName,\n                spec: this.spec,\n                client: true,\n                rest: e,\n            }\n        } else if (e.type === \"Identifier\") {\n            return undefined\n        } else if (\n            this.check(e, \"MemberExpression\") &&\n            this.check((e as jsep.MemberExpression).object, \"Identifier\") &&\n            this.role2spec\n        ) {\n            const obj = (e as jsep.MemberExpression).object as jsep.Identifier\n            if (obj.name.startsWith(\"$\")) return undefined\n            if (!this.role2spec(obj.name)) {\n                this.error(`no specification found for ${obj.name}`)\n            }\n            const { spec, client } = this.role2spec(obj.name)\n            ret = {\n                role: obj.name,\n                spec,\n                client,\n                rest: (e as jsep.MemberExpression).property,\n            }\n        }\n        if (ret && this.roles.indexOf(ret.role) < 0) this.roles.push(ret.role)\n        return ret\n    }\n\n    public destructAccessPath(e: jsep.Expression, expectIdentifier = false) {\n        if (e.type === \"Identifier\") {\n            return [(e as jsep.Identifier).name, \"\"]\n        } else if (!expectIdentifier && e.type === \"MemberExpression\") {\n            const object = (e as jsep.MemberExpression)\n                .object as jsep.Identifier\n            const property = (e as jsep.MemberExpression)\n                .property as jsep.Identifier\n            if (\n                this.check(object, \"Identifier\") &&\n                this.check(property, \"Identifier\")\n            )\n                return [object.name, property.name]\n            return undefined\n        } else {\n            if (!expectIdentifier)\n                this.error(\n                    `expected Identifier or MemberExpression; got ${e.type}`\n                )\n            else this.error(`expected Identifier; got ${e.type}`)\n            return undefined\n        }\n    }\n\n    public lookupEvent(e: jsep.Expression) {\n        const resolve = this.specResolve(e)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [id, _] = this.destructAccessPath(rest, true)\n        const events = spec.packets?.filter(pkt => pkt.kind === \"event\")\n        const pkt = events.find(p => p.name === id)\n        if (!pkt) {\n            this.error(`no event ${id} in specification`)\n            return undefined\n        } else {\n            const ev = `${role}.${id}`\n            if (this.events.indexOf(ev) < 0) this.events.push(ev)\n            return pkt\n        }\n    }\n\n    public lookupRegister(e: jsep.Expression) {\n        const resolve = this.specResolve(e)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [root, fld] = this.destructAccessPath(rest)\n        this.lookupRegisterRaw(spec, root, fld)\n        const reg = `${role}.${root}`\n        if (this.registers.indexOf(reg) < 0) this.registers.push(reg)\n    }\n\n    private lookupRegisterRaw(\n        spec: jdspec.ServiceSpec,\n        root: string,\n        fld: string\n    ) {\n        const reg = getRegister(spec, root, fld)\n        if (\n            reg.pkt &&\n            ((!reg.fld && !isBoolOrNumericFormat(reg.pkt.packFormat)) ||\n                (reg.fld &&\n                    reg.fld.type &&\n                    !isBoolOrNumericFormat(reg.fld.type)))\n        )\n            this.error(\"only bool/numeric registers allowed\")\n        // if (!fld && regField.pkt.fields.length > 0)\n        //    error(`register ${root} has fields, but no field specified`)\n    }\n\n    public lookupReplace(\n        events: jdspec.PacketInfo[],\n        parent: jsep.Expression,\n        child: jsep.Identifier | jsep.MemberExpression\n    ) {\n        if (Array.isArray(parent)) {\n            const replace = this.lookup(events, parent, child)\n            parent.forEach(i => {\n                if (parent[i] === child) parent[i] = replace\n            })\n        } else {\n            // don't process identifiers that are callees of CallExpression\n            if (\n                parent?.type === \"CallExpression\" &&\n                child === (<jsep.CallExpression>parent).callee\n            )\n                return\n            const replace = this.lookup(events, parent, child)\n            if (replace) {\n                Object.keys(parent).forEach(k => {\n                    if ((parent as any)[k] === child)\n                        (parent as any)[k] = replace\n                })\n            }\n        }\n    }\n\n    private lookup(\n        events: jdspec.PacketInfo[],\n        parent: jsep.Expression,\n        child: jsep.Identifier | jsep.MemberExpression\n    ) {\n        const resolve = this.specResolve(child)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [root, fld] = this.destructAccessPath(rest)\n        try {\n            try {\n                const val = parseIntFloat(spec, fld ? `${root}.${fld}` : root)\n                const lit: jsep.Literal = {\n                    type: \"Literal\",\n                    value: val,\n                    raw: val.toString(),\n                }\n                return lit\n            } catch (e) {\n                this.lookupRegisterRaw(spec, root, fld)\n                const reg = `${role}.${root}`\n                if (this.registers.indexOf(reg) < 0) this.registers.push(reg)\n            }\n        } catch (e) {\n            let pkt: jdspec.PacketInfo = undefined\n            if (events.length) pkt = events.find(pkt => pkt.name === root)\n            else {\n                // we need a fully qualified name\n                pkt = spec.packets?.find(\n                    p => p.kind === \"event\" && p.name === root\n                )\n            }\n            if (!pkt) this.error(`event ${root} not bound correctly`)\n            else if (!fld && pkt.fields.length > 0)\n                this.error(`event ${root} has fields, but no field specified`)\n            else if (fld && !pkt.fields.find(f => f.name === fld))\n                this.error(\n                    `Field ${fld} of event ${root} not found in specification`\n                )\n        }\n    }\n}\n\nexport class VMChecker {\n    constructor(\n        private readonly resolver: SpecSymbolResolver,\n        private readonly supportedExpression: (\n            type: jsep.ExpressionType\n        ) => boolean,\n        private readonly error: (m: string) => void\n    ) {}\n\n    checkCommand(\n        root: jsep.CallExpression,\n        funs: VMFunctionDescription[]\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        if (!root || !root.type || root.type != \"CallExpression\") {\n            this.error(\n                `a command must be a call expression in JavaScript syntax`\n            )\n            return\n        }\n        // check for unsupported expression types\n        exprVisitor(null, root, (p, c) => {\n            if (!this.supportedExpression(c.type as jsep.ExpressionType))\n                this.error(\n                    `Expression of type ${c.type} not currently supported`\n                )\n        })\n        // first lookup in known functions\n        const callee = (root.callee as jsep.Identifier)?.name\n        const cmdIndex = funs.findIndex(r => callee === r.id)\n        let theCommand: jdspec.PacketInfo = undefined\n        if (cmdIndex < 0) {\n            if (root.callee.type === \"MemberExpression\") {\n                const { role, spec, rest, client } = this.resolver.specResolve(\n                    root.callee as jsep.MemberExpression\n                )\n                const [command, _] = this.resolver.destructAccessPath(rest)\n                if (!role) {\n                    this.error(\n                        `command does not conform to expected call expression`\n                    )\n                    return undefined\n                } else {\n                    // we have a spec, now look for command\n                    const commands = spec.packets?.filter(\n                        pkt =>\n                            (client && pkt.kind === \"command\") ||\n                            (!client && pkt.kind === \"event\")\n                    )\n                    theCommand = commands.find(c => c?.name === command)\n                    if (!theCommand) {\n                        this.error(\n                            `cannot find command named ${command} in spec ${spec.shortName}`\n                        )\n                    } else\n                        return this.processSpecCommandFunction(root, theCommand)\n                }\n            } else {\n                if (callee)\n                    this.error(`${callee} is not a registered function.`)\n                else\n                    this.error(\n                        `command does not conform to expected call expression`\n                    )\n                return undefined\n            }\n        } else return this.processTestFunction(funs, root, cmdIndex)\n        return undefined\n    }\n\n    private processSpecCommandFunction(\n        root: jsep.CallExpression,\n        command: jdspec.PacketInfo\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        if (root.arguments.length !== command?.fields?.length) {\n            this.error(\n                `Command ${command.name} expects ${command.fields.length} arguments: got ${root.arguments.length}`\n            )\n        } else {\n            const args = root.arguments\n            args.forEach(arg => {\n                this.visitReplace(root, arg, [])\n            })\n        }\n        return [undefined, root]\n    }\n\n    private processTestFunction(\n        funs: VMFunctionDescription[],\n        root: jsep.CallExpression,\n        cmdIndex: number\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        const callee = (root.callee as jsep.Identifier)?.name\n        // check arguments\n        const command = funs[cmdIndex]\n        const minArgs = argsRequiredOptional(command.args).length\n        const maxArgs = command.args.length\n        if (root.arguments.length < minArgs) {\n            this.error(\n                `${callee} expects at least ${minArgs} arguments; got ${root.arguments.length}`\n            )\n            return undefined\n        } else if (root.arguments.length > maxArgs) {\n            this.error(\n                `${callee} expects at most ${maxArgs} arguments; got ${root.arguments.length}`\n            )\n            return undefined\n        }\n        // deal with optional arguments\n        const newExpressions: jsep.Expression[] = []\n        for (let i = root.arguments.length; i < command.args.length; i++) {\n            const [name, def] = command.args[i] as [string, any]\n            const lit: jsep.Literal = {\n                type: \"Literal\",\n                value: def,\n                raw: def.toString(),\n            }\n            newExpressions.push(lit)\n        }\n        root.arguments = root.arguments.concat(newExpressions)\n        // type checking of arguments.\n        this.processTestArguments(command, root)\n        return [command, root]\n        function argsRequiredOptional(args: any[], optional = false) {\n            return args.filter(\n                a =>\n                    (!optional && typeof a === \"string\") ||\n                    (optional && typeof a === \"object\")\n            )\n        }\n    }\n\n    private processTestArguments(\n        command: VMFunctionDescription,\n        root: jsep.CallExpression\n    ) {\n        const args = root.arguments\n        const eventSymTable: jdspec.PacketInfo[] = []\n        args.forEach((arg, a) => {\n            let argType = command.args[a]\n\n            if (typeof argType === \"object\") argType = command.args[a][0]\n\n            if (\n                argType === \"register\" ||\n                argType === \"event\" ||\n                argType === \"Identifier\"\n            ) {\n                if (argType === \"Identifier\") {\n                    this.resolver.check(arg, \"Identifier\")\n                } else if (argType === \"event\" && a === 0) {\n                    const pkt = this.resolver.lookupEvent(arg)\n                    if (pkt && eventSymTable.indexOf(pkt) === -1)\n                        eventSymTable.push(pkt)\n                } else if (argType === \"register\") {\n                    try {\n                        this.resolver.lookupRegister(arg)\n                    } catch (e) {\n                        this.error(e.message)\n                    }\n                }\n            } else if (argType === \"events\") {\n                if (arg.type != \"ArrayExpression\")\n                    this.error(\n                        `events function expects a list of service events`\n                    )\n                else {\n                    ;(arg as jsep.ArrayExpression).elements.forEach(e =>\n                        this.resolver.lookupEvent(e)\n                    )\n                }\n            } else if (argType === \"number\" || argType === \"boolean\") {\n                this.visitReplace(root, arg, eventSymTable)\n            } else {\n                this.error(`unexpected argument type (${argType})`)\n            }\n        })\n    }\n\n    private visitReplace(\n        root: jsep.CallExpression,\n        arg: jsep.Expression,\n        eventSymTable: jdspec.PacketInfo[] = []\n    ) {\n        exprVisitor(root, arg, (p, c) => {\n            if (p.type !== \"MemberExpression\" && c.type === \"Identifier\") {\n                this.resolver.lookupReplace(\n                    eventSymTable,\n                    p,\n                    c as jsep.Identifier\n                )\n            } else if (c.type === \"ArrayExpression\") {\n                this.error(`array expression not allowed in this context`)\n            } else if (\n                p.type !== \"MemberExpression\" &&\n                c.type === \"MemberExpression\"\n            ) {\n                const member = c as jsep.MemberExpression\n                // A member expression must be of form <Identifier>.<memberExpression|Identifier>\n                if (member.object.type !== \"Identifier\" || member.computed) {\n                    this.error(\"property access must be of form id.property\")\n                } else {\n                    this.resolver.lookupReplace(\n                        eventSymTable,\n                        p,\n                        c as jsep.MemberExpression\n                    )\n                }\n            }\n        })\n    }\n}\n\n// private stuff\n\nfunction isBoolOrNumericFormat(fmt: string) {\n    return fmt === \"bool\" || /^[ui]\\d+/i.test(fmt)\n}\n\nfunction isRegister(pkt: jdspec.PacketInfo): boolean {\n    return (\n        pkt && (pkt.kind === \"const\" || pkt.kind === \"ro\" || pkt.kind === \"rw\")\n    )\n}\n\nfunction lookupRegister(\n    spec: jdspec.ServiceSpec,\n    id: string\n): jdspec.PacketInfo {\n    return spec.packets.find(pkt => isRegister(pkt) && pkt.name === id)\n}\n\nfunction lookupField(\n    pkt: jdspec.PacketInfo,\n    field: string\n): jdspec.PacketMember {\n    return pkt.fields.find(member => member.name === field)\n}\n\ninterface RegField {\n    pkt: jdspec.PacketInfo\n    fld: jdspec.PacketMember\n}\n\nfunction getRegister(\n    spec: jdspec.ServiceSpec,\n    root: string,\n    fld = \"\"\n): RegField {\n    const ret: RegField = { pkt: undefined, fld: undefined }\n    ret.pkt = lookupRegister(spec, root)\n    if (!ret.pkt) {\n        throw new Error(\n            `no register ${root} found in service ${spec.shortName}`\n        )\n    } else if (fld) {\n        ret.fld = lookupField(ret.pkt, fld)\n        if (!ret.fld)\n            throw new Error(\n                `no field ${fld} found in register ${root} of service ${spec.shortName}`\n            )\n    }\n    return ret\n}\n","import jsep from \"jsep\"\nimport {\n    serviceSpecificationFromClassIdentifier,\n    serviceSpecificationFromName,\n} from \"../jdom/spec\"\nimport {\n    VMBase,\n    VMCommand,\n    VMError,\n    VMHandler,\n    VMIfThenElse,\n    VMProgram,\n    VMFunctions,\n} from \"./ir\"\nimport { VMChecker, SpecSymbolResolver } from \"./symutils\"\nimport { assert } from \"../jdom/utils\"\n\nexport function toIdentifier(id: string) {\n    return {\n        type: \"Identifier\",\n        name: id,\n    } as jsep.Identifier\n}\n\nexport function toMemberExpression(\n    root: string,\n    field: string | jsep.Expression\n) {\n    return {\n        type: \"MemberExpression\",\n        object: toIdentifier(root),\n        property: typeof field === \"string\" ? toIdentifier(field) : field,\n        computed: false,\n    } as jsep.MemberExpression\n}\n\nfunction handlerVisitor(\n    handler: VMHandler,\n    visitITE: (ite: VMIfThenElse, time: number) => void,\n    visitCommand: (c: VMCommand) => void\n) {\n    handler.commands.forEach(visitBase)\n\n    function visitBase(base: VMBase) {\n        switch (base.type) {\n            case \"cmd\": {\n                if (visitCommand) visitCommand(base as VMCommand)\n                break\n            }\n            case \"ite\": {\n                const ite = base as VMIfThenElse\n                if (visitITE) visitITE(ite, 0)\n                ite?.else?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 1)\n                ite?.then?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 2)\n            }\n        }\n    }\n}\n\nexport function compileProgram({ roles, serverRoles, handlers }: VMProgram) {\n    const newProgram: VMProgram = { roles, serverRoles, handlers: [] }\n    // process start blocks\n    handlers.forEach(startBlock)\n    // remove if-then-else\n    newProgram.handlers = handlers.map(h => {\n        return { commands: removeIfThenElse(h), errors: h?.errors }\n    })\n    return newProgram\n}\n\nfunction checkCall(cmd: VMBase, id: string) {\n    if (cmd.type === \"cmd\") {\n        const callee = (cmd as VMCommand).command.callee\n        if (callee.type === \"Identifier\") {\n            const cid = (callee as jsep.Identifier).name\n            return id === cid\n        }\n    }\n    return undefined\n}\n\nfunction startBlock(handler: VMHandler) {\n    if (handler.commands.length && checkCall(handler.commands[0], \"start\")) {\n        handler.commands.shift()\n        handler.commands.push({\n            type: \"cmd\",\n            command: {\n                type: \"CallExpression\",\n                callee: toIdentifier(\"halt\"),\n                arguments: [],\n            },\n        } as VMCommand)\n    }\n}\n\nfunction removeIfThenElse(handler: VMHandler): VMBase[] {\n    const newSequence: VMCommand[] = []\n    const labels: { then: string; end: string }[] = []\n    let labelId = 1\n    handlerVisitor(\n        handler,\n        (ite, time) => {\n            switch (time) {\n                case 0: {\n                    // create the labels and branch instruction\n                    const then = `then_${labelId}`\n                    const end = `end_${labelId}`\n                    labels.push({ then, end })\n                    labelId++\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"branchOnCondition\"),\n                            arguments: [ite.expr, toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 1: {\n                    // insert the jump and then label\n                    const { then, end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"jump\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 2: {\n                    assert(labels.length > 0)\n                    const { end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    labels.pop()\n                }\n            }\n        },\n        cmd => {\n            newSequence.push(cmd)\n        }\n    )\n    return newSequence\n}\n\nexport interface RoleRegister {\n    role: string\n    register: string\n}\n\nexport interface RoleEvent {\n    role: string\n    event: string\n}\n\nexport const getServiceFromRole = (info: VMProgram) => (role: string) => {\n    // lookup in roles first\n    let roleFound = info.roles.find(pair => pair.role === role)\n    let client = true\n    if (!roleFound) {\n        roleFound = info.serverRoles.find(pair => pair.role === role)\n        client = false\n    }\n    if (roleFound) {\n        // must succeed\n        const spec = serviceSpecificationFromClassIdentifier(\n            roleFound.serviceClass\n        )\n        assert(!!spec, `service class ${roleFound.serviceClass} not resolved`)\n        return { spec, client }\n    } else {\n        const spec = serviceSpecificationFromName(role)\n        return { spec, client: true }\n    }\n}\n\nexport function checkProgram(prog: VMProgram): {\n    registers: RoleRegister[]\n    events: RoleEvent[]\n    errors: VMError[]\n} {\n    const allErrors: VMError[] = []\n    const goodHandlers: VMHandler[] = []\n    const errorFun = (e: string) => {\n        allErrors.push({ sourceId: undefined, message: e })\n    }\n    const symbolResolver = new SpecSymbolResolver(\n        undefined,\n        getServiceFromRole(prog),\n        errorFun\n    )\n    const checker = new VMChecker(symbolResolver, _ => true, errorFun)\n    prog.handlers.forEach(h => {\n        if (h?.errors.length) {\n            h?.errors.forEach(e => allErrors.push(e))\n            return\n        }\n        const errorCount = allErrors.length\n        symbolResolver.roles = []\n        handlerVisitor(h, undefined, c =>\n            checker.checkCommand(c.command, VMFunctions)\n        )\n        if (h?.errors.length === 0 && allErrors.length === errorCount) {\n            h.roles = symbolResolver.roles\n            goodHandlers.push(h)\n        } else {\n            h?.errors.forEach(e => allErrors.push(e))\n        }\n    })\n    prog.handlers = goodHandlers\n\n    return {\n        registers: symbolResolver.registers.map(s => {\n            const [root, fld] = s.split(\".\")\n            return { role: root, register: fld }\n        }),\n        events: symbolResolver.events.map(e => {\n            const [root, fld] = e.split(\".\")\n            return { role: root, event: fld }\n        }),\n        errors: allErrors,\n    }\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Block } from \"blockly\"\nimport DataColumnChooserField from \"../fields/DataColumnChooserField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n    TextInputDefinition,\n    DataColumnInputDefinition,\n    DummyInputDefinition,\n    calcOptions,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport postTransformData from \"./workers/data.proxy\"\nimport type {\n    DataSelectRequest,\n    DataDropRequest,\n    DataArrangeRequest,\n    DataFilterColumnsRequest,\n    DataFilterStringRequest,\n    DataSummarizeRequest,\n    DataSummarizeByGroupRequest,\n    DataMutateColumnsRequest,\n    DataMutateNumberRequest,\n    DataCountRequest,\n    DataBinRequest,\n    DataCorrelationRequest,\n    DataLinearRegressionRequest,\n} from \"../../../workers/data/dist/node_modules/data.worker\"\nimport palette from \"./palette\"\nimport {\n    tidyResolveFieldColumn,\n    tidyResolveFieldColumns,\n    tidySlice,\n} from \"../fields/tidy\"\nimport DataTableField from \"../fields/DataTableField\"\nimport DataPreviewField from \"../fields/DataPreviewField\"\nimport ScatterPlotField from \"../fields/chart/ScatterPlotField\"\n\nconst DATA_ARRANGE_BLOCK = \"data_arrange\"\nconst DATA_SELECT_BLOCK = \"data_select\"\nconst DATA_DROP_BLOCK = \"data_drop\"\nconst DATA_FILTER_COLUMNS_BLOCK = \"data_filter_columns\"\nconst DATA_FILTER_STRING_BLOCK = \"data_filter_string\"\nconst DATA_MUTATE_COLUMNS_BLOCK = \"data_mutate_columns\"\nconst DATA_MUTATE_NUMBER_BLOCK = \"data_mutate_number\"\nconst DATA_SLICE_BLOCK = \"data_slice\"\nconst DATA_SUMMARIZE_BLOCK = \"data_summarize\"\nconst DATA_SUMMARIZE_BY_GROUP_BLOCK = \"data_summarize_by_group\"\nconst DATA_COUNT_BLOCK = \"data_count\"\nconst DATA_BIN_BLOCK = \"data_bin\"\nconst DATA_CORRELATION_BLOCK = \"data_correlation\"\nconst DATA_LINEAR_REGRESSION_BLOCK = \"data_linear_regression\"\nconst DATA_COMMENT_BLOCK = \"data_comment_block\"\n\nconst [, operatorsColour, computeColour, statisticsColour] = palette()\nconst dataDsl: BlockDomainSpecificLanguage = {\n    id: \"dataScience\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: DATA_ARRANGE_BLOCK,\n            message0: \"sort %1 %2\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"order\",\n                    options: [\n                        [\"ascending\", \"ascending\"],\n                        [\"descending\", \"descending\"],\n                    ],\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const order = b.getFieldValue(\"order\")\n                const descending = order === \"descending\"\n                if (!column) return Promise.resolve(data)\n                return postTransformData(<DataArrangeRequest>{\n                    type: \"arrange\",\n                    column,\n                    descending,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_DROP_BLOCK,\n            message0: \"drop %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column3\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2, 3]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                if (!columns?.length) return Promise.resolve(data)\n                return postTransformData(<DataDropRequest>{\n                    type: \"drop\",\n                    columns,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SELECT_BLOCK,\n            message0: \"select %1 %2 %3 %4\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column3\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column4\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2, 3, 4]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                if (!columns?.length) return Promise.resolve(data)\n                return postTransformData(<DataSelectRequest>{\n                    type: \"select\",\n                    columns,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_FILTER_COLUMNS_BLOCK,\n            message0: \"filter %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                const logic = b.getFieldValue(\"logic\")\n                if (columns.length !== 2) return Promise.resolve(data)\n                return postTransformData(<DataFilterColumnsRequest>{\n                    type: \"filter_columns\",\n                    columns,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_FILTER_STRING_BLOCK,\n            message0: \"filter %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"rhs\",\n                    spellcheck: false,\n                    text: \"0\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const logic = b.getFieldValue(\"logic\")\n                const rhs = b.getFieldValue(\"rhs\")\n                if (!column) return Promise.resolve(data)\n                return postTransformData(<DataFilterStringRequest>{\n                    type: \"filter_string\",\n                    column,\n                    logic,\n                    rhs,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_MUTATE_COLUMNS_BLOCK,\n            message0: \"compute column %1 as %2 %3 %4\",\n            colour: computeColour,\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"newcolumn\",\n                    spellcheck: false,\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"lhs\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\"+\", \"plus\"],\n                        [\"-\", \"minus\"],\n                        [\"*\", \"mult\"],\n                        [\"/\", \"div\"],\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"rhs\",\n                    dataType: \"number\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const newcolumn = b.getFieldValue(\"newcolumn\")\n                const lhs = tidyResolveFieldColumn(data, b, \"lhs\", {\n                    type: \"number\",\n                })\n                const rhs = tidyResolveFieldColumn(data, b, \"rhs\", {\n                    type: \"number\",\n                })\n                const logic = b.getFieldValue(\"logic\")\n                if (!newcolumn || !lhs || !rhs) return Promise.resolve(data)\n                return postTransformData(<DataMutateColumnsRequest>{\n                    type: \"mutate_columns\",\n                    newcolumn,\n                    lhs,\n                    rhs,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_MUTATE_NUMBER_BLOCK,\n            message0: \"compute column %1 as %2 %3 %4\",\n            colour: computeColour,\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"newcolumn\",\n                    spellcheck: false,\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"lhs\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\"+\", \"plus\"],\n                        [\"-\", \"minus\"],\n                        [\"*\", \"mult\"],\n                        [\"/\", \"div\"],\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"rhs\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: object[]) => {\n                const newcolumn = b.getFieldValue(\"newcolumn\")\n                const lhs = tidyResolveFieldColumn(data, b, \"lhs\", {\n                    type: \"number\",\n                })\n                const rhs = b.getFieldValue(\"rhs\")\n                const logic = b.getFieldValue(\"logic\")\n                if (!newcolumn || !lhs) return Promise.resolve(data)\n                return postTransformData(<DataMutateNumberRequest>{\n                    type: \"mutate_number\",\n                    newcolumn,\n                    lhs,\n                    rhs,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SUMMARIZE_BLOCK,\n            message0: \"summarize %1 calculate %2\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"calc\",\n                    options: calcOptions,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const columns = tidyResolveFieldColumns(\n                    data,\n                    b,\n                    \"column\",\n                    \"number\"\n                )\n                const calc = b.getFieldValue(\"calc\")\n                return postTransformData(<DataSummarizeRequest>{\n                    type: \"summarize\",\n                    columns,\n                    calc,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SUMMARIZE_BY_GROUP_BLOCK,\n            message0: \"group %1 by %2 calculate %3\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"by\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"calc\",\n                    options: calcOptions,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const by = tidyResolveFieldColumn(data, b, \"by\")\n                const calc = b.getFieldValue(\"calc\")\n                if (!by) return Promise.resolve([])\n                return postTransformData(<DataSummarizeByGroupRequest>{\n                    type: \"summarize_by_group\",\n                    column,\n                    by,\n                    calc,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SLICE_BLOCK,\n            message0: \"take %1 rows from %2\",\n            colour: operatorsColour,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"count\",\n                    min: 1,\n                    precision: 1,\n                    value: 100,\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"operator\",\n                    options: [\n                        [\"head\", \"head\"],\n                        [\"tail\", \"tail\"],\n                        [\"sample\", \"sample\"],\n                    ],\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const count = b.getFieldValue(\"count\")\n                const operator = b.getFieldValue(\"operator\")\n                return tidySlice(data, {\n                    sliceHead: operator === \"head\" ? count : undefined,\n                    sliceTail: operator === \"tail\" ? count : undefined,\n                    sliceSample: operator === \"sample\" ? count : undefined,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_COUNT_BLOCK,\n            message0: \"count distinct %1\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                if (!column) return Promise.resolve([])\n                return postTransformData(<DataCountRequest>{\n                    type: \"count\",\n                    column,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_BIN_BLOCK,\n            message0: \"bin by %1\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                    dataType: \"number\",\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: computeColour,\n            template: \"meta\",\n            dataPreviewField: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\", {\n                    type: \"number\",\n                })\n                if (!column) return Promise.resolve([])\n                return postTransformData(<DataBinRequest>{\n                    type: \"bin\",\n                    column,\n                    data,\n                })\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_CORRELATION_BLOCK,\n            message0: \"correlation of %1 %2 %3 %4 %5\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"x\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"y\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                    compare: true,\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: DataTableField.KEY,\n                    name: \"table\",\n                    transformed: true,\n                    small: true,\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: statisticsColour,\n            template: \"meta\",\n            dataPreviewField: false,\n            passthroughData: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column1 = tidyResolveFieldColumn(data, b, \"x\", {\n                    type: \"number\",\n                })\n                const column2 = tidyResolveFieldColumn(data, b, \"y\", {\n                    type: \"number\",\n                })\n                if (!column1 || !column2) return Promise.resolve([])\n                return postTransformData(<DataCorrelationRequest>{\n                    type: \"correlation\",\n                    column1,\n                    column2,\n                    data,\n                })\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_LINEAR_REGRESSION_BLOCK,\n            message0: \"linear regression of x %1 y %2 %3 %4 %5\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"x\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"y\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                    compare: true,\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: ScatterPlotField.KEY,\n                    name: \"plot\",\n                    linearRegression: true,\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: statisticsColour,\n            template: \"meta\",\n            dataPreviewField: false,\n            passthroughData: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column1 = tidyResolveFieldColumn(data, b, \"x\", {\n                    type: \"number\",\n                })\n                const column2 = tidyResolveFieldColumn(data, b, \"y\", {\n                    type: \"number\",\n                })\n                if (!column1 || !column2) return Promise.resolve([])\n                return postTransformData(<DataLinearRegressionRequest>{\n                    type: \"linear_regression\",\n                    column1,\n                    column2,\n                    data,\n                })\n            },\n        },\n        {\n            kind: \"block\",\n            type: DATA_COMMENT_BLOCK,\n            message0: \"comment %1 %2 %3\",\n            args0: [\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: \"field_multilinetext\",\n                    name: \"text\",\n                    text: \"And then...\",\n                    spellcheck: true,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: operatorsColour,\n            template: \"meta\",\n            inputsInline: false,\n            dataPreviewField: false,\n            transformData: identityTransformData,\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Organize\",\n            colour: operatorsColour,\n            contents: [\n                /*<BlockReference>{\n                    kind: \"block\",\n                    type: DATA_COMMENT_BLOCK,\n                },*/\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_ARRANGE_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SELECT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DROP_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_FILTER_COLUMNS_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_FILTER_STRING_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SLICE_BLOCK,\n                },\n            ],\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Compute\",\n            colour: computeColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_MUTATE_COLUMNS_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_MUTATE_NUMBER_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SUMMARIZE_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SUMMARIZE_BY_GROUP_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_COUNT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_BIN_BLOCK,\n                },\n            ],\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Statistics\",\n            colour: statisticsColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_CORRELATION_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_LINEAR_REGRESSION_BLOCK,\n                },\n            ],\n        },\n    ],\n}\nexport default dataDsl\n","import { Block, Workspace } from \"blockly\"\nimport { CHANGE } from \"../../../../jacdac-ts/src/jdom/constants\"\nimport { inIFrame } from \"../../../../jacdac-ts/src/jdom/iframeclient\"\nimport { randomDeviceId } from \"../../../../jacdac-ts/src/jdom/random\"\nimport type { DataSliceOptions } from \"../../../workers/data/dist/node_modules/data.worker\"\nimport { workspaceToJSON } from \"../jsongenerator\"\nimport {\n    BlockDataSet,\n    BlockDataSetTransform,\n    BlockDefinition,\n    ContentDefinition,\n    resolveBlockDefinition,\n} from \"../toolbox\"\nimport { BlockWithServices, setBlockDataWarning } from \"../WorkspaceContext\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport { WorkspaceFile, WorkspaceJSON } from \"./workspacejson\"\n\nexport interface DslMessage {\n    type?: \"dsl\"\n    id?: string\n    dslid: string\n    action:\n        | \"mount\"\n        | \"unmount\"\n        | \"blocks\"\n        | \"transform\"\n        | \"change\"\n        | \"workspace\"\n        | \"load\"\n        | \"save\"\n        | \"options\"\n        | \"chartexport\"\n}\n\nexport interface DslBlocksResponse extends DslMessage {\n    action: \"blocks\"\n    blocks: BlockDefinition[]\n    category: ContentDefinition[]\n}\n\nexport interface DslTransformMessage extends DslMessage {\n    action: \"transform\"\n    blockId?: string\n    workspace?: WorkspaceJSON\n    dataset?: BlockDataSet\n}\n\nexport interface DslChartExportMessage extends DslMessage {\n    action: \"transform\"\n    blockId?: string\n    spec: unknown\n    slice: DataSliceOptions\n    dataset: BlockDataSet\n    vegaDataset: BlockDataSet\n}\n\nexport interface DslTransformResponse extends DslTransformMessage {\n    warning?: string\n}\n\nexport type DslWorkspaceFileMessage = {\n    action: \"load\" | \"save\"\n} & DslMessage &\n    WorkspaceFile\n\nexport interface DslOptionsMessage extends DslMessage {\n    action: \"options\"\n    options: Record<string, [string, string][]>\n}\n\nclass IFrameDomainSpecificLanguage implements BlockDomainSpecificLanguage {\n    private dslid = randomDeviceId()\n    private blocks: BlockDefinition[] = []\n    private category: ContentDefinition[] = []\n    private pendings: Record<string, (data: DslMessage) => void> = {}\n\n    private _workspace: Workspace\n\n    constructor(readonly id: string, readonly targetOrigin: string) {\n        this.handleMessage = this.handleMessage.bind(this)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    private post(action: string, extras?: object) {\n        const payload = {\n            id: Math.random() + \"\",\n            type: \"dsl\",\n            dslid: this.dslid,\n            action,\n            ...(extras || {}),\n        } as DslMessage\n        window.parent.postMessage(payload, this.targetOrigin)\n        return payload\n    }\n\n    mount(workspace: Workspace) {\n        this._workspace = workspace\n        window.addEventListener(\"message\", this.handleMessage, false)\n        this.post(\"mount\")\n        return () => {\n            this.post(\"unmount\")\n            this._workspace = undefined\n            window.removeEventListener(\"message\", this.handleMessage)\n        }\n    }\n\n    private handleMessage(msg: MessageEvent<DslMessage>) {\n        const { data } = msg\n        if (data.type === \"dsl\" && data.dslid === this.dslid) {\n            const { id, action } = data\n            // check for pending request\n            const pending = id !== undefined && this.pendings[id]\n            if (pending) {\n                delete this.pendings[id]\n                pending(data)\n            }\n            // trigger recomputation\n            switch (action) {\n                case \"change\": {\n                    //console.log(`iframedsl: change requested`)\n                    this._workspace\n                        .getTopBlocks(false)\n                        .filter(\n                            b => resolveBlockDefinition(b.type)?.dsl === this.id\n                        )\n                        .forEach((b: Block) => {\n                            //console.log(`change ${b.id}`)\n                            const { jacdacServices } = b as BlockWithServices\n                            jacdacServices.emit(CHANGE)\n                        })\n                    break\n                }\n                case \"workspace\": {\n                    break\n                }\n            }\n        }\n    }\n\n    private createTransformData(): BlockDataSetTransform {\n        return (blockWithServices, dataset) =>\n            new Promise<BlockDataSet>(resolve => {\n                // TODO fix event ordering\n                const workspace = workspaceToJSON(\n                    blockWithServices.workspace,\n                    [], // TODO pass dsls\n                    [blockWithServices]\n                )\n                const { id } = this.post(\"transform\", {\n                    blockId: blockWithServices.id,\n                    workspace,\n                    dataset,\n                })\n                setTimeout(() => {\n                    if (this.pendings[id]) {\n                        delete this.pendings[id]\n                        console.warn(`iframedsl: transform timeouted`)\n                        resolve(undefined)\n                    }\n                }, 10000)\n                this.pendings[id] = data => {\n                    const { dataset, warning } = data as DslTransformResponse\n                    if (warning) setBlockDataWarning(blockWithServices, warning)\n                    resolve(dataset)\n                }\n            })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    createBlocks(options: CreateBlocksOptions): Promise<BlockDefinition[]> {\n        return new Promise<BlockDefinition[]>(resolve => {\n            const { id } = this.post(\"blocks\")\n            setTimeout(() => {\n                if (this.pendings[id]) {\n                    delete this.pendings[id]\n                    console.warn(\n                        `iframedsl ${this.id}: no blocks returned, giving up`\n                    )\n                    resolve(this.blocks)\n                }\n            }, 3000)\n            this.pendings[id] = data => {\n                const bdata = data as DslBlocksResponse\n                this.blocks = bdata.blocks\n                this.category = bdata.category\n                console.debug(\n                    `iframedsl ${this.id}: loaded ${this.blocks?.length} blocks, ${this.category?.length} categories`\n                )\n                const transformData = this.createTransformData()\n                this.blocks.forEach(\n                    block => (block.transformData = transformData)\n                )\n                resolve(this.blocks)\n            }\n        })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    createCategory(options: CreateCategoryOptions): ContentDefinition[] {\n        return this.category\n    }\n\n    onWorkspaceJSONChange(json: WorkspaceJSON) {\n        this.post(\"workspace\", {\n            workspace: json,\n        })\n    }\n\n    onSave(file: WorkspaceFile) {\n        this.post(\"save\", file)\n    }\n}\n\n/**\n * Creates an iframe DSL if applicable\n * @param targetOrigin\n * @returns\n */\nexport function createIFrameDSL(\n    id: string,\n    targetOrigin = \"*\"\n): BlockDomainSpecificLanguage {\n    return inIFrame() && new IFrameDomainSpecificLanguage(id, targetOrigin)\n}\n","import jsep from \"jsep\"\nimport { Theme } from \"@mui/material\"\nimport { withPrefix } from \"gatsby\"\nimport {\n    humanify,\n    isNumericType,\n} from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    BuzzerCmd,\n    JoystickReg,\n    ServoReg,\n    SRV_BOOTLOADER,\n    SRV_BUZZER,\n    SRV_CONTROL,\n    SRV_JOYSTICK,\n    SRV_LOGGER,\n    SRV_PROTO_TEST,\n    SRV_ROLE_MANAGER,\n    SRV_SERVO,\n    SystemReg,\n} from \"../../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../../jacdac-ts/src/jdom/flags\"\nimport {\n    isHighLevelEvent,\n    isHighLevelRegister,\n    isCommand,\n    isSensor,\n    serviceSpecifications,\n    serviceSpecificationFromClassIdentifier,\n} from \"../../../../jacdac-ts/src/jdom/spec\"\nimport {\n    arrayConcatMany,\n    splitFilter,\n    toMap,\n    uniqueMap,\n} from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport { VMError } from \"../../../../jacdac-ts/src/vm/ir\"\nimport NoteField from \"../fields/NoteField\"\nimport ServoAngleField from \"../fields/ServoAngleField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    BOOLEAN_TYPE,\n    ButtonDefinition,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    EventBlockDefinition,\n    EventFieldDefinition,\n    InputDefinition,\n    JSON_TYPE,\n    NUMBER_TYPE,\n    OptionsInputDefinition,\n    RegisterBlockDefinition,\n    resolveBlockDefinition,\n    ServiceBlockDefinition,\n    STRING_TYPE,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport { ExpressionWithErrors, makeVMBase } from \"../../vm/VMgenerator\"\nimport {\n    CompileCommandToVMOptions,\n    CompileEventToVMOptions,\n    CompileEventToVMResult,\n    CompileExpressionToVMOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport { Variables } from \"blockly\"\nimport { paletteColorByIndex } from \"./palette\"\nimport { VariableJSON } from \"./workspacejson\"\n\nconst SET_STATUS_LIGHT_BLOCK = \"jacdac_set_status_light\"\nconst ROLE_BOUND_EVENT_BLOCK = \"jacdac_role_bound_event\"\nconst ROLE_BOUND_BLOCK = \"jacdac_role_bound\"\n\nfunction isBooleanField(field: jdspec.PacketMember) {\n    return field.type === \"bool\"\n}\n\nfunction isStringField(field: jdspec.PacketMember) {\n    return field.type === \"string\"\n}\n\nfunction toBlocklyType(field: jdspec.PacketMember) {\n    return field.encoding === \"JSON\"\n        ? JSON_TYPE\n        : isBooleanField(field)\n        ? BOOLEAN_TYPE\n        : isStringField(field)\n        ? STRING_TYPE\n        : isNumericType(field)\n        ? NUMBER_TYPE\n        : undefined\n}\nfunction enumInfo(srv: jdspec.ServiceSpec, field: jdspec.PacketMember) {\n    const e = srv.enums?.[field.type]\n    return e\n}\n\nconst ignoredServices = [\n    SRV_CONTROL,\n    SRV_LOGGER,\n    SRV_ROLE_MANAGER,\n    SRV_PROTO_TEST,\n    SRV_BOOTLOADER,\n]\n\nconst customMessages = [\n    {\n        service: SRV_JOYSTICK,\n        register: JoystickReg.Direction,\n        field: \"buttons\",\n        get: \"is %1 %2 pressed\",\n    },\n]\n\n// internal helper functions\nconst customShadows = [\n    {\n        serviceClass: SRV_SERVO,\n        kind: \"rw\",\n        identifier: ServoReg.Angle,\n        field: \"_\",\n        shadow: <BlockDefinition>{\n            kind: \"block\",\n            type: ServoAngleField.SHADOW.type,\n        },\n    },\n    {\n        serviceClass: SRV_BUZZER,\n        kind: \"command\",\n        identifier: BuzzerCmd.PlayNote,\n        field: \"frequency\",\n        shadow: <BlockDefinition>{\n            kind: \"block\",\n            type: NoteField.SHADOW.type,\n        },\n    },\n]\n\nconst lookupCustomShadow = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n) =>\n    customShadows.find(\n        cs =>\n            cs.serviceClass === service.classIdentifier &&\n            cs.kind == info.kind &&\n            cs.identifier === info.identifier &&\n            cs.field == field.name\n    )?.shadow\n\nconst fieldsSupported = (pkt: jdspec.PacketInfo) =>\n    pkt.fields.every(toBlocklyType)\n\nconst fieldName = (reg: jdspec.PacketInfo, field: jdspec.PacketMember) =>\n    field.name === \"_\" ? reg.name : field.name\n\nconst fieldToShadow = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n): BlockReference =>\n    lookupCustomShadow(service, info, field) ||\n    (isBooleanField(field)\n        ? { kind: \"block\", type: \"jacdac_on_off\" }\n        : isStringField(field)\n        ? { kind: \"block\", type: \"text\" }\n        : field.unit === \"°\"\n        ? {\n              kind: \"block\",\n              type: \"jacdac_angle\",\n          }\n        : field.unit === \"/\"\n        ? { kind: \"block\", type: \"jacdac_ratio\" }\n        : /^%/.test(field.unit)\n        ? { kind: \"block\", type: \"jacdac_percent\" }\n        : field.type === \"u8\"\n        ? { kind: \"block\", type: \"jacdac_byte\" }\n        : {\n              kind: \"block\",\n              type: \"math_number\",\n              value: field.defaultValue || 0,\n              min: field.typicalMin || field.absoluteMin,\n              max: field.typicalMax || field.absoluteMax,\n          })\n\nconst variableName = (srv: jdspec.ServiceSpec, client: boolean) =>\n    `${humanify(srv.camelName).toLowerCase()}${client ? \"\" : \" server\"} 1`\n\nconst isEnabledRegister = (info: jdspec.PacketInfo) =>\n    info.fields.length === 1 &&\n    info.fields[0].type === \"bool\" &&\n    info.name === \"enabled\"\n\nconst customMessage = (\n    srv: jdspec.ServiceSpec,\n    reg: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n) =>\n    customMessages.find(\n        m =>\n            m.service === srv.classIdentifier &&\n            m.register === reg.identifier &&\n            m.field === field.name\n    )\n\nconst eventFieldGroups = [\n    {\n        output: NUMBER_TYPE,\n        filter: isNumericType,\n    },\n    {\n        output: BOOLEAN_TYPE,\n        filter: isBooleanField,\n    },\n    {\n        output: STRING_TYPE,\n        filter: (f: jdspec.PacketMember) =>\n            isStringField(f) && f.encoding !== \"JSON\",\n    },\n    {\n        output: JSON_TYPE,\n        filter: (f: jdspec.PacketMember) =>\n            isStringField(f) && f.encoding === \"JSON\",\n    },\n]\n\ntype ServicePackets = {\n    service: jdspec.ServiceSpec\n    packets: jdspec.PacketInfo[]\n}\n\n// exports\n\nexport function toRoleType(service: jdspec.ServiceSpec, client = true) {\n    return `${service.classIdentifier}:${client ? \"client\" : \"server\"}`\n}\n\nexport function parseRoleType(v: VariableJSON) {\n    const split = v.type.split(\":\")\n    return {\n        role: v.name,\n        serviceClass: parseInt(split[0]),\n        client: split.length === 2 ? split[1] === \"client\" : true,\n    }\n}\n\nexport const fieldsToFieldInputs = (info: jdspec.PacketInfo) =>\n    info.fields.map(field => ({\n        type: \"input_value\",\n        name: fieldName(info, field),\n        check: toBlocklyType(field),\n    }))\n\nexport const fieldsToValues = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo\n) =>\n    toMap<jdspec.PacketMember, BlockReference | BlockDefinition>(\n        info.fields,\n        field => fieldName(info, field),\n        field => fieldToShadow(service, info, field)\n    )\n\nexport const fieldsToMessage = (info: jdspec.PacketInfo) =>\n    info.fields.map((field, i) => `${humanify(field.name)} %${2 + i}`).join(\" \")\n\nexport interface ServiceRegister {\n    service: jdspec.ServiceSpec\n    register: jdspec.PacketInfo\n}\n\ninterface ServiceRegisterField extends ServiceRegister {\n    field: jdspec.PacketMember\n    einfo: jdspec.EnumInfo\n}\n\nexport const serviceHelp = (service: jdspec.ServiceSpec) => {\n    return withPrefix(`/services/${service.shortId}`)\n}\n\nconst sensorColor = paletteColorByIndex(1)\nconst otherColor = paletteColorByIndex(3)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const createServiceColor = (theme: Theme) => {\n    const serviceColor = (srv: jdspec.ServiceSpec) =>\n        isSensor(srv) ? sensorColor : otherColor\n    return serviceColor\n}\n\nexport const roleVariable = (\n    service: jdspec.ServiceSpec,\n    client = true\n): VariableInputDefinition => {\n    return {\n        type: \"field_variable\",\n        name: \"role\",\n        variable: variableName(service, client),\n        variableTypes: [toRoleType(service, client)],\n        defaultType: toRoleType(service, client),\n    }\n}\n\nexport const getServiceInfo = () => {\n    const allServices = serviceSpecifications()\n    const supportedServices = allServices\n        .filter(\n            service =>\n                !/^_/.test(service.shortId) && service.status !== \"deprecated\"\n        )\n        .filter(service => ignoredServices.indexOf(service.classIdentifier) < 0)\n    const registers = arrayConcatMany(\n        supportedServices.map(service =>\n            service.packets.filter(isHighLevelRegister).map(register => ({\n                service,\n                register,\n            }))\n        )\n    )\n    const [registerSimples, registerComposites] = splitFilter(\n        registers,\n        reg => reg.register.fields.length == 1\n    )\n    const [registerSimpleTypes, registerSimpleOthers] = splitFilter(\n        registerSimples,\n        ({ register }) => !!toBlocklyType(register.fields[0])\n    )\n    const registerSimpleEnumTypes = registerSimpleOthers\n        .filter(\n            ({ service, register }) => !!enumInfo(service, register.fields[0])\n        )\n        .map(({ service, register }) => ({\n            service,\n            register,\n            field: register.fields[0],\n            einfo: enumInfo(service, register.fields[0]),\n        }))\n    const registerCompositeEnumTypes = arrayConcatMany(\n        registerComposites.map(({ service, register }) =>\n            register.fields\n                .map(field => ({\n                    service,\n                    register,\n                    field,\n                    einfo: enumInfo(service, field),\n                }))\n                .filter(({ einfo }) => !!einfo)\n        )\n    )\n\n    return {\n        allServices,\n        supportedServices,\n        registers,\n        registerSimpleTypes,\n        registerComposites,\n        registerSimpleEnumTypes,\n        registerCompositeEnumTypes,\n        events: supportedServices\n            .map(service => ({\n                service,\n                events: service.packets.filter(isHighLevelEvent),\n            }))\n            .filter(kv => !!kv.events.length),\n\n        commands: arrayConcatMany(\n            supportedServices.map(service =>\n                service.packets\n                    .filter(\n                        pkt =>\n                            isCommand(pkt) &&\n                            !pkt.lowLevel &&\n                            fieldsSupported(pkt)\n                    )\n                    .map(pkt => ({\n                        service,\n                        command: pkt,\n                    }))\n            )\n        ),\n    }\n}\n\nexport class ServicesBaseDSL {\n    // only state required across methods of class\n    protected _serviceBlocks: ServiceBlockDefinition[] = []\n    protected _eventFieldBlocks: EventFieldDefinition[] = []\n    protected serviceColor: (srv: jdspec.ServiceSpec) => string\n\n    protected makeRegisterSimpleGetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers.map<RegisterBlockDefinition>(\n            ({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_simple_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0:\n                    customMessage(service, register, register.fields[0])?.get ||\n                    `%1 ${humanify(register.name)}`,\n                args0: [roleVariable(service, client)],\n                inputsInline: true,\n                output: toBlocklyType(register.fields[0]),\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field: register.fields[0],\n\n                template: \"register_get\",\n            })\n        )\n    }\n\n    protected makeRegisterSetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(({ register }) => !client || register.kind === \"rw\")\n            .filter(({ register }) => fieldsSupported(register))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_set_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0: isEnabledRegister(register)\n                    ? `set %1 %2`\n                    : `set %1 ${register.name} to ${\n                          register.fields.length === 1\n                              ? \"%2\"\n                              : fieldsToMessage(register)\n                      }`,\n                args0: [\n                    roleVariable(service, client),\n                    ...fieldsToFieldInputs(register),\n                ],\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"register_set\",\n            }))\n    }\n\n    protected makeRegisterChangeByEventBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(({ service }) => !service.packets.some(isHighLevelEvent))\n            .filter(\n                ({ register }) =>\n                    register.fields.length === 1 &&\n                    isNumericType(register.fields[0]) &&\n                    register.identifier !== SystemReg.Intensity\n            )\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_change_by_events_${service.shortId}_${\n                    register.name\n                }${client ? \"\" : \"_server\"}`,\n                message0: `on %1 ${humanify(register.name)} change by %2`,\n                args0: [\n                    roleVariable(service, client),\n                    ...fieldsToFieldInputs(register),\n                ].filter(v => !!v),\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: this.serviceColor(service),\n                tooltip: `Event raised when ${register.name} changes`,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_change_event\",\n            }))\n    }\n\n    protected makeRegisterNumericsGetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(re => re.register.fields.some(isNumericType))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_numerics_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0: `%1 ${humanify(register.name)}${\n                    register.fields.length > 1 ? ` %2` : \"\"\n                }`,\n                args0: [\n                    roleVariable(service, client),\n                    register.fields.length > 1\n                        ? <OptionsInputDefinition>{\n                              type: \"field_dropdown\",\n                              name: \"field\",\n                              options: register.fields\n                                  .filter(f => isNumericType(f))\n                                  .map(field => [\n                                      humanify(field.name),\n                                      fieldName(register, field),\n                                  ]),\n                          }\n                        : undefined,\n                ].filter(v => !!v),\n                inputsInline: true,\n                output: \"Number\",\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_get\",\n            }))\n    }\n\n    protected makeRegisterEnumGetBlocks(\n        registers: ServiceRegisterField[],\n        client = true\n    ) {\n        return registers.map<RegisterBlockDefinition>(\n            ({ service, register, field, einfo }) => ({\n                kind: \"block\",\n                type: `jacdac_get_enum_${service.shortId}_${register.name}_${\n                    field.name\n                }${client ? \"\" : \"_server\"}`,\n                message0:\n                    customMessage(service, register, field)?.get ||\n                    `%1 ${humanify(register.name)}${\n                        field.name === \"_\" ? \"\" : ` ${field.name}`\n                    } %2`,\n                args0: [\n                    roleVariable(service, client),\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: field.name,\n                        options: Object.keys(einfo.members).map(member => [\n                            humanify(member),\n                            member,\n                        ]),\n                    },\n                ],\n                inputsInline: true,\n                output: \"Boolean\",\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field,\n\n                template: \"register_get\",\n            })\n        )\n    }\n\n    // generate accessor blocks for event/command data with numbers\n    protected makeFieldBlocks(sps: ServicePackets[], client = true) {\n        const worker = (\n            sp: ServicePackets,\n            output: string,\n            filter: (field: jdspec.PacketMember) => boolean\n        ) => {\n            const { service, packets } = sp\n            return packets\n                .filter(pkt => pkt.fields.filter(filter).length > 0)\n                .map(pkt => ({ service, pkt }))\n                .map(\n                    ({ service, pkt }) =>\n                        <EventFieldDefinition>{\n                            kind: \"block\",\n                            type: `jacdac_event_field_${output.toLowerCase()}_${\n                                service.shortId\n                            }_${pkt.name}${client ? \"\" : \"_server\"}`,\n                            message0: `${pkt.name} %1`,\n                            args0: [\n                                <InputDefinition>{\n                                    type: \"field_dropdown\",\n                                    name: \"field\",\n                                    options: pkt.fields.map(field => [\n                                        humanify(field.name),\n                                        field.name,\n                                    ]),\n                                },\n                            ],\n                            colour: this.serviceColor(service),\n                            inputsInline: true,\n                            tooltip: `Data fields of the ${pkt.name} ${\n                                client ? \"event\" : \"command\"\n                            }`,\n                            helpUrl: serviceHelp(service),\n                            service,\n                            event: pkt,\n                            output,\n                            template: \"event_field\",\n                        }\n                )\n        }\n\n        return arrayConcatMany(\n            arrayConcatMany(\n                eventFieldGroups.map(({ output, filter }) =>\n                    sps.map(sp => worker(sp, output, filter))\n                )\n            )\n        )\n    }\n\n    protected createCategoryHelper(options: CreateCategoryOptions) {\n        const { theme, source, liveServices } = options\n        this.serviceColor = createServiceColor(theme)\n\n        const blockServices: { serviceClass: number }[] =\n            source?.variables\n                .map(parseRoleType)\n                .filter(\n                    vt =>\n                        !!serviceSpecificationFromClassIdentifier(\n                            vt.serviceClass\n                        )\n                ) || []\n        const usedEvents: Set<jdspec.PacketInfo> = new Set(\n            source?.blocks\n                ?.map(block => ({\n                    block,\n                    definition: resolveBlockDefinition(block.type),\n                }))\n                .filter(({ definition }) => definition?.template === \"event\")\n                .map(({ block, definition }) => {\n                    const { events } = definition as EventBlockDefinition\n                    if (events.length === 1) return events[0]\n                    else {\n                        const eventName = block.inputs[0].fields[\"event\"]\n                            .value as string\n                        return events.find(ev => ev.name === eventName)\n                    }\n                })\n                .filter(ev => !!ev)\n        )\n        const jdBlocks = this._serviceBlocks.filter(block => !!block.service)\n        const services = uniqueMap(\n            jdBlocks,\n            block => block.service.shortId,\n            block => block.service\n        )\n\n        const toolboxServices: jdspec.ServiceSpec[] = uniqueMap(\n            Flags.diagnostics\n                ? services\n                : [\n                      ...blockServices\n                          .map(pair =>\n                              services.find(\n                                  service =>\n                                      service.classIdentifier ===\n                                      pair.serviceClass\n                              )\n                          )\n                          .filter(srv => !!srv),\n                      ...liveServices.map(s => s.specification),\n                  ],\n            srv => srv.shortId,\n            srv => srv\n        )\n            .filter(\n                srv => srv && ignoredServices.indexOf(srv.classIdentifier) < 0\n            )\n            .sort((l, r) => l.name.localeCompare(r.name))\n\n        const getFieldBlocks = (\n            service: jdspec.ServiceSpec,\n            fieldBlocks: EventFieldDefinition[]\n        ) =>\n            fieldBlocks\n                .filter(\n                    ev => ev.service === service && usedEvents.has(ev.event)\n                )\n                .map<BlockReference>(block => ({\n                    kind: \"block\",\n                    type: block.type,\n                    values: block.values,\n                }))\n\n        const makeCategory = (\n            service: jdspec.ServiceSpec,\n            isClient: boolean,\n            serviceBlocks: ServiceBlockDefinition[],\n            eventFieldBLocks: EventFieldDefinition[]\n        ) => {\n            return {\n                kind: \"category\",\n                name: service.name + (isClient ? \"\" : \" Server\"),\n                colour: this.serviceColor(service),\n                contents: [\n                    <ButtonDefinition>{\n                        kind: \"button\",\n                        text: `Add ${service.name} ${\n                            isClient ? \"role\" : \"server\"\n                        }`,\n                        callbackKey: `jacdac_add_role_callback_${toRoleType(\n                            service,\n                            isClient\n                        )}`,\n                        callback: workspace =>\n                            Variables.createVariableButtonHandler(\n                                workspace,\n                                null,\n                                toRoleType(service, isClient)\n                            ),\n                    },\n                    ...serviceBlocks.map<BlockReference>(block => ({\n                        kind: \"block\",\n                        type: block.type,\n                        values: block.values,\n                    })),\n                    ...getFieldBlocks(service, eventFieldBLocks),\n                ],\n            }\n        }\n\n        return (\n            serviceBlocks: ServiceBlockDefinition[],\n            eventFieldBlocks: EventFieldDefinition[],\n            client = true\n        ) =>\n            toolboxServices\n                .map(serviceClient => ({\n                    serviceClient,\n                    serviceBlocks: serviceBlocks.filter(\n                        block => block.service === serviceClient\n                    ),\n                }))\n                .map<CategoryDefinition>(\n                    sc =>\n                        makeCategory(\n                            sc.serviceClient,\n                            client,\n                            sc.serviceBlocks,\n                            eventFieldBlocks\n                        ) as CategoryDefinition\n                )\n    }\n\n    compileEventToVM(options: CompileEventToVMOptions): CompileEventToVMResult {\n        const makeAwaitEvent = (\n            cmd: string,\n            role: string,\n            eventName: string\n        ) => {\n            return <CompileEventToVMResult>{\n                expression: <jsep.CallExpression>{\n                    type: \"CallExpression\",\n                    arguments:\n                        cmd == \"awaitEvent\"\n                            ? [\n                                  toMemberExpression(\n                                      role.toString(),\n                                      eventName.toString()\n                                  ),\n                              ]\n                            : [\n                                  toIdentifier(role.toString()),\n                                  toIdentifier(eventName.toString()),\n                              ],\n                    callee: toIdentifier(cmd),\n                },\n                event: {\n                    role: role.toString(),\n                    event: eventName.toString(),\n                },\n            }\n        }\n\n        const { block, definition, blockToExpression } = options\n        const { inputs } = block\n        const { template } = definition\n\n        switch (template) {\n            case \"event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { value: eventName } = inputs[0].fields[\"event\"]\n                return makeAwaitEvent(\n                    \"awaitEvent\",\n                    role.toString(),\n                    eventName.toString()\n                )\n            }\n            case \"register_change_event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { register } = definition as RegisterBlockDefinition\n                const { expr, errors } = blockToExpression(\n                    undefined,\n                    inputs[0].child\n                )\n                return <CompileEventToVMResult>{\n                    expression: <jsep.CallExpression>{\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role.toString(), register.name),\n                            expr,\n                        ],\n                        callee: toIdentifier(\"awaitChange\"),\n                    },\n                    errors,\n                }\n            }\n            default: {\n                const { type } = block\n                switch (type) {\n                    case ROLE_BOUND_EVENT_BLOCK: {\n                        const { value: role } = inputs[0].fields[\"role\"]\n                        const { value: eventName } = inputs[0].fields[\"event\"]\n                        return makeAwaitEvent(\n                            \"roleBound\",\n                            role.toString(),\n                            eventName.toString()\n                        )\n                    }\n                }\n            }\n        }\n        return undefined\n    }\n\n    compileExpressionToVM(\n        options: CompileExpressionToVMOptions\n    ): ExpressionWithErrors {\n        const { event, definition, block } = options\n        const { inputs, id } = block\n        const { template } = definition\n        switch (template) {\n            case \"register_get\": {\n                const { register } = definition as RegisterBlockDefinition\n                const { value: role } = inputs[0].fields[\"role\"]\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        role as string,\n                        field\n                            ? toMemberExpression(\n                                  register.name,\n                                  field.value as string\n                              )\n                            : register.name\n                    ),\n                    errors: [],\n                }\n            }\n            case \"event_field\": {\n                const { event: eventInfo } = definition as EventFieldDefinition\n                const errors: VMError[] = []\n                if (event.event !== eventInfo.name) {\n                    errors.push({\n                        sourceId: id,\n                        message: `Event ${eventInfo.name} is not available in this handler.`,\n                    })\n                }\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        event.role,\n                        toMemberExpression(event.event, field.value as string)\n                    ),\n                    errors,\n                }\n            }\n            default: {\n                const { type } = block\n                const errors: VMError[] = []\n                switch (type) {\n                    case ROLE_BOUND_BLOCK: {\n                        const { value: role } = inputs[0].fields[\"role\"]\n                        return {\n                            expr: {\n                                type: \"CallExpression\",\n                                arguments: [toIdentifier(role.toString())],\n                                callee: toMemberExpression(\n                                    \"$fun\",\n                                    \"roleBoundExpression\"\n                                ),\n                            } as jsep.Expression,\n                            errors,\n                        }\n                    }\n                }\n            }\n        }\n        return undefined\n    }\n\n    compileCommandToVM(options: CompileCommandToVMOptions) {\n        const { event, block, definition, blockToExpression } = options\n        const { template } = definition\n        const { inputs } = block\n        switch (template) {\n            case \"register_set\": {\n                // TODO: need to handle the case of writing a register with fields\n                const { register } = definition as RegisterBlockDefinition\n                const exprsErrors = inputs.map(a => {\n                    return blockToExpression(event, a.child)\n                })\n                const { value: role } = inputs[0].fields.role\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role as string, register.name),\n                            ...exprsErrors.map(p => p.expr),\n                        ],\n                        callee: toIdentifier(\"writeRegister\"),\n                    }),\n                    errors: exprsErrors.flatMap(p => p.errors),\n                }\n            }\n            case \"raiseNo\":\n            case \"raiseArgs\":\n            case \"command\": {\n                const { command: serviceCommand } =\n                    definition as CommandBlockDefinition\n                const { value: role } = inputs[0].fields.role\n                const eventName =\n                    template === \"raiseNo\"\n                        ? inputs[0].fields[\"event\"].value.toString()\n                        : \"\"\n                const exprsErrors =\n                    template === \"raiseNo\"\n                        ? []\n                        : inputs.map(a => {\n                              return blockToExpression(event, a.child)\n                          })\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: exprsErrors.map(p => p.expr),\n                        callee: toMemberExpression(\n                            role as string,\n                            eventName ? eventName : serviceCommand.name\n                        ),\n                    }),\n                    errors: exprsErrors.flatMap(p => p.errors),\n                }\n            }\n            case \"server\": {\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [],\n                        callee: toIdentifier(\"nop\"),\n                    }),\n                    errors: [],\n                }\n            }\n            default: {\n                const { type } = block\n                switch (type) {\n                    case SET_STATUS_LIGHT_BLOCK: {\n                        console.log(\"SET_STATUS\")\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n}\n","import jsep from \"jsep\"\nimport {\n    VMBase,\n    VMHandler,\n    VMProgram,\n    VMRole,\n    VMIfThenElse,\n    VMError,\n} from \"../../../jacdac-ts/src/vm/ir\"\nimport { toIdentifier, RoleEvent } from \"../../../jacdac-ts/src/vm/compile\"\nimport {\n    BUILTIN_TYPES,\n    resolveBlockDefinition,\n    ServiceBlockDefinition,\n} from \"../blockly/toolbox\"\nimport Blockly from \"blockly\"\nimport BlockDomainSpecificLanguage, { resolveDsl } from \"../blockly/dsl/dsl\"\nimport { parseRoleType } from \"../blockly/dsl/servicesbase\"\nimport { splitFilter } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { BlockJSON, WorkspaceJSON } from \"../blockly/dsl/workspacejson\"\n\nexport interface ExpressionWithErrors {\n    expr: jsep.Expression\n    errors: VMError[]\n}\n\nexport interface CmdWithErrors {\n    cmd: VMBase\n    errors: VMError[]\n}\n\nexport const makeVMBase = (block: BlockJSON, command: jsep.CallExpression) => {\n    return {\n        sourceId: block.id,\n        type: \"cmd\",\n        command,\n    } as VMBase\n}\n\nexport const processErrors = (block: BlockJSON, errors: VMError[]) => {\n    return errors.map((e: VMError) => {\n        return {\n            sourceId: e.sourceId ? e.sourceId : block.id,\n            message: e.message,\n        }\n    })\n}\n\nexport default function workspaceJSONToVMProgram(\n    workspace: WorkspaceJSON,\n    dsls: BlockDomainSpecificLanguage[]\n): VMProgram {\n    //console.debug(`compile vm`, { workspace, dsls })\n\n    if (!workspace) return undefined\n\n    const [roles, serverRoles]: [VMRole[], VMRole[]] = splitFilter(\n        workspace.variables\n            .filter(v => BUILTIN_TYPES.indexOf(v.type) < 0)\n            .map(parseRoleType),\n        r => r.client\n    )\n\n    class EmptyExpression extends Error {}\n\n    const blockToExpression: (\n        ev: RoleEvent,\n        block: BlockJSON\n    ) => ExpressionWithErrors = (ev: RoleEvent, blockIn: BlockJSON) => {\n        const errors: VMError[] = []\n\n        const blockToExpressionInner = (ev: RoleEvent, block: BlockJSON) => {\n            if (!block) {\n                throw new EmptyExpression()\n            }\n            const { type, value, inputs } = block\n            console.log(`block2e`, { ev, block, type, value, inputs })\n\n            if (value !== undefined)\n                // literal\n                return <jsep.Literal>{\n                    type: \"Literal\",\n                    value: value,\n                    raw: value + \"\",\n                }\n\n            const dsl = resolveDsl(dsls, type)\n            if (!dsl) {\n                console.warn(`unknown block ${type}`, {\n                    type,\n                    ev,\n                    block,\n                    d: Blockly.Blocks[type],\n                })\n                errors.push({\n                    sourceId: block.id,\n                    message: `unknown block ${type}`,\n                })\n            } else {\n                const definition =\n                    resolveBlockDefinition<ServiceBlockDefinition>(type)\n                const res = dsl.compileExpressionToVM?.({\n                    event: ev,\n                    definition,\n                    block,\n                    blockToExpressionInner,\n                })\n                if (res) {\n                    if (res.errors) res.errors.forEach(e => errors.push(e))\n                    return res.expr\n                }\n\n                const { template } = definition\n                if (template === \"shadow\") {\n                    const field = inputs[0].fields[\"value\"]\n                    const v = field.value\n                    return <jsep.Literal>{\n                        type: \"Literal\",\n                        value: v,\n                        raw: v + \"\",\n                    }\n                }\n\n                errors.push({\n                    sourceId: block.id,\n                    message: `unknown block ${type}`,\n                })\n                console.warn(`unsupported expression block ${type}`, {\n                    ev,\n                    block,\n                    definition,\n                })\n            }\n            throw new EmptyExpression()\n        }\n        return {\n            expr: blockToExpressionInner(ev, blockIn),\n            errors,\n        }\n    }\n\n    const blockToCommand = (\n        event: RoleEvent,\n        block: BlockJSON\n    ): CmdWithErrors => {\n        const { type, inputs } = block\n        console.debug(`block2c`, { event, type, block, inputs })\n        switch (type) {\n            case \"dynamic_if\": {\n                const thenHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const elseHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const t = inputs[1]?.child\n                const e = inputs[2]?.child\n                if (t) {\n                    addCommands(\n                        event,\n                        [t, ...(t.children ? t.children : [])],\n                        thenHandler\n                    )\n                }\n                if (e) {\n                    addCommands(\n                        event,\n                        [e, ...(e.children ? e.children : [])],\n                        elseHandler\n                    )\n                }\n                let exprErrors: ExpressionWithErrors = undefined\n                try {\n                    exprErrors = blockToExpression(event, inputs[0]?.child)\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        exprErrors = {\n                            expr: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false \",\n                            } as jsep.Literal,\n                            errors: [],\n                        }\n                    } else {\n                        throw e\n                    }\n                }\n                const { expr, errors } = exprErrors\n\n                const ifThenElse: VMIfThenElse = {\n                    sourceId: block.id,\n                    type: \"ite\",\n                    expr,\n                    then: thenHandler.commands,\n                    else: elseHandler.commands,\n                }\n\n                console.log(\"dynamic if\")\n                return {\n                    cmd: ifThenElse,\n                    errors: processErrors(\n                        block,\n                        errors\n                            .concat(thenHandler.errors)\n                            .concat(elseHandler.errors)\n                    ),\n                }\n            }\n            // more builts\n            default: {\n                const dsl = resolveDsl(dsls, type)\n                if (dsl) {\n                    const definition =\n                        resolveBlockDefinition<ServiceBlockDefinition>(type)\n                    const template = definition?.template\n                    if (template === \"meta\") return undefined\n                    const dslRes = dsl.compileCommandToVM?.({\n                        event,\n                        block,\n                        definition,\n                        blockToExpression,\n                    })\n                    if (dslRes) {\n                        dslRes.errors = processErrors(block, dslRes.errors)\n                        return dslRes\n                    }\n                }\n                console.warn(`unsupported command block ${type}`, { block })\n                return {\n                    cmd: undefined,\n                    errors: [\n                        {\n                            sourceId: block.id,\n                            message: `unsupported command block ${type}`,\n                        },\n                    ],\n                }\n            }\n        }\n    }\n\n    const nop = {\n        type: \"CallExpression\",\n        arguments: [],\n        callee: toIdentifier(\"nop\"),\n    } as jsep.CallExpression\n\n    const addCommands = (\n        event: RoleEvent,\n        blocks: BlockJSON[],\n        handler: VMHandler\n    ) => {\n        blocks\n            ?.filter(child => !!child)\n            .forEach(child => {\n                try {\n                    const { cmd, errors } = blockToCommand(event, child) || {}\n                    if (cmd) handler.commands.push(cmd)\n                    errors?.forEach(e => handler.errors.push(e))\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        handler.commands.push({\n                            sourceId: child.id,\n                            type: \"cmd\",\n                            command: nop,\n                        } as VMBase)\n                    } else {\n                        console.debug(e)\n                    }\n                }\n            })\n    }\n\n    const handlers: VMHandler[] = workspace.blocks\n        .map(top => {\n            const { type } = top\n            let command: jsep.CallExpression\n            let topEvent: RoleEvent\n            let topErrors: VMError[]\n            let topMeta = false\n\n            try {\n                const dsl = resolveDsl(dsls, type)\n                const definition =\n                    resolveBlockDefinition<ServiceBlockDefinition>(type)\n                const { expression, errors, event, meta } =\n                    dsl?.compileEventToVM?.({\n                        block: top,\n                        definition,\n                        blockToExpression,\n                    }) || {}\n                command = expression as jsep.CallExpression\n                topErrors = errors\n                topEvent = event\n                topMeta = meta\n\n                // if dsl didn't compile anything try again\n                const { template } = definition || {}\n                if (!command && !topErrors?.length) {\n                    switch (template) {\n                        case \"meta\": {\n                            break\n                        }\n                        default: {\n                            topErrors = [\n                                {\n                                    sourceId: top.id,\n                                    message: `unsupported handler block ${type}`,\n                                },\n                            ]\n                            console.debug(\n                                `unsupported handler template ${template} for ${type}`,\n                                { top }\n                            )\n                            break\n                        }\n                    }\n                }\n            } catch (e) {\n                console.debug(e)\n                if (e instanceof EmptyExpression) {\n                    return undefined\n                } else {\n                    throw e\n                }\n            }\n\n            // nothing to compile here\n            if (!command && !topErrors?.length) return undefined\n\n            const handler: VMHandler = {\n                commands: [\n                    {\n                        sourceId: top.id,\n                        type: \"cmd\",\n                        command,\n                    } as VMBase,\n                ],\n                errors: topErrors || [],\n                meta: !!topMeta,\n            }\n\n            addCommands(topEvent, top.children, handler)\n            return handler\n        })\n        .filter(handler => !!handler)\n\n    return {\n        roles,\n        serverRoles,\n        handlers,\n    }\n}\n"],"names":["VMFunctions","id","args","prompt","context","parseIntFloat","exprVisitor","parent","current","structVisit","Array","isArray","forEach","c","Object","keys","key","SpecSymbolResolver","spec","role2spec","error","reset","registers","events","roles","check","e","type","specResolve","ret","undefined","role","shortName","client","rest","object","obj","name","startsWith","property","indexOf","push","destructAccessPath","expectIdentifier","lookupEvent","resolve","_","packets","filter","pkt","kind","find","p","ev","lookupRegister","root","fld","lookupRegisterRaw","reg","getRegister","isBoolOrNumericFormat","packFormat","lookupReplace","child","replace","lookup","i","callee","k","val","lit","value","raw","toString","length","fields","f","VMChecker","resolver","supportedExpression","checkCommand","funs","cmdIndex","findIndex","r","theCommand","command","commands","processSpecCommandFunction","processTestFunction","arguments","arg","visitReplace","minArgs","argsRequiredOptional","maxArgs","newExpressions","def","concat","processTestArguments","optional","a","eventSymTable","argType","message","elements","member","computed","fmt","test","isRegister","lookupField","field","Error","serviceSpecificationFromClassIdentifier","serviceSpecificationFromName","assert","toIdentifier","toMemberExpression","handlerVisitor","handler","visitITE","visitCommand","visitBase","base","ite","else","then","compileProgram","serverRoles","handlers","newProgram","startBlock","map","h","removeIfThenElse","errors","checkCall","cmd","cid","shift","newSequence","labels","labelId","time","end","expr","pop","getServiceFromRole","info","roleFound","pair","serviceClass","checkProgram","prog","allErrors","goodHandlers","errorFun","sourceId","symbolResolver","checker","errorCount","s","split","register","event","DataColumnChooserField","DATA_SCIENCE_STATEMENT_TYPE","identityTransformData","calcOptions","postTransformData","palette","tidyResolveFieldColumn","tidyResolveFieldColumns","tidySlice","DataTableField","DataPreviewField","ScatterPlotField","DATA_ARRANGE_BLOCK","DATA_SELECT_BLOCK","DATA_DROP_BLOCK","DATA_FILTER_COLUMNS_BLOCK","DATA_FILTER_STRING_BLOCK","DATA_MUTATE_COLUMNS_BLOCK","DATA_MUTATE_NUMBER_BLOCK","DATA_SLICE_BLOCK","DATA_SUMMARIZE_BLOCK","DATA_SUMMARIZE_BY_GROUP_BLOCK","DATA_COUNT_BLOCK","DATA_BIN_BLOCK","DATA_CORRELATION_BLOCK","DATA_LINEAR_REGRESSION_BLOCK","DATA_COMMENT_BLOCK","operatorsColour","computeColour","statisticsColour","dataDsl","createBlocks","message0","colour","args0","KEY","options","previousStatement","nextStatement","dataPreviewField","transformData","b","data","column","order","getFieldValue","descending","Promise","template","columns","logic","spellcheck","text","rhs","dataType","newcolumn","lhs","calc","by","min","precision","count","operator","sliceHead","sliceTail","sliceSample","inputsInline","compare","transformed","small","passthroughData","column1","column2","linearRegression","createCategory","contents","CHANGE","inIFrame","randomDeviceId","workspaceToJSON","resolveBlockDefinition","setBlockDataWarning","IFrameDomainSpecificLanguage","targetOrigin","dslid","blocks","category","pendings","handleMessage","bind","post","action","extras","payload","Math","random","window","postMessage","mount","workspace","_workspace","addEventListener","removeEventListener","msg","pending","getTopBlocks","dsl","jacdacServices","emit","createTransformData","blockWithServices","dataset","blockId","setTimeout","console","warn","warning","bdata","debug","block","onWorkspaceJSONChange","json","onSave","file","createIFrameDSL","withPrefix","humanify","isNumericType","BuzzerCmd","JoystickReg","ServoReg","SRV_BOOTLOADER","SRV_BUZZER","SRV_CONTROL","SRV_JOYSTICK","SRV_LOGGER","SRV_PROTO_TEST","SRV_ROLE_MANAGER","SRV_SERVO","SystemReg","Flags","isHighLevelEvent","isHighLevelRegister","isCommand","isSensor","serviceSpecifications","arrayConcatMany","splitFilter","toMap","uniqueMap","NoteField","ServoAngleField","BOOLEAN_TYPE","CODE_STATEMENT_TYPE","JSON_TYPE","NUMBER_TYPE","STRING_TYPE","makeVMBase","Variables","paletteColorByIndex","SET_STATUS_LIGHT_BLOCK","ROLE_BOUND_EVENT_BLOCK","ROLE_BOUND_BLOCK","isBooleanField","isStringField","toBlocklyType","encoding","enumInfo","srv","enums","ignoredServices","customMessages","service","Direction","get","customShadows","identifier","Angle","shadow","SHADOW","PlayNote","lookupCustomShadow","cs","classIdentifier","fieldsSupported","every","fieldName","fieldToShadow","unit","defaultValue","typicalMin","absoluteMin","max","typicalMax","absoluteMax","variableName","camelName","toLowerCase","isEnabledRegister","customMessage","m","eventFieldGroups","output","toRoleType","parseRoleType","v","parseInt","fieldsToFieldInputs","fieldsToValues","fieldsToMessage","join","serviceHelp","shortId","sensorColor","otherColor","createServiceColor","theme","serviceColor","roleVariable","variable","variableTypes","defaultType","getServiceInfo","allServices","supportedServices","status","registerSimples","registerComposites","registerSimpleTypes","registerSimpleOthers","registerSimpleEnumTypes","einfo","registerCompositeEnumTypes","kv","lowLevel","ServicesBaseDSL","_serviceBlocks","_eventFieldBlocks","makeRegisterSimpleGetBlocks","tooltip","description","helpUrl","makeRegisterSetBlocks","values","makeRegisterChangeByEventBlocks","some","Intensity","makeRegisterNumericsGetBlocks","re","makeRegisterEnumGetBlocks","members","makeFieldBlocks","sps","worker","sp","createCategoryHelper","source","liveServices","blockServices","variables","vt","usedEvents","Set","definition","eventName","inputs","jdBlocks","services","toolboxServices","diagnostics","specification","sort","l","localeCompare","getFieldBlocks","fieldBlocks","has","makeCategory","isClient","serviceBlocks","eventFieldBLocks","callbackKey","callback","createVariableButtonHandler","eventFieldBlocks","serviceClient","sc","compileEventToVM","makeAwaitEvent","expression","blockToExpression","compileExpressionToVM","eventInfo","compileCommandToVM","exprsErrors","flatMap","serviceCommand","log","BUILTIN_TYPES","Blockly","resolveDsl","processErrors","workspaceJSONToVMProgram","dsls","EmptyExpression","blockIn","blockToExpressionInner","d","Blocks","res","blockToCommand","thenHandler","elseHandler","t","addCommands","children","exprErrors","ifThenElse","dslRes","nop","top","topEvent","topErrors","topMeta","meta"],"sourceRoot":""}