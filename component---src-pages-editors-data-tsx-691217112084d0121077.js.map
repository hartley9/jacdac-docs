{"version":3,"file":"component---src-pages-editors-data-tsx-691217112084d0121077.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/blockly/dsl/datadsl.ts","webpack://jacdac-docs/./src/components/hooks/useLocationSearchParam.ts","webpack://jacdac-docs/./src/components/blockly/dsl/iframedsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/datasetdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/datavardsl.ts","webpack://jacdac-docs/./src/components/data-science/DSBlockEditor.tsx","webpack://jacdac-docs/./src/pages/editors/data.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { Block } from \"blockly\"\nimport DataColumnChooserField from \"../fields/DataColumnChooserField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n    TextInputDefinition,\n    DataColumnInputDefinition,\n    DummyInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport postTransformData from \"./workers/data.proxy\"\nimport type {\n    DataSelectRequest,\n    DataDropRequest,\n    DataArrangeRequest,\n    DataFilterColumnsRequest,\n    DataFilterStringRequest,\n    DataSummarizeRequest,\n    DataSummarizeByGroupRequest,\n    DataMutateColumnsRequest,\n    DataMutateNumberRequest,\n    DataCountRequest,\n    DataBinRequest,\n    DataCorrelationRequest,\n    DataLinearRegressionRequest,\n} from \"../../../workers/data/dist/node_modules/data.worker\"\nimport palette from \"./palette\"\nimport {\n    tidyResolveFieldColumn,\n    tidyResolveFieldColumns,\n    tidySlice,\n} from \"../fields/tidy\"\nimport DataTableField from \"../fields/DataTableField\"\nimport DataPreviewField from \"../fields/DataPreviewField\"\nimport ScatterPlotField from \"../fields/chart/ScatterPlotField\"\n\nconst DATA_ARRANGE_BLOCK = \"data_arrange\"\nconst DATA_SELECT_BLOCK = \"data_select\"\nconst DATA_DROP_BLOCK = \"data_drop\"\nconst DATA_FILTER_COLUMNS_BLOCK = \"data_filter_columns\"\nconst DATA_FILTER_STRING_BLOCK = \"data_filter_string\"\nconst DATA_MUTATE_COLUMNS_BLOCK = \"data_mutate_columns\"\nconst DATA_MUTATE_NUMBER_BLOCK = \"data_mutate_number\"\nconst DATA_SLICE_BLOCK = \"data_slice\"\nconst DATA_SUMMARIZE_BLOCK = \"data_summarize\"\nconst DATA_SUMMARIZE_BY_GROUP_BLOCK = \"data_summarize_by_group\"\nconst DATA_COUNT_BLOCK = \"data_count\"\nconst DATA_BIN_BLOCK = \"data_bin\"\nconst DATA_CORRELATION_BLOCK = \"data_correlation\"\nconst DATA_LINEAR_REGRESSION_BLOCK = \"data_linear_regression\"\nconst DATA_COMMENT_BLOCK = \"data_comment_block\"\n\nconst [, operatorsColour, computeColour, statisticsColour] = palette()\nconst calcOptions = [\n    \"mean\",\n    \"median\",\n    \"min\",\n    \"max\",\n    \"sum\",\n    \"deviation\",\n    \"variance\",\n].map(n => [n, n])\nconst dataDsl: BlockDomainSpecificLanguage = {\n    id: \"dataScience\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: DATA_ARRANGE_BLOCK,\n            message0: \"arrange %1 %2\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"order\",\n                    options: [\n                        [\"ascending\", \"ascending\"],\n                        [\"descending\", \"descending\"],\n                    ],\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const order = b.getFieldValue(\"order\")\n                const descending = order === \"descending\"\n                if (!column) return Promise.resolve(data)\n                return postTransformData(<DataArrangeRequest>{\n                    type: \"arrange\",\n                    column,\n                    descending,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_DROP_BLOCK,\n            message0: \"drop %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column3\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2, 3]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                if (!columns?.length) return Promise.resolve(data)\n                return postTransformData(<DataDropRequest>{\n                    type: \"drop\",\n                    columns,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SELECT_BLOCK,\n            message0: \"select %1 %2 %3 %4\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column3\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column4\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2, 3, 4]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                if (!columns?.length) return Promise.resolve(data)\n                return postTransformData(<DataSelectRequest>{\n                    type: \"select\",\n                    columns,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_FILTER_COLUMNS_BLOCK,\n            message0: \"filter %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                const logic = b.getFieldValue(\"logic\")\n                if (columns.length !== 2) return Promise.resolve(data)\n                return postTransformData(<DataFilterColumnsRequest>{\n                    type: \"filter_columns\",\n                    columns,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_FILTER_STRING_BLOCK,\n            message0: \"filter %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"rhs\",\n                    spellcheck: false,\n                    text: \"0\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const logic = b.getFieldValue(\"logic\")\n                const rhs = b.getFieldValue(\"rhs\")\n                if (!column) return Promise.resolve(data)\n                return postTransformData(<DataFilterStringRequest>{\n                    type: \"filter_string\",\n                    column,\n                    logic,\n                    rhs,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_MUTATE_COLUMNS_BLOCK,\n            message0: \"compute column %1 as %2 %3 %4\",\n            colour: computeColour,\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"newcolumn\",\n                    spellcheck: false,\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"lhs\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\"+\", \"plus\"],\n                        [\"-\", \"minus\"],\n                        [\"*\", \"mult\"],\n                        [\"/\", \"div\"],\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"rhs\",\n                    dataType: \"number\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const newcolumn = b.getFieldValue(\"newcolumn\")\n                const lhs = tidyResolveFieldColumn(data, b, \"lhs\", {\n                    type: \"number\",\n                })\n                const rhs = tidyResolveFieldColumn(data, b, \"rhs\", {\n                    type: \"number\",\n                })\n                const logic = b.getFieldValue(\"logic\")\n                if (!newcolumn || !lhs || !rhs) return Promise.resolve(data)\n                return postTransformData(<DataMutateColumnsRequest>{\n                    type: \"mutate_columns\",\n                    newcolumn,\n                    lhs,\n                    rhs,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_MUTATE_NUMBER_BLOCK,\n            message0: \"compute column %1 as %2 %3 %4\",\n            colour: computeColour,\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"newcolumn\",\n                    spellcheck: false,\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"lhs\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\"+\", \"plus\"],\n                        [\"-\", \"minus\"],\n                        [\"*\", \"mult\"],\n                        [\"/\", \"div\"],\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"rhs\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: object[]) => {\n                const newcolumn = b.getFieldValue(\"newcolumn\")\n                const lhs = tidyResolveFieldColumn(data, b, \"lhs\", {\n                    type: \"number\",\n                })\n                const rhs = b.getFieldValue(\"rhs\")\n                const logic = b.getFieldValue(\"logic\")\n                if (!newcolumn || !lhs) return Promise.resolve(data)\n                return postTransformData(<DataMutateNumberRequest>{\n                    type: \"mutate_number\",\n                    newcolumn,\n                    lhs,\n                    rhs,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SUMMARIZE_BLOCK,\n            message0: \"summarize %1 calculate %2\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"calc\",\n                    options: calcOptions,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const columns = tidyResolveFieldColumns(\n                    data,\n                    b,\n                    \"column\",\n                    \"number\"\n                )\n                const calc = b.getFieldValue(\"calc\")\n                return postTransformData(<DataSummarizeRequest>{\n                    type: \"summarize\",\n                    columns,\n                    calc,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SUMMARIZE_BY_GROUP_BLOCK,\n            message0: \"group %1 by %2 calculate %3\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"by\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"calc\",\n                    options: calcOptions,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const by = tidyResolveFieldColumn(data, b, \"by\")\n                const calc = b.getFieldValue(\"calc\")\n                if (!by) return Promise.resolve([])\n                return postTransformData(<DataSummarizeByGroupRequest>{\n                    type: \"summarize_by_group\",\n                    column,\n                    by,\n                    calc,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SLICE_BLOCK,\n            message0: \"slice %1 rows from %2\",\n            colour: operatorsColour,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"count\",\n                    min: 1,\n                    precision: 1,\n                    value: 100,\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"operator\",\n                    options: [\n                        [\"head\", \"head\"],\n                        [\"tail\", \"tail\"],\n                        [\"sample\", \"sample\"],\n                    ],\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const count = b.getFieldValue(\"count\")\n                const operator = b.getFieldValue(\"operator\")\n                return tidySlice(data, {\n                    sliceHead: operator === \"head\" ? count : undefined,\n                    sliceTail: operator === \"tail\" ? count : undefined,\n                    sliceSample: operator === \"sample\" ? count : undefined,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_COUNT_BLOCK,\n            message0: \"count distinct %1\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                if (!column) return Promise.resolve([])\n                return postTransformData(<DataCountRequest>{\n                    type: \"count\",\n                    column,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_BIN_BLOCK,\n            message0: \"bin by %1\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                    dataType: \"number\",\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: computeColour,\n            template: \"meta\",\n            dataPreviewField: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\", {\n                    type: \"number\",\n                })\n                if (!column) return Promise.resolve([])\n                return postTransformData(<DataBinRequest>{\n                    type: \"bin\",\n                    column,\n                    data,\n                })\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_CORRELATION_BLOCK,\n            message0: \"correlation of %1 %2 %3 %4 %5\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"x\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"y\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                    compare: true,\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: DataTableField.KEY,\n                    name: \"table\",\n                    transformed: true,\n                    small: true,\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: statisticsColour,\n            template: \"meta\",\n            dataPreviewField: false,\n            passthroughData: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column1 = tidyResolveFieldColumn(data, b, \"x\", {\n                    type: \"number\",\n                })\n                const column2 = tidyResolveFieldColumn(data, b, \"y\", {\n                    type: \"number\",\n                })\n                if (!column1 || !column2) return Promise.resolve([])\n                return postTransformData(<DataCorrelationRequest>{\n                    type: \"correlation\",\n                    column1,\n                    column2,\n                    data,\n                })\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_LINEAR_REGRESSION_BLOCK,\n            message0: \"linear regression of x %1 y %2 %3 %4 %5\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"x\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"y\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                    compare: true,\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: ScatterPlotField.KEY,\n                    name: \"plot\",\n                    linearRegression: true,\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: statisticsColour,\n            template: \"meta\",\n            dataPreviewField: false,\n            passthroughData: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column1 = tidyResolveFieldColumn(data, b, \"x\", {\n                    type: \"number\",\n                })\n                const column2 = tidyResolveFieldColumn(data, b, \"y\", {\n                    type: \"number\",\n                })\n                if (!column1 || !column2) return Promise.resolve([])\n                return postTransformData(<DataLinearRegressionRequest>{\n                    type: \"linear_regression\",\n                    column1,\n                    column2,\n                    data,\n                })\n            },\n        },\n        {\n            kind: \"block\",\n            type: DATA_COMMENT_BLOCK,\n            message0: \"comment %1 %2 %3\",\n            args0: [\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: \"field_multilinetext\",\n                    name: \"text\",\n                    text: \"And then...\",\n                    spellcheck: true,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: operatorsColour,\n            template: \"meta\",\n            inputsInline: false,\n            dataPreviewField: false,\n            transformData: identityTransformData,\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Organize\",\n            colour: operatorsColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_COMMENT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_ARRANGE_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SELECT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DROP_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_FILTER_COLUMNS_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_FILTER_STRING_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SLICE_BLOCK,\n                },\n            ],\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Compute\",\n            colour: computeColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_MUTATE_COLUMNS_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_MUTATE_NUMBER_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SUMMARIZE_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SUMMARIZE_BY_GROUP_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_COUNT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_BIN_BLOCK,\n                },\n            ],\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Statistics\",\n            colour: statisticsColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_CORRELATION_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_LINEAR_REGRESSION_BLOCK,\n                },\n            ],\n        },\n    ],\n}\nexport default dataDsl\n","import { useMemo } from \"react\"\n\nexport function useLocationSearchParamString(key: string): string {\n    return useMemo(() => {\n        if (typeof window !== \"undefined\") {\n            const url = new URL(window.location.href)\n            return url.searchParams.get(key)\n        }\n        return undefined\n    }, [key])\n}\n\nexport function useLocationSearchParamBoolean(\n    key: string,\n    defaultValue: boolean\n): boolean {\n    return useMemo(() => {\n        if (typeof window !== \"undefined\") {\n            const url = new URL(window.location.href)\n            const v = url.searchParams.get(key)\n            console.log({ key, url, v })\n            if (v) {\n                if (v === \"1\" || v === \"true\" || v === \"yes\") return true\n                else if (v === \"0\" || v === \"false\" || v === \"no\") return false\n                else return defaultValue\n            }\n            // empty value means true\n            if (url.searchParams.has(key)) return true\n            return defaultValue\n        }\n        return undefined\n    }, [key, defaultValue])\n}\n","import { Block, Workspace } from \"blockly\"\nimport { CHANGE } from \"../../../../jacdac-ts/src/jdom/constants\"\nimport { inIFrame } from \"../../../../jacdac-ts/src/jdom/iframeclient\"\nimport { randomDeviceId } from \"../../../../jacdac-ts/src/jdom/random\"\nimport { workspaceToJSON } from \"../jsongenerator\"\nimport {\n    BlockDataSet,\n    BlockDataSetTransform,\n    BlockDefinition,\n    ContentDefinition,\n    resolveBlockDefinition,\n} from \"../toolbox\"\nimport { BlockWithServices, setBlockDataWarning } from \"../WorkspaceContext\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport { WorkspaceJSON } from \"./workspacejson\"\n\nexport interface DslMessage {\n    type?: \"dsl\"\n    id?: string\n    dslid: string\n    action:\n        | \"mount\"\n        | \"unmount\"\n        | \"blocks\"\n        | \"transform\"\n        | \"change\"\n        | \"workspace\"\n}\n\nexport interface DslBlocksResponse extends DslMessage {\n    action: \"blocks\"\n    blocks: BlockDefinition[]\n    category: ContentDefinition[]\n}\n\nexport interface DslTransformMessage extends DslMessage {\n    action: \"transform\"\n    blockId?: string\n    workspace?: WorkspaceJSON\n    dataset?: BlockDataSet\n}\n\nexport interface DslTransformResponse extends DslTransformMessage {\n    warning?: string\n}\n\nclass IFrameDomainSpecificLanguage implements BlockDomainSpecificLanguage {\n    private dslid = randomDeviceId()\n    private blocks: BlockDefinition[] = []\n    private category: ContentDefinition[] = []\n    private pendings: Record<string, (data: DslMessage) => void> = {}\n\n    private _workspace: Workspace\n\n    constructor(readonly id: string, readonly targetOrigin: string) {\n        this.handleMessage = this.handleMessage.bind(this)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    private post(action: string, extras?: object) {\n        const payload = {\n            id: Math.random() + \"\",\n            type: \"dsl\",\n            dslid: this.dslid,\n            action,\n            ...(extras || {}),\n        } as DslMessage\n        window.parent.postMessage(payload, this.targetOrigin)\n        return payload\n    }\n\n    mount(workspace: Workspace) {\n        this._workspace = workspace\n        window.addEventListener(\"message\", this.handleMessage, false)\n        this.post(\"mount\")\n        return () => {\n            this.post(\"unmount\")\n            this._workspace = undefined\n            window.removeEventListener(\"message\", this.handleMessage)\n        }\n    }\n\n    private handleMessage(msg: MessageEvent<DslMessage>) {\n        const { data } = msg\n        if (data.type === \"dsl\" && data.dslid === this.dslid) {\n            const { id, action } = data\n            // check for pending request\n            const pending = id !== undefined && this.pendings[id]\n            if (pending) {\n                delete this.pendings[id]\n                pending(data)\n            }\n            // trigger recomputation\n            switch (action) {\n                case \"change\": {\n                    //console.log(`iframedsl: change requested`)\n                    this._workspace\n                        .getTopBlocks(false)\n                        .filter(\n                            b => resolveBlockDefinition(b.type)?.dsl === this.id\n                        )\n                        .forEach((b: Block) => {\n                            //console.log(`change ${b.id}`)\n                            const { jacdacServices } = b as BlockWithServices\n                            jacdacServices.emit(CHANGE)\n                        })\n                    break\n                }\n                case \"workspace\": {\n                    break\n                }\n            }\n        }\n    }\n\n    private createTransformData(): BlockDataSetTransform {\n        return (blockWithServices, dataset) =>\n            new Promise<BlockDataSet>(resolve => {\n                const { id } = this.post(\"transform\", {\n                    blockId: blockWithServices.id,\n                    dataset,\n                })\n                setTimeout(() => {\n                    if (this.pendings[id]) {\n                        delete this.pendings[id]\n                        console.warn(`iframedsl: transform timeouted`)\n                        resolve(undefined)\n                    }\n                }, 10000)\n                this.pendings[id] = data => {\n                    const { dataset, warning } = data as DslTransformResponse\n                    if (warning) setBlockDataWarning(blockWithServices, warning)\n                    resolve(dataset)\n                }\n            })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    createBlocks(options: CreateBlocksOptions): Promise<BlockDefinition[]> {\n        return new Promise<BlockDefinition[]>(resolve => {\n            const { id } = this.post(\"blocks\")\n            setTimeout(() => {\n                if (this.pendings[id]) {\n                    delete this.pendings[id]\n                    console.warn(\n                        `iframedsl ${this.id}: no blocks returned, giving up`\n                    )\n                    resolve(this.blocks)\n                }\n            }, 3000)\n            this.pendings[id] = data => {\n                const bdata = data as DslBlocksResponse\n                this.blocks = bdata.blocks\n                this.category = bdata.category\n                console.debug(\n                    `iframedsl ${this.id}: loaded ${this.blocks?.length} blocks, ${this.category?.length} categories`\n                )\n                const transformData = this.createTransformData()\n                this.blocks.forEach(\n                    block => (block.transformData = transformData)\n                )\n                resolve(this.blocks)\n            }\n        })\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    createCategory(options: CreateCategoryOptions): ContentDefinition[] {\n        return this.category\n    }\n\n    visitWorkspaceJSON(\n        workspace: Workspace,\n        workspaceXml: string,\n        workspaceJSON: WorkspaceJSON\n    ) {\n        // TODO store editor id\n        this.post(\"workspace\", {\n            source: workspaceXml,\n            workspace: workspaceJSON,\n        })\n    }\n}\n\n/**\n * Creates an iframe DSL if applicable\n * @param targetOrigin\n * @returns\n */\nexport function createIFrameDSL(\n    id: string,\n    targetOrigin = \"*\"\n): BlockDomainSpecificLanguage {\n    return inIFrame() && new IFrameDomainSpecificLanguage(id, targetOrigin)\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Workspace, alert } from \"blockly\"\nimport BuiltinDataSetField from \"../fields/BuiltinDataSetField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    ButtonDefinition,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { resolveWorkspaceServices } from \"../WorkspaceContext\"\nimport FileSaveField from \"../fields/FileSaveField\"\nimport { saveCSV } from \"./workers/csv.proxy\"\nimport FileOpenField from \"../fields/FileOpenField\"\nimport palette from \"./palette\"\nimport { importCSVFilesIntoWorkspace } from \"../../fs/fs\"\n\nconst DATA_DATASET_BUILTIN_BLOCK = \"data_dataset_builtin\"\nconst DATA_ADD_DATASET_CALLBACK = \"data_add_dataset_variable\"\nconst DATA_LOAD_FILE_BLOCK = \"data_load_file\"\nconst DATA_SAVE_FILE_BLOCK = \"data_save_file\"\n\nconst [datasetColour] = palette()\nconst dataSetDsl: BlockDomainSpecificLanguage = {\n    id: \"dataSets\",\n    createBlocks: () => [\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_DATASET_BUILTIN_BLOCK,\n            message0: \"dataset %1\",\n            tooltip: \"Loads a builtin dataset\",\n            args0: [\n                {\n                    type: BuiltinDataSetField.KEY,\n                    name: \"dataset\",\n                },\n            ],\n            inputsInline: false,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: datasetColour,\n            template: \"meta\",\n            dataPreviewField: true,\n            transformData: identityTransformData,\n        },\n        {\n            kind: \"block\",\n            type: DATA_LOAD_FILE_BLOCK,\n            message0: \"load dataset from file %1\",\n            args0: [\n                {\n                    type: FileOpenField.KEY,\n                    name: \"file\",\n                },\n            ],\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: datasetColour,\n            template: \"meta\",\n            inputsInline: false,\n            dataPreviewField: true,\n            transformData: identityTransformData,\n        },\n        {\n            kind: \"block\",\n            type: DATA_SAVE_FILE_BLOCK,\n            message0: \"save dataset to file %1\",\n            args0: [\n                {\n                    type: FileSaveField.KEY,\n                    name: \"file\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: datasetColour,\n            template: \"meta\",\n            inputsInline: false,\n            dataPreviewField: \"after\",\n            transformData: async (block, data) => {\n                const file = block.getField(\"file\") as FileSaveField\n                if (file?.fileHandle && data)\n                    await saveCSV(file.fileHandle, data)\n                return data\n            },\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Data sets\",\n            colour: datasetColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DATASET_BUILTIN_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_LOAD_FILE_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SAVE_FILE_BLOCK,\n                },\n                <ButtonDefinition>{\n                    kind: \"button\",\n                    text: \"Import dataset\",\n                    callbackKey: DATA_ADD_DATASET_CALLBACK,\n                    callback: (workspace: Workspace) => {\n                        const services = resolveWorkspaceServices(workspace)\n                        const directory = services?.workingDirectory\n                        if (!directory)\n                            alert(\n                                \"You need to open a directory to import a dataset.\"\n                            )\n                        else {\n                            importCSVFilesIntoWorkspace(directory.handle)\n                                .then(() => directory.sync())\n                                .then(() => alert(\"Datasets imported!\"))\n                        }\n                    },\n                },\n            ],\n        },\n    ],\n}\nexport default dataSetDsl\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Block, Events, FieldVariable, Variables } from \"blockly\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    ButtonDefinition,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    VariableInputDefinition,\n    DATA_TABLE_TYPE,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { BlockWithServices, resolveBlockServices } from \"../WorkspaceContext\"\n\nconst DATA_ADD_VARIABLE_CALLBACK = \"data_add_variable\"\nconst DATA_DATAVARIABLE_READ_BLOCK = \"data_dataset_read\"\nconst DATA_DATAVARIABLE_WRITE_BLOCK = \"data_dataset_write\"\n\nconst dataVariablesColour = \"%{BKY_VARIABLES_HUE}\"\nconst dataVarDsl: BlockDomainSpecificLanguage = {\n    id: \"dataVariables\",\n    createBlocks: () => [\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_DATAVARIABLE_READ_BLOCK,\n            message0: \"dataset variable %1\",\n            args0: [\n                <VariableInputDefinition>{\n                    type: \"field_variable\",\n                    name: \"data\",\n                    variable: \"data\",\n                    variableTypes: [DATA_TABLE_TYPE],\n                    defaultType: DATA_TABLE_TYPE,\n                },\n            ],\n            inputsInline: false,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: dataVariablesColour,\n            template: \"meta\",\n            dataPreviewField: \"after\",\n            transformData: (b: Block) => {\n                const services = resolveBlockServices(b)\n                const data = services?.data\n                return Promise.resolve(data)\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_DATAVARIABLE_WRITE_BLOCK,\n            message0: \"store in dataset variable %1\",\n            args0: [\n                <VariableInputDefinition>{\n                    type: \"field_variable\",\n                    name: \"data\",\n                    variable: \"data\",\n                    variableTypes: [DATA_TABLE_TYPE],\n                    defaultType: DATA_TABLE_TYPE,\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: dataVariablesColour,\n            template: \"meta\",\n            dataPreviewField: \"after\",\n            transformData: (b: Block, data: object[]) => {\n                // grab the variable from the block\n                const variable = b.getFieldValue(\"data\")\n                if (!variable) return Promise.resolve(undefined)\n                const readBlocks = b.workspace.getBlocksByType(\n                    DATA_DATAVARIABLE_READ_BLOCK,\n                    false\n                )\n                const readServices = readBlocks\n                    .filter(b => b.isEnabled())\n                    .filter(b => b.getFieldValue(\"data\") === variable)\n                    .map(b => (b as BlockWithServices).jacdacServices)\n                    .filter(services => !!services)\n                readServices.forEach(services => (services.data = data))\n                return Promise.resolve(data)\n            },\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Data variables\",\n            colour: dataVariablesColour,\n            contents: [\n                <ButtonDefinition>{\n                    kind: \"button\",\n                    text: `Add dataset variable`,\n                    callbackKey: DATA_ADD_VARIABLE_CALLBACK,\n                    callback: workspace =>\n                        Variables.createVariableButtonHandler(\n                            workspace,\n                            null,\n                            DATA_TABLE_TYPE\n                        ),\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DATAVARIABLE_READ_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DATAVARIABLE_WRITE_BLOCK,\n                },\n            ],\n        },\n    ],\n    createWorkspaceChangeListener: () => (event: Events.Abstract) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const { type, blockId } = event as any\n        const isBlockChange =\n            type === Events.BLOCK_CHANGE || type === Events.BLOCK_MOVE\n\n        if (isBlockChange || type === Events.FINISHED_LOADING) {\n            const workspace = event.getEventWorkspace_()\n            if (isBlockChange) {\n                const block = workspace.getBlockById(blockId)\n                if (block?.type !== DATA_DATAVARIABLE_WRITE_BLOCK) return // nothing so see here\n            }\n\n            // collect set variables blocks,\n            // and make sure only 1 of them is enabled\n            const setvars = workspace\n                .getBlocksByType(DATA_DATAVARIABLE_WRITE_BLOCK, true)\n                .filter(b => b.isEnabled())\n\n            // mark and sweep variables, leaving one 1 enabled per kind\n            const marked = {}\n            while (setvars.length) {\n                const block = setvars.shift()\n                const variable = (\n                    block.getField(\"data\") as FieldVariable\n                ).getVariable()\n                if (variable) {\n                    const name = variable.name\n                    if (marked[name]) {\n                        if (block.isEnabled()) {\n                            block.setEnabled(false)\n                            block.unplug(true)\n                        }\n                    } else marked[name] = true\n                }\n            }\n        }\n    },\n}\nexport default dataVarDsl\n\nexport function resolveUsedDataVariables(block: Block): {\n    reads?: string[]\n    write?: string\n} {\n    const { type } = block\n    if (type === DATA_DATAVARIABLE_READ_BLOCK) {\n        const field = block.getField(\"data\") as FieldVariable\n        const variable = field.getVariable()\n        if (variable)\n            return {\n                reads: [variable.name],\n            }\n    } else if (type === DATA_DATAVARIABLE_WRITE_BLOCK) {\n        const field = block.getField(\"data\") as FieldVariable\n        const variable = field.getVariable()\n        if (variable)\n            return {\n                write: variable.name,\n            }\n    }\n\n    return {}\n}\n","import { Grid, NoSsr } from \"@material-ui/core\"\nimport React, { useContext, useMemo } from \"react\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { BlockProvider } from \"../blockly/BlockContext\"\nimport BlockDiagnostics from \"../blockly/BlockDiagnostics\"\nimport BlockEditor from \"../blockly/BlockEditor\"\nimport FileTabs from \"../fs/FileTabs\"\nimport { WorkspaceFile } from \"../blockly/dsl/workspacejson\"\nimport dataDsl from \"../blockly/dsl/datadsl\"\nimport chartDsl from \"../blockly/dsl/chartdsl\"\nimport fieldsDsl from \"../blockly/dsl/fieldsdsl\"\nimport { WORKSPACE_FILENAME } from \"../blockly/toolbox\"\nimport FileSystemContext from \"../FileSystemContext\"\nimport { createIFrameDSL } from \"../blockly/dsl/iframedsl\"\nimport { useLocationSearchParamBoolean } from \"../hooks/useLocationSearchParam\"\nimport dataSetDsl from \"../blockly/dsl/datasetdsl\"\nimport dataVarDsl from \"../blockly/dsl/datavardsl\"\n\nconst DS_EDITOR_ID = \"ds\"\nconst DS_SOURCE_STORAGE_KEY = \"tools:dseditor\"\nconst DS_NEW_FILE_CONTENT = JSON.stringify({\n    editor: DS_EDITOR_ID,\n    xml: \"\",\n} as WorkspaceFile)\n\nfunction DSEditorWithContext() {\n    const { fileSystem } = useContext(FileSystemContext)\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            {!!fileSystem && (\n                <Grid item xs={12}>\n                    <FileTabs\n                        newFileName={WORKSPACE_FILENAME}\n                        newFileContent={DS_NEW_FILE_CONTENT}\n                        hideFiles={true}\n                    />\n                </Grid>\n            )}\n            <Grid item xs={12}>\n                <BlockEditor editorId={DS_EDITOR_ID} />\n            </Grid>\n            {Flags.diagnostics && <BlockDiagnostics />}\n        </Grid>\n    )\n}\n\nexport default function DSBlockEditor() {\n    const dataSet = useLocationSearchParamBoolean(\"dataset\", true)\n    const dataVar = useLocationSearchParamBoolean(\"datavar\", true)\n    const dsls = useMemo(() => {\n        return [\n            dataSet && dataSetDsl,\n            dataDsl,\n            dataVar && dataVarDsl,\n            chartDsl,\n            fieldsDsl,\n            createIFrameDSL(\"host\", \"*\"),\n        ].filter(dsl => !!dsl)\n    }, [])\n\n    return (\n        <NoSsr>\n            <BlockProvider storageKey={DS_SOURCE_STORAGE_KEY} dsls={dsls}>\n                <DSEditorWithContext />\n            </BlockProvider>\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport DSBlockEditor from \"../../components/data-science/DSBlockEditor\"\n\nexport default function Page() {\n    return <DSBlockEditor />\n}\n"],"names":["DataColumnChooserField","DATA_SCIENCE_STATEMENT_TYPE","identityTransformData","postTransformData","palette","tidyResolveFieldColumn","tidyResolveFieldColumns","tidySlice","DataTableField","DataPreviewField","ScatterPlotField","DATA_ARRANGE_BLOCK","DATA_SELECT_BLOCK","DATA_DROP_BLOCK","DATA_FILTER_COLUMNS_BLOCK","DATA_FILTER_STRING_BLOCK","DATA_MUTATE_COLUMNS_BLOCK","DATA_MUTATE_NUMBER_BLOCK","DATA_SLICE_BLOCK","DATA_SUMMARIZE_BLOCK","DATA_SUMMARIZE_BY_GROUP_BLOCK","DATA_COUNT_BLOCK","DATA_BIN_BLOCK","DATA_CORRELATION_BLOCK","DATA_LINEAR_REGRESSION_BLOCK","DATA_COMMENT_BLOCK","operatorsColour","computeColour","statisticsColour","calcOptions","map","n","dataDsl","id","createBlocks","kind","type","message0","colour","args0","KEY","name","options","previousStatement","nextStatement","dataPreviewField","transformData","b","data","column","order","getFieldValue","descending","Promise","resolve","template","columns","filter","c","length","logic","spellcheck","text","rhs","dataType","newcolumn","lhs","calc","by","min","precision","value","count","operator","sliceHead","undefined","sliceTail","sliceSample","inputsInline","compare","transformed","small","passthroughData","column1","column2","linearRegression","createCategory","contents","useMemo","useLocationSearchParamString","key","window","url","URL","location","href","searchParams","get","useLocationSearchParamBoolean","defaultValue","v","console","log","has","CHANGE","inIFrame","randomDeviceId","resolveBlockDefinition","setBlockDataWarning","IFrameDomainSpecificLanguage","targetOrigin","dslid","blocks","category","pendings","handleMessage","bind","post","action","extras","payload","Math","random","parent","postMessage","mount","workspace","_workspace","addEventListener","removeEventListener","msg","pending","getTopBlocks","dsl","forEach","jacdacServices","emit","createTransformData","blockWithServices","dataset","blockId","setTimeout","warn","warning","bdata","debug","block","visitWorkspaceJSON","workspaceXml","workspaceJSON","source","createIFrameDSL","alert","BuiltinDataSetField","resolveWorkspaceServices","FileSaveField","saveCSV","FileOpenField","importCSVFilesIntoWorkspace","DATA_DATASET_BUILTIN_BLOCK","DATA_ADD_DATASET_CALLBACK","DATA_LOAD_FILE_BLOCK","DATA_SAVE_FILE_BLOCK","datasetColour","dataSetDsl","tooltip","file","getField","fileHandle","callbackKey","callback","services","directory","workingDirectory","handle","then","sync","Events","Variables","DATA_TABLE_TYPE","resolveBlockServices","DATA_ADD_VARIABLE_CALLBACK","DATA_DATAVARIABLE_READ_BLOCK","DATA_DATAVARIABLE_WRITE_BLOCK","dataVariablesColour","dataVarDsl","variable","variableTypes","defaultType","readBlocks","getBlocksByType","readServices","isEnabled","createVariableButtonHandler","createWorkspaceChangeListener","event","isBlockChange","BLOCK_CHANGE","BLOCK_MOVE","FINISHED_LOADING","getEventWorkspace_","getBlockById","setvars","marked","shift","getVariable","setEnabled","unplug","resolveUsedDataVariables","field","reads","write","Grid","NoSsr","React","useContext","Flags","BlockProvider","BlockDiagnostics","BlockEditor","FileTabs","chartDsl","fieldsDsl","WORKSPACE_FILENAME","FileSystemContext","DS_EDITOR_ID","DS_SOURCE_STORAGE_KEY","DS_NEW_FILE_CONTENT","JSON","stringify","editor","xml","DSEditorWithContext","fileSystem","diagnostics","DSBlockEditor","dataSet","dataVar","dsls","Page"],"sourceRoot":""}