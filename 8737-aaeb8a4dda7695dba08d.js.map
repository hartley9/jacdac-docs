{"version":3,"file":"8737-aaeb8a4dda7695dba08d.js","mappings":"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","sources":["webpack://jacdac-docs/./jacdac-ts/src/jdom/sensors.ts","webpack://jacdac-docs/./src/components/tools/DataStreamer.tsx"],"sourcesContent":["import JDBus from \"./bus\"\nimport { isSensor, serviceSpecifications } from \"./spec\"\nimport { toMap } from \"./utils\"\n\nlet _sensorSpecs: jdspec.ServiceSpec[]\n\n/**\n * Gets the list of sensor specifications available\n * @returns\n */\nexport function sensorSpecifications() {\n    if (!_sensorSpecs) {\n        _sensorSpecs = serviceSpecifications().filter(\n            srv => !srv.shortName.startsWith(\"_\") && isSensor(srv)\n        )\n    }\n    return _sensorSpecs\n}\n\n/**\n * Collects and flattens all sensor data into a serializable object\n * @param bus\n * @returns\n */\nexport function snapshotSensors(\n    bus: JDBus,\n    sparse?: boolean\n): Record<string, number[] | Record<string, number>[]> {\n    const r = toMap(\n        sensorSpecifications(),\n        srv => srv.camelName,\n        srv => {\n            const r = bus\n                .services({\n                    serviceClass: srv.classIdentifier,\n                    ignoreInfrastructure: true,\n                    announced: true,\n                })\n                .map(srv => {\n                    const reg = srv.readingRegister\n                    const spec = reg.specification\n                    return spec.fields.length === 1\n                        ? reg.unpackedValue?.[0] || 0\n                        : reg.objectValue || {}\n                })\n            return sparse && !r.length ? undefined : r\n        },\n        sparse\n    )\n    return r\n}\n","import React, { useContext } from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport useWindowEvent from \"../hooks/useWindowEvent\"\nimport { snapshotSensors } from \"../../../jacdac-ts/src/jdom/sensors\"\nimport { inIFrame } from \"../../../jacdac-ts/src/jdom/iframeclient\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\n\nexport default function DataStreamer() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n\n    useWindowEvent(\"message\", () => {\n        const upload = () => {\n            const sensors = snapshotSensors(bus, true)\n            const headers = arrayConcatMany(\n                Object.entries(sensors).map(([key, values]) =>\n                    new Array(values.length)\n                        .fill(0)\n                        .map((_, i) => `${key}${i + 1}`)\n                )\n            )\n            const values = arrayConcatMany(\n                Object.values(sensors).map(v => v as number[])\n            )\n            const msg = {\n                source: \"jacdac\",\n                type: \"datarow\",\n                sensors,\n                headers,\n                values,\n            }\n            console.log({ sensors, headers, values })\n            if (inIFrame()) window.parent.postMessage(msg, \"*\")\n        }\n\n        const id = setInterval(upload, 100)\n        return () => clearInterval(id)\n    })\n\n    return <div>data streamer</div>\n}\n"],"names":["isSensor","serviceSpecifications","toMap","_sensorSpecs","sensorSpecifications","filter","srv","shortName","startsWith","snapshotSensors","bus","sparse","r","camelName","services","serviceClass","classIdentifier","ignoreInfrastructure","announced","map","reg","readingRegister","spec","specification","fields","length","unpackedValue","objectValue","undefined","React","useContext","JacdacContext","useWindowEvent","inIFrame","arrayConcatMany","DataStreamer","upload","sensors","headers","Object","entries","key","values","Array","fill","_","i","v","msg","source","type","console","log","window","parent","postMessage","id","setInterval","clearInterval"],"sourceRoot":""}