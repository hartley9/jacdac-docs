{"version":3,"file":"component---src-pages-tools-speech-strings-tsx-957c17c8d231e90957b3.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Delete.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Share.js","webpack://jacdac-docs/./jacdac-ts/src/jdom/clients/settingsclient.ts","webpack://jacdac-docs/./src/components/alert/ConnectAlert.tsx","webpack://jacdac-docs/./src/components/hooks/useServices.ts","webpack://jacdac-docs/./src/components/ui/GridHeader.tsx","webpack://jacdac-docs/./src/components/useGridBreakpoints.ts","webpack://jacdac-docs/./src/components/useServiceClient.ts","webpack://jacdac-docs/./src/pages/tools/speech-strings.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z\"\n}), 'Share');\n\nexports.default = _default;","import { CHANGE, SettingsCmd } from \"../constants\"\nimport { jdpack, jdunpack } from \"../pack\"\nimport Packet from \"../packet\"\nimport { InPipeReader } from \"../pipes\"\nimport JDService from \"../service\"\nimport { JDServiceClient } from \"../serviceclient\"\nimport { bufferToString, stringToBuffer } from \"../utils\"\n\n/**\n * A settings service client implementation.\n * @category Clients\n */\nexport class SettingsClient extends JDServiceClient {\n    constructor(service: JDService) {\n        super(service)\n        service.registersUseAcks = true\n    }\n\n    async clear() {\n        await this.service.sendCmdAsync(SettingsCmd.Clear)\n    }\n\n    async listKeys(): Promise<string[]> {\n        const inp = new InPipeReader(this.bus)\n        await this.service.sendPacketAsync(\n            inp.openCommand(SettingsCmd.ListKeys),\n            true\n        )\n        const { output } = await inp.readAll()\n        const keys = output.map(pkt => pkt.stringData)\n        return keys.filter(k => !!k)\n    }\n\n    async list(): Promise<{ key: string; value?: Uint8Array }[]> {\n        const inp = new InPipeReader(this.bus)\n        await this.service.sendPacketAsync(\n            inp.openCommand(SettingsCmd.List),\n            true\n        )\n        const { output } = await inp.readAll()\n        return output\n            .map(pkt => {\n                const [key, value] = pkt.jdunpack<[string, Uint8Array]>(\"z b\")\n                return key && { key, value }\n            })\n            .filter(kv => !!kv)\n    }\n\n    async setValue(key: string, value: Uint8Array) {\n        key = key.trim()\n        if (value === undefined) {\n            await this.deleteValue(key)\n        } else {\n            const pkt = Packet.from(\n                SettingsCmd.Set,\n                jdpack(\"z b\", [key, value])\n            )\n            await this.service.sendPacketAsync(pkt)\n            this.emit(CHANGE)\n        }\n    }\n\n    async setStringValue(key: string, value: string) {\n        await this.setValue(key, value ? stringToBuffer(value) : undefined)\n    }\n\n    async getValue(key: string): Promise<Uint8Array> {\n        if (!key) return undefined\n\n        key = key.trim()\n        const pkt = Packet.from(SettingsCmd.Get, jdpack(\"s\", [key]))\n        const resp = await this.service.sendCmdAwaitResponseAsync(pkt)\n        const [rkey, value] = jdunpack<[string, Uint8Array]>(resp.data, \"z b\")\n        if (key !== rkey) {\n            console.error(\n                `device returned different key, got \"${rkey}\", expected \"${key}\"`\n            )\n            return undefined\n        }\n        return value\n    }\n\n    async getStringValue(key: string) {\n        const value = await this.getValue(key)\n        return value && bufferToString(value)\n    }\n\n    async deleteValue(key: string) {\n        if (!key) return\n        key = key.trim()\n        const pkt = Packet.from(SettingsCmd.Delete, jdpack(\"s\", [key]))\n        await this.service.sendPacketAsync(pkt)\n\n        this.emit(CHANGE)\n    }\n}\nexport default SettingsClient\n","// tslint:disable-next-line: no-submodule-imports\nimport { Box } from \"@mui/material\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport React, { useContext } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport { NoSsr } from \"@mui/material\"\nimport ConnectButtons from \"../buttons/ConnectButtons\"\nimport useDevices from \"../hooks/useDevices\"\n\nfunction NoSsrConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    const { serviceClass, closeable } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { transports } = bus\n    const devices = useDevices({ serviceClass, ignoreInfrastructure: true })\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n\n    // don't show if no transport, some devices\n    if (!transports.length || devices?.length) return null\n\n    return (\n        <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={closeable}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                <Box component=\"span\" ml={2}>\n                    <ConnectButtons full=\"always\" transparent={true} />\n                </Box>\n            </Alert>\n        </Box>\n    )\n}\n\nexport default function ConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    return (\n        <NoSsr>\n            <NoSsrConnectAlert {...props} />\n        </NoSsr>\n    )\n}\n","import { useContext } from \"react\"\nimport DeviceFilter from \"../../../jacdac-ts/src/jdom/filters/devicefilter\"\nimport ServiceFilter from \"../../../jacdac-ts/src/jdom/filters/servicefilter\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport useChange from \"../../jacdac/useChange\"\n\nexport default function useServices(options?: ServiceFilter & DeviceFilter) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const services = useChange(bus, _ => _?.services(options) || [], [\n        JSON.stringify(options),\n    ])\n    return services\n}\n","import { Box, Chip, Grid, Typography } from \"@mui/material\"\nimport { styled } from \"@mui/material/styles\"\nimport React from \"react\"\nimport clsx from \"clsx\"\n\nconst PREFIX = \"GridHeader\"\n\nconst classes = {\n    hr: `${PREFIX}-hr`,\n    start: `${PREFIX}-start`,\n}\n\nconst StyledGrid = styled(Grid)(({ theme }) => ({\n    [`& .${classes.hr}`]: {\n        background: theme.palette.text.disabled,\n        marginBottom: \"unset\",\n    },\n\n    [`& .${classes.start}`]: {\n        width: theme.spacing(2),\n    },\n}))\n\nexport default function GridHeader(props: {\n    title?: string\n    count?: number\n    variant?: \"subtitle1\" | \"caption\" | \"subtitle2\"\n    action?: JSX.Element\n}) {\n    const { title, count, variant, action } = props\n\n    return (\n        <StyledGrid item xs={12}>\n            <Grid\n                container\n                direction=\"row\"\n                spacing={1}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item>\n                    <hr className={clsx(classes.hr, classes.start)} />\n                </Grid>\n                <Grid item>\n                    {action && (\n                        <Box component=\"span\" mr={1}>\n                            {action}\n                        </Box>\n                    )}\n                    <Typography\n                        component=\"span\"\n                        variant={variant || \"subtitle1\"}\n                    >\n                        {title}\n                    </Typography>\n                    {count !== undefined && (\n                        <Box component=\"span\" ml={0.5}>\n                            <Chip label={count} />\n                        </Box>\n                    )}\n                </Grid>\n                <Grid item xs>\n                    <hr className={classes.hr} />\n                </Grid>\n            </Grid>\n        </StyledGrid>\n    )\n}\n","import { GridSize } from \"@mui/material\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize\n    md?: GridSize\n    sm?: GridSize\n    lg?: GridSize\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(\n    itemCount?: number\n): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n    const hasDrawer = drawerType !== DrawerType.None\n\n    if (!drawerType && itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2:\n                return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3:\n                return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (hasDrawer) return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else\n        return {\n            xs: 12,\n            sm: 6,\n            md: 4,\n            lg: 4,\n            xl: 3,\n        }\n}\n","import { useEffect, useState } from \"react\"\nimport JDService from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<T extends JDServiceClient>(\n    service: JDService,\n    factory: (service: JDService) => T,\n    deps: React.DependencyList = []\n) {\n    const [client, setClient] = useState<T>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, ...deps]) // don't use factory in cache!\n\n    return client\n}\n","import React, {\n    lazy,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from \"react\"\nimport { Card, CardActions, Grid, TextField } from \"@mui/material\"\nimport useChange from \"../../jacdac/useChange\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport { SRV_SETTINGS } from \"../../../jacdac-ts/src/jdom/constants\"\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport DeleteIcon from \"@mui/icons-material/Delete\"\nimport SettingsClient from \"../../../jacdac-ts/src/jdom/clients/settingsclient\"\nimport useServiceClient from \"../../components/useServiceClient\"\nimport { clone, debounce } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { jdpack, jdunpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport { randomDeviceId } from \"../../../jacdac-ts/src/jdom/random\"\nimport useServices from \"../../components/hooks/useServices\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport Alert from \"../../components/ui/Alert\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport useGridBreakpoints from \"../../components/useGridBreakpoints\"\nimport Suspense from \"../../components/ui/Suspense\"\nimport useServiceProviderFromServiceClass from \"../../components/hooks/useServiceProviderFromServiceClass\"\nimport AppContext from \"../../components/AppContext\"\nconst ImportButton = lazy(() => import(\"../../components/ImportButton\"))\nimport ServiceManagerContext from \"../../components/ServiceManagerContext\"\nimport ShareIcon from \"@mui/icons-material/Share\"\n\n// all settings keys are prefixed with this string\nconst PREFIX = \"@ph_\"\n// data layout format (18bytes)\nconst FORMAT = \"s\"\n// data layout types\ntype FORMAT_TYPE = [string]\n\ninterface Phrase {\n    key?: string\n    phrase: string\n}\n\nfunction phraseToBuffer(ev: Phrase) {\n    const payload = jdpack<FORMAT_TYPE>(FORMAT, [ev.phrase])\n\n    return payload\n}\n\nfunction bufferToPhrase(key: string, data: Uint8Array): Phrase {\n    const [phrase] = jdunpack<FORMAT_TYPE>(data, FORMAT)\n    return {\n        key,\n        phrase,\n    }\n}\n\nexport default function HIDEvents() {\n    const { setError } = useContext(AppContext)\n    const settingsServices = useServices({ serviceClass: SRV_SETTINGS })\n    const [settingsService, setSettingsService] = useState<JDService>()\n    const [phrases, setPhrases] = useState<Phrase[]>([])\n    const gridBreakpoints = useGridBreakpoints()\n    const exportRef = useRef()\n    const { fileStorage } = useContext(ServiceManagerContext)\n\n    const factory = useCallback(srv => new SettingsClient(srv), [])\n    const settings = useServiceClient(settingsService, factory)\n\n    useServiceProviderFromServiceClass(SRV_SETTINGS)\n    useChange(\n        settings,\n        debounce(async () => {\n            const phrs: Phrase[] = []\n            if (settings) {\n                const all = await settings.list()\n                for (const kv of all.filter(entry =>\n                    entry.key?.startsWith(PREFIX)\n                )) {\n                    const { key, value } = kv\n                    const he = bufferToPhrase(key, value)\n                    if (he) phrs.push(he)\n                }\n            }\n            // different? set the variable\n            if (JSON.stringify(phrs) !== JSON.stringify(phrases))\n                setPhrases(phrs)\n        }, 500)\n    )\n\n    const handlePhraseChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const index = Number.parseInt(event.target.id)\n        const phrase = phrases[index]\n        phrase.phrase = event.target.value\n        setPhrases(phrases.slice())\n    }\n\n    const handleAddPhrase = () => {\n        setPhrases([...phrases, { phrase: \"\" }])\n    }\n\n    const handleRemovePhrase = (index: number) => async () => {\n        const { key } = phrases[index]\n        if (key) await settings.deleteValue(key)\n        setPhrases([...phrases.slice(0, index), ...phrases.slice(index)])\n    }\n    const handleSelectSettingsService = (service: JDService) => () =>\n        setSettingsService(settingsService === service ? undefined : service)\n\n    const handleClearPhrases = async () => {\n        await Promise.all(\n            phrases\n                .filter(({ key }) => !!key)\n                .map(phrase => settings.deleteValue(phrase.key))\n        )\n        setPhrases([])\n    }\n\n    const handleSavePhrases = () => {\n        phrases.forEach(phrase => {\n            if (!phrase.key) phrase.key = PREFIX + randomDeviceId()\n            settings.setValue(phrase.key, phraseToBuffer(phrase))\n        })\n    }\n\n    const handleExport = () => {\n        fileStorage.saveText(\n            `phrases.json`,\n            JSON.stringify(\n                clone(phrases).map(h => {\n                    delete h.key\n                    return h\n                })\n            )\n        )\n    }\n\n    useEffect(() => {\n        if (exportRef.current)\n            (exportRef.current as HTMLAnchorElement).download = \"phrases.json\"\n    }, [exportRef.current])\n    const handleFilesUploaded = async (files: File[]) => {\n        for (const file of files) {\n            try {\n                const text = await file.text()\n                const json = JSON.parse(text)\n                if (Array.isArray(json)) {\n                    for (const phrase of json as Phrase[]) {\n                        const payload = phraseToBuffer(phrase)\n                        settings.setValue(PREFIX + randomDeviceId(), payload)\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n                setError(`invalid file ${file.name}`)\n            }\n        }\n    }\n    return (\n        <>\n            <h1>Phrase configurator</h1>\n            <Grid container spacing={1}>\n                <GridHeader title=\"Select a phrase storage device\" />\n                {!settingsServices?.length && (\n                    <Grid item xs>\n                        <ConnectAlert serviceClass={SRV_SETTINGS} />\n                    </Grid>\n                )}\n                {settingsServices\n                    .filter(srv => !settingsService || srv === settingsService)\n                    .map(srv => (\n                        <Grid item key={srv.id} {...gridBreakpoints}>\n                            <Card>\n                                <DeviceCardHeader\n                                    device={srv.device}\n                                    showAvatar={true}\n                                    showMedia={true}\n                                />\n                                <CardActions>\n                                    <Button\n                                        variant={\"outlined\"}\n                                        onClick={handleSelectSettingsService(\n                                            srv\n                                        )}\n                                    >\n                                        {settingsService === srv\n                                            ? \"unselect\"\n                                            : \"select\"}\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                {settings && (\n                    <>\n                        <GridHeader title=\"Phrase book\" />\n                        {!phrases?.length && (\n                            <Grid item xs>\n                                <Alert severity=\"info\">\n                                    No phrases yet! Click{\" \"}\n                                    <strong>Add phrase</strong> to start\n                                    building your phrase book.\n                                </Alert>\n                            </Grid>\n                        )}\n                        {phrases?.map(({ phrase }, index) => (\n                            <Grid item {...gridBreakpoints} key={index}>\n                                <TextField\n                                    value={phrase}\n                                    spellCheck={false}\n                                    helperText={\"Enter your phrase\"}\n                                    id={index.toString()}\n                                    onChange={handlePhraseChange}\n                                    multiline={false}\n                                    rows={1}\n                                    fullWidth={false}\n                                />\n                                <IconButtonWithTooltip\n                                    title=\"delete\"\n                                    onClick={handleRemovePhrase(index)}\n                                >\n                                    <DeleteIcon />\n                                </IconButtonWithTooltip>\n                            </Grid>\n                        ))}\n                        <Grid item xs={12}>\n                            <Grid container spacing={1}>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleAddPhrase}\n                                    >\n                                        Add phrase\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleSavePhrases}\n                                    >\n                                        Save all phrases\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        onClick={handleClearPhrases}\n                                    >\n                                        Clear all phrases\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        variant=\"outlined\"\n                                        onClick={handleExport}\n                                        startIcon={<ShareIcon />}\n                                    >\n                                        Export\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Suspense>\n                                        <ImportButton\n                                            icon={false}\n                                            text=\"Import\"\n                                            onFilesUploaded={\n                                                handleFilesUploaded\n                                            }\n                                            acceptedFiles={[\"application/json\"]}\n                                        />\n                                    </Suspense>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </>\n                )}\n            </Grid>\n        </>\n    )\n}\n"],"names":["CHANGE","SettingsCmd","jdpack","jdunpack","Packet","InPipeReader","JDServiceClient","bufferToString","stringToBuffer","SettingsClient","service","registersUseAcks","clear","sendCmdAsync","Clear","listKeys","inp","bus","sendPacketAsync","openCommand","ListKeys","output","readAll","keys","map","pkt","stringData","filter","k","list","List","key","value","kv","setValue","trim","undefined","deleteValue","from","Set","emit","setStringValue","getValue","Get","resp","sendCmdAwaitResponseAsync","rkey","data","console","error","getStringValue","Delete","Box","Alert","React","useContext","serviceSpecificationFromClassIdentifier","JacdacContext","NoSsr","ConnectButtons","useDevices","NoSsrConnectAlert","props","serviceClass","closeable","transports","devices","ignoreInfrastructure","spec","length","name","ConnectAlert","useChange","useServices","options","services","_","JSON","stringify","Chip","Grid","Typography","styled","clsx","PREFIX","classes","hr","start","StyledGrid","theme","background","palette","text","disabled","marginBottom","width","spacing","GridHeader","title","count","variant","action","AppContext","DrawerType","useGridBreakpoints","itemCount","drawerType","hasDrawer","None","xs","sm","md","lg","xl","useEffect","useState","useServiceClient","factory","deps","client","setClient","c","unmount","lazy","useCallback","useRef","Card","CardActions","TextField","SRV_SETTINGS","IconButtonWithTooltip","DeleteIcon","clone","debounce","randomDeviceId","Button","DeviceCardHeader","Suspense","useServiceProviderFromServiceClass","ImportButton","ServiceManagerContext","ShareIcon","FORMAT","phraseToBuffer","ev","payload","phrase","bufferToPhrase","HIDEvents","setError","settingsServices","settingsService","setSettingsService","phrases","setPhrases","gridBreakpoints","exportRef","fileStorage","srv","settings","phrs","all","entry","startsWith","he","push","handlePhraseChange","event","index","Number","parseInt","target","id","slice","handleAddPhrase","handleRemovePhrase","handleSelectSettingsService","handleClearPhrases","Promise","handleSavePhrases","forEach","handleExport","saveText","h","current","download","handleFilesUploaded","files","file","json","parse","Array","isArray","e","warn","device","toString"],"sourceRoot":""}