{"version":3,"file":"2833-6c4ba780e9d3f22718dc.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Check.js","webpack://jacdac-docs/./node_modules/@mui/material/CardActions/cardActionsClasses.js","webpack://jacdac-docs/./node_modules/@mui/material/CardActions/CardActions.js","webpack://jacdac-docs/./src/components/RandomGenerator.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"\n}), 'Check');\n\nexports.default = _default;","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nvar cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"disableSpacing\", \"className\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardActionsUtilityClass } from './cardActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = ownerState => {\n  var {\n    classes,\n    disableSpacing\n  } = ownerState;\n  var slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\n\nvar CardActionsRoot = styled('div', {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    var {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(_ref => {\n  var {\n    ownerState\n  } = _ref;\n  return _extends({\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  }, !ownerState.disableSpacing && {\n    '& > :not(:first-of-type)': {\n      marginLeft: 8\n    }\n  });\n});\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n\n  var {\n    disableSpacing = false,\n    className\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var ownerState = _extends({}, props, {\n    disableSpacing\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default CardActions;","import React, { useState } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../jacdac-ts/src/jdom/spec\"\nimport {\n    Card,\n    CardContent,\n    CardActions,\n    CardHeader,\n    Typography,\n    Input,\n} from \"@mui/material\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport CheckIcon from \"@mui/icons-material/Check\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"./ui/Alert\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport { NoSsr } from \"@mui/material\"\nimport { useId } from \"react-use-id-hook\"\nimport { cryptoRandomUint32 } from \"../../jacdac-ts/src/jdom/random\"\nimport { toFullHex } from \"../../jacdac-ts/src/jdom/utils\"\nimport useDeviceCatalog from \"./devices/useDeviceCatalog\"\n\nfunction looksRandom(n: number) {\n    const s = n.toString(16)\n    const h = \"0123456789abcdef\"\n    for (let i = 0; i < h.length; ++i) {\n        const hh = h[i]\n        if (s.indexOf(hh + hh + hh) >= 0) return false\n    }\n    if (/f00d|dead|deaf|beef/.test(s)) return false\n    return true\n}\n\nfunction genServId() {\n    const n = cryptoRandomUint32(1)\n    if (n === undefined) return undefined\n    return (n[0] & 0xfff_ffff) | 0x1000_0000\n}\n\nfunction genFirmwareId() {\n    const n = cryptoRandomUint32(1)\n    if (n === undefined) return undefined\n    return (n[0] & 0xfff_ffff) | 0x3000_0000\n}\n\nexport function uniqueServiceId() {\n    let id = genServId()\n    while (\n        id !== undefined &&\n        (!looksRandom(id) || serviceSpecificationFromClassIdentifier(id))\n    ) {\n        id = genServId()\n    }\n    return id !== undefined && toFullHex([id])\n}\n\nexport function uniqueDeviceId() {\n    const n = cryptoRandomUint32(2)\n    return n !== undefined && toFullHex([n[0], n[1]])\n}\n\nexport default function RandomGenerator(props: {\n    device?: boolean\n    firmware?: boolean\n}) {\n    const { device, firmware } = props\n    const labelId = useId()\n    const fieldId = useId()\n    const deviceCatalog = useDeviceCatalog()\n\n    const [value, setValue] = useState(\n        device ? uniqueDeviceId() : uniqueServiceId()\n    )\n    const [copySuccess, setCopySuccess] = useState(false)\n\n    const uniqueFirmwareId = () => {\n        let id = genFirmwareId()\n        while (\n            id !== undefined &&\n            (!looksRandom(id) ||\n                deviceCatalog.specificationFromProductIdentifier(id))\n        ) {\n            id = genFirmwareId()\n        }\n        return id !== undefined && toFullHex([id])\n    }\n    const handleRegenerate = () => {\n        const v = device\n            ? uniqueDeviceId()\n            : firmware\n            ? uniqueFirmwareId()\n            : uniqueServiceId()\n        setValue(v)\n        setCopySuccess(false)\n    }\n    const handleCopy = async () => {\n        try {\n            await navigator.clipboard.writeText(value)\n            setCopySuccess(true)\n        } catch (err) {\n            setCopySuccess(false)\n        }\n    }\n    const title = device\n        ? \"Random Device Identifier\"\n        : firmware\n        ? \"Random Product Identifier\"\n        : \"Random Service Identifier\"\n    return (\n        <NoSsr>\n            <Card>\n                <CardHeader title={title} />\n                <CardContent>\n                    {value !== undefined && (\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <Input\n                                id={fieldId}\n                                value={value}\n                                readOnly={true}\n                                inputProps={{\n                                    \"aria-labelledby\": labelId,\n                                }}\n                            />\n                            {copySuccess && <CheckIcon />}\n                        </Typography>\n                    )}\n                    {value === undefined && (\n                        <Alert severity=\"error\">\n                            Oops, unable to generate a strong random number.\n                        </Alert>\n                    )}\n                </CardContent>\n                <CardActions>\n                    <Button\n                        aria-label=\"copy random number to clipboard\"\n                        size=\"small\"\n                        variant=\"contained\"\n                        onClick={handleCopy}\n                    >\n                        Copy\n                    </Button>\n                    <Button\n                        aria-label=\"regenerate random number\"\n                        size=\"small\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleRegenerate}\n                    >\n                        Regenerate\n                    </Button>\n                </CardActions>\n            </Card>\n        </NoSsr>\n    )\n}\n"],"names":["React","useState","serviceSpecificationFromClassIdentifier","Card","CardContent","CardActions","CardHeader","Typography","Input","CheckIcon","Alert","Button","NoSsr","useId","cryptoRandomUint32","toFullHex","useDeviceCatalog","looksRandom","n","s","toString","h","i","length","hh","indexOf","test","genServId","undefined","genFirmwareId","uniqueServiceId","id","uniqueDeviceId","RandomGenerator","props","device","firmware","labelId","fieldId","deviceCatalog","value","setValue","copySuccess","setCopySuccess","uniqueFirmwareId","specificationFromProductIdentifier","handleRegenerate","v","handleCopy","navigator","clipboard","writeText","err","title"],"sourceRoot":""}