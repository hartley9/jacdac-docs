{"version":3,"file":"component---src-pages-tools-speech-strings-tsx-7fc6fca41171da7069fe.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Share.js","webpack://jacdac-docs/./src/components/ui/GridHeader.tsx","webpack://jacdac-docs/./src/components/useGridBreakpoints.ts","webpack://jacdac-docs/./src/pages/tools/speech-strings.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z\"\n}), 'Share');\n\nexports.default = _default;","import { Box, Chip, Grid, Typography } from \"@mui/material\"\nimport { styled } from \"@mui/material/styles\"\nimport React from \"react\"\nimport clsx from \"clsx\"\n\nconst PREFIX = \"GridHeader\"\n\nconst classes = {\n    hr: `${PREFIX}-hr`,\n    start: `${PREFIX}-start`,\n}\n\nconst StyledGrid = styled(Grid)(({ theme }) => ({\n    [`& .${classes.hr}`]: {\n        background: theme.palette.text.disabled,\n        marginBottom: \"unset\",\n    },\n\n    [`& .${classes.start}`]: {\n        width: theme.spacing(2),\n    },\n}))\n\nexport default function GridHeader(props: {\n    title?: string\n    count?: number\n    variant?: \"subtitle1\" | \"caption\" | \"subtitle2\"\n    action?: JSX.Element\n}) {\n    const { title, count, variant, action } = props\n\n    return (\n        <StyledGrid item xs={12}>\n            <Grid\n                container\n                direction=\"row\"\n                spacing={1}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item>\n                    <hr className={clsx(classes.hr, classes.start)} />\n                </Grid>\n                <Grid item>\n                    {action && (\n                        <Box component=\"span\" mr={1}>\n                            {action}\n                        </Box>\n                    )}\n                    <Typography\n                        component=\"span\"\n                        variant={variant || \"subtitle1\"}\n                    >\n                        {title}\n                    </Typography>\n                    {count !== undefined && (\n                        <Box component=\"span\" ml={0.5}>\n                            <Chip label={count} />\n                        </Box>\n                    )}\n                </Grid>\n                <Grid item xs>\n                    <hr className={classes.hr} />\n                </Grid>\n            </Grid>\n        </StyledGrid>\n    )\n}\n","import { GridSize } from \"@mui/material\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize\n    md?: GridSize\n    sm?: GridSize\n    lg?: GridSize\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(\n    itemCount?: number\n): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n    const hasDrawer = drawerType !== DrawerType.None\n\n    if (!drawerType && itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2:\n                return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3:\n                return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (hasDrawer) return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else\n        return {\n            xs: 12,\n            sm: 6,\n            md: 4,\n            lg: 4,\n            xl: 3,\n        }\n}\n","import React, {\n    lazy,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from \"react\"\nimport { Card, CardActions, Grid, TextField } from \"@mui/material\"\nimport useChange from \"../../jacdac/useChange\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport { SRV_SETTINGS } from \"../../../jacdac-ts/src/jdom/constants\"\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport DeleteIcon from \"@mui/icons-material/Delete\"\nimport SettingsClient from \"../../../jacdac-ts/src/jdom/clients/settingsclient\"\nimport useServiceClient from \"../../components/useServiceClient\"\nimport { clone, debounce } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { jdpack, jdunpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport { randomDeviceId } from \"../../../jacdac-ts/src/jdom/random\"\nimport useServices from \"../../components/hooks/useServices\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport Alert from \"../../components/ui/Alert\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport useGridBreakpoints from \"../../components/useGridBreakpoints\"\nimport Suspense from \"../../components/ui/Suspense\"\nimport useServiceProviderFromServiceClass from \"../../components/hooks/useServiceProviderFromServiceClass\"\nimport AppContext from \"../../components/AppContext\"\nconst ImportButton = lazy(() => import(\"../../components/ImportButton\"))\nimport ServiceManagerContext from \"../../components/ServiceManagerContext\"\nimport ShareIcon from \"@mui/icons-material/Share\"\n\n// all settings keys are prefixed with this string\nconst PREFIX = \"@ph_\"\n// data layout format (18bytes)\nconst FORMAT = \"s\"\n// data layout types\ntype FORMAT_TYPE = [string]\n\ninterface Phrase {\n    key?: string\n    phrase: string\n}\n\nfunction phraseToBuffer(ev: Phrase) {\n    const payload = jdpack<FORMAT_TYPE>(FORMAT, [ev.phrase])\n\n    return payload\n}\n\nfunction bufferToPhrase(key: string, data: Uint8Array): Phrase {\n    const [phrase] = jdunpack<FORMAT_TYPE>(data, FORMAT)\n    return {\n        key,\n        phrase,\n    }\n}\n\nexport default function HIDEvents() {\n    const { setError } = useContext(AppContext)\n    const settingsServices = useServices({ serviceClass: SRV_SETTINGS })\n    const [settingsService, setSettingsService] = useState<JDService>()\n    const [phrases, setPhrases] = useState<Phrase[]>([])\n    const gridBreakpoints = useGridBreakpoints()\n    const exportRef = useRef()\n    const { fileStorage } = useContext(ServiceManagerContext)\n\n    const factory = useCallback(srv => new SettingsClient(srv), [])\n    const settings = useServiceClient(settingsService, factory)\n\n    useServiceProviderFromServiceClass(SRV_SETTINGS)\n    useChange(\n        settings,\n        debounce(async () => {\n            const phrs: Phrase[] = []\n            if (settings) {\n                const all = await settings.list()\n                for (const kv of all.filter(entry =>\n                    entry.key?.startsWith(PREFIX)\n                )) {\n                    const { key, value } = kv\n                    const he = bufferToPhrase(key, value)\n                    if (he) phrs.push(he)\n                }\n            }\n            // different? set the variable\n            if (JSON.stringify(phrs) !== JSON.stringify(phrases))\n                setPhrases(phrs)\n        }, 500)\n    )\n\n    const handlePhraseChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const index = Number.parseInt(event.target.id)\n        const phrase = phrases[index]\n        phrase.phrase = event.target.value\n        setPhrases(phrases.slice())\n    }\n\n    const handleAddPhrase = () => {\n        setPhrases([...phrases, { phrase: \"\" }])\n    }\n\n    const handleRemovePhrase = (index: number) => async () => {\n        const { key } = phrases[index]\n        if (key) await settings.deleteValue(key)\n        setPhrases([...phrases.slice(0, index), ...phrases.slice(index)])\n    }\n    const handleSelectSettingsService = (service: JDService) => () =>\n        setSettingsService(settingsService === service ? undefined : service)\n\n    const handleClearPhrases = async () => {\n        await Promise.all(\n            phrases\n                .filter(({ key }) => !!key)\n                .map(phrase => settings.deleteValue(phrase.key))\n        )\n        setPhrases([])\n    }\n\n    const handleSavePhrases = () => {\n        phrases.forEach(phrase => {\n            if (!phrase.key) phrase.key = PREFIX + randomDeviceId()\n            settings.setValue(phrase.key, phraseToBuffer(phrase))\n        })\n    }\n\n    const handleExport = () => {\n        fileStorage.saveText(\n            `phrases.json`,\n            JSON.stringify(\n                clone(phrases).map(h => {\n                    delete h.key\n                    return h\n                })\n            )\n        )\n    }\n\n    useEffect(() => {\n        if (exportRef.current)\n            (exportRef.current as HTMLAnchorElement).download = \"phrases.json\"\n    }, [exportRef.current])\n    const handleFilesUploaded = async (files: File[]) => {\n        for (const file of files) {\n            try {\n                const text = await file.text()\n                const json = JSON.parse(text)\n                if (Array.isArray(json)) {\n                    for (const phrase of json as Phrase[]) {\n                        const payload = phraseToBuffer(phrase)\n                        settings.setValue(PREFIX + randomDeviceId(), payload)\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n                setError(`invalid file ${file.name}`)\n            }\n        }\n    }\n    return (\n        <>\n            <h1>Phrase configurator</h1>\n            <Grid container spacing={1}>\n                <GridHeader title=\"Select a phrase storage device\" />\n                {!settingsServices?.length && (\n                    <Grid item xs>\n                        <ConnectAlert serviceClass={SRV_SETTINGS} />\n                    </Grid>\n                )}\n                {settingsServices\n                    .filter(srv => !settingsService || srv === settingsService)\n                    .map(srv => (\n                        <Grid item key={srv.id} {...gridBreakpoints}>\n                            <Card>\n                                <DeviceCardHeader\n                                    device={srv.device}\n                                    showAvatar={true}\n                                    showMedia={true}\n                                />\n                                <CardActions>\n                                    <Button\n                                        variant={\"outlined\"}\n                                        onClick={handleSelectSettingsService(\n                                            srv\n                                        )}\n                                    >\n                                        {settingsService === srv\n                                            ? \"unselect\"\n                                            : \"select\"}\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                {settings && (\n                    <>\n                        <GridHeader title=\"Phrase book\" />\n                        {!phrases?.length && (\n                            <Grid item xs>\n                                <Alert severity=\"info\">\n                                    No phrases yet! Click{\" \"}\n                                    <strong>Add phrase</strong> to start\n                                    building your phrase book.\n                                </Alert>\n                            </Grid>\n                        )}\n                        {phrases?.map(({ phrase }, index) => (\n                            <Grid item {...gridBreakpoints} key={index}>\n                                <TextField\n                                    value={phrase}\n                                    spellCheck={false}\n                                    helperText={\"Enter your phrase\"}\n                                    id={index.toString()}\n                                    onChange={handlePhraseChange}\n                                    multiline={false}\n                                    rows={1}\n                                    fullWidth={false}\n                                />\n                                <IconButtonWithTooltip\n                                    title=\"delete\"\n                                    onClick={handleRemovePhrase(index)}\n                                >\n                                    <DeleteIcon />\n                                </IconButtonWithTooltip>\n                            </Grid>\n                        ))}\n                        <Grid item xs={12}>\n                            <Grid container spacing={1}>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleAddPhrase}\n                                    >\n                                        Add phrase\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleSavePhrases}\n                                    >\n                                        Save all phrases\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        onClick={handleClearPhrases}\n                                    >\n                                        Clear all phrases\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        variant=\"outlined\"\n                                        onClick={handleExport}\n                                        startIcon={<ShareIcon />}\n                                    >\n                                        Export\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Suspense>\n                                        <ImportButton\n                                            icon={false}\n                                            text=\"Import\"\n                                            onFilesUploaded={\n                                                handleFilesUploaded\n                                            }\n                                            acceptedFiles={[\"application/json\"]}\n                                        />\n                                    </Suspense>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </>\n                )}\n            </Grid>\n        </>\n    )\n}\n"],"names":["Box","Chip","Grid","Typography","styled","React","clsx","PREFIX","classes","hr","start","StyledGrid","theme","background","palette","text","disabled","marginBottom","width","spacing","GridHeader","props","title","count","variant","action","undefined","useContext","AppContext","DrawerType","useGridBreakpoints","itemCount","drawerType","hasDrawer","None","xs","sm","md","lg","xl","lazy","useCallback","useEffect","useRef","useState","Card","CardActions","TextField","useChange","SRV_SETTINGS","IconButtonWithTooltip","DeleteIcon","SettingsClient","useServiceClient","clone","debounce","jdpack","jdunpack","randomDeviceId","useServices","Button","Alert","ConnectAlert","DeviceCardHeader","Suspense","useServiceProviderFromServiceClass","ImportButton","ServiceManagerContext","ShareIcon","FORMAT","phraseToBuffer","ev","payload","phrase","bufferToPhrase","key","data","HIDEvents","setError","settingsServices","serviceClass","settingsService","setSettingsService","phrases","setPhrases","gridBreakpoints","exportRef","fileStorage","factory","srv","settings","phrs","all","list","kv","filter","entry","startsWith","value","he","push","JSON","stringify","handlePhraseChange","event","index","Number","parseInt","target","id","slice","handleAddPhrase","handleRemovePhrase","deleteValue","handleSelectSettingsService","service","handleClearPhrases","Promise","map","handleSavePhrases","forEach","setValue","handleExport","saveText","h","current","download","handleFilesUploaded","files","file","json","parse","Array","isArray","e","console","warn","name","length","device","toString"],"sourceRoot":""}