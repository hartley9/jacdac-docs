{"version":3,"file":"component---src-pages-editors-ml-tsx-b9c10c35e15aff53474a.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/blockly/dsl/shadowdsl.ts","webpack://jacdac-docs/./src/components/dialogs/mb/ModelBlockDialogs.tsx","webpack://jacdac-docs/./src/components/model-editor/ModelBlockEditor.tsx","webpack://jacdac-docs/./src/pages/editors/ml.tsx"],"sourcesContent":["import { Block } from \"blockly\"\nimport { SMap } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    ColorInputDefnition,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst builtins: SMap<(block: Block) => string | number | boolean> = {\n    jacdac_on_off: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_yes_no: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_time_picker: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_angle: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_percent: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_ratio: block => Number(block.getFieldValue(\"value\") || \"0\"),\n}\n\nconst shadowDsl: BlockDomainSpecificLanguage = {\n    id: \"shadow\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: `jacdac_on_off`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"enabled\", \"on\"],\n                        [\"disabled\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_yes_no`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"yes\", \"on\"],\n                        [\"no\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_time_picker`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"0.1\", \"0.1\"],\n                        [\"1\", \"1\"],\n                        [\"5\", \"5\"],\n                        [\"30\", \"30\"],\n                        [\"60\", \"60\"],\n                    ],\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_angle`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_angle\",\n                    name: \"value\",\n                    min: 0,\n                    max: 360,\n                    precision: 10,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_percent`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 100,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_byte`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 255,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_ratio`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 1,\n                    precision: 0.1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_color`,\n            message0: `%1`,\n            args0: [\n                <ColorInputDefnition>{\n                    type: \"field_colour\",\n                    name: \"col\",\n                    colour: \"#ff0000\",\n                    colourOptions: [\n                        \"#ff0000\",\n                        \"#ff8000\",\n                        \"#ffff00\",\n                        \"#ff9da5\",\n                        \"#00ff00\",\n                        \"#b09eff\",\n                        \"#00ffff\",\n                        \"#007fff\",\n                        \"#65471f\",\n                        \"#0000ff\",\n                        \"#7f00ff\",\n                        \"#ff0080\",\n                        \"#ff00ff\",\n                        \"#ffffff\",\n                        \"#999999\",\n                        \"#000000\",\n                    ],\n                    columns: 4,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Color\",\n        },\n    ],\n\n    blockToValue: block => builtins[block.type]?.(block),\n}\nexport default shadowDsl\n","import React, { lazy } from \"react\"\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\"\n\nimport Blockly, {\n    BlockSvg,\n    FieldVariable,\n    Variables,\n    WorkspaceSvg,\n} from \"blockly\"\nimport {\n    MODEL_BLOCKS,\n    MB_DATASET_VAR_TYPE,\n    MB_CLASSIFIER_VAR_TYPE,\n} from \"../../model-editor/modelblockdsl\"\n\nimport FieldDataSet from \"../../FieldDataSet\"\nimport MBModel from \"../../model-editor/MBModel\"\nimport MBDataSet from \"../../model-editor/MBDataSet\"\nimport Suspense from \"../../ui/Suspense\"\nimport useChartPalette from \"../../useChartPalette\"\n\nconst ViewDataDialog = lazy(() => import(\"./ViewDataDialog\"))\nconst RecordDataDialog = lazy(() => import(\"./RecordDataDialog\"))\nconst TrainModelDialog = lazy(() => import(\"./TrainModelDialog\"))\nconst TestModelDialog = lazy(() => import(\"./TestModelDialog\"))\nconst NewClassifierDialog = lazy(() => import(\"./NewClassifierDialog\"))\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            marginBottom: theme.spacing(1),\n        },\n        grow: {\n            flexGrow: 1,\n        },\n        field: {\n            marginRight: theme.spacing(1),\n            marginBottom: theme.spacing(1.5),\n            width: theme.spacing(25),\n        },\n        segment: {\n            marginTop: theme.spacing(2),\n            marginBottom: theme.spacing(2),\n        },\n        row: {\n            marginBottom: theme.spacing(0.5),\n        },\n        buttons: {\n            marginRight: theme.spacing(1),\n            marginBottom: theme.spacing(2),\n        },\n        trend: {\n            width: theme.spacing(10),\n        },\n        vmiddle: {\n            verticalAlign: \"middle\",\n        },\n    })\n)\n\n// handling dialogs within Blockly\nexport function addNewDataSet(workspace: WorkspaceSvg) {\n    // prompt user for dataset name\n    Blockly.prompt(\"Enter new dataset name:\", \"\", newDataSetName => {\n        // check if name is already used\n        if (newDataSetName != null && newDataSetName != undefined) {\n            if (\n                newDataSetName != \"\" &&\n                !Variables.nameUsedWithAnyType(newDataSetName, workspace)\n            ) {\n                // get or create new dataset typed variable\n                const newDataSetVar = workspace.createVariable(\n                    newDataSetName,\n                    MB_DATASET_VAR_TYPE\n                )\n\n                // create new dataset block on the workspace\n                const newDataSetBlock = workspace.newBlock(\n                    MODEL_BLOCKS + \"dataset\"\n                ) as BlockSvg\n\n                // automatically insert the variable name into the new block\n                const field = newDataSetBlock.getField(\n                    \"DATASET_NAME\"\n                ) as FieldVariable\n                field.setValue(newDataSetVar.getId())\n\n                // add new block to the screen\n                newDataSetBlock.initSvg()\n                newDataSetBlock.render(false)\n                workspace.centerOnBlock(newDataSetBlock.id)\n            } else {\n                setTimeout(\n                    () =>\n                        Blockly.alert(\n                            \"That variable name is invalid or already exists\"\n                        ),\n                    10\n                )\n            }\n        }\n    })\n}\n\n// TODO combine with peceding function to make less redundant\nexport function addNewClassifier(workspace: WorkspaceSvg) {\n    // prompt user for variable name\n    Blockly.prompt(`Enter new classifier name:`, ``, newVariableName => {\n        // check if name is already used\n        if (newVariableName != null && newVariableName != undefined) {\n            if (\n                newVariableName != \"\" &&\n                !Variables.nameUsedWithAnyType(newVariableName, workspace)\n            ) {\n                // get or create new classifier typed variable\n                workspace.createVariable(\n                    newVariableName,\n                    MB_CLASSIFIER_VAR_TYPE\n                )\n\n                // create new block with new classifier name\n                workspace.paste(\n                    Blockly.Xml.textToDom(\n                        `<block type=\"model_block_nn\"><field name=\"CLASSIFIER_NAME\" variabletype=\"ModelBlockClassifier\">${newVariableName}</field><field name=\"NN_TRAINING\" variabletype=\"ModelBlockDataSet\">dataset1</field><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"totalParams\":0,\"totalLayers\":0,\"totalSize\":0,\"runTimeInMs\":0,\"inputShape\":[0,0],\"optimizer\":\"adam\",\"numEpochs\":200,\"lossFn\":\"categoricalCrossentropy\",\"metrics\":\"acc\"}</field><field name=\"NN_BUTTONS\">{}</field></block>`\n                    )\n                )\n            } else {\n                setTimeout(\n                    () =>\n                        Blockly.alert(\n                            \"That variable name is invalid or already exists\"\n                        ),\n                    10\n                )\n            }\n        }\n    })\n}\n\nexport default function ModelBlockDialogs(props: {\n    visibleDialog: string\n    onRecordingDone: (recording: FieldDataSet[], blockId: string) => void\n    onModelUpdate: (model: MBModel, blockId: string) => void\n    closeModal: () => void\n    workspace: WorkspaceSvg\n    dataset: MBDataSet\n    model: MBModel\n    recordingCount: number\n    trainedModelCount: number\n}) {\n    const {\n        visibleDialog,\n        onRecordingDone,\n        onModelUpdate,\n        closeModal,\n        workspace,\n        dataset,\n        model,\n        recordingCount,\n        trainedModelCount,\n    } = props\n\n    const classes = useStyles()\n    const chartPalette = useChartPalette()\n\n    if (visibleDialog == \"dataset\") {\n        return (\n            <Suspense>\n                <ViewDataDialog\n                    classes={classes}\n                    chartPalette={chartPalette}\n                    open={visibleDialog == \"dataset\"}\n                    onDone={closeModal}\n                    dataset={dataset}\n                />\n            </Suspense>\n        )\n    } else if (visibleDialog == \"recording\") {\n        return (\n            <Suspense>\n                <RecordDataDialog\n                    classes={classes}\n                    chartPalette={chartPalette}\n                    open={visibleDialog == \"recording\"}\n                    onDone={onRecordingDone}\n                    recordingCount={recordingCount}\n                    workspace={workspace}\n                />\n            </Suspense>\n        )\n    } else if (visibleDialog == \"model\") {\n        return (\n            <Suspense>\n                <TrainModelDialog\n                    classes={classes}\n                    chartPalette={chartPalette}\n                    open={visibleDialog == \"model\"}\n                    onModelUpdate={onModelUpdate}\n                    onDone={closeModal}\n                    dataset={dataset}\n                    model={model}\n                    trainedModelCount={trainedModelCount}\n                    workspace={workspace}\n                />\n            </Suspense>\n        )\n    } else if (visibleDialog == \"trained_model\") {\n        return (\n            <Suspense>\n                <TestModelDialog\n                    classes={classes}\n                    chartPalette={chartPalette}\n                    open={visibleDialog == \"trained_model\"}\n                    onDone={closeModal}\n                    model={model}\n                />\n            </Suspense>\n        )\n    } else if (visibleDialog == \"classifier\") {\n        return (\n            <Suspense>\n                <NewClassifierDialog\n                    classes={classes}\n                    open={visibleDialog == \"classifier\"}\n                    onDone={closeModal}\n                    workspace={workspace}\n                />\n            </Suspense>\n        )\n    } else return null\n}\n","import React, { useContext, useEffect, useMemo, useState } from \"react\"\nimport { Grid, NoSsr } from \"@material-ui/core\"\nimport FileTabs from \"../fs/FileTabs\"\n\nimport BlockContext, { BlockProvider } from \"../blockly/BlockContext\"\nimport BlockEditor from \"../blockly/BlockEditor\"\nimport Blockly from \"blockly\"\nimport modelBlockDsl, { MODEL_BLOCKS } from \"./modelblockdsl\"\nimport shadowDsl from \"../blockly/dsl/shadowdsl\"\nimport fieldsDsl from \"../blockly/dsl/fieldsdsl\"\nimport BlockDiagnostics from \"../blockly/BlockDiagnostics\"\nimport { visitWorkspace } from \"../blockly/dsl/workspacevisitor\"\n\nimport {\n    BlockJSON,\n    WorkspaceFile,\n} from \"../blockly/dsl/workspacejson\"\nimport { WORKSPACE_FILENAME } from \"../blockly/toolbox\"\nimport FileSystemContext, { FileSystemProvider } from \"../FileSystemContext\"\nimport ServiceManagerContext from \"../ServiceManagerContext\"\nimport { resolveBlockServices } from \"../blockly/WorkspaceContext\"\n\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport Suspense from \"../ui/Suspense\"\nimport { visitToolbox, MB_WARNINGS_CATEGORY } from \"../blockly/toolbox\"\nimport FieldDataSet from \"../FieldDataSet\"\nimport ModelBlockDialogs, {\n    addNewDataSet,\n} from \"../dialogs/mb/ModelBlockDialogs\"\nimport MBModel, { MCU_FLOAT_SIZE, MCU_SPEED, validModelJSON } from \"./MBModel\"\nimport MBDataSet, { validDataSetJSON } from \"./MBDataSet\"\nimport { prepareModel, prepareDataSet } from \"./TrainModel\"\nimport ExpandModelBlockField from \"../blockly/fields/mb/ExpandModelBlockField\"\n\nconst MB_EDITOR_ID = \"mb\"\nconst MB_SOURCE_STORAGE_KEY = \"model-block-blockly-xml\"\nconst MB_DATA_STORAGE_KEY = \"model-block-data-json\"\nconst MB_NEW_FILE_CONTENT = JSON.stringify({\n    editor: MB_EDITOR_ID,\n    xml: \"\",\n} as WorkspaceFile)\n\nfunction getRecordingsFromLocalStorage() {\n    // check local storage for blocks\n    const dataObj = localStorage.getItem(MB_DATA_STORAGE_KEY)\n    if (dataObj == null || dataObj == undefined) return {}\n    const modelEditorData = JSON.parse(dataObj)\n\n    // add recordings from local storage\n    const rBlocks = {}\n    for (const id in modelEditorData[\"recordings\"]) {\n        const recordings = modelEditorData[\"recordings\"][id]\n        rBlocks[id] = recordings.map(recording => {\n            return FieldDataSet.createFromFile(recording)\n        })\n    }\n    return rBlocks\n}\nfunction getTrainedModelsFromLocalStorage() {\n    // check local storage for blocks\n    const dataObj = localStorage.getItem(MB_DATA_STORAGE_KEY)\n    if (dataObj == null || dataObj == undefined) return {}\n    const modelEditorData = JSON.parse(dataObj)\n\n    // add recordings from local storage\n    const mBlocks = {}\n    for (const id in modelEditorData[\"models\"]) {\n        const model = modelEditorData[\"models\"][id]\n        mBlocks[id] = MBModel.createFromFile(model)\n    }\n    return mBlocks\n}\n\nfunction getEmptyMap() {\n    return {}\n}\n\nfunction ModelBlockEditorWithContext(props: {\n    allRecordings: Record<string, FieldDataSet[]>\n    trainedModels: Record<string, MBModel>\n}) {\n    // block context handles hosting blockly\n    const { workspace, workspaceJSON, toolboxConfiguration } =\n        useContext(BlockContext)\n\n    const { fileSystem } = useContext(FileSystemContext)\n    const { fileStorage } = useContext(ServiceManagerContext)\n\n    /* For data storage */\n    const { allRecordings, trainedModels } = props\n    const [currentDataSet, setCurrentDataSet] = useState(undefined)\n    const [currentModel, setCurrentModel] = useState(undefined)\n    // dictionary of model vars and MBModel objs\n    const allModels = useMemo(getEmptyMap, [])\n    const allDataSets = useMemo(getEmptyMap, [])\n    const updateLocalStorage = (newRecordings, newTrainedModels) => {\n        const recordings = newRecordings || allRecordings\n        const models = newTrainedModels || trainedModels\n\n        // convert dataset object to JSON string\n        const modelBlocksDataJSON = JSON.stringify({\n            recordings: recordings,\n            models: models,\n        })\n        // save JSON string in local storage\n        localStorage.setItem(MB_DATA_STORAGE_KEY, modelBlocksDataJSON)\n    }\n\n    /* For workspace changes */\n    const modelBlocks = {}\n    const dataSetBlocks = {}\n    const updateDataSetBlocks = (block: BlockJSON) => {\n        const dataSetName =\n            block.inputs[0].fields[\"dataset_name\"].value?.toString()\n        if (dataSetName) {\n            if (dataSetName in dataSetBlocks) {\n                setWarning(\n                    workspace,\n                    block.id,\n                    \"Two dataset blocks cannot have the same name\"\n                )\n                setWarning(\n                    workspace,\n                    dataSetBlocks[dataSetName].id,\n                    \"Two dataset blocks cannot have the same name\"\n                )\n                delete dataSetBlocks[dataSetName]\n            } else dataSetBlocks[dataSetName] = block\n        }\n    }\n    const updateModelBlocks = (block: BlockJSON) => {\n        const modelName =\n            block.inputs[0].fields[\"classifier_name\"].value?.toString()\n        if (modelName) {\n            if (modelName in modelBlocks) {\n                setWarning(\n                    workspace,\n                    block.id,\n                    \"Two classifier blocks cannot have the same name\"\n                )\n                setWarning(\n                    workspace,\n                    modelBlocks[modelName].id,\n                    \"Two model blocks cannot have the same name\"\n                )\n                delete modelBlocks[modelName]\n            } else modelBlocks[modelName] = block\n        }\n    }\n    // clear warnings, collect datasets and models\n    useEffect(() => {\n        visitWorkspace(workspaceJSON, {\n            visitBlock: block => {\n                // clear warnings on block\n                setWarning(workspace, block.id, undefined)\n\n                // collect dataset blocks\n                if (block.type == MODEL_BLOCKS + \"dataset\") {\n                    updateDataSetBlocks(block)\n                }\n\n                // collect model blocks\n                if (block.type == MODEL_BLOCKS + \"nn\") {\n                    updateModelBlocks(block)\n                }\n            },\n        })\n    }, [workspace, workspaceJSON, modelBlocks, dataSetBlocks])\n\n    const assembleDataSet = (dataSetName: string) => {\n        // associate block with dataset\n        const dataSet: MBDataSet = new MBDataSet(dataSetName)\n        const dataSetBlock = dataSetBlocks[dataSetName]\n\n        // grab nested recording blocks and place them in the dataset\n        const recordingBlock = dataSetBlock?.inputs.filter(\n            input => input.name == \"LAYER_INPUTS\"\n        )[0].child\n        if (recordingBlock) {\n            let className = recordingBlock?.inputs[0].fields?.class_name?.value\n            allRecordings[recordingBlock.id].forEach(recording => {\n                dataSet.addRecording(recording, className, null)\n            })\n            recordingBlock.children?.forEach(childBlock => {\n                className = childBlock?.inputs[0].fields?.class_name?.value\n                allRecordings[childBlock.id].forEach(recording => {\n                    dataSet.addRecording(recording, className, null)\n                })\n            })\n        }\n\n        // store dataset in memory\n        allDataSets[dataSetName] = dataSet\n\n        return dataSet\n    }\n    const assembleModel = (modelName: string) => {\n        // associate block with model\n        const model: MBModel = allModels[modelName] || new MBModel(modelName)\n        const modelBlock = modelBlocks[modelName]\n\n        // if this model already existed from before\n        if (model.blockJSON) {\n            // make sure its contents line up with what's saved\n            // if not, mark the model as uncompiled / empty\n            if (JSON.stringify(modelBlock) != JSON.stringify(model.blockJSON)) {\n                model.parseBlockJSON = modelBlock\n                model.status = \"empty\"\n            }\n        } else model.parseBlockJSON = modelBlock\n\n        // store model in memory\n        allModels[modelName] = model\n\n        return model\n    }\n    const addParametersToDataSetBlock = (dataSet: MBDataSet) => {\n        const dataSetName = dataSet.name\n        const inputTypes = dataSet.inputTypes\n\n        const dataSetBlock = workspace.getBlockById(\n            dataSetBlocks[dataSetName].id\n        )\n\n        // update the parameters of the dataset\n        const paramField = dataSetBlock.getField(\n            \"EXPAND_BUTTON\"\n        ) as ExpandModelBlockField\n        paramField.updateFieldValue({\n            numSamples: dataSet.totalRecordings,\n            inputClasses: dataSet.labels,\n            inputTypes: inputTypes,\n            shape: [dataSet.length, dataSet.width],\n        })\n    }\n    const addParametersToModelBlock = (model: MBModel) => {\n        const modelName = model.name\n        const totalStats = model.modelStats.total\n        const layerStats = model.modelStats.layers\n\n        // update field parameters for each block in model\n        const modelBlock = workspace.getBlockById(modelBlocks[modelName].id)\n\n        if (modelBlock) {\n            const paramField = modelBlock.getField(\n                \"EXPAND_BUTTON\"\n            ) as ExpandModelBlockField\n\n            const totalModelSize = totalStats.codeBytes + totalStats.weightBytes\n            const totalModelParams = totalStats.weightBytes / MCU_FLOAT_SIZE\n            paramField.updateFieldValue({\n                totalLayers: layerStats.length,\n                inputShape: totalStats.inputShape,\n                runTimeInMs: totalStats.optimizedCycles / MCU_SPEED,\n                totalSize: totalModelSize,\n                totalParams: totalModelParams,\n            })\n\n            // go through layers\n            model.layerJSON.forEach((layer, idx) => {\n                const layerBlock = workspace.getBlockById(layer.id)\n\n                if (layerBlock) {\n                    const layerParamField = layerBlock.getField(\n                        \"EXPAND_BUTTON\"\n                    ) as ExpandModelBlockField\n\n                    const totalLayerSize =\n                        layerStats[idx].codeBytes + layerStats[idx].weightBytes\n                    const totalLayerParams =\n                        layerStats[idx].weightBytes / MCU_FLOAT_SIZE\n                    layerParamField.updateFieldValue({\n                        outputShape: layerStats[idx].outputShape,\n                        percentSize: (totalLayerSize * 100) / totalModelSize,\n                        percentParams:\n                            (totalLayerParams * 100) / totalModelParams,\n                        runTimeInMs:\n                            layerStats[idx].optimizedCycles / MCU_SPEED,\n                    })\n                }\n            })\n        } else\n            console.error(\"Could not locate block \", {\n                modelName: modelName,\n                id: modelBlocks[modelName].id,\n            })\n    }\n\n    useEffect(() => {\n        // compile datasets and set warnings if necessary\n        for (const dataSetName in dataSetBlocks) {\n            const dataSet: MBDataSet = assembleDataSet(dataSetName)\n\n            const dataSetWarnings = validDataSetJSON(dataSetBlocks[dataSetName])\n            if (dataSetWarnings) {\n                if (Object.keys(dataSetWarnings).length) {\n                    Object.keys(dataSetWarnings).forEach(blockId => {\n                        setWarning(workspace, blockId, dataSetWarnings[blockId])\n                    })\n                } else {\n                    prepareDataSet(dataSet)\n                    addParametersToDataSetBlock(dataSet)\n                }\n            }\n        }\n\n        // compile all models and set warnings if necessary\n        for (const modelName in modelBlocks) {\n            // grab the MBModel associated with a model name\n            const model: MBModel = assembleModel(modelName)\n\n            // grab the dataset that will be used to train the mbmodel\n            const dataSetName =\n                modelBlocks[modelName].inputs[1].fields[\n                    \"nn_training\"\n                ].value?.toString()\n            const trainingDataSet = allDataSets[dataSetName]\n\n            // make sure the dataset does not have warnings on it\n            const dataSetWarnings = validDataSetJSON(dataSetBlocks[dataSetName])\n            if (dataSetWarnings && !Object.keys(dataSetWarnings).length) {\n                // make sure the model (defined by the workspaceJSON) is valid\n                const modelWarnings = validModelJSON(model.blockJSON)\n\n                // if there are warnings, assign warnings to each block in the model\n                if (modelWarnings) {\n                    if (Object.keys(modelWarnings).length) {\n                        Object.keys(modelWarnings).forEach(blockId => {\n                            setWarning(\n                                workspace,\n                                blockId,\n                                modelWarnings[blockId]\n                            )\n                        })\n                    } else {\n                        // there are no warnings, compile the model\n                        prepareModel(\n                            model,\n                            trainingDataSet,\n                            addParametersToModelBlock\n                        )\n                    }\n                }\n            }\n        }\n    }, [workspace, workspaceJSON])\n\n    /* block services (warnings and data) */\n    const setWarning = (workspace, blockId: string, warningText: string) => {\n        const block = workspace.getBlockById(blockId)\n        const blockServices = resolveBlockServices(block)\n        if (blockServices)\n            blockServices.setWarning(MB_WARNINGS_CATEGORY, warningText)\n    }\n    const setData = (workspace, blockId: string, dataArray: any[]) => {\n        const block = workspace.getBlockById(blockId)\n        const blockServices = resolveBlockServices(block)\n        if (blockServices) blockServices.data = dataArray\n    }\n\n    /* For dialog handling */\n    const [visibleDialog, setVisibleDialog] = useState<\n        | \"dataset\"\n        | \"recording\"\n        | \"model\"\n        | \"trained_model\"\n        | \"classifier\"\n        | \"none\"\n    >(\"none\")\n    const toggleViewDataSetDialog = () => toggleDialog(\"dataset\")\n    const toggleRecordDataDialog = () => toggleDialog(\"recording\")\n    const toggleTrainModelDialog = () => toggleDialog(\"model\")\n    const toggleTestModelDialog = () => toggleDialog(\"trained_model\")\n    const toggleNewClassifierDialog = () => toggleDialog(\"classifier\")\n    const toggleDialog = (dialog: string) => {\n        if (dialog != \"none\") setVisibleDialog(dialog)\n        else setVisibleDialog(\"none\")\n    }\n    const closeModals = () => {\n        // reset dataset and model that gets passed to dialogs\n        setCurrentDataSet(undefined)\n        setCurrentModel(undefined)\n\n        // close dialog\n        toggleDialog(\"none\")\n    }\n    const buttonsWithDialogs = {\n        createNewDataSetButton: addNewDataSet,\n        createNewRecordingButton: toggleRecordDataDialog,\n        createNewClassifierButton: toggleNewClassifierDialog,\n    }\n    const openDataSetModal = (clickedBlock: Blockly.Block) => {\n        const dataSetName = clickedBlock.getField(\"DATASET_NAME\").getText()\n        const selectedDataset = allDataSets[dataSetName]\n\n        const dataSetWarnings = validDataSetJSON(dataSetBlocks[dataSetName])\n        if (!dataSetWarnings || Object.keys(dataSetWarnings).length) {\n            Blockly.alert(\n                \"This dataset cannot be opened. Address the warnings on the dataset definition block.\"\n            )\n        } else {\n            setCurrentDataSet(selectedDataset)\n\n            // open the view dataset modal\n            toggleViewDataSetDialog()\n        }\n    }\n\n    const closeRecordingModal = (\n        recording: FieldDataSet[],\n        blockId: string\n    ) => {\n        // save the new recording\n        if (recording && blockId) {\n            // Add recording data to list of recordings\n            allRecordings[blockId] = recording\n\n            updateLocalStorage(allRecordings, null)\n\n            // keep this info so this block can be duplicated\n            const newBlock = workspace.getBlockById(blockId)\n            const expandField = newBlock.getField(\n                \"EXPAND_BUTTON\"\n            ) as ExpandModelBlockField\n            expandField.updateFieldValue({ originalBlock: blockId })\n        }\n\n        // close dialog\n        closeModals()\n    }\n\n    const openTrainingModal = (clickedBlock: Blockly.Block) => {\n        // setup model for training\n        const modelName = clickedBlock.getField(\"CLASSIFIER_NAME\").getText()\n        const selectedModel: MBModel = allModels[modelName]\n\n        // setup dataset for training\n        const dataSetName = clickedBlock.getField(\"NN_TRAINING\").getText()\n        const selectedDataset = allDataSets[dataSetName]\n\n        const dataSetWarnings = validDataSetJSON(dataSetBlocks[dataSetName])\n        if (!dataSetWarnings || Object.keys(dataSetWarnings).length) {\n            Blockly.alert(\n                \"This model cannot be trained. Address the warnings on the dataset definition block.\"\n            )\n        } else {\n            const modelWarnings = validModelJSON(modelBlocks[modelName])\n            if (!modelWarnings || Object.keys(modelWarnings).length) {\n                Blockly.alert(\n                    \"This model cannot be trained. Address the warnings on model architecture block.\"\n                )\n            } else {\n                // update the model and dataset to pass to the modal\n                setCurrentModel(selectedModel)\n                setCurrentDataSet(selectedDataset)\n\n                // open the training modal\n                toggleTrainModelDialog()\n            }\n        }\n    }\n    const updateModel = (model: MBModel, blockId: string) => {\n        // Add trained model to record of allModels\n        if (model) allModels[model.name] = model\n\n        // Model was trained, add model to list of trained models\n        if (blockId) {\n            const trainedModel = MBModel.createFromFile(model.toJSON())\n            trainedModels[blockId] = trainedModel\n\n            // add dataset and model to new block\n            const newBlock = workspace.getBlockById(blockId)\n            const services = resolveBlockServices(newBlock)\n            services.data = [currentDataSet, trainedModel]\n\n            // keep this info so this block can be duplicated\n            const expandField = newBlock.getField(\n                \"TRAINED_MODEL_DISPLAY\"\n            ) as ExpandModelBlockField\n            expandField.updateFieldValue({ originalBlock: blockId })\n\n            updateLocalStorage(null, trainedModels)\n        }\n    }\n\n    const openTestingModal = (clickedBlock: Blockly.Block) => {\n        // setup model for training\n        const selectedModel: MBModel = trainedModels[clickedBlock.id]\n\n        if (selectedModel) {\n            // update the model and dataset to pass to the modal\n            setCurrentModel(selectedModel)\n\n            // open the training modal\n            toggleTestModelDialog()\n        }\n    }\n\n    /* For button callbacks */\n    useEffect(() => {\n        // register callbacks buttons with custom dialogs\n        visitToolbox(toolboxConfiguration, {\n            visitButton: btn => {\n                if (btn.callbackKey in buttonsWithDialogs) {\n                    btn.callback = workspace => {\n                        buttonsWithDialogs[btn.callbackKey](workspace)\n                    }\n                }\n            },\n        })\n    }, [toolboxConfiguration])\n\n    /* For block button clicks */\n    const resolveRecordingBlockInfo = (recordingBlock: Blockly.Block) => {\n        // get recording\n        let recording: FieldDataSet[] = allRecordings[recordingBlock.id]\n        if (!recording) {\n            // this block must be a duplicate, get the original block id\n            const originalBlockId = JSON.parse(\n                recordingBlock.getFieldValue(\"EXPAND_BUTTON\")\n            )[\"originalBlock\"]\n            recording = allRecordings[originalBlockId]\n\n            // add duplicate block to list of trained models\n            allRecordings[recordingBlock.id] = recording\n            updateLocalStorage(allRecordings, null)\n\n            const expandField = recordingBlock.getField(\n                \"EXPAND_BUTTON\"\n            ) as ExpandModelBlockField\n            expandField.updateFieldValue({\n                originalBlock: recordingBlock.id,\n            })\n        }\n        // add recording data to block\n        setData(workspace, recordingBlock.id, recording)\n    }\n    const resolveTrainedModelBlockInfo = (trainedModelBlock: Blockly.Block) => {\n        // get model\n        let model: MBModel = trainedModels[trainedModelBlock.id]\n        if (!model) {\n            // this block must be a duplicate, get the original block id\n            const originalBlockId = JSON.parse(\n                trainedModelBlock.getFieldValue(\"TRAINED_MODEL_DISPLAY\")\n            )[\"originalBlock\"]\n            model = trainedModels[originalBlockId]\n\n            // add duplicate block to list of trained models\n            trainedModels[trainedModelBlock.id] = model\n            updateLocalStorage(null, trainedModels)\n\n            const expandField = trainedModelBlock.getField(\n                \"TRAINED_MODEL_DISPLAY\"\n            ) as ExpandModelBlockField\n            expandField.updateFieldValue({\n                originalBlock: trainedModelBlock.id,\n            })\n        }\n\n        // get dataset\n        const dataSetName = trainedModelBlock\n            .getField(\"MODEL_TEST_SET\")\n            .getText()\n        let dataset = allDataSets[dataSetName]\n\n        if (dataset) {\n            const dataSetWarnings = validDataSetJSON(dataSetBlocks[dataSetName])\n            if (!dataSetWarnings || Object.keys(dataSetWarnings).length) {\n                setWarning(\n                    workspace,\n                    trainedModelBlock.id,\n                    \"This dataset cannot be tested. Address the warnings on the dataset definition block.\"\n                )\n                dataset = undefined\n            }\n        }\n\n        if (dataset && model)\n            setData(workspace, trainedModelBlock.id, [\n                dataset,\n                model,\n                fileStorage,\n            ])\n    }\n    const handleWorkspaceChange = event => {\n        if (event.type == Blockly.Events.BLOCK_DELETE) {\n            event.ids.forEach(blockId => {\n                delete allRecordings[blockId]\n                delete trainedModels[blockId]\n            })\n            updateLocalStorage(allRecordings, trainedModels)\n        } else if (event.type == Blockly.Events.BLOCK_CREATE && event.ids) {\n            // add info to newly created recording and trained model blocks\n            event.ids.forEach(blockId => {\n                const createdBlock = workspace.getBlockById(blockId)\n                if (createdBlock.type == \"model_block_trained_nn\")\n                    resolveTrainedModelBlockInfo(createdBlock)\n                else if (createdBlock.type == \"model_block_recording\")\n                    resolveRecordingBlockInfo(createdBlock)\n            })\n        } else if (event.type == Blockly.Events.CLICK && event.blockId) {\n            const clickedBlock = workspace.getBlockById(event.blockId)\n            if (clickedBlock.data && clickedBlock.data.startsWith(\"click\")) {\n                const command = clickedBlock.data.split(\".\")[1]\n                if (command == \"download\") {\n                    const recording = allRecordings[clickedBlock.id]\n                    // find the correct recording, dataset, or model to download\n                    if (recording) {\n                        // get recording, recording name, and class name\n                        const className = clickedBlock\n                            .getField(\"CLASS_NAME\")\n                            .getText()\n                        downloadRecordings(recording, className)\n                    } else {\n                        // we have a model or dataset\n                        if (clickedBlock.type == MODEL_BLOCKS + \"dataset\") {\n                            const dataSetName = clickedBlock\n                                .getField(\"DATASET_NAME\")\n                                .getText()\n                            const dataSet = allDataSets[dataSetName]\n                            downloadFile(dataSet.toCSV(), dataSetName, \"csv\")\n                        } else if (clickedBlock.type == MODEL_BLOCKS + \"nn\") {\n                            const modelName = clickedBlock\n                                .getField(\"CLASSIFIER_NAME\")\n                                .getText()\n                            const model: MBModel = allModels[modelName]\n                            downloadFile(\n                                JSON.stringify(model),\n                                modelName,\n                                \"json\"\n                            )\n                        } else if (\n                            clickedBlock.type ==\n                            MODEL_BLOCKS + \"trained_nn\"\n                        ) {\n                            const model: MBModel =\n                                trainedModels[clickedBlock.id]\n                            downloadFile(\n                                JSON.stringify(model),\n                                model.name,\n                                \"json\"\n                            )\n                        }\n                    }\n                } else if (command == \"edit\") {\n                    openDataSetModal(clickedBlock)\n                } else if (command == \"train\") {\n                    openTrainingModal(clickedBlock)\n                } else if (command == \"view\") {\n                    openTestingModal(clickedBlock)\n                }\n                // clear the command\n                clickedBlock.data = null\n            }\n        } else if (event.type == Blockly.Events.BLOCK_CHANGE && event.blockId) {\n            // update trained model blocks on dropdown changes\n            const changedBlock = workspace.getBlockById(event.blockId)\n            if (changedBlock.data && changedBlock.data.startsWith(\"click\")) {\n                const command = changedBlock.data.split(\".\")[1]\n                if (command == \"refreshdisplay\") {\n                    resolveTrainedModelBlockInfo(changedBlock)\n                }\n                // clear the command\n                changedBlock.data = null\n            }\n        }\n    }\n    const downloadRecordings = (\n        recordings: FieldDataSet[],\n        className: string\n    ) => {\n        const recordingCountHeader = `Number of recordings,${recordings.length}`\n\n        const recordingData: string[] = []\n        recordings.forEach(sample => {\n            recordingData.push(\n                \"Recording metadata,\" +\n                    sample.name +\n                    \",\" +\n                    sample.rows.length +\n                    \",\" +\n                    className\n            )\n            recordingData.push(sample.toCSV())\n        })\n        const recordData = recordingData.join(\"\\n\")\n\n        const csv: string[] = [recordingCountHeader, recordData]\n        downloadFile(csv.join(\"\\n\"), recordings[0].name, \"csv\")\n    }\n    const downloadFile = (\n        content: string,\n        fileName: string,\n        fileType: string\n    ) => {\n        fileStorage.saveText(`${fileName}.${fileType}`, content)\n    }\n    useEffect(() => {\n        if (workspace) workspace.addChangeListener(handleWorkspaceChange)\n\n        return () => {\n            if (workspace) workspace.removeChangeListener(handleWorkspaceChange)\n        }\n    }, [workspace, workspaceJSON])\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            {!!fileSystem && (\n                <Grid item xs={12}>\n                    <FileTabs\n                        newFileName={WORKSPACE_FILENAME}\n                        newFileContent={MB_NEW_FILE_CONTENT}\n                        hideFiles={true}\n                    />\n                </Grid>\n            )}\n            <Grid item xs={12}>\n                <BlockEditor editorId={MB_EDITOR_ID} />\n                {Flags.diagnostics && <BlockDiagnostics />}\n                <Suspense>\n                    <ModelBlockDialogs\n                        visibleDialog={visibleDialog}\n                        onRecordingDone={closeRecordingModal}\n                        onModelUpdate={updateModel}\n                        closeModal={closeModals}\n                        workspace={workspace}\n                        dataset={currentDataSet}\n                        model={currentModel}\n                        recordingCount={Object.keys(allRecordings).length}\n                        trainedModelCount={Object.keys(trainedModels).length}\n                    />\n                </Suspense>\n            </Grid>\n            {Flags.diagnostics && <BlockDiagnostics />}\n        </Grid>\n    )\n}\n\nexport default function ModelBlockEditor() {\n    const dsls = useMemo(() => {\n        return [modelBlockDsl, shadowDsl, fieldsDsl]\n    }, [])\n\n    const recordings = getRecordingsFromLocalStorage()\n    const models = getTrainedModelsFromLocalStorage()\n\n    return (\n        <NoSsr>\n            <FileSystemProvider>\n                <BlockProvider storageKey={MB_SOURCE_STORAGE_KEY} dsls={dsls}>\n                    <ModelBlockEditorWithContext\n                        allRecordings={recordings}\n                        trainedModels={models}\n                    />\n                </BlockProvider>\n            </FileSystemProvider>\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport ModelBlockEditor from \"../../components/model-editor/ModelBlockEditor\"\n\nexport default function Page() {\n    return <ModelBlockEditor />\n}\n"],"names":["builtins","jacdac_on_off","block","getFieldValue","jacdac_yes_no","jacdac_time_picker","Number","jacdac_angle","jacdac_percent","jacdac_ratio","shadowDsl","id","createBlocks","kind","type","message0","args0","name","options","style","output","min","max","precision","colour","colourOptions","columns","blockToValue","React","lazy","createStyles","makeStyles","Blockly","Variables","MODEL_BLOCKS","MB_DATASET_VAR_TYPE","MB_CLASSIFIER_VAR_TYPE","Suspense","useChartPalette","ViewDataDialog","RecordDataDialog","TrainModelDialog","TestModelDialog","NewClassifierDialog","useStyles","theme","root","marginBottom","spacing","grow","flexGrow","field","marginRight","width","segment","marginTop","row","buttons","trend","vmiddle","verticalAlign","addNewDataSet","workspace","prompt","newDataSetName","undefined","nameUsedWithAnyType","newDataSetVar","createVariable","newDataSetBlock","newBlock","getField","setValue","getId","initSvg","render","centerOnBlock","setTimeout","alert","addNewClassifier","newVariableName","paste","Xml","textToDom","ModelBlockDialogs","props","visibleDialog","onRecordingDone","onModelUpdate","closeModal","dataset","model","recordingCount","trainedModelCount","classes","chartPalette","useContext","useEffect","useMemo","useState","Grid","NoSsr","FileTabs","BlockContext","BlockProvider","BlockEditor","modelBlockDsl","fieldsDsl","BlockDiagnostics","visitWorkspace","WORKSPACE_FILENAME","FileSystemContext","FileSystemProvider","ServiceManagerContext","resolveBlockServices","Flags","visitToolbox","MB_WARNINGS_CATEGORY","FieldDataSet","MBModel","MCU_FLOAT_SIZE","MCU_SPEED","validModelJSON","MBDataSet","validDataSetJSON","prepareModel","prepareDataSet","MB_EDITOR_ID","MB_SOURCE_STORAGE_KEY","MB_DATA_STORAGE_KEY","MB_NEW_FILE_CONTENT","JSON","stringify","editor","xml","getRecordingsFromLocalStorage","dataObj","localStorage","getItem","modelEditorData","parse","rBlocks","recordings","map","recording","createFromFile","getTrainedModelsFromLocalStorage","mBlocks","getEmptyMap","ModelBlockEditorWithContext","workspaceJSON","toolboxConfiguration","fileSystem","fileStorage","allRecordings","trainedModels","currentDataSet","setCurrentDataSet","currentModel","setCurrentModel","allModels","allDataSets","updateLocalStorage","newRecordings","newTrainedModels","models","modelBlocksDataJSON","setItem","modelBlocks","dataSetBlocks","updateDataSetBlocks","dataSetName","inputs","fields","value","toString","setWarning","updateModelBlocks","modelName","visitBlock","assembleDataSet","dataSet","dataSetBlock","recordingBlock","filter","input","child","className","class_name","forEach","addRecording","children","childBlock","assembleModel","modelBlock","blockJSON","parseBlockJSON","status","addParametersToDataSetBlock","inputTypes","getBlockById","paramField","updateFieldValue","numSamples","totalRecordings","inputClasses","labels","shape","length","addParametersToModelBlock","totalStats","modelStats","total","layerStats","layers","totalModelSize","codeBytes","weightBytes","totalModelParams","totalLayers","inputShape","runTimeInMs","optimizedCycles","totalSize","totalParams","layerJSON","layer","idx","layerBlock","layerParamField","totalLayerSize","totalLayerParams","outputShape","percentSize","percentParams","console","error","dataSetWarnings","Object","keys","blockId","trainingDataSet","modelWarnings","warningText","blockServices","setData","dataArray","data","setVisibleDialog","toggleViewDataSetDialog","toggleDialog","toggleRecordDataDialog","toggleTrainModelDialog","toggleTestModelDialog","toggleNewClassifierDialog","dialog","closeModals","buttonsWithDialogs","createNewDataSetButton","createNewRecordingButton","createNewClassifierButton","openDataSetModal","clickedBlock","getText","selectedDataset","closeRecordingModal","expandField","originalBlock","openTrainingModal","selectedModel","updateModel","trainedModel","toJSON","services","openTestingModal","visitButton","btn","callbackKey","callback","resolveRecordingBlockInfo","originalBlockId","resolveTrainedModelBlockInfo","trainedModelBlock","handleWorkspaceChange","event","Events","BLOCK_DELETE","ids","BLOCK_CREATE","createdBlock","CLICK","startsWith","command","split","downloadRecordings","downloadFile","toCSV","BLOCK_CHANGE","changedBlock","recordingCountHeader","recordingData","sample","push","rows","recordData","join","csv","content","fileName","fileType","saveText","addChangeListener","removeChangeListener","diagnostics","ModelBlockEditor","dsls","Page"],"sourceRoot":""}