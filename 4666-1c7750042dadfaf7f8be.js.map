{"version":3,"file":"4666-1c7750042dadfaf7f8be.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/hooks/useMicrophoneSpectrum.ts","webpack://jacdac-docs/./src/components/widgets/BytesBarGraphWidget.tsx","webpack://jacdac-docs/./src/components/dashboard/DashboardSoundSpectrum.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\"\nimport { AudioAnalyzerOptions, useMicrophoneAnalyzer } from \"./useAudioAnalyzer\"\n\nexport default function useMicrophoneSpectrum(\n    enabled: boolean,\n    options?: AudioAnalyzerOptions\n) {\n    const { analyser, onClickActivateMicrophone, closeMicrophone } =\n        useMicrophoneAnalyzer(options)\n    const frequencies = useRef(new Uint8Array(0))\n\n    useEffect(() => {\n        if (!enabled) closeMicrophone()\n    }, [enabled])\n\n    return {\n        onClickActivateMicrophone,\n        spectrum: () => {\n            const a = analyser()\n            if (!a) return frequencies.current\n\n            if (frequencies.current.length !== a.frequencyBinCount)\n                frequencies.current = new Uint8Array(a.frequencyBinCount)\n            a?.getByteFrequencyData(frequencies.current)\n            return frequencies.current\n        },\n    }\n}\n","import React, { useRef, useEffect } from \"react\"\nimport { REPORT_UPDATE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport JDRegister from \"../../../jacdac-ts/src/jdom/register\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport SvgWidget from \"./SvgWidget\"\nimport useWidgetTheme from \"./useWidgetTheme\"\n\nexport default function BytesBarGraphWidget(props: {\n    register: JDRegister\n    size?: string\n    visible: boolean\n}) {\n    const { register, size, visible } = props\n    const server = useServiceServer(register.service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active } = useWidgetTheme(color)\n    const pathRef = useRef<SVGPathElement>()\n\n    const w = 128\n    const h = w / 1.612\n    const m = 2\n    const dy = (h - 2 * m) / 0xff\n\n    useEffect(\n        () =>\n            visible &&\n            register?.subscribe(REPORT_UPDATE, () => {\n                // render outside of react loop\n                const { current } = pathRef\n                const bins = register.data\n                if (!current || !bins) return\n\n                const dx = (w - 2 * m) / bins.length\n                const dw = (w - 2 * m) / (bins.length * 6)\n                let d = `M ${m} ${h - m} `\n                for (let i = 0; i < bins.length; ++i) {\n                    const bin = bins[i]\n                    d += ` v ${-dy * bin} h ${dx - dw} v ${dy * bin} h ${dw}`\n                }\n                d += \" z\"\n                current.setAttribute(\"d\", d)\n            }),\n        [register, visible, pathRef.current]\n    )\n\n    return (\n        <SvgWidget width={w} height={h} size={size} background={background}>\n            <path\n                fill={active}\n                stroke={controlBackground}\n                strokeWidth={m / 2}\n                ref={pathRef}\n            />\n        </SvgWidget>\n    )\n}\n","import React, { useEffect } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { Grid } from \"@mui/material\"\nimport MicIcon from \"@mui/icons-material/Mic\"\nimport {\n    REFRESH,\n    SoundSpectrumReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport useMicrophoneSpectrum from \"../hooks/useMicrophoneSpectrum\"\nimport IconButtonWithProgress from \"../ui/IconButtonWithProgress\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport SensorServer from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport BytesBarGraphWidget from \"../widgets/BytesBarGraphWidget\"\nimport useRegister from \"../hooks/useRegister\"\n\nfunction HostMicrophoneButton(props: {\n    service: JDService\n    server?: SensorServer<[Uint8Array]>\n    visible: boolean\n}) {\n    const { server, service, visible } = props\n\n    const enabledRegister = useRegister(service, SoundSpectrumReg.Enabled)\n    const minDecibelsRegister = useRegister(\n        service,\n        SoundSpectrumReg.MinDecibels\n    )\n    const maxDecibelsRegister = useRegister(\n        service,\n        SoundSpectrumReg.MaxDecibels\n    )\n    const fftPow2SizeRegister = useRegister(\n        service,\n        SoundSpectrumReg.FftPow2Size\n    )\n    const smoothingTimeConstantRegister = useRegister(\n        service,\n        SoundSpectrumReg.SmoothingTimeConstant\n    )\n\n    const enabled = useRegisterBoolValue(enabledRegister, props)\n    const [minDecibels] = useRegisterUnpackedValue<[number]>(\n        minDecibelsRegister,\n        props\n    )\n    const [maxDecibels] = useRegisterUnpackedValue<[number]>(\n        maxDecibelsRegister,\n        props\n    )\n    const [fftPow2Size] = useRegisterUnpackedValue<[number]>(\n        fftPow2SizeRegister,\n        props\n    )\n    const fftSize = 1 << (fftPow2Size || 5)\n    const [smoothingTimeConstant] = useRegisterUnpackedValue<[number]>(\n        smoothingTimeConstantRegister,\n        props\n    )\n    const { spectrum, onClickActivateMicrophone } = useMicrophoneSpectrum(\n        enabled && !!server,\n        {\n            fftSize,\n            smoothingTimeConstant,\n            minDecibels,\n            maxDecibels,\n        }\n    )\n    const title = enabled ? \"Stop microphone\" : \"Start microphone\"\n\n    const handleClick = async () => {\n        if (!enabled && server) await onClickActivateMicrophone()\n        await enabledRegister.sendSetBoolAsync(!enabled, true)\n    }\n\n    // update volume on demand\n    useEffect(\n        () =>\n            visible &&\n            enabled &&\n            server?.subscribe(REFRESH, () => {\n                const v = spectrum?.()\n                if (v !== undefined) {\n                    server.reading.setValues([v], true)\n                }\n            }),\n        [server, spectrum, visible]\n    )\n\n    return (\n        <IconButtonWithProgress\n            aria-label={title}\n            title={title}\n            indeterminate={enabled}\n            onClick={handleClick}\n        >\n            <MicIcon />\n        </IconButtonWithProgress>\n    )\n}\n\nexport default function DashboardSoundSpectrum(props: DashboardServiceProps) {\n    const { service, visible } = props\n    const frequencyBinsRegister = useRegister(\n        service,\n        SoundSpectrumReg.FrequencyBins\n    )\n    const server = useServiceServer<SensorServer<[Uint8Array]>>(service)\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item>\n                <BytesBarGraphWidget\n                    visible={visible}\n                    register={frequencyBinsRegister}\n                />\n            </Grid>\n            <Grid item>\n                <HostMicrophoneButton\n                    service={service}\n                    server={server}\n                    visible={visible}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["useEffect","useRef","useMicrophoneAnalyzer","useMicrophoneSpectrum","enabled","options","analyser","onClickActivateMicrophone","closeMicrophone","frequencies","Uint8Array","spectrum","a","current","length","frequencyBinCount","getByteFrequencyData","React","REPORT_UPDATE","useServiceServer","SvgWidget","useWidgetTheme","BytesBarGraphWidget","props","register","size","visible","server","service","color","background","controlBackground","active","pathRef","w","h","m","dy","subscribe","bins","data","dx","dw","d","i","bin","setAttribute","useRegisterBoolValue","useRegisterUnpackedValue","Grid","MicIcon","REFRESH","SoundSpectrumReg","IconButtonWithProgress","useRegister","HostMicrophoneButton","enabledRegister","Enabled","minDecibelsRegister","MinDecibels","maxDecibelsRegister","MaxDecibels","fftPow2SizeRegister","FftPow2Size","smoothingTimeConstantRegister","SmoothingTimeConstant","minDecibels","maxDecibels","fftPow2Size","fftSize","smoothingTimeConstant","title","handleClick","sendSetBoolAsync","v","undefined","reading","setValues","DashboardSoundSpectrum","frequencyBinsRegister","FrequencyBins"],"sourceRoot":""}