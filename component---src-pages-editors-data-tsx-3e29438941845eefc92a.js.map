{"version":3,"file":"component---src-pages-editors-data-tsx-3e29438941845eefc92a.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/hooks/useLocationSearchParam.ts","webpack://jacdac-docs/./src/components/blockly/dsl/datasetdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/datavardsl.ts","webpack://jacdac-docs/./src/components/data-science/DSBlockEditor.tsx","webpack://jacdac-docs/./src/pages/editors/data.tsx"],"sourcesContent":["import { useMemo } from \"react\"\n\nexport function useLocationSearchParamString(key: string): string {\n    return useMemo(() => {\n        if (typeof window !== \"undefined\") {\n            const url = new URL(window.location.href)\n            return url.searchParams.get(key)\n        }\n        return undefined\n    }, [key])\n}\n\nexport function useLocationSearchParamBoolean(\n    key: string,\n    defaultValue: boolean\n): boolean {\n    return useMemo(() => {\n        if (typeof window !== \"undefined\") {\n            const url = new URL(window.location.href)\n            const v = url.searchParams.get(key)\n            console.log({ key, url, v })\n            if (v) {\n                if (v === \"1\" || v === \"true\" || v === \"yes\") return true\n                else if (v === \"0\" || v === \"false\" || v === \"no\") return false\n                else return defaultValue\n            }\n            // empty value means true\n            if (url.searchParams.has(key)) return true\n            return defaultValue\n        }\n        return undefined\n    }, [key, defaultValue])\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Workspace, alert } from \"blockly\"\nimport BuiltinDataSetField from \"../fields/BuiltinDataSetField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    ButtonDefinition,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { resolveWorkspaceServices } from \"../WorkspaceContext\"\nimport FileSaveField from \"../fields/FileSaveField\"\nimport { saveCSV } from \"./workers/csv.proxy\"\nimport FileOpenField from \"../fields/FileOpenField\"\nimport palette from \"./palette\"\nimport { importCSVFilesIntoWorkspace } from \"../../fs/fs\"\n\nconst DATA_DATASET_BUILTIN_BLOCK = \"data_dataset_builtin\"\nconst DATA_ADD_DATASET_CALLBACK = \"data_add_dataset_variable\"\nconst DATA_LOAD_FILE_BLOCK = \"data_load_file\"\nconst DATA_SAVE_FILE_BLOCK = \"data_save_file\"\n\nconst [datasetColour] = palette()\nconst dataSetDsl: BlockDomainSpecificLanguage = {\n    id: \"dataSets\",\n    createBlocks: () => [\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_DATASET_BUILTIN_BLOCK,\n            message0: \"dataset %1\",\n            tooltip: \"Loads a builtin dataset\",\n            args0: [\n                {\n                    type: BuiltinDataSetField.KEY,\n                    name: \"dataset\",\n                },\n            ],\n            inputsInline: false,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: datasetColour,\n            template: \"meta\",\n            dataPreviewField: true,\n            transformData: identityTransformData,\n        },\n        {\n            kind: \"block\",\n            type: DATA_LOAD_FILE_BLOCK,\n            message0: \"load dataset from file %1\",\n            args0: [\n                {\n                    type: FileOpenField.KEY,\n                    name: \"file\",\n                },\n            ],\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: datasetColour,\n            template: \"meta\",\n            inputsInline: false,\n            dataPreviewField: true,\n            transformData: identityTransformData,\n        },\n        {\n            kind: \"block\",\n            type: DATA_SAVE_FILE_BLOCK,\n            message0: \"save dataset to file %1\",\n            args0: [\n                {\n                    type: FileSaveField.KEY,\n                    name: \"file\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: datasetColour,\n            template: \"meta\",\n            inputsInline: false,\n            dataPreviewField: \"after\",\n            transformData: async (block, data) => {\n                const file = block.getField(\"file\") as FileSaveField\n                if (file?.fileHandle && data)\n                    await saveCSV(file.fileHandle, data)\n                return data\n            },\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Data sets\",\n            colour: datasetColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DATASET_BUILTIN_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_LOAD_FILE_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SAVE_FILE_BLOCK,\n                },\n                <ButtonDefinition>{\n                    kind: \"button\",\n                    text: \"Import dataset\",\n                    callbackKey: DATA_ADD_DATASET_CALLBACK,\n                    callback: (workspace: Workspace) => {\n                        const services = resolveWorkspaceServices(workspace)\n                        const directory = services?.workingDirectory\n                        if (!directory)\n                            alert(\n                                \"You need to open a directory to import a dataset.\"\n                            )\n                        else {\n                            importCSVFilesIntoWorkspace(directory.handle)\n                                .then(() => directory.sync())\n                                .then(() => alert(\"Datasets imported!\"))\n                        }\n                    },\n                },\n            ],\n        },\n    ],\n}\nexport default dataSetDsl\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Block, Events, FieldVariable, Variables } from \"blockly\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    ButtonDefinition,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    VariableInputDefinition,\n    DATA_TABLE_TYPE,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { BlockWithServices, resolveBlockServices } from \"../WorkspaceContext\"\n\nconst DATA_ADD_VARIABLE_CALLBACK = \"data_add_variable\"\nconst DATA_DATAVARIABLE_READ_BLOCK = \"data_dataset_read\"\nconst DATA_DATAVARIABLE_WRITE_BLOCK = \"data_dataset_write\"\n\nconst dataVariablesColour = \"%{BKY_VARIABLES_HUE}\"\nconst dataVarDsl: BlockDomainSpecificLanguage = {\n    id: \"dataVariables\",\n    createBlocks: () => [\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_DATAVARIABLE_READ_BLOCK,\n            message0: \"dataset variable %1\",\n            args0: [\n                <VariableInputDefinition>{\n                    type: \"field_variable\",\n                    name: \"data\",\n                    variable: \"data\",\n                    variableTypes: [DATA_TABLE_TYPE],\n                    defaultType: DATA_TABLE_TYPE,\n                },\n            ],\n            inputsInline: false,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: dataVariablesColour,\n            template: \"meta\",\n            dataPreviewField: \"after\",\n            transformData: (b: Block) => {\n                const services = resolveBlockServices(b)\n                const data = services?.data\n                return Promise.resolve(data)\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_DATAVARIABLE_WRITE_BLOCK,\n            message0: \"store in dataset variable %1\",\n            args0: [\n                <VariableInputDefinition>{\n                    type: \"field_variable\",\n                    name: \"data\",\n                    variable: \"data\",\n                    variableTypes: [DATA_TABLE_TYPE],\n                    defaultType: DATA_TABLE_TYPE,\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: dataVariablesColour,\n            template: \"meta\",\n            dataPreviewField: \"after\",\n            transformData: (b: Block, data: object[]) => {\n                // grab the variable from the block\n                const variable = b.getFieldValue(\"data\")\n                if (!variable) return Promise.resolve(undefined)\n                const readBlocks = b.workspace.getBlocksByType(\n                    DATA_DATAVARIABLE_READ_BLOCK,\n                    false\n                )\n                const readServices = readBlocks\n                    .filter(b => b.isEnabled())\n                    .filter(b => b.getFieldValue(\"data\") === variable)\n                    .map(b => (b as BlockWithServices).jacdacServices)\n                    .filter(services => !!services)\n                readServices.forEach(services => (services.data = data))\n                return Promise.resolve(data)\n            },\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Data variables\",\n            colour: dataVariablesColour,\n            contents: [\n                <ButtonDefinition>{\n                    kind: \"button\",\n                    text: `Add dataset variable`,\n                    callbackKey: DATA_ADD_VARIABLE_CALLBACK,\n                    callback: workspace =>\n                        Variables.createVariableButtonHandler(\n                            workspace,\n                            null,\n                            DATA_TABLE_TYPE\n                        ),\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DATAVARIABLE_READ_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DATAVARIABLE_WRITE_BLOCK,\n                },\n            ],\n        },\n    ],\n    createWorkspaceChangeListener: () => (event: Events.Abstract) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const { type, blockId } = event as any\n        const isBlockChange =\n            type === Events.BLOCK_CHANGE || type === Events.BLOCK_MOVE\n\n        if (isBlockChange || type === Events.FINISHED_LOADING) {\n            const workspace = event.getEventWorkspace_()\n            if (isBlockChange) {\n                const block = workspace.getBlockById(blockId)\n                if (block?.type !== DATA_DATAVARIABLE_WRITE_BLOCK) return // nothing so see here\n            }\n\n            // collect set variables blocks,\n            // and make sure only 1 of them is enabled\n            const setvars = workspace\n                .getBlocksByType(DATA_DATAVARIABLE_WRITE_BLOCK, true)\n                .filter(b => b.isEnabled())\n\n            // mark and sweep variables, leaving one 1 enabled per kind\n            const marked = {}\n            while (setvars.length) {\n                const block = setvars.shift()\n                const variable = (\n                    block.getField(\"data\") as FieldVariable\n                ).getVariable()\n                if (variable) {\n                    const name = variable.name\n                    if (marked[name]) {\n                        if (block.isEnabled()) {\n                            block.setEnabled(false)\n                            block.unplug(true)\n                        }\n                    } else marked[name] = true\n                }\n            }\n        }\n    },\n}\nexport default dataVarDsl\n\nexport function resolveUsedDataVariables(block: Block): {\n    reads?: string[]\n    write?: string\n} {\n    const { type } = block\n    if (type === DATA_DATAVARIABLE_READ_BLOCK) {\n        const field = block.getField(\"data\") as FieldVariable\n        const variable = field.getVariable()\n        if (variable)\n            return {\n                reads: [variable.name],\n            }\n    } else if (type === DATA_DATAVARIABLE_WRITE_BLOCK) {\n        const field = block.getField(\"data\") as FieldVariable\n        const variable = field.getVariable()\n        if (variable)\n            return {\n                write: variable.name,\n            }\n    }\n\n    return {}\n}\n","import { Grid, NoSsr } from \"@material-ui/core\"\nimport React, { useContext, useMemo } from \"react\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { BlockProvider } from \"../blockly/BlockContext\"\nimport BlockDiagnostics from \"../blockly/BlockDiagnostics\"\nimport BlockEditor from \"../blockly/BlockEditor\"\nimport FileTabs from \"../fs/FileTabs\"\nimport { WorkspaceFile } from \"../blockly/dsl/workspacejson\"\nimport dataDsl from \"../blockly/dsl/datadsl\"\nimport chartDsl from \"../blockly/dsl/chartdsl\"\nimport fieldsDsl from \"../blockly/dsl/fieldsdsl\"\nimport { WORKSPACE_FILENAME } from \"../blockly/toolbox\"\nimport FileSystemContext from \"../FileSystemContext\"\nimport { createIFrameDSL } from \"../blockly/dsl/iframedsl\"\nimport { useLocationSearchParamBoolean } from \"../hooks/useLocationSearchParam\"\nimport dataSetDsl from \"../blockly/dsl/datasetdsl\"\nimport dataVarDsl from \"../blockly/dsl/datavardsl\"\n\nconst DS_EDITOR_ID = \"ds\"\nconst DS_SOURCE_STORAGE_KEY = \"tools:dseditor\"\nconst DS_NEW_FILE_CONTENT = JSON.stringify({\n    editor: DS_EDITOR_ID,\n    xml: \"\",\n} as WorkspaceFile)\n\nfunction DSEditorWithContext() {\n    const { fileSystem } = useContext(FileSystemContext)\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            {!!fileSystem && (\n                <Grid item xs={12}>\n                    <FileTabs\n                        newFileName={WORKSPACE_FILENAME}\n                        newFileContent={DS_NEW_FILE_CONTENT}\n                        hideFiles={true}\n                    />\n                </Grid>\n            )}\n            <Grid item xs={12}>\n                <BlockEditor editorId={DS_EDITOR_ID} />\n            </Grid>\n            {Flags.diagnostics && <BlockDiagnostics />}\n        </Grid>\n    )\n}\n\nexport default function DSBlockEditor() {\n    const dataSet = useLocationSearchParamBoolean(\"dataset\", true)\n    const dataVar = useLocationSearchParamBoolean(\"datavar\", true)\n    const dsls = useMemo(() => {\n        return [\n            dataSet && dataSetDsl,\n            dataDsl,\n            dataVar && dataVarDsl,\n            chartDsl,\n            fieldsDsl,\n            createIFrameDSL(\"host\", \"*\"),\n        ].filter(dsl => !!dsl)\n    }, [])\n\n    return (\n        <NoSsr>\n            <BlockProvider storageKey={DS_SOURCE_STORAGE_KEY} dsls={dsls}>\n                <DSEditorWithContext />\n            </BlockProvider>\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport DSBlockEditor from \"../../components/data-science/DSBlockEditor\"\n\nexport default function Page() {\n    return <DSBlockEditor />\n}\n"],"names":["useMemo","useLocationSearchParamString","key","window","url","URL","location","href","searchParams","get","undefined","useLocationSearchParamBoolean","defaultValue","v","console","log","has","alert","BuiltinDataSetField","DATA_SCIENCE_STATEMENT_TYPE","identityTransformData","resolveWorkspaceServices","FileSaveField","saveCSV","FileOpenField","palette","importCSVFilesIntoWorkspace","DATA_DATASET_BUILTIN_BLOCK","DATA_ADD_DATASET_CALLBACK","DATA_LOAD_FILE_BLOCK","DATA_SAVE_FILE_BLOCK","datasetColour","dataSetDsl","id","createBlocks","kind","type","message0","tooltip","args0","KEY","name","inputsInline","nextStatement","colour","template","dataPreviewField","transformData","previousStatement","block","data","file","getField","fileHandle","createCategory","contents","text","callbackKey","callback","workspace","services","directory","workingDirectory","handle","then","sync","Events","Variables","DATA_TABLE_TYPE","resolveBlockServices","DATA_ADD_VARIABLE_CALLBACK","DATA_DATAVARIABLE_READ_BLOCK","DATA_DATAVARIABLE_WRITE_BLOCK","dataVariablesColour","dataVarDsl","variable","variableTypes","defaultType","b","Promise","resolve","getFieldValue","readBlocks","getBlocksByType","readServices","filter","isEnabled","map","jacdacServices","forEach","createVariableButtonHandler","createWorkspaceChangeListener","event","blockId","isBlockChange","BLOCK_CHANGE","BLOCK_MOVE","FINISHED_LOADING","getEventWorkspace_","getBlockById","setvars","marked","length","shift","getVariable","setEnabled","unplug","resolveUsedDataVariables","field","reads","write","Grid","NoSsr","React","useContext","Flags","BlockProvider","BlockDiagnostics","BlockEditor","FileTabs","dataDsl","chartDsl","fieldsDsl","WORKSPACE_FILENAME","FileSystemContext","createIFrameDSL","DS_EDITOR_ID","DS_SOURCE_STORAGE_KEY","DS_NEW_FILE_CONTENT","JSON","stringify","editor","xml","DSEditorWithContext","fileSystem","diagnostics","DSBlockEditor","dataSet","dataVar","dsls","dsl","Page"],"sourceRoot":""}