{"version":3,"file":"8847-bf9facbc83e075ce8400.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardTrafficLight.tsx","webpack://jacdac-docs/./src/components/hooks/useArrowKeys.ts","webpack://jacdac-docs/./src/components/hooks/useKeyboardNavigation.ts","webpack://jacdac-docs/./src/components/hooks/useKeyboardNavigationProps.ts"],"sourcesContent":["import React, { useRef } from \"react\"\nimport { TrafficLightReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterBoolValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useWidgetSize from \"../widgets/useWidgetSize\"\nimport useSvgButtonProps from \"../hooks/useSvgButtonProps\"\nimport TrafficLightServer from \"../../../jacdac-ts/src/servers/trafficlightserver\"\nimport useKeyboardNavigationProps from \"../hooks/useKeyboardNavigationProps\"\nimport useRegister from \"../hooks/useRegister\"\n\nconst m = 2\nconst r = 8\nconst ri = 7\nconst w = 2 * r + 2 * m\nconst h = 4 * w + 2 * m\nconst cx = w / 2\nconst sw = 2\n\nfunction TrafficLight(props: {\n    cx: number\n    cy: number\n    label: string\n    background: string\n    fill: string\n    onDown?: () => void\n}) {\n    const { cx, cy, fill, background, label, onDown } = props\n    const buttonProps = useSvgButtonProps<SVGCircleElement>(label, onDown)\n\n    return (\n        <>\n            <circle cx={cx} cy={cy} r={r} fill={background} stroke={\"none\"} />\n            <circle\n                cx={cx}\n                cy={cy}\n                r={ri}\n                fill={fill}\n                strokeWidth={sw}\n                {...buttonProps}\n            />\n        </>\n    )\n}\n\nexport default function DashboardTrafficLight(props: DashboardServiceProps) {\n    const { service, services, variant } = props\n\n    const widgetRef = useRef<SVGGElement>()\n\n    const redRegister = useRegister(service, TrafficLightReg.Red)\n    const orangeRegister = useRegister(service, TrafficLightReg.Orange)\n    const greenRegister = useRegister(service, TrafficLightReg.Green)\n\n    const red = useRegisterBoolValue(redRegister, props)\n    const orange = useRegisterBoolValue(orangeRegister, props)\n    const green = useRegisterBoolValue(greenRegister, props)\n\n    const lightRegs = [\n        TrafficLightReg.Red,\n        TrafficLightReg.Orange,\n        TrafficLightReg.Green,\n    ]\n    const lights = [red, orange, green]\n\n    const server = useServiceServer<TrafficLightServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground } = useWidgetTheme(color)\n    const widgetSize = useWidgetSize(variant, services?.length)\n\n    let cy = 0\n    const names = [\"red\", \"yellow\", \"green\"]\n    const colors = [\"red\", \"orange\", \"green\"]\n    const navProps = useKeyboardNavigationProps(widgetRef.current)\n    return (\n        <SvgWidget width={w} height={h} size={widgetSize}>\n            <g ref={widgetRef} {...navProps}>\n                <rect\n                    x={0}\n                    y={0}\n                    width={w}\n                    height={h}\n                    rx={m}\n                    fill={background}\n                />\n                {lights.map((v, i) => {\n                    cy += m + 2 * r\n                    const fill = v ? colors[i] : controlBackground\n                    const onDown = async () => {\n                        const reg = service.register(lightRegs[i])\n                        await reg.sendSetBoolAsync(!v, true)\n                    }\n                    return (\n                        <TrafficLight\n                            key={i}\n                            cx={cx}\n                            cy={cy}\n                            background={background}\n                            fill={fill}\n                            onDown={onDown}\n                            label={`${names[i]} ${v ? \"on\" : \"off\"}`}\n                        />\n                    )\n                })}\n            </g>\n        </SvgWidget>\n    )\n}\n","import { KeyboardEvent } from \"react\"\nimport { keyCodeFromEvent } from \"./useFireKey\"\n\nconst LEFT_KEY = 37\nconst UP_KEY = 38\nconst RIGHT_KEY = 39\nconst DOWN_KEY = 40\n\nexport default function useArrowKeys(options: {\n    onLeft?: () => void\n    onRight?: () => void\n    onUp?: () => void\n    onDown?: () => void\n    symmetric?: boolean\n}) {\n    const { onLeft, onUp, onRight, onDown, symmetric } = options\n\n    if (!onLeft && !onUp && !onRight && !onDown) return undefined\n\n    const handlers = {\n        [LEFT_KEY]: onLeft,\n        [RIGHT_KEY]: onRight,\n        [UP_KEY]: onUp || (symmetric && onRight),\n        [DOWN_KEY]: onDown || (symmetric && onLeft),\n    }\n\n    return (e: KeyboardEvent<Element>) => {\n        const charCode = keyCodeFromEvent(e)\n        const handler = handlers[charCode]\n        if (handler) {\n            e.preventDefault()\n            handler()\n        }\n    }\n}\n","export default function useKeyboardNavigation(parentRef: Element) {\n    const query = '[tabindex=\"0\"]'\n    const onMove = (offset: number) => () => {\n        console.log(\"keyboard move\", { offset })\n        const focusable = Array.from<SVGElement>(\n            parentRef?.querySelectorAll(query) || []\n        )\n        if (focusable.length) {\n            const me = focusable.findIndex(f => f === document.activeElement)\n            const next = (me + offset + focusable.length) % focusable.length\n            focusable[next].focus()\n        }\n    }\n    return onMove\n}\n","import useArrowKeys from \"./useArrowKeys\"\nimport useKeyboardNavigation from \"./useKeyboardNavigation\"\n\nexport default function useKeyboardNavigationProps(\n    parentRef: Element,\n    vertical?: boolean\n) {\n    const onMove = useKeyboardNavigation(parentRef)\n\n    const onKeyDown = useArrowKeys({\n        onLeft: !vertical && onMove(-1),\n        onRight: !vertical && onMove(1),\n        onDown: vertical && onMove(1),\n        onUp: vertical && onMove(-1),\n    })\n\n    return {\n        onKeyDown: parentRef && onKeyDown,\n    }\n}\n"],"names":["React","useRef","TrafficLightReg","useRegisterBoolValue","SvgWidget","useWidgetTheme","useServiceServer","useWidgetSize","useSvgButtonProps","useKeyboardNavigationProps","useRegister","m","r","ri","w","h","cx","sw","TrafficLight","props","cy","fill","background","label","onDown","buttonProps","DashboardTrafficLight","service","services","variant","widgetRef","redRegister","Red","orangeRegister","Orange","greenRegister","Green","red","orange","green","lightRegs","lights","server","color","controlBackground","widgetSize","length","names","colors","navProps","current","map","v","i","reg","register","sendSetBoolAsync","keyCodeFromEvent","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","useArrowKeys","options","onLeft","onUp","onRight","symmetric","undefined","handlers","e","charCode","handler","preventDefault","useKeyboardNavigation","parentRef","query","onMove","offset","console","log","focusable","Array","from","querySelectorAll","me","findIndex","f","document","activeElement","next","focus","vertical","onKeyDown"],"sourceRoot":""}