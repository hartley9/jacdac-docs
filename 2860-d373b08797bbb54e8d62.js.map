{"version":3,"file":"2860-d373b08797bbb54e8d62.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/ui/KeyboardKeyInput.tsx"],"sourcesContent":["import React, { useContext, useEffect, useMemo, useRef, useState } from \"react\"\nimport { styled } from \"@mui/material/styles\"\nimport { HidKeyboardModifiers } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport Keyboard from \"react-simple-keyboard\"\nimport \"react-simple-keyboard/build/css/index.css\"\nimport DarkModeContext from \"./DarkModeContext\"\nimport { useId } from \"react-use-id-hook\"\nimport {\n    modifierCodes,\n    renderKeyboardKey,\n    selectors,\n} from \"../../../jacdac-ts/src/servers/hidkeyboardserver\"\nimport useMediaQueries from \"../hooks/useMediaQueries\"\n\nconst PREFIX = \"KeyboardKeyInput\"\n\nconst classes = {\n    capture: `${PREFIX}-capture`,\n    darkKeyboard: `${PREFIX}-darkKeyboard`,\n    keyboard: `${PREFIX}-keyboard`,\n}\n\nconst Root = styled(\"div\")(({ theme }) => ({\n    [`& .${classes.capture}`]: {\n        cursor: \"pointer\",\n        \"&:hover\": {\n            borderColor: theme.palette.primary.main,\n        },\n        \"&:focus\": {\n            borderColor: theme.palette.action.active,\n        },\n    },\n\n    [`& .${classes.darkKeyboard}`]: {\n        backgroundColor: \"#333 !important\",\n        borderColor: \"#777 !important\",\n        color: \"white !important\",\n        \"& .hg-button\": {\n            background: \"rgba(0, 0, 0, 0.5) !important\",\n            color: \"white\",\n        },\n        \"& .hg-button.buttonSelected\": {\n            background: `${theme.palette.primary.dark} !important`,\n            color: \"white !important\",\n        },\n    },\n\n    [`& .${classes.keyboard}`]: {\n        \"& .buttonSelected\": {\n            background: `${theme.palette.primary.dark} !important`,\n            color: \"white !important\",\n        },\n    },\n}))\n\nexport default function KeyboardKeyInput(props: {\n    initialSelector?: number\n    initialModifiers?: HidKeyboardModifiers\n    selector?: number\n    modifiers?: HidKeyboardModifiers\n    onChange: (newSelector: number, newModifiers: HidKeyboardModifiers) => void\n}) {\n    const { initialSelector, initialModifiers, selector, modifiers, onChange } =\n        props\n    const uncontrolled = useMemo(\n        () => selector === undefined || modifiers === undefined,\n        []\n    )\n    const [selector_, setSelector_] = useState<number>(initialSelector || 0)\n    const [modifiers_, setModifiters_] = useState<HidKeyboardModifiers>(\n        initialModifiers || HidKeyboardModifiers.None\n    )\n    const { darkMode } = useContext(DarkModeContext)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const keyboardRef = useRef<any>()\n\n    const theme = `hg-theme-default hg-layout-default ${\n        darkMode === \"dark\" ? classes.darkKeyboard : classes.keyboard\n    }`\n    const { mobile } = useMediaQueries()\n    const layoutName = mobile ? \"mobile\" : \"default\"\n    const keyboardId = useId()\n\n    const layout = {\n        default: [\n            \"{escape} {f1} {f2} {f3} {f4} {f5} {f6} {f7} {f8} {f9} {f10} {f11} {f12}\",\n            \"` 1 2 3 4 5 6 7 8 9 0 - = {backspace}\",\n            \"{tab} q w e r t y u i o p [ ] \\\\\",\n            \"{capslock} a s d f g h j k l ; ' {enter}\",\n            \"{shiftleft} z x c v b n m , . / {shiftright}\",\n            \"{controlleft} {altleft} {metaleft} {space} {metaright} {altright}\",\n        ],\n        mobile: [\n            \"{escape} {f1} {f2} {f3} {f4} {f5}\",\n            \"{f6} {f7} {f8} {f9} {f10} {f11} {f12}\",\n            \"` 1 2 3 4 5 6\",\n            \"7 8 9 0 - = {backspace}\",\n            \"{tab} q w e r t\",\n            \"y u i o p [ ] \\\\\",\n            \"{capslock} a s d f g\",\n            \"h j k l ; ' {enter}\",\n            \"{shiftleft} z x c v b\",\n            \"n m , . / {shiftright}\",\n            \"{controlleft} {altleft} {metaleft} {space}\",\n            \"{metaright} {altright}\",\n        ],\n    }\n    const display = {\n        \"{escape}\": \"esc ⎋\",\n        \"{tab}\": \"tab ⇥\",\n        \"{backspace}\": \"backspace ⌫\",\n        \"{enter}\": \"enter ↵\",\n        \"{capslock}\": \"caps lock ⇪\",\n        \"{shiftleft}\": \"shift ⇧\",\n        \"{shiftright}\": \"shift ⇧\",\n        \"{controlleft}\": \"ctrl ⌃\",\n        \"{controlright}\": \"ctrl ⌃\",\n        \"{altleft}\": \"alt ⌥\",\n        \"{altright}\": \"alt ⌥\",\n        \"{metaleft}\": \"cmd ⌘\",\n        \"{metaright}\": \"cmd ⌘\",\n        \"{space}\": \"⎵\",\n    }\n    const handleKeyboardKeyPress = (code: string) => {\n        code = code.toLowerCase().replace(/[{}]/g, \"\")\n        let newSelector = selector_\n        let newModifiers = modifiers_\n        const msel = selectors[code]\n        const mcode = modifierCodes[code]\n        if (msel) {\n            if (msel === selector) newSelector = undefined\n            else newSelector = msel\n        } else {\n            if (mcode) {\n                if (newModifiers & mcode) newModifiers &= ~mcode\n                else newModifiers |= mcode\n            }\n        }\n        setSelector_(newSelector)\n        setModifiters_(newModifiers)\n        onChange(newSelector, newModifiers)\n    }\n\n    // update external values\n    useEffect(() => {\n        if (selector !== undefined) {\n            if (uncontrolled)\n                console.warn(`trying to set an uncontrolled selector`)\n            setSelector_(selector)\n        }\n    }, [selector])\n    useEffect(() => {\n        if (modifiers !== undefined) {\n            if (uncontrolled)\n                console.warn(`trying to set an uncontrolled modifier`)\n            setModifiters_(modifiers)\n        }\n    }, [modifiers])\n\n    const value = renderKeyboardKey(selector_, modifiers_, false)\n    useEffect(() => {\n        keyboardRef.current?.addButtonTheme(value, \"buttonSelected\")\n        return () =>\n            keyboardRef.current?.removeButtonTheme(value, \"buttonSelected\")\n    }, [value])\n\n    return (\n        <Root>\n            <Keyboard\n                baseClass={keyboardId}\n                keyboardRef={r => (keyboardRef.current = r)}\n                onKeyPress={handleKeyboardKeyPress}\n                layout={layout}\n                layoutName={layoutName}\n                theme={theme}\n                display={display}\n                mergeDisplay={true}\n            />\n        </Root>\n    )\n}\n"],"names":["React","useContext","useEffect","useMemo","useRef","useState","styled","HidKeyboardModifiers","Keyboard","DarkModeContext","useId","modifierCodes","renderKeyboardKey","selectors","useMediaQueries","PREFIX","classes","capture","darkKeyboard","keyboard","Root","theme","cursor","borderColor","palette","primary","main","action","active","backgroundColor","color","background","dark","KeyboardKeyInput","props","initialSelector","initialModifiers","selector","modifiers","onChange","uncontrolled","undefined","selector_","setSelector_","modifiers_","setModifiters_","None","darkMode","keyboardRef","mobile","layoutName","keyboardId","layout","default","display","handleKeyboardKeyPress","code","toLowerCase","replace","newSelector","newModifiers","msel","mcode","console","warn","value","current","addButtonTheme","removeButtonTheme","r"],"sourceRoot":""}