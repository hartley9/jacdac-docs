{"version":3,"file":"206-5f134d2da59d6c89163b.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Delete.js","webpack://jacdac-docs/./src/components/ClassDataSetGrid.tsx","webpack://jacdac-docs/./src/components/dialogs/mb/ViewDataDialog.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","import React from \"react\"\n\nimport { Card, CardContent, CardHeader, Grid } from \"@mui/material\"\nimport { IconButton } from \"gatsby-theme-material-ui\"\nimport DeleteIcon from \"@mui/icons-material/Delete\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\n\nimport Trend from \"./Trend\"\nimport FieldDataSet from \"./FieldDataSet\"\n\nexport default function ClassDataSetGrid(props: {\n    label: string\n    tables: FieldDataSet[]\n    handleDeleteTable?: (table: FieldDataSet) => void\n}) {\n    const { label, tables, handleDeleteTable } = props\n\n    const handleDelete = (table: FieldDataSet) => () => handleDeleteTable(table)\n\n    return (\n        <Grid container spacing={2}>\n            <Card>\n                <CardHeader\n                    subheader={label + `, ${tables.length} sample(s)`}\n                />\n                <CardContent>\n                    <Grid container spacing={1}>\n                        {tables.map(table => (\n                            <Grid item key={`result` + table.id}>\n                                <Trend dataSet={table} height={8} mini={true} />\n                                {handleDeleteTable && (\n                                    <IconButton\n                                        onClick={handleDelete(table)}\n                                        title=\"Delete this sample\"\n                                        size=\"large\"\n                                    >\n                                        <DeleteIcon />\n                                    </IconButton>\n                                )}\n                            </Grid>\n                        ))}\n                    </Grid>\n                </CardContent>\n            </Card>\n        </Grid>\n    )\n}\n","import React, { lazy, useContext } from \"react\"\n\nimport {\n    Button,\n    Grid,\n    Dialog,\n    DialogActions,\n    DialogContent,\n} from \"@mui/material\"\nimport DownloadIcon from \"@mui/icons-material/GetApp\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport IconButtonWithTooltip from \"../../ui/IconButtonWithTooltip\"\n\nimport ClassDataSetGrid from \"../../ClassDataSetGrid\"\n\nimport MBDataSet from \"../../model-editor/MBDataSet\"\nimport Suspense from \"../../ui/Suspense\"\n\nimport ServiceManagerContext from \"../../ServiceManagerContext\"\n\nconst DataSetPlot = lazy(\n    () => import(\"../../model-editor/components/DataSetPlot\")\n)\n\nexport default function BlocklyViewDataDialog(props: {\n    classes: any\n    chartPalette: string[]\n    open: boolean\n    onDone: () => void\n    dataset: MBDataSet\n}) {\n    const { classes, chartPalette, open, onDone, dataset } = props\n    const chartProps = {\n        CHART_WIDTH: 300,\n        CHART_HEIGHT: 300,\n        MARK_SIZE: 75,\n        TOOLTIP_NUM_FORMAT: \"0.2f\",\n        PALETTE: chartPalette,\n    }\n\n    const { fileStorage } = useContext(ServiceManagerContext)\n    const handleDownloadDataSet = async () => {\n        fileStorage.saveText(`${dataset.name}.csv`, dataset.toCSV())\n    }\n\n    /* For interface controls */\n    const handleDone = () => {\n        // close the modal\n        onDone()\n    }\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleDone}\n            fullWidth={true}\n            maxWidth={\"md\"}\n        >\n            <DialogContent>\n                <Grid container direction={\"column\"}>\n                    <Grid item>\n                        <h2>\n                            Viewing {dataset.name}\n                            <IconButtonWithTooltip\n                                onClick={handleDownloadDataSet}\n                                title=\"Download all recording data\"\n                                disabled={dataset.totalRecordings == 0}\n                            >\n                                <DownloadIcon />\n                            </IconButtonWithTooltip>\n                        </h2>\n                        <div key=\"recordedData\">\n                            {dataset.totalRecordings ? (\n                                <div key=\"recordings\">\n                                    <p>\n                                        Input type(s):{\" \"}\n                                        {dataset.inputTypes.join(\",\")}{\" \"}\n                                    </p>\n                                    {dataset.labels.map(classLabel => (\n                                        <ClassDataSetGrid\n                                            key={\"dataset-\" + classLabel}\n                                            label={classLabel}\n                                            tables={dataset.getRecordingsWithLabel(\n                                                classLabel\n                                            )}\n                                            handleDeleteTable={undefined}\n                                        />\n                                    ))}\n                                    <h3>Dataset plot</h3>\n                                    <Suspense>\n                                        <DataSetPlot\n                                            chartProps={chartProps}\n                                            reactStyle={classes}\n                                            dataset={dataset}\n                                            predictedLabels={undefined}\n                                            timestamp={undefined}\n                                        />\n                                    </Suspense>\n                                </div>\n                            ) : (\n                                <p>Empty</p>\n                            )}\n                        </div>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"contained\" onClick={handleDone}>\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n"],"names":["React","Card","CardContent","CardHeader","Grid","IconButton","DeleteIcon","Trend","ClassDataSetGrid","props","label","tables","handleDeleteTable","handleDelete","table","length","map","id","lazy","useContext","Button","Dialog","DialogActions","DialogContent","DownloadIcon","IconButtonWithTooltip","Suspense","ServiceManagerContext","DataSetPlot","BlocklyViewDataDialog","classes","chartPalette","open","onDone","dataset","chartProps","CHART_WIDTH","CHART_HEIGHT","MARK_SIZE","TOOLTIP_NUM_FORMAT","PALETTE","fileStorage","handleDownloadDataSet","saveText","name","toCSV","handleDone","totalRecordings","inputTypes","join","labels","classLabel","getRecordingsWithLabel","undefined"],"sourceRoot":""}