{"version":3,"file":"component---src-pages-tools-hid-events-tsx-c1ca926f948b1a50be26.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA,IAAMO,MAAM,GAAG,YAAf;AAEA,IAAMC,OAAO,GAAG;AACZC,EAAAA,EAAE,EAAKF,MAAL,QADU;AAEZG,EAAAA,KAAK,EAAKH,MAAL;AAFO,CAAhB;AAKA,IAAMI,UAAU,GAAGP,0EAAM,CAACF,+DAAD,CAAN,CAAa;AAAA,MAAC;AAAEU,IAAAA;AAAF,GAAD;AAAA,SAAgB;AAC5C,aAAOJ,OAAO,CAACC,EAAf,GAAsB;AAClBI,MAAAA,UAAU,EAAED,KAAK,CAACE,OAAN,CAAcC,IAAd,CAAmBC,QADb;AAElBC,MAAAA,YAAY,EAAE;AAFI,KADsB;AAM5C,aAAOT,OAAO,CAACE,KAAf,GAAyB;AACrBQ,MAAAA,KAAK,EAAEN,KAAK,CAACO,OAAN,CAAc,CAAd;AADc;AANmB,GAAhB;AAAA,CAAb,CAAnB;AAWe,SAASC,UAAT,CAAoBC,KAApB,EAKZ;AACC,MAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA;AAAzB,MAAoCJ,KAA1C;AAEA,sBACI,iDAAC,UAAD;AAAY,QAAI,MAAhB;AAAiB,MAAE,EAAE;AAArB,kBACI,iDAAC,+DAAD;AACI,aAAS,MADb;AAEI,aAAS,EAAC,KAFd;AAGI,WAAO,EAAE,CAHb;AAII,kBAAc,EAAC,QAJnB;AAKI,cAAU,EAAC;AALf,kBAOI,iDAAC,+DAAD;AAAM,QAAI;AAAV,kBACI;AAAI,aAAS,EAAEf,gDAAI,CAACE,OAAO,CAACC,EAAT,EAAaD,OAAO,CAACE,KAArB;AAAnB,IADJ,CAPJ,eAUI,iDAAC,+DAAD;AAAM,QAAI;AAAV,KACKe,MAAM,iBACH,iDAAC,8DAAD;AAAK,aAAS,EAAC,MAAf;AAAsB,MAAE,EAAE;AAA1B,KACKA,MADL,CAFR,eAMI,iDAAC,8DAAD;AACI,aAAS,EAAC,MADd;AAEI,WAAO,EAAED,OAAO,IAAI;AAFxB,KAIKF,KAJL,CANJ,EAYKC,KAAK,KAAKG,SAAV,iBACG,iDAAC,8DAAD;AAAK,aAAS,EAAC,MAAf;AAAsB,MAAE,EAAE;AAA1B,kBACI,iDAAC,8DAAD;AAAM,SAAK,EAAEH;AAAb,IADJ,CAbR,CAVJ,eA4BI,iDAAC,+DAAD;AAAM,QAAI,MAAV;AAAW,MAAE;AAAb,kBACI;AAAI,aAAS,EAAEf,OAAO,CAACC;AAAvB,IADJ,CA5BJ,CADJ,CADJ;AAoCH;;;;;;;;;;;;;;;;;;;;ACnED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA,IAAMF,MAAM,GAAG,kBAAf;AAEA,IAAMC,OAAO,GAAG;AACZgC,EAAAA,OAAO,EAAKjC,MAAL,aADK;AAEZkC,EAAAA,YAAY,EAAKlC,MAAL,kBAFA;AAGZmC,EAAAA,QAAQ,EAAKnC,MAAL;AAHI,CAAhB;AAMA,IAAMoC,IAAI,GAAGvC,0EAAM,CAAC,KAAD,CAAN,CAAc;AAAA,MAAC;AAAEQ,IAAAA;AAAF,GAAD;AAAA,SAAgB;AACvC,aAAOJ,OAAO,CAACgC,OAAf,GAA2B;AACvBI,MAAAA,MAAM,EAAE,SADe;AAEvB,iBAAW;AACPC,QAAAA,WAAW,EAAEjC,KAAK,CAACE,OAAN,CAAcgC,OAAd,CAAsBC;AAD5B,OAFY;AAKvB,iBAAW;AACPF,QAAAA,WAAW,EAAEjC,KAAK,CAACE,OAAN,CAAcW,MAAd,CAAqBuB;AAD3B;AALY,KADY;AAWvC,aAAOxC,OAAO,CAACiC,YAAf,GAAgC;AAC5BQ,MAAAA,eAAe,EAAE,iBADW;AAE5BJ,MAAAA,WAAW,EAAE,iBAFe;AAG5BK,MAAAA,KAAK,EAAE,kBAHqB;AAI5B,sBAAgB;AACZrC,QAAAA,UAAU,EAAE,+BADA;AAEZqC,QAAAA,KAAK,EAAE;AAFK,OAJY;AAQ5B,qCAA+B;AAC3BrC,QAAAA,UAAU,EAAKD,KAAK,CAACE,OAAN,CAAcgC,OAAd,CAAsBK,IAA3B,gBADiB;AAE3BD,QAAAA,KAAK,EAAE;AAFoB;AARH,KAXO;AAyBvC,aAAO1C,OAAO,CAACkC,QAAf,GAA4B;AACxB,2BAAqB;AACjB7B,QAAAA,UAAU,EAAKD,KAAK,CAACE,OAAN,CAAcgC,OAAd,CAAsBK,IAA3B,gBADO;AAEjBD,QAAAA,KAAK,EAAE;AAFU;AADG;AAzBW,GAAhB;AAAA,CAAd,CAAb;AAiCe,SAASE,gBAAT,CAA0B/B,KAA1B,EAMZ;AACC,MAAM;AAAEgC,IAAAA,eAAF;AAAmBC,IAAAA,gBAAnB;AAAqCC,IAAAA,QAArC;AAA+CC,IAAAA,SAA/C;AAA0DC,IAAAA;AAA1D,MACFpC,KADJ;AAEA,MAAMqC,YAAY,GAAG7B,8CAAO,CACxB,MAAM0B,QAAQ,KAAK7B,SAAb,IAA0B8B,SAAS,KAAK9B,SADtB,EAExB,EAFwB,CAA5B;AAIA,MAAM;AAAA,OAACiC,SAAD;AAAA,OAAYC;AAAZ,MAA4B7B,+CAAQ,CAASsB,eAAe,IAAI,CAA5B,CAA1C;AACA,MAAM;AAAA,OAACQ,UAAD;AAAA,OAAaC;AAAb,MAA+B/B,+CAAQ,CACzCuB,gBAAgB,IAAItB,gHADqB,CAA7C;AAGA,MAAM;AAAEgC,IAAAA;AAAF,MAAerC,iDAAU,CAACO,iEAAD,CAA/B,CAXD,CAYC;;AACA,MAAM+B,YAAW,GAAGnC,6CAAM,EAA1B;;AAEA,MAAMlB,KAAK,4CACPoD,QAAQ,KAAK,MAAb,GAAsBxD,OAAO,CAACiC,YAA9B,GAA6CjC,OAAO,CAACkC,QAD9C,CAAX;AAGA,MAAM;AAAEwB,IAAAA;AAAF,MAAa3B,2EAAe,EAAlC;AACA,MAAM4B,UAAU,GAAGD,MAAM,GAAG,QAAH,GAAc,SAAvC;AACA,MAAME,UAAU,GAAGjC,kEAAK,EAAxB;AAEA,MAAMkC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE,CACL,yEADK,EAEL,uCAFK,EAGL,kCAHK,EAIL,0CAJK,EAKL,8CALK,EAML,mEANK,CADE;AASXJ,IAAAA,MAAM,EAAE,CACJ,mCADI,EAEJ,uCAFI,EAGJ,eAHI,EAIJ,yBAJI,EAKJ,iBALI,EAMJ,kBANI,EAOJ,sBAPI,EAQJ,qBARI,EASJ,uBATI,EAUJ,wBAVI,EAWJ,4CAXI,EAYJ,wBAZI;AATG,GAAf;AAwBA,MAAMK,OAAO,GAAG;AACZ,gBAAY,OADA;AAEZ,aAAS,OAFG;AAGZ,mBAAe,aAHH;AAIZ,eAAW,SAJC;AAKZ,kBAAc,aALF;AAMZ,mBAAe,SANH;AAOZ,oBAAgB,SAPJ;AAQZ,qBAAiB,QARL;AASZ,sBAAkB,QATN;AAUZ,iBAAa,OAVD;AAWZ,kBAAc,OAXF;AAYZ,kBAAc,OAZF;AAaZ,mBAAe,OAbH;AAcZ,eAAW;AAdC,GAAhB;;AAgBA,MAAMC,sBAAsB,GAAIC,IAAD,IAAkB;AAC7CA,IAAAA,IAAI,GAAGA,IAAI,CAACC,WAAL,GAAmBC,OAAnB,CAA2B,OAA3B,EAAoC,EAApC,CAAP;AACA,QAAIC,WAAW,GAAGjB,SAAlB;AACA,QAAIkB,YAAY,GAAGhB,UAAnB;AACA,QAAMiB,IAAI,GAAGxC,yFAAS,CAACmC,IAAD,CAAtB;AACA,QAAMM,KAAK,GAAG3C,6FAAa,CAACqC,IAAD,CAA3B;;AACA,QAAIK,IAAJ,EAAU;AACN,UAAIA,IAAI,KAAKvB,QAAb,EAAuBqB,WAAW,GAAGlD,SAAd,CAAvB,KACKkD,WAAW,GAAGE,IAAd;AACR,KAHD,MAGO;AACH,UAAIC,KAAJ,EAAW;AACP,YAAIF,YAAY,GAAGE,KAAnB,EAA0BF,YAAY,IAAI,CAACE,KAAjB,CAA1B,KACKF,YAAY,IAAIE,KAAhB;AACR;AACJ;;AACDnB,IAAAA,YAAY,CAACgB,WAAD,CAAZ;AACAd,IAAAA,cAAc,CAACe,YAAD,CAAd;AACApB,IAAAA,QAAQ,CAACmB,WAAD,EAAcC,YAAd,CAAR;AACH,GAlBD,CA9DD,CAkFC;;;AACAjD,EAAAA,gDAAS,CAAC,MAAM;AACZ,QAAI2B,QAAQ,KAAK7B,SAAjB,EAA4B;AACxB,UAAIgC,YAAJ,EACIsB,OAAO,CAACC,IAAR;AACJrB,MAAAA,YAAY,CAACL,QAAD,CAAZ;AACH;AACJ,GANQ,EAMN,CAACA,QAAD,CANM,CAAT;AAOA3B,EAAAA,gDAAS,CAAC,MAAM;AACZ,QAAI4B,SAAS,KAAK9B,SAAlB,EAA6B;AACzB,UAAIgC,YAAJ,EACIsB,OAAO,CAACC,IAAR;AACJnB,MAAAA,cAAc,CAACN,SAAD,CAAd;AACH;AACJ,GANQ,EAMN,CAACA,SAAD,CANM,CAAT;AAQA,MAAM0B,KAAK,GAAG7C,qGAAiB,CAACsB,SAAD,EAAYE,UAAZ,EAAwB,KAAxB,CAA/B;AACAjC,EAAAA,gDAAS,CAAC,MAAM;AAAA;;AACZ,4BAAAqC,YAAW,CAACkB,OAAZ,8EAAqBC,cAArB,CAAoCF,KAApC,EAA2C,gBAA3C;AACA,WAAO;AAAA;;AAAA,sCACHjB,YAAW,CAACkB,OADT,0DACH,sBAAqBE,iBAArB,CAAuCH,KAAvC,EAA8C,gBAA9C,CADG;AAAA,KAAP;AAEH,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT;AAMA,sBACI,iDAAC,IAAD,qBACI,iDAAC,8DAAD;AACI,aAAS,EAAEd,UADf;AAEI,eAAW,EAAEkB,CAAC,IAAKrB,YAAW,CAACkB,OAAZ,GAAsBG,CAF7C;AAGI,cAAU,EAAEd,sBAHhB;AAII,UAAM,EAAEH,MAJZ;AAKI,cAAU,EAAEF,UALhB;AAMI,SAAK,EAAEvD,KANX;AAOI,WAAO,EAAE2D,OAPb;AAQI,gBAAY,EAAE;AARlB,IADJ,CADJ;AAcH;;;;;;;;;;;;ACnLD;AACA;AAUe,SAASkB,kBAAT,CACXC,SADW,EAEI;AACf,MAAM;AAAEC,IAAAA;AAAF,MAAiBhE,iDAAU,CAAC4D,6DAAD,CAAjC;;AAEA,MAAIG,SAAS,KAAKhE,SAAlB,EAA6B;AACzB,YAAQgE,SAAR;AACI,WAAK,CAAL;AACA,WAAK,CAAL;AACI,eAAO;AAAEE,UAAAA,EAAE,EAAE,EAAN;AAAUC,UAAAA,EAAE,EAAE,CAAd;AAAiBC,UAAAA,EAAE,EAAE,CAArB;AAAwBC,UAAAA,EAAE,EAAE,CAA5B;AAA+BC,UAAAA,EAAE,EAAE;AAAnC,SAAP;;AACJ,WAAK,CAAL;AACI,eAAO;AAAEJ,UAAAA,EAAE,EAAE,EAAN;AAAUC,UAAAA,EAAE,EAAE,CAAd;AAAiBC,UAAAA,EAAE,EAAE,CAArB;AAAwBC,UAAAA,EAAE,EAAE,CAA5B;AAA+BC,UAAAA,EAAE,EAAE;AAAnC,SAAP;AALR;AAOH;;AAED,MAAIL,UAAU,IAAIH,uEAAlB,EACI,OAAO;AAAEI,IAAAA,EAAE,EAAE,EAAN;AAAUE,IAAAA,EAAE,EAAE,CAAd;AAAiBD,IAAAA,EAAE,EAAE,CAArB;AAAwBE,IAAAA,EAAE,EAAE,CAA5B;AAA+BC,IAAAA,EAAE,EAAE;AAAnC,GAAP,CADJ,KAGI,OAAO;AACHJ,IAAAA,EAAE,EAAE,EADD;AAEHC,IAAAA,EAAE,EAAE,CAFD;AAGHC,IAAAA,EAAE,EAAE,CAHD;AAIHC,IAAAA,EAAE,EAAE,CAJD;AAKHC,IAAAA,EAAE,EAAE;AALD,GAAP;AAOP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCD;AAQA;AACA;AASA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMqC,YAAY,gBAAGpC,2CAAI,CAAC,MAAM,oGAAP,CAAzB,EAEA;;AACA,IAAM1F,MAAM,GAAG,MAAf,EACA;;AACA,IAAM+H,MAAM,GAAG,wBAAf,EACA;;AAUA,SAASC,gBAAT,CAA0BC,KAA1B,EAA0CC,EAA1C,EAAwD;AACpD,MAAMC,QAAQ,GAAGpB,4EAAO,CAACkB,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBF,QAAtB,CAAxB;AACA,MAAM;AAAEC,IAAAA,OAAF;AAAWlE,IAAAA;AAAX,MAAoB+D,KAA1B;AACA,MAAM;AAAEK,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAiCH,OAAvC;AACA,MAAM;AAAEpF,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BiF,EAAhC;AACA,MAAMM,OAAO,GAAGvB,0EAAM,CAAcc,MAAd,EAAsB,CACxCI,QADwC,EAExCG,YAFwC,EAGxCC,YAHwC,EAIxCrE,IAJwC,EAKxClB,QALwC,EAMxCC,SANwC,CAAtB,CAAtB;AAQA,SAAOuF,OAAP;AACH;;AAED,SAASC,gBAAT,CAA0BC,GAA1B,EAAuCC,IAAvC,EAAyDC,GAAzD,EAA+E;AAAA;;AAC3E,MAAI,CAAAD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEE,MAAN,MAAiB,EAArB,EAAyB,OAAO1H,SAAP;AACzB,MAAM,CACFgH,QADE,EAEFG,YAFE,EAGFC,YAHE,EAIFO,SAJE,EAKF9F,QALE,EAMFC,SANE,IAOFiE,4EAAQ,CAAcyB,IAAd,EAAoBZ,MAApB,CAPZ;AAQA,MAAMgB,SAAS,GAAG/B,0EAAK,CAACmB,QAAD,CAAvB;AACA,MAAME,MAAM,GAAGO,GAAG,CAACP,MAAJ,CAAWU,SAAX,EAAsB,IAAtB,CAAf;AACA,MAAMd,KAAK,GAAGI,MAAH,aAAGA,MAAH,0CAAGA,MAAM,CAAED,OAAR,CAAgBG,YAAhB,CAAH,oDAAG,gBAA+BN,KAA/B,CAAqCa,SAArC,CAAd;AAEA,MAAI,CAACb,KAAD,IAAUA,KAAK,CAACG,OAAN,CAAcE,YAAd,KAA+BA,YAA7C,EAA2D,OAAOnH,SAAP;AAC3D,SAAO;AACHuH,IAAAA,GADG;AAEHM,IAAAA,OAAO,EAAEf,KAAK,CAACgB,EAFZ;AAGHjG,IAAAA,QAHG;AAIHC,IAAAA;AAJG,GAAP;AAMH;;AAED,SAASiG,cAAT,CAAwBpI,KAAxB,EAAwE;AACpE,MAAM;AAAEqI,IAAAA;AAAF,MAAYrI,KAAlB;AACA,MAAM;AAAA,OAACmH,KAAD;AAAA,OAAQmB;AAAR,MAAoB5H,+CAAQ,EAAlC;AACA,MAAM;AAAA,OAACwB,QAAD;AAAA,OAAWqG;AAAX,MAA0B7H,+CAAQ,CAAC,CAAD,CAAxC;AACA,MAAM;AAAA,OAACyB,SAAD;AAAA,OAAYqG;AAAZ,MAA4B9H,+CAAQ,CAACC,oGAAD,CAA1C;AAEA,MAAM8H,gBAAgB,GAAG,CACrBpD,iFADqB,EAErBE,oFAFqB,EAGrBC,sFAHqB,EAIrBC,kFAJqB,EAKrBH,gFALqB,CAAzB;;AAOA,MAAMoD,WAAW,GAAItB,EAAD,IAChBA,EAAE,CAAChE,IAAH,KAAYsC,qHADhB;;AAEA,MAAMkD,QAAQ,GAAGtC,mFAAW,CAAC;AACzBuC,IAAAA,oBAAoB,EAAE,IADG;AAEzBC,IAAAA,aAAa,EAAE;AAFU,GAAD,CAAX,CAIZC,MAJY,CAILC,GAAG,IAAIP,gBAAgB,CAACQ,OAAjB,CAAyBD,GAAG,CAACxB,YAA7B,IAA6C,CAJ/C,EAKZuB,MALY,CAKLC,GAAG,IAAIA,GAAG,CAACE,MAAJ,CAAWC,IAAX,CAAgBT,WAAhB,CALF,CAAjB;AAMA,MAAMQ,MAAM,GAAGnD,oFAAe,CAC1B6C,QAAQ,CAACQ,GAAT,CAAa9B,OAAO,IAAIA,OAAO,CAAC4B,MAAR,CAAeH,MAAf,CAAsBL,WAAtB,CAAxB,CAD0B,CAA9B;;AAIA,MAAMW,gBAAgB,GAAIC,QAAD,IAAuB,MAC5ChB,QAAQ,CAACnB,KAAK,KAAKmC,QAAV,GAAqBjJ,SAArB,GAAiCiJ,QAAlC,CADZ;;AAGA,MAAMC,eAAe,GAAG,CACpBhG,WADoB,EAEpBC,YAFoB,KAGnB;AACD+E,IAAAA,WAAW,CAAChF,WAAD,CAAX;AACAiF,IAAAA,YAAY,CAAChF,YAAD,CAAZ;AACH,GAND;;AAOA,MAAM7D,QAAQ,GAAG,CAACwH,KAAD,IAAU,CAACjF,QAA5B;;AACA,MAAMsH,SAAS,GAAG,MAAMnB,KAAK,CAAC;AAAEH,IAAAA,OAAO,EAAEf,KAAK,CAACgB,EAAjB;AAAqBjG,IAAAA,QAArB;AAA+BC,IAAAA;AAA/B,GAAD,CAA7B;;AAEA,sBACI,iDAAC,gEAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE;AAAzB,KACK,EAAC+G,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEnB,MAAT,kBACG,iDAAC,gEAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,iDAAC,sEAAD;AAAO,YAAQ,EAAC;AAAhB,uDADJ,CAFR,EAQKmB,MAAM,CACFH,MADJ,CACW3B,EAAE,IAAI,CAACD,KAAD,IAAUC,EAAE,KAAKD,KADlC,EAEIiC,GAFJ,CAEQhC,EAAE,iBACH,iDAAC,gEAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE,EAAf;AAAmB,MAAE,EAAE,CAAvB;AAA0B,MAAE,EAAE,CAA9B;AAAiC,MAAE,EAAE,CAArC;AAAwC,OAAG,EAAEA,EAAE,CAACe;AAAhD,kBACI,iDAAC,+DAAD,qBACI,iDAAC,sFAAD;AACI,UAAM,EAAEf,EAAE,CAACE,OAAH,CAAWC,MADvB;AAEI,cAAU,EAAE;AAFhB,IADJ,eAKI,iDAAC,+DAAD,qBACI,iDAAC,+DAAD;AAAY,WAAO,EAAC;AAApB,KACKH,EAAE,CAACE,OAAH,CAAWmC,IADhB,CADJ,eAII,iDAAC,+DAAD;AAAY,WAAO,EAAC;AAApB,KACKhD,2FAAQ,CAACW,EAAE,CAACqC,IAAJ,CADb,CAJJ,CALJ,eAaI,iDAAC,+DAAD,qBACI,iDAAC,6DAAD;AACI,WAAO,EAAEJ,gBAAgB,CAACjC,EAAD,CAD7B;AAEI,WAAO,EAAE;AAFb,KAIKA,EAAE,KAAKD,KAAP,GAAe,UAAf,GAA4B,QAJjC,CADJ,CAbJ,CADJ,CAHP,CARL,EAoCKA,KAAK,iBACF,iHACI,iDAAC,2EAAD;AAAY,SAAK,EAAC;AAAlB,IADJ,eAEI,iDAAC,gEAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,iDAAC,uEAAD;AACI,YAAQ,EAAEjF,QADd;AAEI,aAAS,EAAEC,SAFf;AAGI,YAAQ,EAAEoH;AAHd,IADJ,CAFJ,CArCR,EAgDK,CAAC5J,QAAD,iBACG,iHACI,iDAAC,2EAAD;AAAY,SAAK,EAAC;AAAlB,IADJ,eAEI,iDAAC,gEAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,iDAAC,6DAAD;AACI,WAAO,EAAC,WADZ;AAEI,SAAK,EAAC,SAFV;AAGI,YAAQ,EAAEA,QAHd;AAII,WAAO,EAAE6J;AAJb,oBADJ,CAFJ,CAjDR,CADJ;AAkEH;;AAEc,SAASE,SAAT,GAAqB;AAChC,MAAM;AAAE5B,IAAAA;AAAF,MAAUxH,iDAAU,CAAqBwE,gEAArB,CAA1B;AACA,MAAM;AAAE6E,IAAAA;AAAF,MAAerJ,iDAAU,CAAC4D,yEAAD,CAA/B;AACA,MAAM0F,gBAAgB,GAAGtD,mFAAW,CAAC;AAAEkB,IAAAA,YAAY,EAAE/B,kFAAYA;AAA5B,GAAD,CAApC;AACA,MAAM;AAAA,OAACoE,eAAD;AAAA,OAAkBC;AAAlB,MAAwCpJ,+CAAQ,EAAtD;AACA,MAAM;AAAA,OAACqJ,SAAD;AAAA,OAAYC;AAAZ,MAA4BtJ,+CAAQ,CAAa,EAAb,CAA1C;AACA,MAAM;AAAA,OAACuJ,IAAD;AAAA,OAAOC;AAAP,MAAkBxJ,+CAAQ,CAAC,KAAD,CAAhC;AACA,MAAMyJ,eAAe,GAAG/F,oFAAkB,EAA1C;AACA,MAAMgG,SAAS,GAAG3J,6CAAM,EAAxB;;AAEA,MAAM4J,aAAa,GAAG,MAAMH,OAAO,CAAC,IAAD,CAAnC;;AACA,MAAMI,cAAc,GAAG,MAAMJ,OAAO,CAAC,KAAD,CAApC;;AAEA,MAAMK,OAAO,GAAG1F,kDAAW,CAACmE,GAAG,IAAI,IAAInD,2FAAJ,CAAmBmD,GAAnB,CAAR,EAAiC,EAAjC,CAA3B;AACA,MAAMwB,QAAQ,GAAG1E,iFAAgB,CAAC+D,eAAD,EAAkBU,OAAlB,CAAjC;AAEA1D,EAAAA,0GAAkC,CAACpB,kFAAD,CAAlC;AACAL,EAAAA,sEAAS,CAACoF,QAAD,iHAAW,aAAY;AAC5B,QAAMC,GAAe,GAAG,EAAxB;;AACA,QAAID,QAAJ,EAAc;AACV,UAAME,GAAG,SAASF,QAAQ,CAACG,IAAT,EAAlB;;AACA,WAAK,IAAMC,EAAX,IAAiBF,GAAG,CAAC3B,MAAJ,CAAW8B,KAAK;AAAA;;AAAA,6BAC7BA,KAAK,CAACjD,GADuB,+CAC7B,WAAWkD,UAAX,CAAsB5L,MAAtB,CAD6B;AAAA,OAAhB,CAAjB,EAEG;AACC,YAAM;AAAE0I,UAAAA,GAAF;AAAO/D,UAAAA;AAAP,YAAiB+G,EAAvB;AACA,YAAMG,EAAE,GAAGpD,gBAAgB,CAACC,GAAD,EAAM/D,KAAN,EAAaiE,GAAb,CAA3B;AACA,YAAIiD,EAAJ,EAAQN,GAAG,CAACO,IAAJ,CAASD,EAAT;AACX;AACJ;;AACD,QAAIE,IAAI,CAACC,SAAL,CAAeT,GAAf,MAAwBQ,IAAI,CAACC,SAAL,CAAenB,SAAf,CAA5B,EAAuDC,YAAY,CAACS,GAAD,CAAZ;AAC1D,GAbQ,EAAT;;AAcA,MAAMjB,SAAS;AAAA,kHAAG,WAAO2B,QAAP,EAA8B;AAC5CjB,MAAAA,OAAO,CAAC,KAAD,CAAP;AAEA,UAAM/C,KAAK,GAAGW,GAAG,CAACsD,IAAJ,CAASD,QAAQ,CAACjD,OAAlB,CAAd;AACA,UAAI,CAACf,KAAL,EAAY;AAEZ,UAAMO,OAAO,GAAGR,gBAAgB,CAACC,KAAD,EAAQgE,QAAR,CAAhC;AACAX,MAAAA,QAAQ,CAACa,QAAT,CAAkBnM,MAAM,GAAGmH,qFAAc,EAAzC,EAA6CqB,OAA7C;AACH,KARc;;AAAA,oBAAT8B,SAAS;AAAA;AAAA;AAAA,KAAf;;AASA,MAAM8B,mBAAmB,GAAIC,KAAD,IAAmB,MAAM;AACjD,QAAM;AAAE3D,MAAAA;AAAF,QAAUmC,SAAS,CAACwB,KAAD,CAAzB;AACA,QAAI3D,GAAJ,EAAS4C,QAAQ,CAACgB,WAAT,CAAqB5D,GAArB;AACZ,GAHD;;AAIA,MAAM6D,2BAA2B,GAAInE,OAAD,IAAwB,MACxDwC,kBAAkB,CAACD,eAAe,KAAKvC,OAApB,GAA8BjH,SAA9B,GAA0CiH,OAA3C,CADtB;;AAGA,MAAMoE,SAAS,GACX3B,SAAS,6CAC8B4B,kBAAkB,CACrDV,IAAI,CAACC,SAAL,CACIlF,0EAAK,CAAC+D,SAAD,CAAL,CAAiBX,GAAjB,CAAqBwC,CAAC,IAAI;AACtB,WAAOA,CAAC,CAAChE,GAAT;AACA,WAAOgE,CAAP;AACH,GAHD,CADJ,CADqD,CAF7D;AAUArL,EAAAA,gDAAS,CAAC,MAAM;AACZ,QAAI6J,SAAS,CAACtG,OAAd,EACKsG,SAAS,CAACtG,OAAX,CAAyC+H,QAAzC,GAAoD,eAApD;AACP,GAHQ,EAGN,CAACzB,SAAS,CAACtG,OAAX,CAHM,CAAT;;AAIA,MAAMgI,mBAAmB;AAAA,kHAAG,WAAOC,KAAP,EAAyB;AACjD,WAAK,IAAMC,IAAX,IAAmBD,KAAnB,EAA0B;AACtB,YAAI;AACA,cAAMrM,IAAI,SAASsM,IAAI,CAACtM,IAAL,EAAnB;AACA,cAAMuM,IAAI,GAAGhB,IAAI,CAACiB,KAAL,CAAWxM,IAAX,CAAb;;AACA,cAAIyM,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACrB,iBAAK,IAAMd,SAAX,IAAuBc,IAAvB,EAA2C;AACvC,kBAAM9E,KAAK,GAAGW,GAAG,CAACsD,IAAJ,CAASD,SAAQ,CAACjD,OAAlB,CAAd;;AACA,kBAAIf,KAAJ,EAAW;AACP,oBAAMO,OAAO,GAAGR,gBAAgB,CAACC,KAAD,EAAQgE,SAAR,CAAhC;AACAX,gBAAAA,QAAQ,CAACa,QAAT,CACInM,MAAM,GAAGmH,qFAAc,EAD3B,EAEIqB,OAFJ;AAIH;AACJ;AACJ;AACJ,SAfD,CAeE,OAAO2E,CAAP,EAAU;AACR1I,UAAAA,OAAO,CAACC,IAAR,CAAayI,CAAb;AACA1C,UAAAA,QAAQ,mBAAiBqC,IAAI,CAACvC,IAAtB,CAAR;AACH;AACJ;AACJ,KAtBwB;;AAAA,oBAAnBqC,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAuBA,sBACI,iHACI,qFADJ,eAEI,iDAAC,gEAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE;AAAzB,kBACI,iDAAC,2EAAD;AAAY,SAAK,EAAC;AAAlB,IADJ,EAEK,EAAClC,gBAAD,aAACA,gBAAD,eAACA,gBAAgB,CAAE7B,MAAnB,kBACG,iDAAC,gEAAD;AAAM,QAAI,MAAV;AAAW,MAAE;AAAb,kBACI,iDAAC,gFAAD;AAAc,gBAAY,EAAEtC,kFAAYA;AAAxC,IADJ,CAHR,EAOKmE,gBAAgB,CACZb,MADJ,CACWC,GAAG,IAAI,CAACa,eAAD,IAAoBb,GAAG,KAAKa,eAD9C,EAEIT,GAFJ,CAEQJ,GAAG,iBACJ,iDAAC,gEAAD;AAAM,QAAI,MAAV;AAAW,OAAG,EAAEA,GAAG,CAACb;AAApB,KAA4BgC,eAA5B,gBACI,iDAAC,+DAAD,qBACI,iDAAC,sFAAD;AACI,UAAM,EAAEnB,GAAG,CAACzB,MADhB;AAEI,cAAU,EAAE,IAFhB;AAGI,aAAS,EAAE;AAHf,IADJ,eAMI,iDAAC,+DAAD,qBACI,iDAAC,6DAAD;AACI,WAAO,EAAE,UADb;AAEI,WAAO,EAAEkE,2BAA2B,CAChCzC,GADgC;AAFxC,KAMKa,eAAe,KAAKb,GAApB,GACK,UADL,GAEK,QARV,CADJ,CANJ,CADJ,CAHP,CAPL,EAgCKwB,QAAQ,iBACL,iHACI,iDAAC,2EAAD;AAAY,SAAK,EAAC;AAAlB,IADJ,EAEK,EAACT,SAAD,aAACA,SAAD,eAACA,SAAS,CAAEhC,MAAZ,kBACG,iDAAC,gEAAD;AAAM,QAAI,MAAV;AAAW,MAAE;AAAb,kBACI,iDAAC,sEAAD;AAAO,YAAQ,EAAC;AAAhB,+BAC2B,GAD3B,eAEI,+EAFJ,qCADJ,CAHR,EAWKgC,SAXL,aAWKA,SAXL,uBAWKA,SAAS,CACJX,GADL,CACS;AAAA,QAAC;AAAElB,MAAAA,OAAF;AAAWhG,MAAAA,QAAX;AAAqBC,MAAAA;AAArB,KAAD;AAAA,WAAuC;AACzC+F,MAAAA,OADyC;AAEzCf,MAAAA,KAAK,EAAEW,GAAG,CAACsD,IAAJ,CAASlD,OAAT,CAFkC;AAGzChG,MAAAA,QAHyC;AAIzCC,MAAAA;AAJyC,KAAvC;AAAA,GADT,EAOIiH,GAPJ,CAQO,QAEImC,KAFJ;AAAA,QACI;AAAErD,MAAAA,OAAF;AAAWf,MAAAA,KAAX;AAAkBjF,MAAAA,QAAlB;AAA4BC,MAAAA;AAA5B,KADJ;AAAA,wBAII,iDAAC,gEAAD;AACI,UAAI;AADR,OAEQgI,eAFR;AAGI,SAAG,EAAEjC;AAHT,qBAKI,iDAAC,+DAAD,qBACI,iDAAC,sFAAD;AACI,YAAM,EAAEf,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEG,OAAP,CAAeC,MAD3B;AAEI,gBAAU,EAAE;AAFhB,MADJ,eAKI,iDAAC,+DAAD,QACKJ,KAAK,gBACF,iDAAC,+DAAD;AAAY,aAAO,EAAC;AAApB,OAEQA,KAAK,CAACG,OAAN,CAAcmC,IAFtB,SAGQhD,2FAAQ,CACRU,KAAK,CAACsC,IADE,CAHhB,CADE,gBASF,iDAAC,sEAAD;AAAO,cAAQ,EAAC;AAAhB,oBACI,iDAAC,+DAAD,2BADJ,CAVR,eAiBI,iDAAC,+DAAD;AAAY,aAAO,EAAC;AAApB,OACKzI,sGAAiB,CACdkB,QADc,EAEdC,SAFc,EAGd,IAHc,CADtB,CAjBJ,CALJ,eA8BI,iDAAC,+DAAD,qBACI,iDAAC,qFAAD;AACI,WAAK,EAAE,gBADX;AAEI,aAAO,EAAEmJ,mBAAmB,CACxBC,KADwB;AAFhC,oBAMI,iDAAC,4EAAD,OANJ,CADJ,CA9BJ,CALJ,CAJJ;AAAA,GARP,CAXL,eAwEI,iDAAC,gEAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,iDAAC,gEAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE;AAAzB,kBACI,iDAAC,gEAAD;AAAM,QAAI;AAAV,kBACI,iDAAC,6DAAD;AACI,WAAO,EAAC,WADZ;AAEI,SAAK,EAAC,SAFV;AAGI,WAAO,EAAElB;AAHb,mBADJ,CADJ,eAUI,iDAAC,gEAAD;AAAM,QAAI;AAAV,kBACI,iDAAC,6DAAD;AACI,OAAG,EAAED,SADT;AAEI,WAAO,EAAC,UAFZ;AAGI,QAAI,EAAEsB;AAHV,cADJ,CAVJ,eAmBI,iDAAC,gEAAD;AAAM,QAAI;AAAV,kBACI,iDAAC,yEAAD,qBACI,iDAAC,YAAD;AACI,QAAI,EAAE,KADV;AAEI,QAAI,EAAC,QAFT;AAGI,mBAAe,EACXI,mBAJR;AAMI,iBAAa,EAAE,CAAC,kBAAD;AANnB,IADJ,CADJ,CAnBJ,CADJ,CAxEJ,CAjCR,CAFJ,eAgJI,iDAAC,+DAAD;AACI,QAAI,EAAE7B,IADV;AAEI,WAAO,EAAEK,cAFb;AAGI,YAAQ,EAAE,IAHd;AAII,aAAS,EAAE;AAJf,kBAMI,iDAAC,qFAAD;AAAsB,WAAO,EAAEA;AAA/B,mBANJ,eASI,iDAAC,+DAAD,qBACI,iDAAC,cAAD;AAAgB,SAAK,EAAEd;AAAvB,IADJ,CATJ,CAhJJ,CADJ;AAgKH","sources":["webpack://jacdac-docs/./src/components/ui/GridHeader.tsx","webpack://jacdac-docs/./src/components/ui/KeyboardKeyInput.tsx","webpack://jacdac-docs/./src/components/useGridBreakpoints.ts","webpack://jacdac-docs/./src/pages/tools/hid-events.tsx"],"sourcesContent":["import { Box, Chip, Grid, Typography } from \"@mui/material\"\nimport { styled } from \"@mui/material/styles\"\nimport React from \"react\"\nimport clsx from \"clsx\"\n\nconst PREFIX = \"GridHeader\"\n\nconst classes = {\n    hr: `${PREFIX}-hr`,\n    start: `${PREFIX}-start`,\n}\n\nconst StyledGrid = styled(Grid)(({ theme }) => ({\n    [`& .${classes.hr}`]: {\n        background: theme.palette.text.disabled,\n        marginBottom: \"unset\",\n    },\n\n    [`& .${classes.start}`]: {\n        width: theme.spacing(2),\n    },\n}))\n\nexport default function GridHeader(props: {\n    title?: string\n    count?: number\n    variant?: \"subtitle1\" | \"caption\" | \"subtitle2\"\n    action?: JSX.Element\n}) {\n    const { title, count, variant, action } = props\n\n    return (\n        <StyledGrid item xs={12}>\n            <Grid\n                container\n                direction=\"row\"\n                spacing={1}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item>\n                    <hr className={clsx(classes.hr, classes.start)} />\n                </Grid>\n                <Grid item>\n                    {action && (\n                        <Box component=\"span\" mr={1}>\n                            {action}\n                        </Box>\n                    )}\n                    <Typography\n                        component=\"span\"\n                        variant={variant || \"subtitle1\"}\n                    >\n                        {title}\n                    </Typography>\n                    {count !== undefined && (\n                        <Box component=\"span\" ml={0.5}>\n                            <Chip label={count} />\n                        </Box>\n                    )}\n                </Grid>\n                <Grid item xs>\n                    <hr className={classes.hr} />\n                </Grid>\n            </Grid>\n        </StyledGrid>\n    )\n}\n","import React, { useContext, useEffect, useMemo, useRef, useState } from \"react\"\nimport { styled } from \"@mui/material/styles\"\nimport { HidKeyboardModifiers } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport Keyboard from \"react-simple-keyboard\"\nimport \"react-simple-keyboard/build/css/index.css\"\nimport DarkModeContext from \"./DarkModeContext\"\nimport { useId } from \"react-use-id-hook\"\nimport {\n    modifierCodes,\n    renderKeyboardKey,\n    selectors,\n} from \"../../../jacdac-ts/src/servers/hidkeyboardserver\"\nimport useMediaQueries from \"../hooks/useMediaQueries\"\n\nconst PREFIX = \"KeyboardKeyInput\"\n\nconst classes = {\n    capture: `${PREFIX}-capture`,\n    darkKeyboard: `${PREFIX}-darkKeyboard`,\n    keyboard: `${PREFIX}-keyboard`,\n}\n\nconst Root = styled(\"div\")(({ theme }) => ({\n    [`& .${classes.capture}`]: {\n        cursor: \"pointer\",\n        \"&:hover\": {\n            borderColor: theme.palette.primary.main,\n        },\n        \"&:focus\": {\n            borderColor: theme.palette.action.active,\n        },\n    },\n\n    [`& .${classes.darkKeyboard}`]: {\n        backgroundColor: \"#333 !important\",\n        borderColor: \"#777 !important\",\n        color: \"white !important\",\n        \"& .hg-button\": {\n            background: \"rgba(0, 0, 0, 0.5) !important\",\n            color: \"white\",\n        },\n        \"& .hg-button.buttonSelected\": {\n            background: `${theme.palette.primary.dark} !important`,\n            color: \"white !important\",\n        },\n    },\n\n    [`& .${classes.keyboard}`]: {\n        \"& .buttonSelected\": {\n            background: `${theme.palette.primary.dark} !important`,\n            color: \"white !important\",\n        },\n    },\n}))\n\nexport default function KeyboardKeyInput(props: {\n    initialSelector?: number\n    initialModifiers?: HidKeyboardModifiers\n    selector?: number\n    modifiers?: HidKeyboardModifiers\n    onChange: (newSelector: number, newModifiers: HidKeyboardModifiers) => void\n}) {\n    const { initialSelector, initialModifiers, selector, modifiers, onChange } =\n        props\n    const uncontrolled = useMemo(\n        () => selector === undefined || modifiers === undefined,\n        []\n    )\n    const [selector_, setSelector_] = useState<number>(initialSelector || 0)\n    const [modifiers_, setModifiters_] = useState<HidKeyboardModifiers>(\n        initialModifiers || HidKeyboardModifiers.None\n    )\n    const { darkMode } = useContext(DarkModeContext)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const keyboardRef = useRef<any>()\n\n    const theme = `hg-theme-default hg-layout-default ${\n        darkMode === \"dark\" ? classes.darkKeyboard : classes.keyboard\n    }`\n    const { mobile } = useMediaQueries()\n    const layoutName = mobile ? \"mobile\" : \"default\"\n    const keyboardId = useId()\n\n    const layout = {\n        default: [\n            \"{escape} {f1} {f2} {f3} {f4} {f5} {f6} {f7} {f8} {f9} {f10} {f11} {f12}\",\n            \"` 1 2 3 4 5 6 7 8 9 0 - = {backspace}\",\n            \"{tab} q w e r t y u i o p [ ] \\\\\",\n            \"{capslock} a s d f g h j k l ; ' {enter}\",\n            \"{shiftleft} z x c v b n m , . / {shiftright}\",\n            \"{controlleft} {altleft} {metaleft} {space} {metaright} {altright}\",\n        ],\n        mobile: [\n            \"{escape} {f1} {f2} {f3} {f4} {f5}\",\n            \"{f6} {f7} {f8} {f9} {f10} {f11} {f12}\",\n            \"` 1 2 3 4 5 6\",\n            \"7 8 9 0 - = {backspace}\",\n            \"{tab} q w e r t\",\n            \"y u i o p [ ] \\\\\",\n            \"{capslock} a s d f g\",\n            \"h j k l ; ' {enter}\",\n            \"{shiftleft} z x c v b\",\n            \"n m , . / {shiftright}\",\n            \"{controlleft} {altleft} {metaleft} {space}\",\n            \"{metaright} {altright}\",\n        ],\n    }\n    const display = {\n        \"{escape}\": \"esc ⎋\",\n        \"{tab}\": \"tab ⇥\",\n        \"{backspace}\": \"backspace ⌫\",\n        \"{enter}\": \"enter ↵\",\n        \"{capslock}\": \"caps lock ⇪\",\n        \"{shiftleft}\": \"shift ⇧\",\n        \"{shiftright}\": \"shift ⇧\",\n        \"{controlleft}\": \"ctrl ⌃\",\n        \"{controlright}\": \"ctrl ⌃\",\n        \"{altleft}\": \"alt ⌥\",\n        \"{altright}\": \"alt ⌥\",\n        \"{metaleft}\": \"cmd ⌘\",\n        \"{metaright}\": \"cmd ⌘\",\n        \"{space}\": \"⎵\",\n    }\n    const handleKeyboardKeyPress = (code: string) => {\n        code = code.toLowerCase().replace(/[{}]/g, \"\")\n        let newSelector = selector_\n        let newModifiers = modifiers_\n        const msel = selectors[code]\n        const mcode = modifierCodes[code]\n        if (msel) {\n            if (msel === selector) newSelector = undefined\n            else newSelector = msel\n        } else {\n            if (mcode) {\n                if (newModifiers & mcode) newModifiers &= ~mcode\n                else newModifiers |= mcode\n            }\n        }\n        setSelector_(newSelector)\n        setModifiters_(newModifiers)\n        onChange(newSelector, newModifiers)\n    }\n\n    // update external values\n    useEffect(() => {\n        if (selector !== undefined) {\n            if (uncontrolled)\n                console.warn(`trying to set an uncontrolled selector`)\n            setSelector_(selector)\n        }\n    }, [selector])\n    useEffect(() => {\n        if (modifiers !== undefined) {\n            if (uncontrolled)\n                console.warn(`trying to set an uncontrolled modifier`)\n            setModifiters_(modifiers)\n        }\n    }, [modifiers])\n\n    const value = renderKeyboardKey(selector_, modifiers_, false)\n    useEffect(() => {\n        keyboardRef.current?.addButtonTheme(value, \"buttonSelected\")\n        return () =>\n            keyboardRef.current?.removeButtonTheme(value, \"buttonSelected\")\n    }, [value])\n\n    return (\n        <Root>\n            <Keyboard\n                baseClass={keyboardId}\n                keyboardRef={r => (keyboardRef.current = r)}\n                onKeyPress={handleKeyboardKeyPress}\n                layout={layout}\n                layoutName={layoutName}\n                theme={theme}\n                display={display}\n                mergeDisplay={true}\n            />\n        </Root>\n    )\n}\n","import { GridSize } from \"@mui/material\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize\n    md?: GridSize\n    sm?: GridSize\n    lg?: GridSize\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(\n    itemCount?: number\n): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n\n    if (itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2:\n                return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3:\n                return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (drawerType != DrawerType.None)\n        return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else\n        return {\n            xs: 12,\n            sm: 6,\n            md: 4,\n            lg: 4,\n            xl: 3,\n        }\n}\n","import React, {\n    lazy,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    Dialog,\n    DialogContent,\n    Grid,\n    Typography,\n} from \"@mui/material\"\nimport useChange from \"../../jacdac/useChange\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    HidKeyboardModifiers,\n    SRV_CONTROL,\n    SRV_LOGGER,\n    SRV_PROTO_TEST,\n    SRV_ROLE_MANAGER,\n    SRV_SETTINGS,\n    SystemEvent,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport JDEvent from \"../../../jacdac-ts/src/jdom/event\"\nimport KeyboardKeyInput from \"../../components/ui/KeyboardKeyInput\"\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport DeleteIcon from \"@mui/icons-material/Delete\"\nimport SettingsClient from \"../../../jacdac-ts/src/jdom/clients/settingsclient\"\nimport useServiceClient from \"../../components/useServiceClient\"\nimport {\n    arrayConcatMany,\n    clone,\n    fromHex,\n    toHex,\n} from \"../../../jacdac-ts/src/jdom/utils\"\nimport { jdpack, jdunpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport { randomDeviceId } from \"../../../jacdac-ts/src/jdom/random\"\nimport JDBus from \"../../../jacdac-ts/src/jdom/bus\"\nimport useServices from \"../../components/hooks/useServices\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport Alert from \"../../components/ui/Alert\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport { humanify } from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport useGridBreakpoints from \"../../components/useGridBreakpoints\"\nimport Suspense from \"../../components/ui/Suspense\"\nimport useServiceProviderFromServiceClass from \"../../components/hooks/useServiceProviderFromServiceClass\"\nimport AppContext from \"../../components/AppContext\"\nimport { AlertTitle } from \"@mui/material\"\nimport { renderKeyboardKey } from \"../../../jacdac-ts/src/servers/hidkeyboardserver\"\nimport DialogTitleWithClose from \"../../components/ui/DialogTitleWithClose\"\nconst ImportButton = lazy(() => import(\"../../components/ImportButton\"))\n\n// all settings keys are prefixed with this string\nconst PREFIX = \"@ke_\"\n// data layout format (18bytes)\nconst FORMAT = \"b[8] u32 u8 u8 u16 u16\"\n// data layout types\ntype FORMAT_TYPE = [Uint8Array, number, number, number, number, number]\n\ninterface HIDEvent {\n    key?: string\n    eventId: string\n    selector: number\n    modifiers: HidKeyboardModifiers\n}\n\nfunction HIDEventToBuffer(event: JDEvent, ev: HIDEvent) {\n    const deviceId = fromHex(event.service.device.deviceId)\n    const { service, code } = event\n    const { serviceClass, serviceIndex } = service\n    const { selector, modifiers } = ev\n    const payload = jdpack<FORMAT_TYPE>(FORMAT, [\n        deviceId,\n        serviceClass,\n        serviceIndex,\n        code,\n        selector,\n        modifiers,\n    ])\n    return payload\n}\n\nfunction bufferToHIDEvent(key: string, data: Uint8Array, bus: JDBus): HIDEvent {\n    if (data?.length !== 18) return undefined\n    const [\n        deviceId,\n        serviceClass,\n        serviceIndex,\n        eventCode,\n        selector,\n        modifiers,\n    ] = jdunpack<FORMAT_TYPE>(data, FORMAT)\n    const deviceIds = toHex(deviceId)\n    const device = bus.device(deviceIds, true)\n    const event = device?.service(serviceIndex)?.event(eventCode)\n\n    if (!event || event.service.serviceClass !== serviceClass) return undefined\n    return {\n        key,\n        eventId: event.id,\n        selector,\n        modifiers,\n    }\n}\n\nfunction SelectHIDEvent(props: { onAdd: (hidEvent: HIDEvent) => void }) {\n    const { onAdd } = props\n    const [event, setEvent] = useState<JDEvent>()\n    const [selector, setSelector] = useState(0)\n    const [modifiers, setModifiers] = useState(HidKeyboardModifiers.None)\n\n    const excludedServices = [\n        SRV_CONTROL,\n        SRV_PROTO_TEST,\n        SRV_ROLE_MANAGER,\n        SRV_SETTINGS,\n        SRV_LOGGER,\n    ]\n    const eventFilter = (ev: JDEvent) =>\n        ev.code !== SystemEvent.StatusCodeChanged\n    const services = useServices({\n        ignoreInfrastructure: true,\n        specification: true,\n    })\n        .filter(srv => excludedServices.indexOf(srv.serviceClass) < 0)\n        .filter(srv => srv.events.some(eventFilter))\n    const events = arrayConcatMany(\n        services.map(service => service.events.filter(eventFilter))\n    )\n\n    const handleClickEvent = (newEvent: JDEvent) => () =>\n        setEvent(event === newEvent ? undefined : newEvent)\n\n    const handleKeyChange = (\n        newSelector: number,\n        newModifiers: HidKeyboardModifiers\n    ) => {\n        setSelector(newSelector)\n        setModifiers(newModifiers)\n    }\n    const disabled = !event || !selector\n    const handleAdd = () => onAdd({ eventId: event.id, selector, modifiers })\n\n    return (\n        <Grid container spacing={2}>\n            {!events?.length && (\n                <Grid item xs={12}>\n                    <Alert severity=\"info\">\n                        Connect your devices to bind keyboard commands.\n                    </Alert>\n                </Grid>\n            )}\n            {events\n                .filter(ev => !event || ev === event)\n                .map(ev => (\n                    <Grid item xs={12} sm={6} lg={4} xl={3} key={ev.id}>\n                        <Card>\n                            <DeviceCardHeader\n                                device={ev.service.device}\n                                showAvatar={true}\n                            />\n                            <CardContent>\n                                <Typography variant=\"h5\">\n                                    {ev.service.name}\n                                </Typography>\n                                <Typography variant=\"h4\">\n                                    {humanify(ev.name)}\n                                </Typography>\n                            </CardContent>\n                            <CardActions>\n                                <Button\n                                    onClick={handleClickEvent(ev)}\n                                    variant={\"outlined\"}\n                                >\n                                    {ev === event ? \"unselect\" : \"select\"}\n                                </Button>\n                            </CardActions>\n                        </Card>\n                    </Grid>\n                ))}\n            {event && (\n                <>\n                    <GridHeader title=\"Enter your keyboard/mouse command\" />\n                    <Grid item xs={12}>\n                        <KeyboardKeyInput\n                            selector={selector}\n                            modifiers={modifiers}\n                            onChange={handleKeyChange}\n                        />\n                    </Grid>\n                </>\n            )}\n            {!disabled && (\n                <>\n                    <GridHeader title=\"Save your binding\" />\n                    <Grid item xs={12}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={disabled}\n                            onClick={handleAdd}\n                        >\n                            Save binding\n                        </Button>\n                    </Grid>\n                </>\n            )}\n        </Grid>\n    )\n}\n\nexport default function HIDEvents() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { setError } = useContext(AppContext)\n    const settingsServices = useServices({ serviceClass: SRV_SETTINGS })\n    const [settingsService, setSettingsService] = useState<JDService>()\n    const [hidEvents, setHIDEvents] = useState<HIDEvent[]>([])\n    const [open, setOpen] = useState(false)\n    const gridBreakpoints = useGridBreakpoints()\n    const exportRef = useRef()\n\n    const handleOpenAdd = () => setOpen(true)\n    const handleCloseAdd = () => setOpen(false)\n\n    const factory = useCallback(srv => new SettingsClient(srv), [])\n    const settings = useServiceClient(settingsService, factory)\n\n    useServiceProviderFromServiceClass(SRV_SETTINGS)\n    useChange(settings, async () => {\n        const hes: HIDEvent[] = []\n        if (settings) {\n            const all = await settings.list()\n            for (const kv of all.filter(entry =>\n                entry.key?.startsWith(PREFIX)\n            )) {\n                const { key, value } = kv\n                const he = bufferToHIDEvent(key, value, bus)\n                if (he) hes.push(he)\n            }\n        }\n        if (JSON.stringify(hes) !== JSON.stringify(hidEvents)) setHIDEvents(hes)\n    })\n    const handleAdd = async (hidEvent: HIDEvent) => {\n        setOpen(false)\n\n        const event = bus.node(hidEvent.eventId) as JDEvent\n        if (!event) return\n\n        const payload = HIDEventToBuffer(event, hidEvent)\n        settings.setValue(PREFIX + randomDeviceId(), payload)\n    }\n    const handleRemoveBinding = (index: number) => () => {\n        const { key } = hidEvents[index]\n        if (key) settings.deleteValue(key)\n    }\n    const handleSelectSettingsService = (service: JDService) => () =>\n        setSettingsService(settingsService === service ? undefined : service)\n\n    const exportUri =\n        hidEvents &&\n        `data:application/json;charset=UTF-8,${encodeURIComponent(\n            JSON.stringify(\n                clone(hidEvents).map(h => {\n                    delete h.key\n                    return h\n                })\n            )\n        )}`\n    useEffect(() => {\n        if (exportRef.current)\n            (exportRef.current as HTMLAnchorElement).download = \"bindings.json\"\n    }, [exportRef.current])\n    const handleFilesUploaded = async (files: File[]) => {\n        for (const file of files) {\n            try {\n                const text = await file.text()\n                const json = JSON.parse(text)\n                if (Array.isArray(json)) {\n                    for (const hidEvent of json as HIDEvent[]) {\n                        const event = bus.node(hidEvent.eventId) as JDEvent\n                        if (event) {\n                            const payload = HIDEventToBuffer(event, hidEvent)\n                            settings.setValue(\n                                PREFIX + randomDeviceId(),\n                                payload\n                            )\n                        }\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n                setError(`invalid file ${file.name}`)\n            }\n        }\n    }\n    return (\n        <>\n            <h1>Accessibility Adapter</h1>\n            <Grid container spacing={1}>\n                <GridHeader title=\"Select an adapter\" />\n                {!settingsServices?.length && (\n                    <Grid item xs>\n                        <ConnectAlert serviceClass={SRV_SETTINGS} />\n                    </Grid>\n                )}\n                {settingsServices\n                    .filter(srv => !settingsService || srv === settingsService)\n                    .map(srv => (\n                        <Grid item key={srv.id} {...gridBreakpoints}>\n                            <Card>\n                                <DeviceCardHeader\n                                    device={srv.device}\n                                    showAvatar={true}\n                                    showMedia={true}\n                                />\n                                <CardActions>\n                                    <Button\n                                        variant={\"outlined\"}\n                                        onClick={handleSelectSettingsService(\n                                            srv\n                                        )}\n                                    >\n                                        {settingsService === srv\n                                            ? \"unselect\"\n                                            : \"select\"}\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                {settings && (\n                    <>\n                        <GridHeader title=\"Command Bindings\" />\n                        {!hidEvents?.length && (\n                            <Grid item xs>\n                                <Alert severity=\"info\">\n                                    No bindings yet! Click{\" \"}\n                                    <strong>Add binding</strong> to start\n                                    building your adapter.\n                                </Alert>\n                            </Grid>\n                        )}\n                        {hidEvents\n                            ?.map(({ eventId, selector, modifiers }) => ({\n                                eventId,\n                                event: bus.node(eventId) as JDEvent,\n                                selector,\n                                modifiers,\n                            }))\n                            .map(\n                                (\n                                    { eventId, event, selector, modifiers },\n                                    index\n                                ) => (\n                                    <Grid\n                                        item\n                                        {...gridBreakpoints}\n                                        key={eventId}\n                                    >\n                                        <Card>\n                                            <DeviceCardHeader\n                                                device={event?.service.device}\n                                                showAvatar={true}\n                                            />\n                                            <CardContent>\n                                                {event ? (\n                                                    <Typography variant=\"h6\">\n                                                        {`${\n                                                            event.service.name\n                                                        } ${humanify(\n                                                            event.name\n                                                        )}`}\n                                                    </Typography>\n                                                ) : (\n                                                    <Alert severity=\"warning\">\n                                                        <AlertTitle>\n                                                            Device not found\n                                                        </AlertTitle>\n                                                    </Alert>\n                                                )}\n\n                                                <Typography variant=\"h5\">\n                                                    {renderKeyboardKey(\n                                                        selector,\n                                                        modifiers,\n                                                        true\n                                                    )}\n                                                </Typography>\n                                            </CardContent>\n                                            <CardActions>\n                                                <IconButtonWithTooltip\n                                                    title={\"Remove binding\"}\n                                                    onClick={handleRemoveBinding(\n                                                        index\n                                                    )}\n                                                >\n                                                    <DeleteIcon />\n                                                </IconButtonWithTooltip>\n                                            </CardActions>\n                                        </Card>\n                                    </Grid>\n                                )\n                            )}\n                        <Grid item xs={12}>\n                            <Grid container spacing={1}>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleOpenAdd}\n                                    >\n                                        Add binding\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        ref={exportRef}\n                                        variant=\"outlined\"\n                                        href={exportUri}\n                                    >\n                                        Export\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Suspense>\n                                        <ImportButton\n                                            icon={false}\n                                            text=\"Import\"\n                                            onFilesUploaded={\n                                                handleFilesUploaded\n                                            }\n                                            acceptedFiles={[\"application/json\"]}\n                                        />\n                                    </Suspense>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </>\n                )}\n            </Grid>\n            <Dialog\n                open={open}\n                onClose={handleCloseAdd}\n                maxWidth={\"lg\"}\n                fullWidth={true}\n            >\n                <DialogTitleWithClose onClose={handleCloseAdd}>\n                    Add binding\n                </DialogTitleWithClose>\n                <DialogContent>\n                    <SelectHIDEvent onAdd={handleAdd} />\n                </DialogContent>\n            </Dialog>\n        </>\n    )\n}\n"],"names":["Box","Chip","Grid","Typography","styled","React","clsx","PREFIX","classes","hr","start","StyledGrid","theme","background","palette","text","disabled","marginBottom","width","spacing","GridHeader","props","title","count","variant","action","undefined","useContext","useEffect","useMemo","useRef","useState","HidKeyboardModifiers","Keyboard","DarkModeContext","useId","modifierCodes","renderKeyboardKey","selectors","useMediaQueries","capture","darkKeyboard","keyboard","Root","cursor","borderColor","primary","main","active","backgroundColor","color","dark","KeyboardKeyInput","initialSelector","initialModifiers","selector","modifiers","onChange","uncontrolled","selector_","setSelector_","modifiers_","setModifiters_","None","darkMode","keyboardRef","mobile","layoutName","keyboardId","layout","default","display","handleKeyboardKeyPress","code","toLowerCase","replace","newSelector","newModifiers","msel","mcode","console","warn","value","current","addButtonTheme","removeButtonTheme","r","AppContext","DrawerType","useGridBreakpoints","itemCount","drawerType","xs","sm","md","lg","xl","lazy","useCallback","JacdacContext","Card","CardActions","CardContent","Dialog","DialogContent","useChange","SRV_CONTROL","SRV_LOGGER","SRV_PROTO_TEST","SRV_ROLE_MANAGER","SRV_SETTINGS","SystemEvent","IconButtonWithTooltip","DeleteIcon","SettingsClient","useServiceClient","arrayConcatMany","clone","fromHex","toHex","jdpack","jdunpack","randomDeviceId","useServices","Button","Alert","humanify","ConnectAlert","DeviceCardHeader","Suspense","useServiceProviderFromServiceClass","AlertTitle","DialogTitleWithClose","ImportButton","FORMAT","HIDEventToBuffer","event","ev","deviceId","service","device","serviceClass","serviceIndex","payload","bufferToHIDEvent","key","data","bus","length","eventCode","deviceIds","eventId","id","SelectHIDEvent","onAdd","setEvent","setSelector","setModifiers","excludedServices","eventFilter","StatusCodeChanged","services","ignoreInfrastructure","specification","filter","srv","indexOf","events","some","map","handleClickEvent","newEvent","handleKeyChange","handleAdd","name","HIDEvents","setError","settingsServices","settingsService","setSettingsService","hidEvents","setHIDEvents","open","setOpen","gridBreakpoints","exportRef","handleOpenAdd","handleCloseAdd","factory","settings","hes","all","list","kv","entry","startsWith","he","push","JSON","stringify","hidEvent","node","setValue","handleRemoveBinding","index","deleteValue","handleSelectSettingsService","exportUri","encodeURIComponent","h","download","handleFilesUploaded","files","file","json","parse","Array","isArray","e"],"sourceRoot":""}