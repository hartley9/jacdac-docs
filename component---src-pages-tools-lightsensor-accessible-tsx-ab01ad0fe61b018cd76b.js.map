{"version":3,"file":"component---src-pages-tools-lightsensor-accessible-tsx-ab01ad0fe61b018cd76b.js","mappings":"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","sources":["webpack://jacdac-docs/./src/pages/tools/lightsensor-accessible.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport {\n    REPORT_UPDATE,\n    SRV_LIGHT_LEVEL,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { throttle } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useServices from \"../../components/hooks/useServices\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    Grid,\n    FormControl,\n    FormControlLabel,\n    FormLabel,\n    Radio,\n    RadioGroup,\n    Typography,\n} from \"@mui/material\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport useBuzzerPlayTone from \"../../components/hooks/useBuzzerPlayTone\"\nimport Dashboard from \"../../components/dashboard/Dashboard\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport { useId } from \"react-use-id-hook\"\n\nconst TONE_DURATION = 50\nconst TONE_THROTTLE = 100\n\n// this is a React component that gets run numerous time,\n// whenever a change is detected in the React state\n// for example, useServices is a hook that tracks the light level services,\n// so it will render again and update the light array whenever the bus connects/disconnects\n// a light sensor\nexport default function LightsensorAccessible() {\n    const { playTone, toggleBrowserAudio, browserAudio } = useBuzzerPlayTone()\n\n    // identifiers for accessibility\n    const sectionId = useId()\n\n    // useServices accepts a number of filters and returns any services that match\n    // get all led light sensor services\n    // under the hood, it uses the bus and events.\n    const lightSensors = useServices({ serviceClass: SRV_LIGHT_LEVEL })\n    console.log(\"light sensors: \" + lightSensors)\n\n    // create a state variable to hold the service selected as our light sensor\n    // when using setLightService, React will render again this component\n    const [lightService, setLightService] = useState<JDService>()\n\n    //used to hold user selection of the property of the sound to vary. Default is the frequency.\n    const [sonificationProperty, setSonificationProperty] =\n        useState(\"frequency\")\n\n    const handleSelectLightService = light => () => {\n        console.log(light)\n        lightService == light\n            ? setLightService(undefined)\n            : setLightService(light)\n    }\n    //handler for property selection to sonify.\n    const handlePropertySelectionChange = event => {\n        setSonificationProperty(event.target.value)\n    }\n\n    // filter to only show light sensors in dashboard\n    const dashboardDeviceFilter = (d: JDDevice) => d.hasService(SRV_LIGHT_LEVEL)\n\n    // register for light sensor data events\n    useEffect(() => {\n        // ?. checks that the callee is defined\n        const unsubs = lightService?.readingRegister.subscribe(\n            REPORT_UPDATE,\n            // don't trigger more than every 100ms\n            throttle(async () => {\n                // get amount of light\n                //console.log(lightService.readingRegister.unpackedValue)\n                const [lightLevel] = lightService.readingRegister.unpackedValue\n                let volume = 1\n                let toneFrequencyOffset = 0\n                if (sonificationProperty == \"frequency\") {\n                    toneFrequencyOffset = lightLevel\n                } else {\n                    volume = lightLevel % 0.99\n                }\n\n                await playTone(\n                    1000 + toneFrequencyOffset * 1000,\n                    TONE_DURATION,\n                    volume\n                )\n            }, TONE_THROTTLE)\n        )\n\n        // cleanup callback\n        return () => unsubs?.()\n    }, [lightService, playTone]) // re-register if light sensor changes\n\n    return (\n        <>\n            <section id={sectionId}>\n                <Grid container spacing={2}>\n                    <GridHeader title=\"Audio controls\" />\n                    <Grid item xs={12}>\n                        <Button\n                            variant={\"outlined\"}\n                            onClick={toggleBrowserAudio}\n                        >\n                            {browserAudio\n                                ? \"Stop browser audio\"\n                                : \"Start browser audio\"}\n                        </Button>\n                        {!lightSensors && (\n                            <>\n                                <GridHeader title=\"Connect a device\" />\n                                <Grid item xs>\n                                    <ConnectAlert\n                                        serviceClass={SRV_LIGHT_LEVEL}\n                                    />\n                                </Grid>\n                            </>\n                        )}\n                        {lightSensors.length && (\n                            <>\n                                <GridHeader title=\"Available Lightsensors\" />\n                                {lightSensors.map(lightSensor => (\n                                    <Grid\n                                        item\n                                        xs={12}\n                                        sm={6}\n                                        lg={4}\n                                        xl={3}\n                                        key={lightSensor.id}\n                                    >\n                                        <Card>\n                                            <DeviceCardHeader\n                                                device={lightSensor.device}\n                                                showAvatar={true}\n                                                showMedia={true}\n                                            />\n                                        </Card>\n                                        <CardContent>\n                                            <Typography variant=\"h5\">\n                                                {(lightSensor === lightService\n                                                    ? \"Streaming from \"\n                                                    : \"\") +\n                                                    (lightSensor.device\n                                                        .isPhysical\n                                                        ? \"Physical\"\n                                                        : \"Virtual\") +\n                                                    `LightSensor ${lightSensor.friendlyName}`}\n                                            </Typography>\n                                        </CardContent>\n                                        <CardActions>\n                                            <FormControl component=\"fieldset\">\n                                                <FormLabel component=\"legend\">\n                                                    Select property of sound to\n                                                    change\n                                                </FormLabel>\n                                                <RadioGroup\n                                                    aria-label=\"sonification property\"\n                                                    name=\"soundProperty\"\n                                                    value={sonificationProperty}\n                                                    onChange={\n                                                        handlePropertySelectionChange\n                                                    }\n                                                >\n                                                    <FormControlLabel\n                                                        value=\"frequency\"\n                                                        control={<Radio />}\n                                                        label=\"buzzer frequency\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"volume\"\n                                                        control={<Radio />}\n                                                        label=\"buzzer volume\"\n                                                    />\n                                                </RadioGroup>\n                                            </FormControl>\n                                            <Button\n                                                variant={\"outlined\"}\n                                                onClick={handleSelectLightService(\n                                                    lightSensor\n                                                )}\n                                            >\n                                                {lightSensor === lightService\n                                                    ? \"Stop streaming\"\n                                                    : \"Start streaming\"}\n                                            </Button>\n                                        </CardActions>\n                                    </Grid>\n                                ))}\n                            </>\n                        )}\n                    </Grid>\n                </Grid>\n            </section>\n            <Dashboard deviceFilter={dashboardDeviceFilter} />\n        </>\n    )\n}\n"],"names":["React","useEffect","useState","REPORT_UPDATE","SRV_LIGHT_LEVEL","throttle","useServices","GridHeader","Button","Card","CardActions","CardContent","Grid","FormControl","FormControlLabel","FormLabel","Radio","RadioGroup","Typography","ConnectAlert","DeviceCardHeader","useBuzzerPlayTone","Dashboard","useId","TONE_DURATION","TONE_THROTTLE","LightsensorAccessible","playTone","toggleBrowserAudio","browserAudio","sectionId","lightSensors","serviceClass","console","log","lightService","setLightService","sonificationProperty","setSonificationProperty","handleSelectLightService","light","undefined","handlePropertySelectionChange","event","target","value","dashboardDeviceFilter","d","hasService","unsubs","readingRegister","subscribe","lightLevel","unpackedValue","volume","toneFrequencyOffset","length","map","lightSensor","id","device","isPhysical","friendlyName"],"sourceRoot":""}