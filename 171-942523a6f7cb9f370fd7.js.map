{"version":3,"file":"171-942523a6f7cb9f370fd7.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEe,SAASQ,wBAAT,CAAkCC,KAAlC,EAAgE;AAC3E,MAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AACA,MAAME,QAAQ,GAAGR,kEAAK,EAAtB;AACA,MAAMS,OAAO,GAAGT,kEAAK,EAArB;AACA,MAAM;AAAA,OAACU,MAAD;AAAA,OAASC;AAAT,MAAsBb,+CAAQ,CAAC,EAAD,CAApC;AACA,MAAM;AAAA,OAACc,KAAD;AAAA,OAAQC;AAAR,MAAoBf,+CAAQ,CAAC,EAAD,CAAlC;AAEA,MAAMgB,OAAO,GAAGC,QAAQ,CAACL,MAAD,CAAxB;AACA,MAAMM,MAAM,GAAGD,QAAQ,CAACH,KAAD,CAAvB;AAEA,MAAMK,QAAQ,GAAGC,KAAK,CAACJ,OAAD,CAAL,IAAkBI,KAAK,CAACF,MAAD,CAAxC;;AAEA,MAAMG,kBAAkB,GAAIC,EAAD,IACvBT,SAAS,CAACS,EAAE,CAACC,MAAH,CAAUT,KAAV,CAAgBU,IAAhB,EAAD,CADb;;AAEA,MAAMC,iBAAiB,GAAIH,EAAD,IACtBP,QAAQ,CAACO,EAAE,CAACC,MAAH,CAAUT,KAAV,CAAgBU,IAAhB,EAAD,CADZ;;AAEA,MAAME,UAAU;AAAA,gHAAG;AAAA,mBACTjB,OAAO,CAACkB,kBAAR,CACF1B,8GADE,EAEF,CAACe,OAAD,EAAUE,MAAV,CAFE,EAGF,IAHE,CADS;AAAA,KAAH;;AAAA,oBAAVQ,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAOA,sBACI,iDAAC,kEAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE,CAAzB;AAA4B,aAAS,EAAC;AAAtC,kBACI,iDAAC,kEAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE,EAAf;AAAmB,MAAE,EAAE;AAAvB,kBACI,iDAAC,kEAAD;AACI,QAAI,EAAC,QADT;AAEI,MAAE,EAAEhB,QAFR;AAGI,SAAK,EAAC,QAHV;AAII,SAAK,EAAEE,MAJX;AAKI,YAAQ,EAAES,kBALd;AAMI,SAAK,EAAE,CAAC,CAACT,MAAF,IAAYQ,KAAK,CAACJ,OAAD,CAN5B;AAOI,cAAU,EACNI,KAAK,CAACJ,OAAD,CAAL,GACM,mCADN,GAEM;AAVd,IADJ,CADJ,eAgBI,iDAAC,kEAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE,EAAf;AAAmB,MAAE,EAAE;AAAvB,kBACI,iDAAC,kEAAD;AACI,QAAI,EAAC,QADT;AAEI,MAAE,EAAEL,OAFR;AAGI,SAAK,EAAC,OAHV;AAII,SAAK,EAAEG,KAJX;AAKI,YAAQ,EAAEW,iBALd;AAMI,SAAK,EAAEX,KAAK,IAAIM,KAAK,CAACF,MAAD,CANzB;AAOI,cAAU,EACNE,KAAK,CAACF,MAAD,CAAL,GACM,kCADN,GAEM;AAVd,IADJ,CAhBJ,eA+BI,iDAAC,kEAAD;AAAM,QAAI;AAAV,kBACI,iDAAC,2DAAD;AACI,SAAK,EAAC,cADV;AAEI,YAAQ,EAAEC,QAFd;AAGI,WAAO,EAAEO;AAHb,kBAKI,iDAAC,wEAAD,OALJ,CADJ,CA/BJ,CADJ;AA2CH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardCODALMessageBus.tsx"],"sourcesContent":["import React, { ChangeEvent, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { CodalMessageBusCmd } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { useId } from \"react-use-id-hook\"\nimport { Grid, TextField } from \"@material-ui/core\"\nimport SendIcon from \"@material-ui/icons/Send\"\nimport CmdButton from \"../CmdButton\"\n\nexport default function DashboardCODALMessageBus(props: DashboardServiceProps) {\n    const { service } = props\n    const sourceId = useId()\n    const valueId = useId()\n    const [source, setSource] = useState(\"\")\n    const [value, setValue] = useState(\"\")\n\n    const nsource = parseInt(source)\n    const nvalue = parseInt(value)\n\n    const disabled = isNaN(nsource) || isNaN(nvalue)\n\n    const handleSourceChange = (ev: ChangeEvent<HTMLInputElement>) =>\n        setSource(ev.target.value.trim())\n    const handleValueChange = (ev: ChangeEvent<HTMLInputElement>) =>\n        setValue(ev.target.value.trim())\n    const handleSend = async () =>\n        await service.sendCmdPackedAsync(\n            CodalMessageBusCmd.Send,\n            [nsource, nvalue],\n            true\n        )\n\n    return (\n        <Grid container spacing={1} direction=\"row\">\n            <Grid item xs={12} md={5}>\n                <TextField\n                    type=\"number\"\n                    id={sourceId}\n                    label=\"Source\"\n                    value={source}\n                    onChange={handleSourceChange}\n                    error={!!source && isNaN(nsource)}\n                    helperText={\n                        isNaN(nsource)\n                            ? \"source must be an unsigned number\"\n                            : \"source of the message\"\n                    }\n                />\n            </Grid>\n            <Grid item xs={12} md={5}>\n                <TextField\n                    type=\"number\"\n                    id={valueId}\n                    label=\"Value\"\n                    value={value}\n                    onChange={handleValueChange}\n                    error={value && isNaN(nvalue)}\n                    helperText={\n                        isNaN(nvalue)\n                            ? \"value must be an unsigned number\"\n                            : \"value of the message\"\n                    }\n                />\n            </Grid>\n            <Grid item>\n                <CmdButton\n                    title=\"send message\"\n                    disabled={disabled}\n                    onClick={handleSend}\n                >\n                    <SendIcon />\n                </CmdButton>\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["React","useState","CodalMessageBusCmd","useId","Grid","TextField","SendIcon","CmdButton","DashboardCODALMessageBus","props","service","sourceId","valueId","source","setSource","value","setValue","nsource","parseInt","nvalue","disabled","isNaN","handleSourceChange","ev","target","trim","handleValueChange","handleSend","sendCmdPackedAsync","Send"],"sourceRoot":""}