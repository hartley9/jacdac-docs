{"version":3,"file":"3753-bc90ddd43192756884f4.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@material-ui/icons/NavigateBefore.js","webpack://jacdac-docs/./src/components/dialogs/mb/TrainModelDialog.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"\n}), 'NavigateBefore');\n\nexports.default = _default;","import React, { lazy, useContext, useState, useMemo } from \"react\"\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    Grid,\n    LinearProgress,\n} from \"@material-ui/core\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport NavigateBackIcon from \"@material-ui/icons/NavigateBefore\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport DownloadIcon from \"@material-ui/icons/GetApp\"\nimport IconButtonWithTooltip from \"../../ui/IconButtonWithTooltip\"\nimport Suspense from \"../../ui/Suspense\"\n\nimport ServiceManagerContext from \"../../ServiceManagerContext\"\n\nimport { trainRequest } from \"../../blockly/dsl/workers/tf.proxy\"\nimport Blockly, { WorkspaceSvg } from \"blockly\"\n\nimport type {\n    TFModelTrainRequest,\n    TFModelTrainResponse,\n} from \"../../../workers/tf/dist/node_modules/tf.worker\"\nimport workerProxy from \"../../blockly/dsl/workers/proxy\"\n\nimport MBModel from \"../../model-editor/MBModel\"\nimport MBDataSet from \"../../model-editor/MBDataSet\"\n\nimport { PointerBoundary } from \"../../blockly/fields/PointerBoundary\"\n\nconst LossAccChart = lazy(\n    () => import(\"../../model-editor/components/LossAccChart\")\n)\nconst ModelSummaryDropdown = lazy(\n    () => import(\"../../model-editor/components/ModelSummaryDropdown\")\n)\nconst ModelOutput = lazy(() => import(\"../../model-editor/ModelOutput\"))\n\nexport default function TrainModelDialog(props: {\n    classes: any\n    chartPalette: string[]\n    open: boolean\n    onModelUpdate: (model: MBModel, blockId: string) => void\n    onDone: () => void\n    dataset: MBDataSet\n    model: MBModel\n    trainedModelCount: number\n    workspace: WorkspaceSvg\n}) {\n    const {\n        classes,\n        chartPalette,\n        open,\n        onModelUpdate,\n        onDone,\n        dataset,\n        model,\n        trainedModelCount,\n        workspace,\n    } = props\n\n    const chartProps = {\n        CHART_WIDTH: 300,\n        CHART_HEIGHT: 300,\n        MARK_SIZE: 75,\n        TOOLTIP_NUM_FORMAT: \"0.2f\",\n        PALETTE: chartPalette,\n    }\n    const { fileStorage } = useContext(ServiceManagerContext)\n\n    const [dialogType, setDialogType] = useState<\"trainModel\" | \"testModel\">(\n        \"trainModel\"\n    )\n\n    /* For training model */\n    const [trainEnabled, setTrainEnabled] = useState(model.status !== \"empty\")\n    const [predictEnabled, setPredictEnabled] = useState(\n        model.status == \"trained\"\n    )\n\n    // for loss/acc graph\n    const trainingLossLog = useMemo(() => {\n        return []\n    }, [])\n    const trainingAccLog = useMemo(() => {\n        return []\n    }, [])\n    const [trainingProgress, setTrainingProgress] = useState(0)\n\n    const trainTFModel = async () => {\n        model.status = \"training\"\n        model.inputTypes = dataset.inputTypes\n\n        // reset logs and progress\n        trainingLossLog.splice(0, trainingLossLog.length)\n        trainingAccLog.splice(0, trainingAccLog.length)\n        setTrainingProgress(0)\n\n        // disable train model button\n        setTrainEnabled(false)\n\n        // setup worker\n        // subscriber gets messages about training while training is happening\n        const stopWorkerSubscribe = workerProxy(\"tf\").subscribe(\n            \"message\",\n            (msg: any) => {\n                const epoch = trainingLossLog.length / 2 + 1\n                trainingLossLog.push({\n                    epoch: epoch,\n                    loss: msg.data.loss,\n                    dataset: \"training\",\n                })\n                trainingLossLog.push({\n                    epoch: epoch,\n                    loss: msg.data.val_loss,\n                    dataset: \"validation\",\n                })\n                trainingAccLog.push({\n                    epoch: epoch,\n                    acc: msg.data.acc,\n                    dataset: \"training\",\n                })\n                trainingAccLog.push({\n                    epoch: epoch,\n                    acc: msg.data.val_acc,\n                    dataset: \"validation\",\n                })\n                setTrainingProgress((epoch * 100) / model.trainingParams.epochs)\n            }\n        )\n\n        const trainMsg = {\n            worker: \"tf\",\n            type: \"train\",\n            data: {\n                xData: dataset.xs,\n                yData: dataset.ys,\n                model: model.toJSON(),\n                trainingParams: model.trainingParams,\n            },\n        } as TFModelTrainRequest\n        const trainResult = (await trainRequest(\n            trainMsg\n        )) as TFModelTrainResponse\n\n        // stop subscriber after training\n        stopWorkerSubscribe()\n\n        if (trainResult && trainResult.data) {\n            // handle result from training\n            const trainingHistory = trainResult.data.trainingLogs\n            model.weightData = trainResult.data.modelWeights\n            model.armModel = trainResult.data.armModel\n\n            // Update model status\n            model.status = \"trained\"\n            model.trainingAcc = trainingHistory[trainingHistory.length - 1]\n            addNewTrainedModelBlock()\n            setTrainEnabled(true)\n            setPredictEnabled(true)\n        } else model.status = \"untrained\"\n    }\n    const addNewTrainedModelBlock = () => {\n        // Create new trained model block\n        const trainedModelName = model.name + \".\" + trainedModelCount\n        const dataSetName = dataset.name\n\n        const newBlock = Blockly.Xml.domToBlock(\n            Blockly.Xml.textToDom(\n                `<block type=\"model_block_trained_nn\"><field name=\"TRAINED_MODEL_NAME\">${trainedModelName}</field><field name=\"MODEL_TEST_SET\" variabletype=\"ModelBlockDataSet\">${dataSetName}</field><field name=\"SELECTED_CHART\">confusion matrix</field></block>`\n            ),\n            workspace\n        )\n\n        onModelUpdate(model, newBlock.id)\n    }\n\n    /* For interface controls */\n    const handleCancel = () => {\n        // close the modal\n        onDone()\n    }\n    const handleBack = () => {\n        // go to the previous page\n        setDialogType(\"trainModel\")\n    }\n    const handleNext = () => {\n        // go to the next page\n        setDialogType(\"testModel\")\n    }\n    const handleDownloadModel = () => {\n        // TODO also download arm model (as a zip file?)\n        fileStorage.saveText(`${model.name}.json`, JSON.stringify(model))\n    }\n\n    if (dialogType == \"trainModel\")\n        return (\n            <PointerBoundary>\n                <Dialog\n                    open={open}\n                    onClose={handleCancel}\n                    fullWidth={true}\n                    maxWidth={\"md\"}\n                >\n                    <DialogContent>\n                        <Grid container direction={\"column\"}>\n                            <Grid item>\n                                <h3>\n                                    Current Model\n                                    <IconButtonWithTooltip\n                                        onClick={handleDownloadModel}\n                                        title=\"Download all recording data\"\n                                        disabled={dataset.totalRecordings == 0}\n                                    >\n                                        <DownloadIcon />\n                                    </IconButtonWithTooltip>\n                                </h3>\n                                <Suspense>\n                                    <ModelSummaryDropdown\n                                        reactStyle={classes}\n                                        dataset={dataset}\n                                        model={model}\n                                    />\n                                </Suspense>\n                                <div className={classes.buttons}>\n                                    <Button\n                                        size=\"large\"\n                                        variant=\"contained\"\n                                        color={\"primary\"}\n                                        aria-label=\"start training model\"\n                                        title={\n                                            trainEnabled\n                                                ? \"Press to start training machine learning model\"\n                                                : \"You must have at least two classes to train a model. Go back to first tab.\"\n                                        }\n                                        onClick={trainTFModel}\n                                        startIcon={<PlayArrowIcon />}\n                                        disabled={!trainEnabled}\n                                        style={{ marginTop: 16 }}\n                                    >\n                                        Train Model\n                                    </Button>\n                                </div>\n                                <br />\n                            </Grid>\n                            <Grid item>\n                                <h3>Training Progress</h3>\n                                <LinearProgress\n                                    variant=\"determinate\"\n                                    value={trainingProgress}\n                                />\n                                <span style={{ float: \"right\" }}>\n                                    {trainingProgress} / 100\n                                </span>\n                                <br />\n                                {!!trainingLossLog.length && (\n                                    <div key=\"vega-loss-acc-charts\">\n                                        <Suspense>\n                                            <LossAccChart\n                                                chartProps={chartProps}\n                                                lossData={trainingLossLog}\n                                                accData={trainingAccLog}\n                                                timestamp={trainingProgress}\n                                            />\n                                        </Suspense>\n                                    </div>\n                                )}\n                                <p>\n                                    Final Training Accuracy:{\" \"}\n                                    {model.status == \"untrained\"\n                                        ? \"Model has not been trained\"\n                                        : (model.trainingAcc || 0).toPrecision(\n                                              2\n                                          )}\n                                </p>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"contained\" onClick={handleCancel}>\n                            Close\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            endIcon={<NavigateNextIcon />}\n                            disabled={!predictEnabled}\n                            onClick={handleNext}\n                        >\n                            Next\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </PointerBoundary>\n        )\n    else if (dialogType == \"testModel\")\n        return (\n            <PointerBoundary>\n                <Dialog\n                    open={open}\n                    onClose={handleCancel}\n                    fullWidth={true}\n                    maxWidth={\"md\"}\n                >\n                    <DialogContent>\n                        <ModelOutput\n                            chartProps={chartProps}\n                            reactStyle={classes}\n                            chartPalette={chartPalette}\n                            model={model}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            variant=\"contained\"\n                            startIcon={<NavigateBackIcon />}\n                            onClick={handleBack}\n                        >\n                            Back\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={false}\n                            onClick={handleCancel}\n                        >\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </PointerBoundary>\n        )\n}\n"],"names":["React","lazy","useContext","useState","useMemo","Button","Dialog","DialogActions","DialogContent","Grid","LinearProgress","PlayArrowIcon","NavigateNextIcon","NavigateBackIcon","DownloadIcon","IconButtonWithTooltip","Suspense","ServiceManagerContext","trainRequest","Blockly","workerProxy","PointerBoundary","LossAccChart","ModelSummaryDropdown","ModelOutput","TrainModelDialog","props","classes","chartPalette","open","onModelUpdate","onDone","dataset","model","trainedModelCount","workspace","chartProps","CHART_WIDTH","CHART_HEIGHT","MARK_SIZE","TOOLTIP_NUM_FORMAT","PALETTE","fileStorage","dialogType","setDialogType","trainEnabled","setTrainEnabled","status","predictEnabled","setPredictEnabled","trainingLossLog","trainingAccLog","trainingProgress","setTrainingProgress","trainTFModel","inputTypes","splice","length","stopWorkerSubscribe","subscribe","msg","epoch","push","loss","data","val_loss","acc","val_acc","trainingParams","epochs","trainMsg","worker","type","xData","xs","yData","ys","toJSON","trainResult","trainingHistory","trainingLogs","weightData","modelWeights","armModel","trainingAcc","addNewTrainedModelBlock","trainedModelName","name","dataSetName","newBlock","Xml","domToBlock","textToDom","id","handleCancel","handleBack","handleNext","handleDownloadModel","saveText","JSON","stringify","totalRecordings","buttons","marginTop","float","toPrecision"],"sourceRoot":""}