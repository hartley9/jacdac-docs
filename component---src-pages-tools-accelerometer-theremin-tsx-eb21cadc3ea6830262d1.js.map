{"version":3,"file":"component---src-pages-tools-accelerometer-theremin-tsx-eb21cadc3ea6830262d1.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/material/internal/svg-icons/RadioButtonUnchecked.js","webpack://jacdac-docs/./node_modules/@mui/material/internal/svg-icons/RadioButtonChecked.js","webpack://jacdac-docs/./node_modules/@mui/material/Radio/RadioButtonIcon.js","webpack://jacdac-docs/./node_modules/@mui/material/RadioGroup/useRadioGroup.js","webpack://jacdac-docs/./node_modules/@mui/material/Radio/radioClasses.js","webpack://jacdac-docs/./node_modules/@mui/material/Radio/Radio.js","webpack://jacdac-docs/./node_modules/@mui/material/FormGroup/formGroupClasses.js","webpack://jacdac-docs/./node_modules/@mui/material/FormGroup/FormGroup.js","webpack://jacdac-docs/./node_modules/@mui/material/RadioGroup/RadioGroup.js","webpack://jacdac-docs/./node_modules/@mui/material/RadioGroup/RadioGroupContext.js","webpack://jacdac-docs/./src/components/hooks/useBuzzerPlayTone.tsx","webpack://jacdac-docs/./src/components/hooks/useServices.ts","webpack://jacdac-docs/./src/pages/tools/accelerometer-theremin.tsx"],"sourcesContent":["import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'RadioButtonUnchecked');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"\n}), 'RadioButtonChecked');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioButtonUncheckedIcon from '../internal/svg-icons/RadioButtonUnchecked';\nimport RadioButtonCheckedIcon from '../internal/svg-icons/RadioButtonChecked';\nimport styled from '../styles/styled';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RadioButtonIconRoot = styled('span')({\n  position: 'relative',\n  display: 'flex'\n});\nvar RadioButtonIconBackground = styled(RadioButtonUncheckedIcon, {\n  skipSx: true\n})({\n  // Scale applied to prevent dot misalignment in Safari\n  transform: 'scale(1)'\n});\nvar RadioButtonIconDot = styled(RadioButtonCheckedIcon, {\n  skipSx: true\n})(_ref => {\n  var {\n    theme,\n    ownerState\n  } = _ref;\n  return _extends({\n    left: 0,\n    position: 'absolute',\n    transform: 'scale(0)',\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeIn,\n      duration: theme.transitions.duration.shortest\n    })\n  }, ownerState.checked && {\n    transform: 'scale(1)',\n    transition: theme.transitions.create('transform', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.shortest\n    })\n  });\n});\n/**\n * @ignore - internal component.\n */\n\nfunction RadioButtonIcon(props) {\n  var {\n    checked = false,\n    classes = {},\n    fontSize\n  } = props;\n\n  var ownerState = _extends({}, props, {\n    checked\n  });\n\n  return /*#__PURE__*/_jsxs(RadioButtonIconRoot, {\n    className: classes.root,\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(RadioButtonIconBackground, {\n      fontSize: fontSize,\n      className: classes.background,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(RadioButtonIconDot, {\n      fontSize: fontSize,\n      className: classes.dot,\n      ownerState: ownerState\n    })]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? RadioButtonIcon.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   */\n  fontSize: PropTypes.oneOf(['small', 'medium'])\n} : void 0;\nexport default RadioButtonIcon;","import * as React from 'react';\nimport RadioGroupContext from './RadioGroupContext';\nexport default function useRadioGroup() {\n  return React.useContext(RadioGroupContext);\n}","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getRadioUtilityClass(slot) {\n  return generateUtilityClass('MuiRadio', slot);\n}\nvar radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary']);\nexport default radioClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"checked\", \"checkedIcon\", \"color\", \"icon\", \"name\", \"onChange\", \"size\"];\nimport * as React from 'react';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport { alpha } from '@mui/system';\nimport SwitchBase from '../internal/SwitchBase';\nimport useThemeProps from '../styles/useThemeProps';\nimport RadioButtonIcon from './RadioButtonIcon';\nimport capitalize from '../utils/capitalize';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport useRadioGroup from '../RadioGroup/useRadioGroup';\nimport radioClasses, { getRadioUtilityClass } from './radioClasses';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = ownerState => {\n  var {\n    classes,\n    color\n  } = ownerState;\n  var slots = {\n    root: ['root', \"color\".concat(capitalize(color))]\n  };\n  return _extends({}, classes, composeClasses(slots, getRadioUtilityClass, classes));\n};\n\nvar RadioRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiRadio',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    var {\n      ownerState\n    } = props;\n    return [styles.root, styles[\"color\".concat(capitalize(ownerState.color))]];\n  }\n})(_ref => {\n  var {\n    theme,\n    ownerState\n  } = _ref;\n  return _extends({\n    color: theme.palette.text.secondary,\n    '&:hover': {\n      backgroundColor: alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }, ownerState.color !== 'default' && {\n    [\"&.\".concat(radioClasses.checked)]: {\n      color: theme.palette[ownerState.color].main\n    }\n  }, {\n    [\"&.\".concat(radioClasses.disabled)]: {\n      color: theme.palette.action.disabled\n    }\n  });\n});\n\nfunction areEqualValues(a, b) {\n  if (typeof b === 'object' && b !== null) {\n    return a === b;\n  } // The value could be a number, the DOM will stringify it anyway.\n\n\n  return String(a) === String(b);\n}\n\nvar defaultCheckedIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {\n  checked: true\n});\n\nvar defaultIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {});\n\nvar Radio = /*#__PURE__*/React.forwardRef(function Radio(inProps, ref) {\n  var _defaultIcon$props$fo, _defaultCheckedIcon$p;\n\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiRadio'\n  });\n\n  var {\n    checked: checkedProp,\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon = defaultIcon,\n    name: nameProp,\n    onChange: onChangeProp,\n    size = 'medium'\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var ownerState = _extends({}, props, {\n    color,\n    size\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  var radioGroup = useRadioGroup();\n  var checked = checkedProp;\n  var onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);\n  var name = nameProp;\n\n  if (radioGroup) {\n    if (typeof checked === 'undefined') {\n      checked = areEqualValues(radioGroup.value, props.value);\n    }\n\n    if (typeof name === 'undefined') {\n      name = radioGroup.name;\n    }\n  }\n\n  return /*#__PURE__*/_jsx(RadioRoot, _extends({\n    type: \"radio\",\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_defaultIcon$props$fo = defaultIcon.props.fontSize) != null ? _defaultIcon$props$fo : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(checkedIcon, {\n      fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon.props.fontSize) != null ? _defaultCheckedIcon$p : size\n    }),\n    ownerState: ownerState,\n    classes: classes,\n    name: name,\n    checked: checked,\n    onChange: onChange,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default Radio;","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getFormGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiFormGroup', slot);\n}\nvar formGroupClasses = generateUtilityClasses('MuiFormGroup', ['root', 'row']);\nexport default formGroupClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"row\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getFormGroupUtilityClass } from './formGroupClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = ownerState => {\n  var {\n    classes,\n    row\n  } = ownerState;\n  var slots = {\n    root: ['root', row && 'row']\n  };\n  return composeClasses(slots, getFormGroupUtilityClass, classes);\n};\n\nvar FormGroupRoot = styled('div', {\n  name: 'MuiFormGroup',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    var {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.row && styles.row];\n  }\n})(_ref => {\n  var {\n    ownerState\n  } = _ref;\n  return _extends({\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap'\n  }, ownerState.row && {\n    flexDirection: 'row'\n  });\n});\n/**\n * `FormGroup` wraps controls such as `Checkbox` and `Switch`.\n * It provides compact row layout.\n * For the `Radio`, you should be using the `RadioGroup` component instead of this one.\n */\n\nvar FormGroup = /*#__PURE__*/React.forwardRef(function FormGroup(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiFormGroup'\n  });\n\n  var {\n    className,\n    row = false\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var ownerState = _extends({}, props, {\n    row\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormGroupRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default FormGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"actions\", \"children\", \"defaultValue\", \"name\", \"onChange\", \"value\"];\nimport * as React from 'react';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/useId';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  var {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    defaultValue,\n    name: nameProp,\n    onChange,\n    value: valueProp\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var rootRef = React.useRef(null);\n  var [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      var input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  var handleRef = useForkRef(ref, rootRef);\n\n  var handleChange = event => {\n    setValueState(event.target.value);\n\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n\n  var name = useId(nameProp);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: {\n      name,\n      onChange: handleChange,\n      value\n    },\n    children: /*#__PURE__*/_jsx(FormGroup, _extends({\n      role: \"radiogroup\",\n      ref: handleRef\n    }, other, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default RadioGroup;","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar RadioGroupContext = /*#__PURE__*/React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  RadioGroupContext.displayName = 'RadioGroupContext';\n}\n\nexport default RadioGroupContext;","import { useEffect, useState, useContext, useCallback } from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport { startServiceProviderFromServiceClass } from \"../../../jacdac-ts/src/servers/servers\"\nimport { BuzzerCmd, SRV_BUZZER } from \"../../../jacdac-ts/src/jdom/constants\"\nimport Packet from \"../../../jacdac-ts/src/jdom/packet\"\nimport useServices from \"./useServices\"\nimport BuzzerServer, {\n    BuzzerTone,\n    tonePayload,\n} from \"../../../jacdac-ts/src/servers/buzzerserver\"\nimport WebAudioContext from \"../ui/WebAudioContext\"\n\nexport default function useBuzzerPlayTone() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const buzzers = useServices({ serviceClass: SRV_BUZZER })\n    const [buzzerServer, setBuzzerServer] = useState<BuzzerServer>()\n\n    const { playTone, onClickActivateAudioContext, activated } =\n        useContext(WebAudioContext)\n\n    // useEffect invokes a function call whenever the variables\n    // (passed as an array) change.\n    // if clean up is required, return a clean up callback\n    //\n    // listen for playTone commands from the buzzer via subscribe\n    // subscribe returns a clean up function that is invoked when the user\n    // browses away from the page.\n    // playtone uses the audio context set in handleBrowserAudioEnable\n    useEffect(\n        () =>\n            buzzerServer?.subscribe<BuzzerTone>(\n                BuzzerServer.PLAY_TONE,\n                ({ frequency, duration, volume }) =>\n                    playTone(frequency, duration, volume)\n            ),\n        [buzzerServer]\n    )\n    // clean out buzzer server on page close.\n    // defines an empty function that returns a function.\n    // invoked each time buzzerServer changes\n    useEffect(\n        () => () =>\n            buzzerServer?.device &&\n            bus.removeServiceProvider(buzzerServer.device),\n        [buzzerServer]\n    )\n\n    // when start browser audio button is clicked:\n    // get a browser audio context\n    // spin up a virtual buzzer that we latermap to the browser audio engine\n    const toggleBrowserAudio = () => {\n        // browser security dictates that the audio context be used within a click event\n        // must be done once to allow background sounds\n        onClickActivateAudioContext()\n        if (!buzzerServer) {\n            const dev = startServiceProviderFromServiceClass(bus, SRV_BUZZER)\n            const srv = dev\n                .services()\n                .find(s => s.serviceClass === SRV_BUZZER) as BuzzerServer\n            setBuzzerServer(srv)\n        } else {\n            setBuzzerServer(undefined)\n        }\n    }\n\n    const buzzerPlayTone = useCallback(\n        async (frequency: number, duration: number, volume: number) => {\n            await Promise.all(\n                // for each buzzer, map x acceleration to buzzer output\n                buzzers?.map(async buzzer => {\n                    const pkt = Packet.from(\n                        BuzzerCmd.PlayTone,\n                        tonePayload(frequency, duration, volume)\n                    )\n                    await buzzer.sendPacketAsync(pkt)\n                })\n            )\n        },\n        [buzzers]\n    )\n\n    const browserAudio = activated && !!buzzerServer\n    return {\n        playTone: buzzerPlayTone,\n        toggleBrowserAudio,\n        browserAudio,\n    }\n}\n","import { useContext } from \"react\"\nimport DeviceFilter from \"../../../jacdac-ts/src/jdom/filters/devicefilter\"\nimport ServiceFilter from \"../../../jacdac-ts/src/jdom/filters/servicefilter\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport useChange from \"../../jacdac/useChange\"\n\nexport default function useServices(options?: ServiceFilter & DeviceFilter) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const services = useChange(bus, _ => _?.services(options) || [], [\n        JSON.stringify(options),\n    ])\n    return services\n}\n","import React, { useEffect, useState } from \"react\"\nimport {\n    REPORT_UPDATE,\n    SRV_ACCELEROMETER,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { throttle } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useServices from \"../../components/hooks/useServices\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    FormControl,\n    FormControlLabel,\n    FormLabel,\n    Grid,\n    Radio,\n    RadioGroup,\n    Typography,\n} from \"@mui/material\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport useBuzzerPlayTone from \"../../components/hooks/useBuzzerPlayTone\"\nimport Dashboard from \"../../components/dashboard/Dashboard\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport { useId } from \"react-use-id-hook\"\nimport { LiveMessage } from \"react-aria-live\"\n\nconst TONE_DURATION = 50\nconst TONE_THROTTLE = 100\n\n// this is a React component that gets run numerous time,\n// whenever a change is detected in the React state\n// for example, useServices is a hook that tracks the accelerometer services,\n// so it will render again and update the accelerometers array whenever the bus connects/disconnects\n// an accelerometer\nexport default function AccelerometerTheremin() {\n    const { playTone, toggleBrowserAudio, browserAudio } = useBuzzerPlayTone()\n\n    // identifiers for accessibility\n    const sectionId = useId()\n\n    // useServices accepts a number of filters and returns any services that match\n    // get all accelerometer + buzzer services\n    // under the hood, it uses the bus and events.\n    const accelerometers = useServices({ serviceClass: SRV_ACCELEROMETER })\n\n    // create a state variable to hold the service selected as our accelerometer\n    // when using setAccelService, React will render again this component\n    const [accelService, setAccelService] = useState<JDService>()\n    // used to hold the value for the axis selected by the radio group. This is also used to set the axis of the accelerometer to sonify. Default value is X. meaning the X axis will be sonified by default.\n    const [axisToSonify, setAxisToSonify] = useState<\"x\" | \"y\" | \"z\">(\"x\")\n    //used to hold user selection of the property of the sound to vary. Default is the frequency.\n    const [sonificationProperty, setSonificationProperty] =\n        useState(\"frequency\")\n    const [srAnnouncement, setSRAnnouncement] = useState(\"\")\n\n    // event handeler for radio button selection change for axis to sonify\n    const handleAccessChange = event => {\n        setAxisToSonify(event.target.value)\n        setSRAnnouncement(\n            `changing ${sonificationProperty} based on ${event.target.value} of accelerometer.`\n        ) // using the value that is being set in the previous line results in the value pre-update being announced. I suspect this has to do with how react re-renders. using event.target.value to mittegate this.\n\n        // in progress: make sure an Aria alert gets generated indecating the access that has been selected when streaming starts, or when radio button selection changes.\n    }\n\n    //handler for property selection to sonify.\n    const handelPropertySelectionChange = event => {\n        setSonificationProperty(event.target.value)\n        setSRAnnouncement(\n            `changing ${event.target.value} based on ${axisToSonify} of accelerometer.`\n        )\n    }\n    // use a closure to capture accel variable\n    // act as a toggle for the button the indicates streaming state.\n    const handleSelectAccelerometerService = accel => () => {\n        setSRAnnouncement(\"\") // clearing the live region for the text to be announced when streaming starts. I don't have a good feeling about this approach.\n        accelService == accel\n            ? setAccelService(undefined)\n            : setAccelService(accel)\n        if (accelService !== accel) {\n            setSRAnnouncement(\n                `changing ${sonificationProperty} based on ${axisToSonify} of accelerometer.`\n            ) // to investigate: this announcement does not happen after the user changes the selection of the axis and hits the start streaming button. hitting stop streaming and then start streaming however announces that axis being sonified and the property.\n        } else {\n            setSRAnnouncement(\"\")\n        }\n    }\n\n    // filter to only show accelerometers in dashboard\n    const dashboardDeviceFilter = (d: JDDevice) =>\n        d.hasService(SRV_ACCELEROMETER)\n\n    // register for accelerometer data events\n    useEffect(() => {\n        // ?. checks that the callee is defined\n        const unsubs = accelService?.readingRegister.subscribe(\n            REPORT_UPDATE,\n            // don't trigger more than every 100ms\n            throttle(async () => {\n                // get x acceleration data\n                // const [x] = accelService.readingRegister.unpackedValue\n                // get all acceleration data\n                let volume = 1\n                let toneFrequencyOffset = 0\n                const [x, y, z] = accelService.readingRegister.unpackedValue\n                if (sonificationProperty == \"frequency\") {\n                    if (axisToSonify == \"x\") {\n                        toneFrequencyOffset = x\n                    } else if (axisToSonify == \"y\") {\n                        toneFrequencyOffset = y\n                    } else {\n                        toneFrequencyOffset = z\n                    }\n                } else {\n                    if (axisToSonify == \"x\") {\n                        volume = (Math.abs(x) * 99) / 100.0\n                    } else if (axisToSonify == \"y\") {\n                        volume = (Math.abs(y) * 99) / 100.0\n                    } else {\n                        volume = (Math.abs(z) * 99) / 100.0\n                    }\n                }\n\n                await playTone(\n                    1000 + toneFrequencyOffset * 1000,\n                    TONE_DURATION,\n                    volume\n                )\n            }, TONE_THROTTLE)\n        )\n\n        // cleanup callback\n        return () => unsubs?.()\n    }, [accelService, playTone]) // re-register if accelerometers, buzzers change\n\n    return (\n        <>\n            <section id={sectionId}>\n                <Grid container spacing={2}>\n                    <GridHeader title=\"Audio controls\" />\n                    <Grid item xs={12}>\n                        <Button\n                            variant={\"outlined\"}\n                            onClick={toggleBrowserAudio}\n                        >\n                            {browserAudio\n                                ? \"Stop browser audio\"\n                                : \"Start browser audio\"}\n                        </Button>\n                        <LiveMessage\n                            message={srAnnouncement}\n                            aria-live=\"assertive\"\n                        />\n                    </Grid>\n                    {!accelerometers.length && (\n                        <>\n                            <GridHeader title=\"Connect a device\" />\n                            <Grid item xs>\n                                <ConnectAlert\n                                    serviceClass={SRV_ACCELEROMETER}\n                                />\n                            </Grid>\n                        </>\n                    )}\n                    {!!accelerometers.length && (\n                        <>\n                            <GridHeader title=\"Available accelerometers\" />\n                            {accelerometers.map(accelerometer => (\n                                <Grid\n                                    item\n                                    xs={12}\n                                    sm={6}\n                                    lg={4}\n                                    xl={3}\n                                    key={accelerometer.id}\n                                >\n                                    <Card>\n                                        <DeviceCardHeader\n                                            device={accelerometer.device}\n                                            showAvatar={true}\n                                            showMedia={true}\n                                        />\n                                        <CardContent>\n                                            <Typography variant=\"h5\">\n                                                {(accelerometer === accelService\n                                                    ? \"Streaming from \"\n                                                    : \"\") +\n                                                    (accelerometer.device\n                                                        .isPhysical\n                                                        ? \"Physical \"\n                                                        : \"Virtual \") +\n                                                    `Accelerometer ${accelerometer.friendlyName}`}\n                                            </Typography>\n                                        </CardContent>\n                                        <CardActions>\n                                            <FormControl component=\"fieldset\">\n                                                <FormLabel component=\"legend\">\n                                                    Select axis of the\n                                                    accelerometer to sonify\n                                                </FormLabel>\n                                                <RadioGroup\n                                                    aria-label=\"axis\"\n                                                    name=\"axisToSonify\"\n                                                    value={axisToSonify}\n                                                    onChange={\n                                                        handleAccessChange\n                                                    }\n                                                >\n                                                    <FormControlLabel\n                                                        value=\"x\"\n                                                        control={<Radio />}\n                                                        label=\"X axis\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"y\"\n                                                        control={<Radio />}\n                                                        label=\"Y axis\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"z\"\n                                                        control={<Radio />}\n                                                        label=\"Z axis\"\n                                                    />\n                                                </RadioGroup>\n                                                <FormLabel component=\"legend\">\n                                                    Select property of the sound\n                                                    to change\n                                                </FormLabel>\n                                                <RadioGroup\n                                                    aria-label=\"sonification property\"\n                                                    name=\"soundProperty\"\n                                                    value={sonificationProperty}\n                                                    onChange={\n                                                        handelPropertySelectionChange\n                                                    }\n                                                >\n                                                    <FormControlLabel\n                                                        value=\"frequency\"\n                                                        control={<Radio />}\n                                                        label=\"buzzer frequency\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"volume\"\n                                                        control={<Radio />}\n                                                        label=\"buzzer volume\"\n                                                    />\n                                                </RadioGroup>\n                                            </FormControl>\n\n                                            <Button\n                                                variant={\"outlined\"}\n                                                onClick={handleSelectAccelerometerService(\n                                                    accelerometer\n                                                )}\n                                            >\n                                                {accelerometer === accelService\n                                                    ? \"Stop streaming\"\n                                                    : \"Start streaming\"}\n                                            </Button>\n                                        </CardActions>\n                                    </Card>\n                                </Grid>\n                            ))}\n                        </>\n                    )}\n                </Grid>\n            </section>\n            <Dashboard deviceFilter={dashboardDeviceFilter} />\n        </>\n    )\n}\n"],"names":["useEffect","useState","useContext","useCallback","JacdacContext","startServiceProviderFromServiceClass","BuzzerCmd","SRV_BUZZER","Packet","useServices","BuzzerServer","tonePayload","WebAudioContext","useBuzzerPlayTone","bus","buzzers","serviceClass","buzzerServer","setBuzzerServer","playTone","onClickActivateAudioContext","activated","subscribe","PLAY_TONE","frequency","duration","volume","device","removeServiceProvider","toggleBrowserAudio","dev","srv","services","find","s","undefined","buzzerPlayTone","Promise","all","map","buzzer","pkt","from","PlayTone","sendPacketAsync","browserAudio","useChange","options","_","JSON","stringify","React","REPORT_UPDATE","SRV_ACCELEROMETER","throttle","GridHeader","Button","Card","CardActions","CardContent","FormControl","FormControlLabel","FormLabel","Grid","Radio","RadioGroup","Typography","ConnectAlert","DeviceCardHeader","Dashboard","useId","LiveMessage","TONE_DURATION","TONE_THROTTLE","AccelerometerTheremin","sectionId","accelerometers","accelService","setAccelService","axisToSonify","setAxisToSonify","sonificationProperty","setSonificationProperty","srAnnouncement","setSRAnnouncement","handleAccessChange","event","target","value","handelPropertySelectionChange","handleSelectAccelerometerService","accel","dashboardDeviceFilter","d","hasService","unsubs","readingRegister","toneFrequencyOffset","x","y","z","unpackedValue","Math","abs","length","accelerometer","id","isPhysical","friendlyName"],"sourceRoot":""}