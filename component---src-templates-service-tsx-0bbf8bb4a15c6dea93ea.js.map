{"version":3,"file":"component---src-templates-service-tsx-0bbf8bb4a15c6dea93ea.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardDeviceItem.tsx","webpack://jacdac-docs/./src/components/specification/DeviceSpecificationList.tsx","webpack://jacdac-docs/./src/components/EnumSpecification.tsx","webpack://jacdac-docs/./src/components/specification/ServiceSpecification.tsx","webpack://jacdac-docs/./jacdac-ts/src/azure-iot/devicetwin.ts","webpack://jacdac-docs/./src/components/specification/ServiceSpecificationSource.tsx","webpack://jacdac-docs/./src/components/ServiceMarkdown.tsx","webpack://jacdac-docs/./src/templates/service.tsx"],"sourcesContent":["import { Grid } from \"@mui/material\"\nimport React, { useContext, useState } from \"react\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport DashboardDevice from \"./DashboardDevice\"\nimport { GridBreakpoints } from \"../useGridBreakpoints\"\nimport { DashboardDeviceProps } from \"./Dashboard\"\nimport useChange from \"../../jacdac/useChange\"\nimport { dashboardServiceWeight } from \"./DashboardServiceWidget\"\nimport AppContext, { DrawerType } from \"../AppContext\"\n\nexport default function DashboardDeviceItem(\n    props: {\n        device: JDDevice\n        variant?: \"icon\" | \"\"\n    } & DashboardDeviceProps\n) {\n    const { device, variant, ...other } = props\n    const { drawerType } = useContext(AppContext)\n    const [charts, setCharts] = useState(false)\n    const breakpoints: GridBreakpoints = useChange(\n        device,\n        () => {\n            const breakpointWeight = device\n                .services()\n                .map(srv => {\n                    return (\n                        dashboardServiceWeight(srv) ||\n                        (srv.readingRegister ||\n                        srv.valueRegister ||\n                        srv.intensityRegister\n                            ? 1\n                            : 0)\n                    )\n                })\n                .reduce((c: number, v) => c + v, 0)\n\n            if (breakpointWeight > 3 || drawerType !== DrawerType.None)\n                return { xs: 12, sm: 12, md: 12, lg: 6, xl: 6 }\n            else if (breakpointWeight == 3)\n                return { xs: 12, sm: 12, md: 4, lg: 4, xl: 4 }\n            else if (breakpointWeight == 2)\n                return { xs: 12, sm: 6, md: 4, lg: 3, xl: 4 }\n            else\n                return {\n                    xs: 6,\n                    sm: 4,\n                    md: 3,\n                    lg: 2,\n                    xl: \"auto\",\n                }\n        },\n        [drawerType, charts]\n    )\n\n    // based on size, expanded or reduce widget size\n    return (\n        <Grid item {...breakpoints}>\n            <DashboardDevice device={device} variant={variant} charts={charts} setCharts={setCharts} {...other} />\n        </Grid>\n    )\n}\n","import React, { useMemo } from \"react\"\nimport { Card, CardContent, Grid, Typography } from \"@mui/material\"\nimport {\n    identifierToUrlPath,\n    serviceSpecificationFromClassIdentifier,\n} from \"../../../jacdac-ts/src/jdom/spec\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport { CardActionArea } from \"gatsby-theme-material-ui\"\nimport { arrayShuffle } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useDeviceImage from \"../devices/useDeviceImage\"\nimport {\n    escapeDeviceIdentifier,\n    humanify,\n} from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport useDeviceSpecifications from \"../devices/useDeviceSpecifications\"\nimport useGridBreakpoints from \"../useGridBreakpoints\"\n\nfunction DeviceSpecificationCard(props: {\n    specification: jdspec.DeviceSpec\n    size: \"list\" | \"preview\" | \"catalog\"\n}) {\n    const { specification, size } = props\n    const { id, name, company, services } = specification\n    const imageUrl = useDeviceImage(specification, size)\n    const serviceNames = services\n        ?.map(sc =>\n            humanify(serviceSpecificationFromClassIdentifier(sc)?.shortName)\n        )\n        ?.join(\", \")\n    return (\n        <Card>\n            <CardActionArea to={`/devices/${identifierToUrlPath(id)}`}>\n                <img\n                    src={imageUrl}\n                    style={{ aspectRatio: \"3 / 2\", width: \"100%\" }}\n                    alt={`photograph of ${specification.name}`}\n                />\n                <CardContent>\n                    <Typography\n                        gutterBottom\n                        variant=\"subtitle1\"\n                        component=\"div\"\n                    >\n                        {name}\n                    </Typography>\n                    <Typography component=\"div\" variant=\"subtitle2\">\n                        {serviceNames || \"\"}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                        {company}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    )\n}\n\nexport default function DeviceSpecificationList(props: {\n    count?: number\n    shuffle?: boolean\n    company?: string\n    requiredServiceClasses?: number[]\n    devices?: jdspec.DeviceSpec[]\n}) {\n    const { count, shuffle, requiredServiceClasses, company, devices } = props\n    const specifications = useDeviceSpecifications()\n    const specs = useMemo(() => {\n        let r = devices || specifications\n        if (company) {\n            const lc = escapeDeviceIdentifier(company)\n            r = r.filter(spec =>\n                escapeDeviceIdentifier(spec.company).startsWith(lc)\n            )\n        }\n        if (requiredServiceClasses)\n            r = r.filter(\n                spec =>\n                    spec.services.length &&\n                    requiredServiceClasses.every(\n                        srv => spec.services.indexOf(srv) > -1\n                    )\n            )\n        if (shuffle) arrayShuffle(r)\n        if (count !== undefined) r = r.slice(0, count)\n        return r\n    }, [\n        requiredServiceClasses,\n        shuffle,\n        count,\n        company,\n        JSON.stringify(devices?.map(d => d.id)),\n        specifications,\n    ])\n    const gridBreakpoints = useGridBreakpoints(specs.length)\n    const size = specs?.length < 6 ? \"catalog\" : \"preview\"\n\n    if (!specs.length)\n        return (\n            <Typography variant=\"body1\">No device registered yet.</Typography>\n        )\n\n    return (\n        <Grid container spacing={2}>\n            {specs.map(specification => (\n                <Grid key={specification.id} item {...gridBreakpoints}>\n                    <DeviceSpecificationCard\n                        specification={specification}\n                        size={size}\n                    />\n                </Grid>\n            ))}\n        </Grid>\n    )\n}\n","import React, { Fragment } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../jacdac-ts/src/jdom/spec\"\nimport { Chip } from \"@mui/material\"\n\nexport default function EnumSpecification(props: { serviceClass: number }) {\n    const { serviceClass } = props\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n    const enums = Object.values(spec?.enums || {}).filter(en => !en.derived)\n    if (!enums.length) return <></>\n\n    return (\n        <Fragment>\n            <h2>Enums</h2>\n            {enums.map(e => (\n                <Fragment key={e.name}>\n                    <h3>\n                        {e.name}{\" \"}\n                        {e.isFlags && <Chip label=\"flags\" size=\"small\" />}\n                    </h3>\n                    <ul>\n                        {Object.keys(e.members).map(en => (\n                            <li key={en}>\n                                {en}:{\" \"}\n                                <code>0x{e.members[en].toString(16)}</code>\n                            </li>\n                        ))}\n                    </ul>\n                </Fragment>\n            ))}\n        </Fragment>\n    )\n}\n","import React, { Fragment, useContext } from \"react\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport {\n    serviceSpecificationFromName,\n    isRegister,\n    isEvent,\n    isCommand,\n    isPipeReport,\n    isReportOf,\n    isPipeReportOf,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport PacketSpecification from \"./PacketSpecification\"\nimport IDChip from \"../IDChip\"\nimport Markdown from \"../ui/Markdown\"\nimport EnumSpecification from \"../EnumSpecification\"\nimport { Box, Grid } from \"@mui/material\"\nimport ServiceSpecificationStatusAlert from \"./ServiceSpecificationStatusAlert\"\nimport useServiceProviderFromServiceClass from \"../hooks/useServiceProviderFromServiceClass\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport useChange from \"../../jacdac/useChange\"\nimport DashbardDeviceItem from \"../dashboard/DashboardDeviceItem\"\n\nfunction DashboardServiceDevices(props: { serviceClass: number }) {\n    const { serviceClass } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const devices = useChange(bus, b => b.devices({ serviceClass }))\n    return (\n        <Grid container spacing={1}>\n            {devices.map(device => (\n                <DashbardDeviceItem\n                    key={device.id}\n                    device={device}\n                    showAvatar={true}\n                    showHeader={true}\n                />\n            ))}\n        </Grid>\n    )\n}\n\nexport default function ServiceSpecification(props: {\n    service: jdspec.ServiceSpec\n    showDerived?: boolean\n}) {\n    const { service: node, showDerived } = props\n    const { shortId, name, classIdentifier } = node\n    const packets = node.packets.filter(pkt => showDerived || !pkt.derived)\n    const registers = packets.filter(isRegister)\n    const events = packets.filter(isEvent)\n    const commands = packets.filter(isCommand)\n    const reports = packets.filter(r => r.secondary)\n    const pipeReports = packets.filter(isPipeReport)\n    const others = packets.filter(\n        r =>\n            registers.indexOf(r) < 0 &&\n            events.indexOf(r) < 0 &&\n            commands.indexOf(r) < 0 &&\n            reports.indexOf(r) < 0 &&\n            pipeReports.indexOf(r) < 0\n    )\n    // spin up provider on demand\n    useServiceProviderFromServiceClass(node.classIdentifier)\n\n    const reportOf = (pkt: jdspec.PacketInfo) =>\n        reports.find(rep => isReportOf(pkt, rep))\n    const pipeReportOf = (pkt: jdspec.PacketInfo) =>\n        pipeReports.find(rep => isPipeReportOf(pkt, rep))\n\n    return (\n        <>\n            <h1 key=\"title\">\n                {name}\n                <Box ml={1} component=\"span\">\n                    <IDChip\n                        id={node.classIdentifier}\n                        filter={`srv:${shortId}`}\n                    />\n                </Box>\n            </h1>\n            <ServiceSpecificationStatusAlert specification={node} />\n            <Markdown key=\"notesshort\" source={node.notes.short} />\n            {!!node.extends?.length && (\n                <p key=\"extends\">\n                    <span>Extends </span>\n                    {node.extends.map((extend, i) => (\n                        <Fragment key={`extend${extend}`}>\n                            {i > 0 && <span>, </span>}\n                            <Link\n                                key={`extend${extend}`}\n                                to={`/services/${extend}/`}\n                            >\n                                {serviceSpecificationFromName(extend).name}\n                            </Link>\n                        </Fragment>\n                    ))}\n                    .\n                </p>\n            )}\n            <Markdown key=\"noteslong\" source={node.notes.long || \"\"} />\n            <DashboardServiceDevices serviceClass={classIdentifier} />\n            <EnumSpecification key=\"enums\" serviceClass={classIdentifier} />\n            {[\n                {\n                    name: \"Registers\",\n                    packets: registers,\n                    note: node.notes[\"registers\"],\n                },\n                { name: \"Events\", packets: events, note: node.notes[\"events\"] },\n                {\n                    name: \"Commands\",\n                    packets: commands,\n                    note: node.notes[\"commands\"],\n                },\n                { name: \"Others\", packets: others, note: node.notes[\"others\"] },\n            ]\n                .filter(group => group.packets.length)\n                .map(group => (\n                    <Fragment key={`group${group.name}`}>\n                        <h2>{group.name}</h2>\n                        {group.note && (\n                            <Markdown\n                                key={`node${group.name}`}\n                                source={group.note}\n                            />\n                        )}\n                        {group.packets\n                            .sort(\n                                (l, r) =>\n                                    (l.derived ? 1 : -1) - (r.derived ? 1 : -1)\n                            )\n                            .map(pkt => (\n                                <PacketSpecification\n                                    key={`pkt${pkt.identifier}`}\n                                    serviceClass={node.classIdentifier}\n                                    packetInfo={pkt}\n                                    reportInfo={reportOf(pkt)}\n                                    pipeReportInfo={pipeReportOf(pkt)}\n                                    showDevices={true}\n                                />\n                            ))}\n                    </Fragment>\n                ))}\n        </>\n    )\n}\n","import { SRV_CONTROL } from \"../jdom/constants\"\nimport {\n    isHighLevelRegister,\n    isInfrastructure,\n    serviceSpecificationFromClassIdentifier,\n    serviceSpecifications,\n} from \"../jdom/spec\"\n\nexport enum ServiceTwinRegisterFlag {\n    Const = 0x0001,\n    Volatile = 0x0002,\n}\n\nexport interface ServiceTwinRegisterSpec {\n    code: number // code <= 255 => ro, otherwise rw\n    name: string\n    flags: ServiceTwinRegisterFlag\n    packf: string\n    fields?: string[]\n}\n\nexport interface ServiceTwinSpec {\n    serviceClass: number\n    name: string\n    registers: ServiceTwinRegisterSpec[]\n}\n\nexport function serviceSpecificationToServiceTwinSpecification(\n    specification: jdspec.ServiceSpec\n): ServiceTwinSpec {\n    if (!specification) return undefined\n\n    const {\n        classIdentifier: serviceClass,\n        camelName: name,\n        packets,\n    } = specification\n\n    const registers = packets\n        .filter(isHighLevelRegister) // TODO formalize\n        .map<ServiceTwinRegisterSpec>(reg => {\n            let flags = 0\n            if (reg.kind == \"const\") flags |= ServiceTwinRegisterFlag.Const\n            if (reg.volatile) flags |= ServiceTwinRegisterFlag.Volatile\n            const r: ServiceTwinRegisterSpec = {\n                code: reg.identifier,\n                name: reg.name,\n                flags,\n                packf: reg.packFormat,\n                fields:\n                    reg.fields.length > 1\n                        ? reg.fields.map(f => f.name)\n                        : undefined,\n            }\n            return r\n        })\n    const dspec: ServiceTwinSpec = {\n        serviceClass,\n        name,\n        registers,\n    }\n    return dspec\n}\n\nexport function serviceSpecificationsWithServiceTwinSpecification() {\n    const specs = [\n        serviceSpecificationFromClassIdentifier(SRV_CONTROL),\n        ...serviceSpecifications().filter(srv => !isInfrastructure(srv)),\n    ]\n    return specs\n}\n","import React, { useState } from \"react\"\nimport { Tabs, Tab } from \"@mui/material\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport { Paper } from \"@mui/material\"\nimport TabPanel from \"../ui/TabPanel\"\nimport Snippet from \"../ui/Snippet\"\nimport { converters } from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport ServiceSpecification from \"./ServiceSpecification\"\nimport { serviceSpecificationToServiceTwinSpecification } from \"../../../jacdac-ts/src/azure-iot/devicetwin\"\nimport { withPrefix } from \"gatsby\"\n\nexport default function ServiceSpecificationSource(props: {\n    classIdentifier?: number\n    serviceSpecification?: jdspec.ServiceSpec\n    showSpecification?: boolean\n}) {\n    const { classIdentifier, serviceSpecification, showSpecification } = props\n    const [tab, setTab] = useState(0)\n    const spec =\n        serviceSpecification ||\n        serviceSpecificationFromClassIdentifier(classIdentifier)\n    const convs = converters()\n    const showDeviceTwin = spec && spec?.camelName !== \"sytem\"\n\n    const handleTabChange = (\n        event: React.ChangeEvent<unknown>,\n        newValue: number\n    ) => {\n        setTab(newValue)\n    }\n\n    let index = 0\n    return (\n        <Paper square>\n            <Tabs\n                value={tab}\n                onChange={handleTabChange}\n                aria-label=\"View specification formats\"\n            >\n                {[\n                    showSpecification && \"Specification\",\n                    \"MakeCode\",\n                    \"TypeScript\",\n                    \"C\",\n                    \"JSON\",\n                    showDeviceTwin && \"Twin\",\n                ]\n                    .filter(n => !!n)\n                    .map(n => (\n                        <Tab key={n} label={n} />\n                    ))}\n            </Tabs>\n            {showSpecification && (\n                <TabPanel key=\"spec\" value={tab} index={index++}>\n                    <ServiceSpecification service={spec} />\n                </TabPanel>\n            )}\n            {[\"sts\", \"ts\", \"c\", \"json\"].map(lang => (\n                <TabPanel key={`conv${lang}`} value={tab} index={index++}>\n                    <Snippet value={() => convs[lang](spec)} mode={lang} />\n                </TabPanel>\n            ))}\n            {showDeviceTwin && (\n                <TabPanel key=\"devicetwin\" value={tab} index={index++}>\n                    <Snippet\n                        mode=\"json\"\n                        url={withPrefix(\n                            `/services/twin/x${spec.classIdentifier.toString(\n                                16\n                            )}.json`\n                        )}\n                        value={JSON.stringify(\n                            serviceSpecificationToServiceTwinSpecification(\n                                spec\n                            ),\n                            null,\n                            2\n                        )}\n                    />\n                </TabPanel>\n            )}\n        </Paper>\n    )\n}\n","import React from \"react\"\nimport Markdown from \"./ui/Markdown\"\nimport ServiceSpecificationStatusAlert from \"./specification/ServiceSpecificationStatusAlert\"\nimport { Button, Link } from \"gatsby-theme-material-ui\"\nimport DeviceSpecificationList from \"./specification/DeviceSpecificationList\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../jacdac-ts/src/jdom/spec\"\nimport { Grid } from \"@mui/material\"\nimport ServiceSpecificationSource from \"./specification/ServiceSpecificationSource\"\nimport MakeCodeIcon from \"./icons/MakeCodeIcon\"\n\nfunction ServiceButtons(props: {\n    service: jdspec.ServiceSpec\n    makecodeSlug?: string\n}) {\n    const { service, makecodeSlug } = props\n    const { shortId } = service\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item>\n                <Button\n                    variant=\"contained\"\n                    to={`/services/${shortId}/playground/`}\n                >\n                    Playground\n                </Button>\n            </Grid>\n            {makecodeSlug && (\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        to={makecodeSlug}\n                        startIcon={<MakeCodeIcon />}\n                    >\n                        MakeCode\n                    </Button>\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n\nexport default function ServiceMarkdown(props: {\n    classIdentifier: number\n    source: string\n    makecodeSlug?: string\n}) {\n    const { classIdentifier, source, makecodeSlug } = props\n    const service = serviceSpecificationFromClassIdentifier(classIdentifier)\n    const { shortId } = service\n\n    return (\n        <>\n            <ServiceSpecificationStatusAlert specification={service} />\n            <Markdown source={source} />\n            {service && (\n                <ServiceButtons service={service} makecodeSlug={makecodeSlug} />\n            )}\n\n            <h2>Registered Devices</h2>\n            <DeviceSpecificationList\n                requiredServiceClasses={[classIdentifier]}\n            />\n\n            <h2>Sources</h2>\n            <ServiceSpecificationSource serviceSpecification={service} />\n\n            <h2> See Also</h2>\n            <ul>\n                <li>\n                    <a\n                        href={`https://github.com/microsoft/jacdac/blob/main/services/${shortId}.md`}\n                    >\n                        View source\n                    </a>\n                </li>\n                <li>\n                    Read{\" \"}\n                    <Link to=\"/reference/service-specification/\" underline=\"hover\">\n                        Service Specification Language\n                    </Link>{\" \"}\n                    reference\n                </li>\n            </ul>\n        </>\n    )\n}\n","import React from \"react\"\nimport ServiceMarkdown from \"../components/ServiceMarkdown\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport default function Page(props: { pageContext: any }) {\n    return <ServiceMarkdown {...props.pageContext} />\n}\n"],"names":["Grid","React","useContext","useState","DashboardDevice","useChange","dashboardServiceWeight","AppContext","DrawerType","DashboardDeviceItem","props","device","variant","other","drawerType","charts","setCharts","breakpoints","breakpointWeight","services","map","srv","readingRegister","valueRegister","intensityRegister","reduce","c","v","None","xs","sm","md","lg","xl","useMemo","Card","CardContent","Typography","identifierToUrlPath","serviceSpecificationFromClassIdentifier","CardActionArea","arrayShuffle","useDeviceImage","escapeDeviceIdentifier","humanify","useDeviceSpecifications","useGridBreakpoints","DeviceSpecificationCard","specification","size","id","name","company","imageUrl","serviceNames","sc","shortName","join","aspectRatio","width","DeviceSpecificationList","count","shuffle","requiredServiceClasses","devices","specifications","specs","r","lc","filter","spec","startsWith","length","every","indexOf","undefined","slice","JSON","stringify","d","gridBreakpoints","Fragment","Chip","EnumSpecification","serviceClass","enums","Object","values","en","derived","e","isFlags","keys","members","toString","Link","serviceSpecificationFromName","isRegister","isEvent","isCommand","isPipeReport","isReportOf","isPipeReportOf","PacketSpecification","IDChip","Markdown","Box","ServiceSpecificationStatusAlert","useServiceProviderFromServiceClass","JacdacContext","DashbardDeviceItem","DashboardServiceDevices","bus","b","ServiceSpecification","service","node","showDerived","shortId","classIdentifier","packets","pkt","registers","events","commands","reports","secondary","pipeReports","others","reportOf","find","rep","pipeReportOf","notes","short","extends","extend","i","long","note","group","sort","l","identifier","SRV_CONTROL","isHighLevelRegister","isInfrastructure","serviceSpecifications","ServiceTwinRegisterFlag","serviceSpecificationToServiceTwinSpecification","camelName","reg","flags","kind","Const","volatile","Volatile","code","packf","packFormat","fields","f","dspec","serviceSpecificationsWithServiceTwinSpecification","Tabs","Tab","Paper","TabPanel","Snippet","converters","withPrefix","ServiceSpecificationSource","serviceSpecification","showSpecification","tab","setTab","convs","showDeviceTwin","handleTabChange","event","newValue","index","n","lang","Button","MakeCodeIcon","ServiceButtons","makecodeSlug","ServiceMarkdown","source","Page","pageContext"],"sourceRoot":""}