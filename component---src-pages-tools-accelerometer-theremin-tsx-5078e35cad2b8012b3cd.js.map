{"version":3,"file":"component---src-pages-tools-accelerometer-theremin-tsx-5078e35cad2b8012b3cd.js","mappings":"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","sources":["webpack://jacdac-docs/./src/pages/tools/accelerometer-theremin.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport {\n    REPORT_UPDATE,\n    SRV_ACCELEROMETER,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { throttle } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useServices from \"../../components/hooks/useServices\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    FormControl,\n    FormControlLabel,\n    FormLabel,\n    Grid,\n    Radio,\n    RadioGroup,\n    Typography,\n} from \"@mui/material\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport useBuzzerPlayTone from \"../../components/hooks/useBuzzerPlayTone\"\nimport Dashboard from \"../../components/dashboard/Dashboard\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport { useId } from \"react-use-id-hook\"\nimport { LiveMessage } from \"react-aria-live\"\n\nconst TONE_DURATION = 50\nconst TONE_THROTTLE = 100\n\n// this is a React component that gets run numerous time,\n// whenever a change is detected in the React state\n// for example, useServices is a hook that tracks the accelerometer services,\n// so it will render again and update the accelerometers array whenever the bus connects/disconnects\n// an accelerometer\nexport default function AccelerometerTheremin() {\n    const { playTone, toggleBrowserAudio, browserAudio } = useBuzzerPlayTone()\n\n    // identifiers for accessibility\n    const sectionId = useId()\n\n    // useServices accepts a number of filters and returns any services that match\n    // get all accelerometer + buzzer services\n    // under the hood, it uses the bus and events.\n    const accelerometers = useServices({ serviceClass: SRV_ACCELEROMETER })\n\n    // create a state variable to hold the service selected as our accelerometer\n    // when using setAccelService, React will render again this component\n    const [accelService, setAccelService] = useState<JDService>()\n    // used to hold the value for the axis selected by the radio group. This is also used to set the axis of the accelerometer to sonify. Default value is X. meaning the X axis will be sonified by default.\n    const [axisToSonify, setAxisToSonify] = useState<\"x\" | \"y\" | \"z\">(\"x\")\n    //used to hold user selection of the property of the sound to vary. Default is the frequency.\n    const [sonificationProperty, setSonificationProperty] =\n        useState(\"frequency\")\n    const [srAnnouncement, setSRAnnouncement] = useState(\"\")\n\n    // event handeler for radio button selection change for axis to sonify\n    const handleAccessChange = event => {\n        setAxisToSonify(event.target.value)\n        setSRAnnouncement(\n            `changing ${sonificationProperty} based on ${event.target.value} of accelerometer.`\n        ) // using the value that is being set in the previous line results in the value pre-update being announced. I suspect this has to do with how react re-renders. using event.target.value to mittegate this.\n\n        // in progress: make sure an Aria alert gets generated indecating the access that has been selected when streaming starts, or when radio button selection changes.\n    }\n\n    //handler for property selection to sonify.\n    const handelPropertySelectionChange = event => {\n        setSonificationProperty(event.target.value)\n        setSRAnnouncement(\n            `changing ${event.target.value} based on ${axisToSonify} of accelerometer.`\n        )\n    }\n    // use a closure to capture accel variable\n    // act as a toggle for the button the indicates streaming state.\n    const handleSelectAccelerometerService = accel => () => {\n        setSRAnnouncement(\"\") // clearing the live region for the text to be announced when streaming starts. I don't have a good feeling about this approach.\n        accelService == accel\n            ? setAccelService(undefined)\n            : setAccelService(accel)\n        if (accelService !== accel) {\n            setSRAnnouncement(\n                `changing ${sonificationProperty} based on ${axisToSonify} of accelerometer.`\n            ) // to investigate: this announcement does not happen after the user changes the selection of the axis and hits the start streaming button. hitting stop streaming and then start streaming however announces that axis being sonified and the property.\n        } else {\n            setSRAnnouncement(\"\")\n        }\n    }\n\n    // filter to only show accelerometers in dashboard\n    const dashboardDeviceFilter = (d: JDDevice) =>\n        d.hasService(SRV_ACCELEROMETER)\n\n    // register for accelerometer data events\n    useEffect(() => {\n        // ?. checks that the callee is defined\n        const unsubs = accelService?.readingRegister.subscribe(\n            REPORT_UPDATE,\n            // don't trigger more than every 100ms\n            throttle(async () => {\n                // get x acceleration data\n                // const [x] = accelService.readingRegister.unpackedValue\n                // get all acceleration data\n                let volume = 1\n                let toneFrequencyOffset = 0\n                const [x, y, z] = accelService.readingRegister.unpackedValue\n                if (sonificationProperty == \"frequency\") {\n                    if (axisToSonify == \"x\") {\n                        toneFrequencyOffset = x\n                    } else if (axisToSonify == \"y\") {\n                        toneFrequencyOffset = y\n                    } else {\n                        toneFrequencyOffset = z\n                    }\n                } else {\n                    if (axisToSonify == \"x\") {\n                        volume = (Math.abs(x) * 99) / 100.0\n                    } else if (axisToSonify == \"y\") {\n                        volume = (Math.abs(y) * 99) / 100.0\n                    } else {\n                        volume = (Math.abs(z) * 99) / 100.0\n                    }\n                }\n\n                await playTone(\n                    1000 + toneFrequencyOffset * 1000,\n                    TONE_DURATION,\n                    volume\n                )\n            }, TONE_THROTTLE)\n        )\n\n        // cleanup callback\n        return () => unsubs?.()\n    }, [accelService, playTone]) // re-register if accelerometers, buzzers change\n\n    return (\n        <>\n            <section id={sectionId}>\n                <Grid container spacing={2}>\n                    <GridHeader title=\"Audio controls\" />\n                    <Grid item xs={12}>\n                        <Button\n                            variant={\"outlined\"}\n                            onClick={toggleBrowserAudio}\n                        >\n                            {browserAudio\n                                ? \"Stop browser audio\"\n                                : \"Start browser audio\"}\n                        </Button>\n                        <LiveMessage\n                            message={srAnnouncement}\n                            aria-live=\"assertive\"\n                        />\n                    </Grid>\n                    {!accelerometers.length && (\n                        <>\n                            <GridHeader title=\"Connect a device\" />\n                            <Grid item xs>\n                                <ConnectAlert\n                                    serviceClass={SRV_ACCELEROMETER}\n                                />\n                            </Grid>\n                        </>\n                    )}\n                    {!!accelerometers.length && (\n                        <>\n                            <GridHeader title=\"Available accelerometers\" />\n                            {accelerometers.map(accelerometer => (\n                                <Grid\n                                    item\n                                    xs={12}\n                                    sm={6}\n                                    lg={4}\n                                    xl={3}\n                                    key={accelerometer.id}\n                                >\n                                    <Card>\n                                        <DeviceCardHeader\n                                            device={accelerometer.device}\n                                            showAvatar={true}\n                                            showMedia={true}\n                                        />\n                                        <CardContent>\n                                            <Typography variant=\"h5\">\n                                                {(accelerometer === accelService\n                                                    ? \"Streaming from \"\n                                                    : \"\") +\n                                                    (accelerometer.device\n                                                        .isPhysical\n                                                        ? \"Physical \"\n                                                        : \"Virtual \") +\n                                                    `Accelerometer ${accelerometer.friendlyName}`}\n                                            </Typography>\n                                        </CardContent>\n                                        <CardActions>\n                                            <FormControl component=\"fieldset\">\n                                                <FormLabel component=\"legend\">\n                                                    Select axis of the\n                                                    accelerometer to sonify\n                                                </FormLabel>\n                                                <RadioGroup\n                                                    aria-label=\"axis\"\n                                                    name=\"axisToSonify\"\n                                                    value={axisToSonify}\n                                                    onChange={\n                                                        handleAccessChange\n                                                    }\n                                                >\n                                                    <FormControlLabel\n                                                        value=\"x\"\n                                                        control={<Radio />}\n                                                        label=\"X axis\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"y\"\n                                                        control={<Radio />}\n                                                        label=\"Y axis\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"z\"\n                                                        control={<Radio />}\n                                                        label=\"Z axis\"\n                                                    />\n                                                </RadioGroup>\n                                                <FormLabel component=\"legend\">\n                                                    Select property of the sound\n                                                    to change\n                                                </FormLabel>\n                                                <RadioGroup\n                                                    aria-label=\"sonification property\"\n                                                    name=\"soundProperty\"\n                                                    value={sonificationProperty}\n                                                    onChange={\n                                                        handelPropertySelectionChange\n                                                    }\n                                                >\n                                                    <FormControlLabel\n                                                        value=\"frequency\"\n                                                        control={<Radio />}\n                                                        label=\"buzzer frequency\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"volume\"\n                                                        control={<Radio />}\n                                                        label=\"buzzer volume\"\n                                                    />\n                                                </RadioGroup>\n                                            </FormControl>\n\n                                            <Button\n                                                variant={\"outlined\"}\n                                                onClick={handleSelectAccelerometerService(\n                                                    accelerometer\n                                                )}\n                                            >\n                                                {accelerometer === accelService\n                                                    ? \"Stop streaming\"\n                                                    : \"Start streaming\"}\n                                            </Button>\n                                        </CardActions>\n                                    </Card>\n                                </Grid>\n                            ))}\n                        </>\n                    )}\n                </Grid>\n            </section>\n            <Dashboard deviceFilter={dashboardDeviceFilter} />\n        </>\n    )\n}\n"],"names":["React","useEffect","useState","REPORT_UPDATE","SRV_ACCELEROMETER","throttle","useServices","GridHeader","Button","Card","CardActions","CardContent","FormControl","FormControlLabel","FormLabel","Grid","Radio","RadioGroup","Typography","ConnectAlert","DeviceCardHeader","useBuzzerPlayTone","Dashboard","useId","LiveMessage","TONE_DURATION","TONE_THROTTLE","AccelerometerTheremin","playTone","toggleBrowserAudio","browserAudio","sectionId","accelerometers","serviceClass","accelService","setAccelService","axisToSonify","setAxisToSonify","sonificationProperty","setSonificationProperty","srAnnouncement","setSRAnnouncement","handleAccessChange","event","target","value","handelPropertySelectionChange","handleSelectAccelerometerService","accel","undefined","dashboardDeviceFilter","d","hasService","unsubs","readingRegister","subscribe","volume","toneFrequencyOffset","x","y","z","unpackedValue","Math","abs","length","map","accelerometer","id","device","isPhysical","friendlyName"],"sourceRoot":""}