{"version":3,"file":"7767-b4928fd1db0c7da072e3.js","mappings":";;;;;;;AAAa;;AAEb,6BAA6B,mBAAO,CAAC,KAA8C;;AAEnF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;;AAEf,4CAA4C,mBAAO,CAAC,KAAuB;;AAE3E,kBAAkB,mBAAO,CAAC,KAAmB;;AAE7C;AACA;AACA,CAAC;;AAED,SAAe;;;;;;;;ACjBF;;AAEb,6BAA6B,mBAAO,CAAC,KAA8C;;AAEnF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;;AAEf,4CAA4C,mBAAO,CAAC,KAAuB;;AAE3E,kBAAkB,mBAAO,CAAC,KAAmB;;AAE7C;AACA;AACA,CAAC;;AAED,SAAe;;;;;;;;ACjBF;;AAEb,6BAA6B,mBAAO,CAAC,KAA8C;;AAEnF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;;AAEf,4CAA4C,mBAAO,CAAC,KAAuB;;AAE3E,kBAAkB,mBAAO,CAAC,KAAmB;;AAE7C;AACA;AACA,CAAC;;AAED,SAAe;;;;;;;;ACjBF;;AAEb,6BAA6B,mBAAO,CAAC,KAA8C;;AAEnF,6BAA6C;AAC7C;AACA,CAAC,CAAC;AACF,SAAe;;AAEf,4CAA4C,mBAAO,CAAC,KAAuB;;AAE3E,kBAAkB,mBAAO,CAAC,KAAmB;;AAE7C;AACA;AACA,CAAC;;AAED,SAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBf;AACA;AAIA;AACA;AAEe,SAASK,qBAAT,CACXC,OADW,EAEXC,GAFW,EAGXC,UAHW,EAIXC,WAJW,EAKXC,IALW,EAMb;AACE,MAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBX,kBAAQ,CAAiB,EAAjB,CAAtC;AACA,MAAMY,OAAO,GAAGT,6BAAU,EAA1B;;AAEA,MAAMU,MAAM;AAAA,mDAAG,aAAY;AACvB,UAAMC,UAAU,SAAST,OAAO,CAACU,iBAAR,CAA0BT,GAA1B,EAA+BC,UAA/B,CAAzB;AACA,UAAIK,OAAO,EAAX,EAAeD,UAAU,CAACG,UAAU,IAAI,EAAf,CAAV;AAClB,KAHW;;AAAA,oBAAND,MAAM;AAAA;AAAA;AAAA,KAAZ,CAJF,CASE;;;AACAd,EAAAA,mBAAS,CAAC,MAAMS,WAAN,aAAMA,WAAN,uBAAMA,WAAW,CAAEQ,SAAb,CAAuBf,wBAAvB,EAA8BY,MAA9B,CAAP,EAA8C,CAACL,WAAD,CAA9C,CAAT;AACAN,EAAAA,4BAAS,CAACG,OAAD,EAAUQ,MAAV,GAAmBP,GAAnB,EAAwBC,UAAxB,8CAAwCE,IAAI,IAAI,EAAhD,GAAT;AAEA,SAAOC,OAAP;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BD;AAEA;AAeA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CAGA;;AAMA,SAAS8C,KAAT,CAAeC,MAAf,EAAmC;AAC/B,MAAMC,GAAG,GAAGlB,uBAAK,CAACiB,MAAD,EAAS,GAAT,CAAjB;AACA,SAAOC,GAAP;AACH;;AAED,SAASC,IAAT,CAAcF,MAAd,EAA0C;AACtC,MAAI,CAACA,MAAL,EAAa,OAAOG,SAAP;AACb,MAAIH,MAAM,CAACI,MAAP,KAAkB,CAAtB,EACI,OAAUJ,MAAM,CAAC,CAAD,CAAhB,SAAuBA,MAAM,CAAC,CAAD,CAA7B,SAAoCA,MAAM,CAAC,CAAD,CAA1C,SAAiDA,MAAM,CAAC,CAAD,CAAvD,CADJ,KAEK,OAAOjB,uBAAK,CAACiB,MAAD,EAAS,GAAT,CAAZ;AACR;;AAED,SAASK,kBAAT,CAA4BC,KAA5B,EAKG;AACC,MAAM;AAAE1D,IAAAA,OAAF;AAAW2D,IAAAA,IAAX;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,MAAmCH,KAAzC;AACA,MAAM;AAAA,OAACI,QAAD;AAAA,OAAWC;AAAX,MAA0BpE,kBAAQ,CAAC,EAAD,CAAxC;AACA,MAAMqE,UAAU,GAAGrC,uCAAK,EAAxB;;AACA,MAAMsC,oBAAoB,GAAIC,KAAD,IAA0C;AACnEH,IAAAA,WAAW,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACH,GAFD;;AAGA,MAAMC,gBAAgB;AAAA,mDAAG,aAAY;AACjC,YAAMrE,OAAO,CAACsE,kBAAR,CACFtC,oDADE,EAEF,CAAC6B,IAAD,EAAOC,QAAQ,IAAI,EAAnB,CAFE,EAGF,IAHE,CAAN;AAKAC,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAH,MAAAA,OAAO,CAAC,KAAD,CAAP;AACH,KARqB;;AAAA,oBAAhBS,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AASA,MAAMG,YAAY,GAAG,MAAM;AACvBT,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAH,IAAAA,OAAO,CAAC,KAAD,CAAP;AACH,GAHD;;AAIA,sBACI,oBAAC,qBAAD;AAAQ,QAAI,EAAED,IAAd;AAAoB,aAAS,EAAE,IAA/B;AAAqC,YAAQ,EAAE;AAA/C,kBACI,oBAAC,mCAAD;AAAsB,WAAO,EAAEa;AAA/B,iCAC6BX,IAD7B,CADJ,eAII,oBAAC,4BAAD,qBACI,oBAAC,wBAAD;AACI,MAAE,EAAEG,UADR;AAEI,SAAK,EAAEF,QAFX;AAGI,SAAK,EAAC,UAHV;AAII,aAAS,EAAE,IAJf;AAKI,QAAI,EAAC,UALT;AAMI,YAAQ,EAAEG;AANd,IADJ,CAJJ,eAcI,oBAAC,4BAAD,qBACI,oBAAC,wBAAD;AACI,WAAO,EAAC,WADZ;AAEI,SAAK,EAAC,SAFV;AAGI,YAAQ,EAAE,CAACjE,OAHf;AAII,WAAO,EAAEqE;AAJb,eADJ,CAdJ,CADJ;AA2BH;;AAED,SAASI,eAAT,CAAyBf,KAAzB,EAMG;AACC,MAAM;AAAE1D,IAAAA,OAAF;AAAW0E,IAAAA,IAAX;AAAiBC,IAAAA,OAAjB;AAA0Bd,IAAAA,IAA1B;AAAgCe,IAAAA;AAAhC,MAA8ClB,KAApD;AACA,MAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBjE,kBAAQ,CAAC,KAAD,CAAhC;AACA,MAAM,CAACkF,QAAD,EAAWC,YAAX,IAA2BH,OAAO,IAAI,EAA5C;AACA,MAAM,CAACI,SAAD,EAAYC,IAAZ,EAAkBC,OAAlB,IAA6BP,IAAI,IAAI,EAA3C;AACA,MAAM;AAAA,OAACQ,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CxF,kBAAQ,CAAC,KAAD,CAAxD;AACA,MAAMyF,KAAK,GAAG,CAAC,CAACT,OAAhB;AACA,MAAMU,OAAO,GAAG,CAAC,CAACX,IAAlB;AACA,MAAMY,YAAY,GAAG,EAArB;;AACA,MAAMjB,gBAAgB,GAAG,MAAMT,OAAO,CAAC,IAAD,CAAtC;;AACA,MAAM2B,mBAAmB;AAAA,oDAAG,aAAY;AACpCJ,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACA,YAAMnF,OAAO,CAACsE,kBAAR,CAAqCtC,0DAArC,EAA4D,CAC9D6B,IAD8D,CAA5D,CAAN;AAGH,KALwB;;AAAA,oBAAnB0B,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAMA,MAAME,oBAAoB;AAAA,oDAAG,WAAOC,EAAP,EAA6C;AACtE,UAAMC,WAAW,GAAGC,QAAQ,CAACF,EAAE,CAACvB,MAAH,CAAUC,KAAX,CAA5B;AACA,UAAI,CAACyB,KAAK,CAACF,WAAD,CAAV,EACI,MAAM3F,OAAO,CAACsE,kBAAR,CACFtC,oEADE,EAEF,CAAC2D,WAAD,EAAc9B,IAAd,CAFE,EAGF,IAHE,CAAN;AAKP,KARyB;;AAAA,oBAApB4B,oBAAoB;AAAA;AAAA;AAAA,KAA1B,CAhBD,CAyBC;;;AACA,MAAMM,qBAAqB,GAAGzD,2BAAQ,CAACtC,OAAD,EAAUkC,kEAAV,CAAtC;AACAxC,EAAAA,mBAAS,CACL,MACIqG,qBADJ,aACIA,qBADJ,uBACIA,qBAAqB,CAAEpF,SAAvB,CAAiCf,wBAAjC,EAAwC,MAAM;AAC1C,QAAM,CAACqG,UAAD,IAAeF,qBAAqB,CAACG,QAA3C;AACA,QAAID,UAAU,KAAKpC,IAAnB,EAAyBsB,mBAAmB,CAAC,IAAD,CAAnB;AAC5B,GAHD,CAFC,EAML,CAACY,qBAAD,CANK,CAAT;AAQA,sBACI,uDACI,oBAAC,wBAAD;AACI,mBAAe,EACX,CAACX,KAAD,gBACI,oBAAC,oCAAD;AACI,WAAK,EAAC,SADV;AAEI,cAAQ,EAAE,CAAC,CAACE,YAFhB;AAGI,aAAO,EAAEjB,gBAHb;AAII,WAAK,EAAC;AAJV,oBAMI,oBAAC,kBAAD,OANJ,CADJ,gBAUI,oBAAC,wBAAD;AACI,aAAO,EAAC,UADZ;AAEI,WAAK,EAAC,SAFV;AAGI,cAAQ,EAAE,CAAC,CAACiB,YAHhB;AAII,aAAO,EAAEC,mBAJb;AAKI,WAAK,EAAE,QALX;AAMI,UAAI,eAAE,oBAAC,qBAAD;AANV;AAZZ,kBAuBI,oBAAC,2BAAD,QACKX,SAAS,gBACN,oBAAC,sBAAD;AAAS,SAAK,EAAC;AAAf,kBACI,oBAAC,mBAAD,OADJ,CADM,GAINM,gBAAgB,gBAChB,oBAAC,sBAAD;AAAS,SAAK,EAAC;AAAf,kBACI,oBAAC,4BAAD;AAAmB,SAAK,EAAC;AAAzB,IADJ,CADgB,GAIhBE,KAAK,IAAI,CAACC,OAAV,gBACA,oBAAC,sBAAD;AAAS,SAAK,EAAC;AAAf,kBACI,oBAAC,sCAAD,OADJ,CADA,GAIA,IAbR,CAvBJ,eAsCI,oBAAC,2BAAD;AACI,WAAO,EAAExB,IADb;AAEI,aAAS,EAAE,CACPuB,KAAK,kBAAgBP,QADd,EAEPQ,OAAO,cAAYL,IAAZ,kBAA6BC,OAF7B,EAGPF,SAAS,IAAIhD,0CAAb,SAHO,EAKNqE,MALM,CAKCC,CAAC,IAAI,CAAC,CAACA,CALR,EAMNC,IANM,CAMD,IANC;AAFf,IAtCJ,EAiDKlB,KAAK,iBACF,oBAAC,wBAAD;AACI,MAAE,EAAE;AAAEmB,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,EAAE,EAAE;AAAb,KADR;AAEI,QAAI,EAAC,QAFT;AAGI,SAAK,EAAE3B,QAHX;AAII,SAAK,EAAC,UAJV;AAKI,YAAQ,EAAEY;AALd,IAlDR,EA0DK9B,IAAI,iBACD,oBAAC,kBAAD;AACI,WAAO,EAAE3D,OADb;AAEI,QAAI,EAAE2D,IAFV;AAGI,WAAO,EAAEC,OAHb;AAII,QAAI,EAAEC;AAJV,IA3DR,CADJ,CADJ;AAuEH;;AAED,SAAS4C,MAAT,CAAgB/C,KAAhB,EAAsE;AAClE,MAAM;AAAE1D,IAAAA,OAAF;AAAW0G,IAAAA;AAAX,MAA6BhD,KAAnC;;AACA,MAAMiD,IAAI,GAAG,MAAM3G,OAAO,CAAC4G,YAAR,CAAqB5E,wCAArB,CAAnB;;AACA,MAAM8E,yBAAyB,GAAGxE,2BAAQ,CACtCtC,OADsC,EAEtCkC,gEAFsC,CAA1C;AAIA,MAAM8E,aAAa,GAAGjH,qBAAqB,CACvCC,OADuC,EAEvCgC,kEAFuC,EAGvC,WAHuC,EAIvC8E,yBAJuC,CAA3C,CAPkE,CAclE;;AACA,MAAMI,iBAAiB,GAAG5E,2BAAQ,CAACtC,OAAD,EAAUkC,0DAAV,CAAlC;AACA,MAAMkF,GAAG,GAAGrH,qBAAqB,CAC7BC,OAD6B,EAE7BgC,8DAF6B,EAG7B,2BAH6B,EAI7BkF,iBAJ6B,CAAjC,CAhBkE,CAuBlE;;AACA7E,EAAAA,8BAAW,CAAC,IAAD,EAAOsE,IAAP,EAAa,KAAb,EAAoB,CAAC3G,OAAD,CAApB,CAAX;;AAEA,MAAM6E,QAAQ,GAAIwB,CAAD;AAAA;;AAAA,WACb,wBAAAW,aAAa,CAACM,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASlB,CAAjC,6EAAsC,CAAtC,MAA4C,CAACmB,QADhC;AAAA,GAAjB;;AAGA,MAAMC,KAAK,GAAGrF,wBAAM,gDACb,CAAC4E,aAAa,IAAI,EAAlB,EAAsBU,GAAtB,CAA0BC,EAAE,IAAIA,EAAE,CAAC,CAAD,CAAlC,CADa,wCAEb,CAACP,GAAG,IAAI,EAAR,EAAYM,GAAZ,CAAgBE,EAAE,IAAIA,EAAE,CAAC,CAAD,CAAxB,CAFa,GAAN,CAGXC,IAHW,CAGN,CAACC,CAAD,EAAIC,CAAJ,KAAU,CAAClD,QAAQ,CAACiD,CAAD,CAAT,GAAejD,QAAQ,CAACkD,CAAD,CAH3B,CAAd;AAKA,sBACI,oBAAC,mBAAD,QACKX,GAAG,KAAK7D,SAAR,IAAqB,CAAC6D,GAAG,CAAC5D,MAA1B,iBACG,oBAAC,wBAAD,qBACI,oBAAC,oBAAD;AAAO,YAAQ,EAAC;AAAhB,yBADJ,CAFR,EAMKiE,KAAK,CAACC,GAAN,CAAU7D,IAAI,iBACX,oBAAC,eAAD;AACI,OAAG,EAAEA,IADT;AAEI,WAAO,EAAE7D,OAFb;AAGI,aAAS,EAAE0G,aAAa,KAAK7C,IAHjC;AAII,QAAI,EAAEA,IAJV;AAKI,WAAO,EAAEmD,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEM,IAAf,CAAoBK,EAAE,IAAIA,EAAE,CAAC,CAAD,CAAF,KAAU9D,IAApC,CALb;AAMI,QAAI,EAAEuD,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEE,IAAL,CAAUM,EAAE,IAAIA,EAAE,CAAC,CAAD,CAAF,KAAU/D,IAA1B;AANV,IADH,CANL,CADJ;AAmBH;;AAEc,SAASmE,aAAT,CAAuBtE,KAAvB,EAAqD;AAChE,MAAM;AAAE1D,IAAAA;AAAF,MAAc0D,KAApB;AACA,MAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBjE,kBAAQ,CAAC,KAAD,CAAhC;AACA,MAAM;AAAA,OAACuF,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CxF,kBAAQ,CAAC,KAAD,CAAxD;AAEA,MAAMsI,MAAM,GAAGzF,mCAAgB,CAAaxC,OAAb,CAA/B;AACA,MAAMkI,KAAK,GAAGD,MAAM,GAAG,SAAH,GAAe,WAAnC;AACA,MAAM;AAAEE,IAAAA;AAAF,MAAkBzG,iCAAc,CAACwG,KAAD,CAAtC;AACA,MAAME,eAAe,GAAGpI,OAAO,CAACqI,QAAR,CAAiBpG,8CAAjB,CAAxB;AACA,MAAMsG,YAAY,GAAGvI,OAAO,CAACqI,QAAR,CAAiBpG,wCAAjB,CAArB;AACA,MAAM,CAAC4B,IAAD,IAAS/B,qDAAwB,CAAWyG,YAAX,CAAvC;AACA,MAAME,iBAAiB,GAAGzI,OAAO,CAACqI,QAAR,CAAiBpG,kDAAjB,CAA1B;AACA,MAAM,CAAC0G,EAAD,IAAO7G,qDAAwB,CAAe2G,iBAAf,CAArC;AACA,MAAMG,WAAW,GAAG5I,OAAO,CAACqI,QAAR,CAAiBpG,0CAAjB,CAApB;AACA,MAAM,CAAC6G,GAAD,IAAQhH,qDAAwB,CAAe8G,WAAf,CAAtC;AACA,MAAMG,WAAW,GAAGzG,2BAAQ,CAACtC,OAAD,EAAUkC,8CAAV,CAA5B;AACA,MAAM+G,UAAU,GAAG3G,2BAAQ,CAACtC,OAAD,EAAUkC,4CAAV,CAA3B;AACA,MAAM6D,qBAAqB,GAAGzD,2BAAQ,CAACtC,OAAD,EAAUkC,kEAAV,CAAtC;AACA,MAAM0C,SAAS,GAAG,CAAC,EAAC+D,EAAD,aAACA,EAAD,eAACA,EAAE,CAAEnF,MAAL,CAAnB;;AAEA,MAAM2F,OAAO;AAAA,oDAAG,aAAY;AACxB,YAAMf,eAAe,CAACgB,gBAAhB,CAAiC,IAAjC,CAAN;AACA,YAAMpJ,OAAO,CAAC4G,YAAR,CAAqB5E,kDAArB,CAAN;AACH,KAHY;;AAAA,oBAAPmH,OAAO;AAAA;AAAA;AAAA,KAAb;;AAKA,MAAMG,aAAa;AAAA,oDAAG,aAAY;AAC9B,UAAI1E,SAAJ,EAAe,MAAMwD,eAAe,CAACgB,gBAAhB,CAAiC,KAAjC,CAAN,CAAf,KACK;AACDjE,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACA,cAAMgE,OAAO,EAAb;AACH;AACJ,KANkB;;AAAA,oBAAbG,aAAa;AAAA;AAAA;AAAA,KAAnB;;AAOA,MAAMC,eAAe,GAAG,MAAM;AAC1B,QAAI5F,IAAJ,EAAUC,OAAO,CAAC,KAAD,CAAP,CAAV,KACK;AACDuB,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAvB,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAuF,MAAAA,OAAO;AACV;AACJ,GAPD,CAhCgE,CAyChE;;;AACA,MAAMK,gBAAgB,GAAG,MAAM;AAC3BjB,IAAAA,YAAY,CAACkB,iBAAb;AACAhB,IAAAA,iBAAiB,CAACgB,iBAAlB;AACH,GAHD;;AAIA/J,EAAAA,mBAAS,CACL,MAAMuJ,UAAN,aAAMA,UAAN,uBAAMA,UAAU,CAAEtI,SAAZ,CAAsBf,wBAAtB,EAA6B4J,gBAA7B,CADD,EAEL,CAACP,UAAD,CAFK,CAAT;AAIAvJ,EAAAA,mBAAS,CACL,MAAMqJ,WAAN,aAAMA,WAAN,uBAAMA,WAAW,CAAEpI,SAAb,CAAuBf,wBAAvB,EAA8B4J,gBAA9B,CADD,EAEL,CAACT,WAAD,CAFK,CAAT;AAIArJ,EAAAA,mBAAS,CACL,MACIqG,qBADJ,aACIA,qBADJ,uBACIA,qBAAqB,CAAEpF,SAAvB,CAAiCf,wBAAjC,EAAwC,MACpCuF,mBAAmB,CAAC,IAAD,CADvB,CAFC,EAKL,CAACY,qBAAD,CALK,CAAT;AAOA,sBACI,uDACI,oBAAC,oBAAD;AACI,aAAS,MADb;AAEI,WAAO,EAAE,CAFb;AAGI,SAAK,EAAE;AAAEmC,MAAAA,KAAK,EAAEC,WAAT;AAAsBuB,MAAAA,QAAQ,EAAE;AAAhC;AAHX,KAKKzB,MAAM,iBACH,oBAAC,oBAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,oBAAC,oBAAD;AAAO,YAAQ,EAAC;AAAhB,kBACI,oBAAC,yBAAD,oBADJ,iEADJ,CANR,eAcI,oBAAC,oBAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,oBAAC,yBAAD;AAAY,aAAS,EAAC,MAAtB;AAA6B,WAAO,EAAC;AAArC,YADJ,EAIK,CAACpE,IAAI,IAAI8E,EAAR,IAAcG,GAAf,kBACG,oBAAC,uBAAD,QACK,CAAC,CAACjF,IAAF,iBAAU,oBAAC,mBAAD;AAAM,SAAK,EAAC,SAAZ;AAAsB,SAAK,EAAEA;AAA7B,IADf,EAEK,CAAC,CAAC8E,EAAF,iBAAQ,oBAAC,mBAAD;AAAM,SAAK,WAASrF,IAAI,CAACqF,EAAD;AAAxB,IAFb,EAGK,CAAC,CAACG,GAAF,iBAAS,oBAAC,mBAAD;AAAM,SAAK,YAAU3F,KAAK,CAAC2F,GAAD;AAA1B,IAHd,CALR,CAdJ,eA0BI,oBAAC,oBAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,oBAAC,oBAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE,CAAzB;AAA4B,aAAS,EAAC;AAAtC,kBACI,oBAAC,oBAAD;AAAM,QAAI;AAAV,kBACI,oBAAC,wBAAD;AACI,aAAS,EAAC,wBADd;AAEI,WAAO,EAAC,UAFZ;AAGI,SAAK,EAAC,SAHV;AAII,WAAO,EAAEQ,aAJb;AAKI,SAAK,EACD1E,SAAS,GACH,iBADG,GAEH,cARd;AAUI,QAAI,EACAA,SAAS,gBAAG,oBAAC,mBAAD,OAAH,gBAAkB,oBAAC,sBAAD;AAXnC,IADJ,CADJ,eAiBI,oBAAC,oBAAD;AAAM,QAAI;AAAV,kBACI,oBAAC,oCAAD;AACI,WAAO,EAAE2E,eADb;AAEI,SAAK,EAAE;AAFX,kBAII,oBAAC,oBAAD;AACI,SAAK,EAAC,OADV;AAEI,WAAO,EAAC,UAFZ;AAGI,WAAO,EAAC,KAHZ;AAII,aAAS,EAAE,CAACrE;AAJhB,kBAMI,oBAAC,uBAAD,OANJ,CAJJ,CADJ,CAjBJ,CADJ,CA1BJ,EA6DKvB,IAAI,iBAAI,oBAAC,MAAD;AAAQ,WAAO,EAAE3D,OAAjB;AAA0B,iBAAa,EAAE6D;AAAzC,IA7Db,CADJ,CADJ;AAmEH","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Add.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Delete.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/SignalWifiBad.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/SignalWifiStatusbarNull.js","webpack://jacdac-docs/./src/components/hooks/useCommandPipeResults.ts","webpack://jacdac-docs/./src/components/dashboard/DashboardWifi.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M24 8.98C20.93 5.9 16.69 4 12 4S3.07 5.9 0 8.98L12 21v-9h8.99L24 8.98zM19.59 14l-2.09 2.09L15.41 14 14 15.41l2.09 2.09L14 19.59 15.41 21l2.09-2.08L19.59 21 21 19.59l-2.08-2.09L21 15.41 19.59 14z\"\n}), 'SignalWifiBad');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4C7.31 4 3.07 5.9 0 8.98L12 21 24 8.98C20.93 5.9 16.69 4 12 4zM2.92 9.07C5.51 7.08 8.67 6 12 6s6.49 1.08 9.08 3.07L12 18.17l-9.08-9.1z\"\n}), 'SignalWifiStatusbarNull');\n\nexports.default = _default;","import { DependencyList, useEffect, useState } from \"react\"\nimport { EVENT } from \"../../../jacdac-ts/src/jdom/constants\"\nimport JDEvent from \"../../../jacdac-ts/src/jdom/event\"\nimport { PackedValues } from \"../../../jacdac-ts/src/jdom/pack\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport useChange from \"../../jacdac/useChange\"\nimport useMounted from \"./useMounted\"\n\nexport default function useCommandPipeResults<TItem extends PackedValues>(\n    service: JDService,\n    cmd: number,\n    packFormat: string,\n    changeEvent?: JDEvent,\n    deps?: DependencyList\n) {\n    const [results, setResults] = useState<PackedValues[]>([])\n    const mounted = useMounted()\n\n    const update = async () => {\n        const newResults = await service.receiveWithInPipe(cmd, packFormat)\n        if (mounted()) setResults(newResults || [])\n    }\n\n    // listen to change event if any\n    useEffect(() => changeEvent?.subscribe(EVENT, update), [changeEvent])\n    useChange(service, update, [cmd, packFormat, ...(deps || [])])\n\n    return results as TItem[]\n}\n","import React, { ChangeEvent, useEffect, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    Badge,\n    Chip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    Grid,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    TextField,\n    Tooltip,\n    Typography,\n} from \"@mui/material\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport { useId } from \"react-use-id-hook\"\nimport SettingsIcon from \"@mui/icons-material/Settings\"\nimport CmdButton from \"../CmdButton\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport {\n    WifiAPFlags,\n    WifiCmd,\n    WifiReg,\n    WifiEvent,\n} from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport { toHex, unique } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useInterval from \"../hooks/useInterval\"\nimport useEvent from \"../hooks/useEvent\"\nimport useCommandPipeResults from \"../hooks/useCommandPipeResults\"\nimport ChipList from \"../ui/ChipList\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport WifiServer from \"../../../jacdac-ts/src/servers/wifiserver\"\nimport { Alert, AlertTitle } from \"@mui/material\"\nimport { EVENT } from \"../../../jacdac-ts/src/jdom/constants\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport WifiIcon from \"@mui/icons-material/Wifi\"\nimport WifiOffIcon from \"@mui/icons-material/WifiOff\"\nimport DialogTitleWithClose from \"../ui/DialogTitleWithClose\"\nimport DeleteIcon from \"@mui/icons-material/Delete\"\nimport AddIcon from \"@mui/icons-material/Add\"\nimport SignalWifiStatusbarNullIcon from \"@mui/icons-material/SignalWifiStatusbarNull\"\nimport SignalWifiBadIcon from \"@mui/icons-material/SignalWifiBad\"\n\n// flags, rssi, channel, bssid, ssid\ntype ScanResult = [WifiAPFlags, number, number, Uint8Array, string]\n\n// priority, flags, ssid\ntype NetworkResult = [number, number, string]\n\nfunction toMAC(buffer: Uint8Array) {\n    const hex = toHex(buffer, \":\")\n    return hex\n}\n\nfunction toIP(buffer: Uint8Array): string {\n    if (!buffer) return undefined\n    if (buffer.length === 4)\n        return `${buffer[0]}.${buffer[1]}.${buffer[2]}.${buffer[3]}`\n    else return toHex(buffer, \".\")\n}\n\nfunction WiFiPasswordDialog(props: {\n    open: boolean\n    setOpen: (v: boolean) => void\n    service: JDService\n    ssid: string\n}) {\n    const { service, open, setOpen, ssid } = props\n    const [password, setPassword] = useState(\"\")\n    const passwordId = useId()\n    const handlePasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setPassword(event.target.value)\n    }\n    const handleAddNetwork = async () => {\n        await service.sendCmdPackedAsync<[string, string]>(\n            WifiCmd.AddNetwork,\n            [ssid, password || \"\"],\n            true\n        )\n        setPassword(\"\")\n        setOpen(false)\n    }\n    const handleCancel = () => {\n        setPassword(\"\")\n        setOpen(false)\n    }\n    return (\n        <Dialog open={open} fullWidth={true} maxWidth={\"lg\"}>\n            <DialogTitleWithClose onClose={handleCancel}>\n                Enter WiFi password for {ssid}\n            </DialogTitleWithClose>\n            <DialogContent>\n                <TextField\n                    id={passwordId}\n                    value={password}\n                    label=\"Password\"\n                    fullWidth={true}\n                    type=\"password\"\n                    onChange={handlePasswordChange}\n                />\n            </DialogContent>\n            <DialogActions>\n                <CmdButton\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!service}\n                    onClick={handleAddNetwork}\n                >\n                    Connect\n                </CmdButton>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nfunction NetworkListItem(props: {\n    service: JDService\n    ssid: string\n    network?: NetworkResult\n    info?: ScanResult\n    connected: boolean\n}) {\n    const { service, info, network, ssid, connected } = props\n    const [open, setOpen] = useState(false)\n    const [priority, networkFlags] = network || []\n    const [scanFlags, rssi, channel] = info || []\n    const [connectionFailed, setConnectionFailed] = useState(false)\n    const known = !!network\n    const scanned = !!info\n    const connectError = \"\"\n    const handleAddNetwork = () => setOpen(true)\n    const handleForgetNetwork = async () => {\n        setConnectionFailed(false)\n        await service.sendCmdPackedAsync<[string]>(WifiCmd.ForgetNetwork, [\n            ssid,\n        ])\n    }\n    const handlePriorityChange = async (ev: ChangeEvent<HTMLInputElement>) => {\n        const newPriority = parseInt(ev.target.value)\n        if (!isNaN(newPriority))\n            await service.sendCmdPackedAsync(\n                WifiCmd.SetNetworkPriority,\n                [newPriority, ssid],\n                true\n            )\n    }\n    // hasPassword == requires password\n    const connectionFailedEvent = useEvent(service, WifiEvent.ConnectionFailed)\n    useEffect(\n        () =>\n            connectionFailedEvent?.subscribe(EVENT, () => {\n                const [failedSsid] = connectionFailedEvent.unpacked\n                if (failedSsid === ssid) setConnectionFailed(true)\n            }),\n        [connectionFailedEvent]\n    )\n    return (\n        <>\n            <ListItem\n                secondaryAction={\n                    !known ? (\n                        <IconButtonWithTooltip\n                            color=\"primary\"\n                            disabled={!!connectError}\n                            onClick={handleAddNetwork}\n                            title=\"connect\"\n                        >\n                            <AddIcon />\n                        </IconButtonWithTooltip>\n                    ) : (\n                        <CmdButton\n                            variant=\"outlined\"\n                            color=\"warning\"\n                            disabled={!!connectError}\n                            onClick={handleForgetNetwork}\n                            title={\"forget\"}\n                            icon={<DeleteIcon />}\n                        />\n                    )\n                }\n            >\n                <ListItemIcon>\n                    {connected ? (\n                        <Tooltip title=\"connected\">\n                            <WifiIcon />\n                        </Tooltip>\n                    ) : connectionFailed ? (\n                        <Tooltip title=\"connection failed\">\n                            <SignalWifiBadIcon color=\"error\" />\n                        </Tooltip>\n                    ) : known && !scanned ? (\n                        <Tooltip title=\"not found\">\n                            <SignalWifiStatusbarNullIcon />\n                        </Tooltip>\n                    ) : null}\n                </ListItemIcon>\n                <ListItemText\n                    primary={ssid}\n                    secondary={[\n                        known && `priority ${priority}`,\n                        scanned && `RSSI ${rssi}, channel ${channel}`,\n                        scanFlags && WifiAPFlags.WPS && `WPS`,\n                    ]\n                        .filter(s => !!s)\n                        .join(\", \")}\n                />\n\n                {known && (\n                    <TextField\n                        sx={{ ml: 1, mr: 1 }}\n                        type=\"number\"\n                        value={priority}\n                        label=\"priority\"\n                        onChange={handlePriorityChange}\n                    />\n                )}\n                {open && (\n                    <WiFiPasswordDialog\n                        service={service}\n                        open={open}\n                        setOpen={setOpen}\n                        ssid={ssid}\n                    />\n                )}\n            </ListItem>\n        </>\n    )\n}\n\nfunction APList(props: { service: JDService; connectedSsid: string }) {\n    const { service, connectedSsid } = props\n    const scan = () => service.sendCmdAsync(WifiCmd.Scan)\n    const knownNetworksChangedEvent = useEvent(\n        service,\n        WifiEvent.NetworksChanged\n    )\n    const knownNetworks = useCommandPipeResults<NetworkResult>(\n        service,\n        WifiCmd.ListKnownNetworks,\n        \"i16 i16 s\",\n        knownNetworksChangedEvent\n    )\n\n    // grad scan results\n    const scanCompleteEvent = useEvent(service, WifiEvent.ScanComplete)\n    const aps = useCommandPipeResults<ScanResult>(\n        service,\n        WifiCmd.LastScanResults,\n        \"u32 x[4] i8 u8 b[6] s[33]\",\n        scanCompleteEvent\n    )\n\n    // keep scanning\n    useInterval(true, scan, 30000, [service])\n\n    const priority = (s: string) =>\n        knownNetworks.find(n => n[2] === s)?.[0] || -Infinity\n\n    const ssids = unique([\n        ...(knownNetworks || []).map(kn => kn[2]),\n        ...(aps || []).map(ap => ap[4]),\n    ]).sort((l, r) => -priority(l) + priority(r))\n\n    return (\n        <List>\n            {aps !== undefined && !aps.length && (\n                <ListItem>\n                    <Alert severity=\"warning\">No WiFi detected.</Alert>\n                </ListItem>\n            )}\n            {ssids.map(ssid => (\n                <NetworkListItem\n                    key={ssid}\n                    service={service}\n                    connected={connectedSsid === ssid}\n                    ssid={ssid}\n                    network={knownNetworks?.find(kn => kn[2] === ssid)}\n                    info={aps?.find(ap => ap[4] === ssid)}\n                />\n            ))}\n        </List>\n    )\n}\n\nexport default function DashboardWifi(props: DashboardServiceProps) {\n    const { service } = props\n    const [open, setOpen] = useState(false)\n    const [connectionFailed, setConnectionFailed] = useState(false)\n\n    const server = useServiceServer<WifiServer>(service)\n    const color = server ? \"primary\" : \"secondary\"\n    const { textPrimary } = useWidgetTheme(color)\n    const enabledRegister = service.register(WifiReg.Enabled)\n    const ssidRegister = service.register(WifiReg.Ssid)\n    const [ssid] = useRegisterUnpackedValue<[string]>(ssidRegister)\n    const ipAddressRegister = service.register(WifiReg.IpAddress)\n    const [ip] = useRegisterUnpackedValue<[Uint8Array]>(ipAddressRegister)\n    const macRegister = service.register(WifiReg.Eui48)\n    const [mac] = useRegisterUnpackedValue<[Uint8Array]>(macRegister)\n    const lostIpEvent = useEvent(service, WifiEvent.LostIp)\n    const gotIpEvent = useEvent(service, WifiEvent.GotIp)\n    const connectionFailedEvent = useEvent(service, WifiEvent.ConnectionFailed)\n    const connected = !!ip?.length\n\n    const connect = async () => {\n        await enabledRegister.sendSetBoolAsync(true)\n        await service.sendCmdAsync(WifiCmd.Reconnect)\n    }\n\n    const handleConnect = async () => {\n        if (connected) await enabledRegister.sendSetBoolAsync(false)\n        else {\n            setConnectionFailed(false)\n            await connect()\n        }\n    }\n    const handleConfigure = () => {\n        if (open) setOpen(false)\n        else {\n            setConnectionFailed(false)\n            setOpen(true)\n            connect()\n        }\n    }\n\n    // force register refreshs on various events\n    const refreshRegisters = () => {\n        ssidRegister.clearGetTimestamp()\n        ipAddressRegister.clearGetTimestamp()\n    }\n    useEffect(\n        () => gotIpEvent?.subscribe(EVENT, refreshRegisters),\n        [gotIpEvent]\n    )\n    useEffect(\n        () => lostIpEvent?.subscribe(EVENT, refreshRegisters),\n        [lostIpEvent]\n    )\n    useEffect(\n        () =>\n            connectionFailedEvent?.subscribe(EVENT, () =>\n                setConnectionFailed(true)\n            ),\n        [connectionFailedEvent]\n    )\n    return (\n        <>\n            <Grid\n                container\n                spacing={1}\n                style={{ color: textPrimary, minWidth: \"16rem\" }}\n            >\n                {server && (\n                    <Grid item xs={12}>\n                        <Alert severity=\"warning\">\n                            <AlertTitle>Test WiFi</AlertTitle>\n                            This WiFi does not exist; it is purely for testing\n                            purposes.\n                        </Alert>\n                    </Grid>\n                )}\n                <Grid item xs={12}>\n                    <Typography component=\"span\" variant=\"subtitle2\">\n                        WiFi\n                    </Typography>\n                    {(ssid || ip || mac) && (\n                        <ChipList>\n                            {!!ssid && <Chip color=\"primary\" label={ssid} />}\n                            {!!ip && <Chip label={`IP: ${toIP(ip)}`} />}\n                            {!!mac && <Chip label={`MAC: ${toMAC(mac)}`} />}\n                        </ChipList>\n                    )}\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={1} direction=\"row\">\n                        <Grid item>\n                            <CmdButton\n                                trackName=\"dashboard.wifi.connect\"\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                onClick={handleConnect}\n                                title={\n                                    connected\n                                        ? \"disconnect WiFi\"\n                                        : \"connect WiFi\"\n                                }\n                                icon={\n                                    connected ? <WifiIcon /> : <WifiOffIcon />\n                                }\n                            />\n                        </Grid>\n                        <Grid item>\n                            <IconButtonWithTooltip\n                                onClick={handleConfigure}\n                                title={\"configure\"}\n                            >\n                                <Badge\n                                    color=\"error\"\n                                    overlap=\"circular\"\n                                    variant=\"dot\"\n                                    invisible={!connectionFailed}\n                                >\n                                    <SettingsIcon />\n                                </Badge>\n                            </IconButtonWithTooltip>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                {open && <APList service={service} connectedSsid={ssid} />}\n            </Grid>\n        </>\n    )\n}\n"],"names":["useEffect","useState","EVENT","useChange","useMounted","useCommandPipeResults","service","cmd","packFormat","changeEvent","deps","results","setResults","mounted","update","newResults","receiveWithInPipe","subscribe","React","Badge","Chip","Dialog","DialogActions","DialogContent","Grid","List","ListItem","ListItemIcon","ListItemText","TextField","Tooltip","Typography","useWidgetTheme","useId","SettingsIcon","CmdButton","useRegisterUnpackedValue","WifiAPFlags","WifiCmd","WifiReg","WifiEvent","toHex","unique","useInterval","useEvent","ChipList","useServiceServer","Alert","AlertTitle","IconButtonWithTooltip","WifiIcon","WifiOffIcon","DialogTitleWithClose","DeleteIcon","AddIcon","SignalWifiStatusbarNullIcon","SignalWifiBadIcon","toMAC","buffer","hex","toIP","undefined","length","WiFiPasswordDialog","props","open","setOpen","ssid","password","setPassword","passwordId","handlePasswordChange","event","target","value","handleAddNetwork","sendCmdPackedAsync","AddNetwork","handleCancel","NetworkListItem","info","network","connected","priority","networkFlags","scanFlags","rssi","channel","connectionFailed","setConnectionFailed","known","scanned","connectError","handleForgetNetwork","ForgetNetwork","handlePriorityChange","ev","newPriority","parseInt","isNaN","SetNetworkPriority","connectionFailedEvent","ConnectionFailed","failedSsid","unpacked","WPS","filter","s","join","ml","mr","APList","connectedSsid","scan","sendCmdAsync","Scan","knownNetworksChangedEvent","NetworksChanged","knownNetworks","ListKnownNetworks","scanCompleteEvent","ScanComplete","aps","LastScanResults","find","n","Infinity","ssids","map","kn","ap","sort","l","r","DashboardWifi","server","color","textPrimary","enabledRegister","register","Enabled","ssidRegister","Ssid","ipAddressRegister","IpAddress","ip","macRegister","Eui48","mac","lostIpEvent","LostIp","gotIpEvent","GotIp","connect","sendSetBoolAsync","Reconnect","handleConnect","handleConfigure","refreshRegisters","clearGetTimestamp","minWidth"],"sourceRoot":""}