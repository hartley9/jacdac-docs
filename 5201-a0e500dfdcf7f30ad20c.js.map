{"version":3,"file":"5201-a0e500dfdcf7f30ad20c.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Delete.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/FiberManualRecord.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Stop.js","webpack://jacdac-docs/./node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js","webpack://jacdac-docs/./node_modules/@mui/material/InputAdornment/InputAdornment.js","webpack://jacdac-docs/./src/components/ClassDataSetGrid.tsx","webpack://jacdac-docs/./src/components/ReadingFieldGrid.tsx","webpack://jacdac-docs/./src/components/dialogs/mb/RecordDataDialog.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"circle\", {\n  cx: \"12\",\n  cy: \"12\",\n  r: \"8\"\n}), 'FiberManualRecord');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 6h12v12H6z\"\n}), 'Stop');\n\nexports.default = _default;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getInputAdornmentUtilityClass(slot) {\n  return generateUtilityClass('MuiInputAdornment', slot);\n}\nvar inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);\nexport default inputAdornmentClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"children\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport Typography from '../Typography';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport useFormControl from '../FormControl/useFormControl';\nimport styled from '../styles/styled';\nimport inputAdornmentClasses, { getInputAdornmentUtilityClass } from './inputAdornmentClasses';\nimport useThemeProps from '../styles/useThemeProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar overridesResolver = (props, styles) => {\n  var {\n    ownerState\n  } = props;\n  return [styles.root, styles[\"position\".concat(capitalize(ownerState.position))], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];\n};\n\nvar useUtilityClasses = ownerState => {\n  var {\n    classes,\n    disablePointerEvents,\n    hiddenLabel,\n    position,\n    size,\n    variant\n  } = ownerState;\n  var slots = {\n    root: ['root', disablePointerEvents && 'disablePointerEvents', position && \"position\".concat(capitalize(position)), variant, hiddenLabel && 'hiddenLabel', size && \"size\".concat(capitalize(size))]\n  };\n  return composeClasses(slots, getInputAdornmentUtilityClass, classes);\n};\n\nvar InputAdornmentRoot = styled('div', {\n  name: 'MuiInputAdornment',\n  slot: 'Root',\n  overridesResolver\n})(_ref => {\n  var {\n    theme,\n    ownerState\n  } = _ref;\n  return _extends({\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n    whiteSpace: 'nowrap',\n    color: theme.palette.action.active\n  }, ownerState.variant === 'filled' && {\n    // Styles applied to the root element if `variant=\"filled\"`.\n    [\"&.\".concat(inputAdornmentClasses.positionStart, \"&:not(.\").concat(inputAdornmentClasses.hiddenLabel, \")\")]: {\n      marginTop: 16\n    }\n  }, ownerState.position === 'start' && {\n    // Styles applied to the root element if `position=\"start\"`.\n    marginRight: 8\n  }, ownerState.position === 'end' && {\n    // Styles applied to the root element if `position=\"end\"`.\n    marginLeft: 8\n  }, ownerState.disablePointerEvents === true && {\n    // Styles applied to the root element if `disablePointerEvents={true}`.\n    pointerEvents: 'none'\n  });\n});\nvar InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiInputAdornment'\n  });\n\n  var {\n    children,\n    className,\n    component = 'div',\n    disablePointerEvents = false,\n    disableTypography = false,\n    position,\n    variant: variantProp\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  var ownerState = _extends({}, props, {\n    hiddenLabel: muiFormControl.hiddenLabel,\n    size: muiFormControl.size,\n    disablePointerEvents,\n    position,\n    variant\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(InputAdornmentRoot, _extends({\n      as: component,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref\n    }, other, {\n      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/_jsx(Typography, {\n        color: \"text.secondary\",\n        children: children\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [position === 'start' ?\n        /*#__PURE__*/\n\n        /* notranslate needed while Google Translate will not fix zero-width space issue */\n\n        /* eslint-disable-next-line react/no-danger */\n        _jsx(\"span\", {\n          className: \"notranslate\",\n          dangerouslySetInnerHTML: {\n            __html: '&#8203;'\n          }\n        }) : null, children]\n      })\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default InputAdornment;","import React from \"react\"\n\nimport { Card, CardContent, CardHeader, Grid } from \"@mui/material\"\nimport { IconButton } from \"gatsby-theme-material-ui\"\nimport DeleteIcon from \"@mui/icons-material/Delete\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\n\nimport Trend from \"./Trend\"\nimport FieldDataSet from \"./FieldDataSet\"\n\nexport default function ClassDataSetGrid(props: {\n    label: string\n    tables: FieldDataSet[]\n    handleDeleteTable?: (table: FieldDataSet) => void\n}) {\n    const { label, tables, handleDeleteTable } = props\n\n    const handleDelete = (table: FieldDataSet) => () => handleDeleteTable(table)\n\n    return (\n        <Grid container spacing={2}>\n            <Card>\n                <CardHeader\n                    subheader={label + `, ${tables.length} sample(s)`}\n                />\n                <CardContent>\n                    <Grid container spacing={1}>\n                        {tables.map(table => (\n                            <Grid item key={`result` + table.id}>\n                                <Trend dataSet={table} height={8} mini={true} />\n                                {handleDeleteTable && (\n                                    <IconButton\n                                        onClick={handleDelete(table)}\n                                        title=\"Delete this sample\"\n                                        size=\"large\"\n                                    >\n                                        <DeleteIcon />\n                                    </IconButton>\n                                )}\n                            </Grid>\n                        ))}\n                    </Grid>\n                </CardContent>\n            </Card>\n        </Grid>\n    )\n}\n","import { Card, CardActions, CardContent, CardHeader, Grid } from \"@mui/material\"\nimport React from \"react\"\nimport JDRegister from \"../../jacdac-ts/src/jdom/register\"\nimport useGridBreakpoints from \"./useGridBreakpoints\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport FiberManualRecordIcon from \"@mui/icons-material/FiberManualRecord\"\nimport FieldDataSet from \"./FieldDataSet\"\nimport useDeviceName from \"./devices/useDeviceName\"\nimport SwitchWithLabel from \"./ui/SwitchWithLabel\"\n\nfunction ReadingFieldGridItem(props: {\n    register: JDRegister\n    handleRegisterCheck: (register: JDRegister) => void\n    recording: boolean\n    registerChecked: boolean\n    liveDataSet?: FieldDataSet\n}) {\n    const {\n        register,\n        handleRegisterCheck,\n        recording,\n        registerChecked,\n        liveDataSet,\n    } = props\n    const { service } = register\n    const { device } = service\n    const gridBreakpoints = useGridBreakpoints()\n    const deviceName = useDeviceName(device)\n    const handleCheck = () => handleRegisterCheck(register)\n\n    return (\n        <Grid item {...gridBreakpoints} key={\"source\" + register.id}>\n            <Card>\n                <CardHeader\n                    subheader={register.service.name}\n                    title={`${deviceName}/${register.name}`}\n                />\n                <CardContent>\n                    {register.fields.map(field => (\n                        <span key={field.id}>\n                            <FiberManualRecordIcon\n                                fontSize=\"large\"\n                                style={{\n                                    verticalAlign: \"middle\",\n                                    color:\n                                        (registerChecked &&\n                                            liveDataSet?.colorOf(field)?.[0]) ||\n                                        \"#ccc\",\n                                }}\n                            />\n                            {field.name}\n                        </span>\n                    ))}\n                </CardContent>\n                <CardActions>\n                    <SwitchWithLabel\n                        disabled={recording}\n                        onChange={handleCheck}\n                        checked={registerChecked}\n                        label={`record ${deviceName}/${register.name}`}\n                    />\n                </CardActions>\n            </Card>\n        </Grid>\n    )\n}\n\nexport default function ReadingFieldGrid(props: {\n    readingRegisters: JDRegister[]\n    registerIdsChecked: string[]\n    recording?: boolean\n    handleRegisterCheck: (register: JDRegister) => void\n    liveDataSet?: FieldDataSet\n}) {\n    const {\n        readingRegisters,\n        registerIdsChecked,\n        recording,\n        handleRegisterCheck,\n        liveDataSet,\n    } = props\n\n    return (\n        <Grid container spacing={2}>\n            {readingRegisters.map(register => {\n                const registerChecked =\n                    registerIdsChecked.indexOf(register.id) > -1\n                return (\n                    <ReadingFieldGridItem\n                        key={register.id}\n                        register={register}\n                        registerChecked={registerChecked}\n                        recording={recording}\n                        handleRegisterCheck={handleRegisterCheck}\n                        liveDataSet={liveDataSet}\n                    />\n                )\n            })}\n        </Grid>\n    )\n}\n","import React, { useEffect, useContext, useState } from \"react\"\n\nimport {\n    Button,\n    Grid,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    TextField,\n    InputAdornment,\n} from \"@mui/material\"\nimport IconButtonWithTooltip from \"../../ui/IconButtonWithTooltip\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport StopIcon from \"@mui/icons-material/Stop\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport DownloadIcon from \"@mui/icons-material/GetApp\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\"\nimport { Autocomplete } from \"@mui/material\"\n\nimport ReadingFieldGrid from \"../../ReadingFieldGrid\"\nimport FieldDataSet from \"../../FieldDataSet\"\nimport ClassDataSetGrid from \"../../ClassDataSetGrid\"\nimport Trend from \"../../Trend\"\n\nimport useChange from \"../../../jacdac/useChange\"\nimport JacdacContext, { JacdacContextProps } from \"../../../jacdac/Context\"\n\nimport { arrayConcatMany } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport { JDRegister } from \"../../../../jacdac-ts/src/jdom/register\"\nimport { isSensor } from \"../../../../jacdac-ts/src/jdom/spec\"\nimport { JDBus } from \"../../../../jacdac-ts/src/jdom/bus\"\nimport { REPORT_UPDATE } from \"../../../../jacdac-ts/src/jdom/constants\"\nimport { throttle } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport { BlockSvg, FieldVariable, WorkspaceSvg } from \"blockly\"\nimport {\n    MB_CLASS_VAR_TYPE,\n    MODEL_BLOCKS,\n} from \"../../model-editor/modelblockdsl\"\nimport ExpandModelBlockField from \"../../blockly/fields/mb/ExpandModelBlockField\"\nimport ServiceManagerContext from \"../../ServiceManagerContext\"\n\nconst LIVE_HORIZON = 24\nfunction createDataSet(\n    bus: JDBus,\n    registers: JDRegister[],\n    name: string,\n    live: boolean,\n    palette: string[]\n) {\n    const fields = arrayConcatMany(registers.map(reg => reg.fields))\n    const colors = fields.map((f, i) => palette[i % palette.length])\n    const set = new FieldDataSet(bus, name, fields, colors)\n    if (live) set.maxRows = LIVE_HORIZON + 4\n\n    return set\n}\n\nexport default function BlocklyDataRecordingDialog(props: {\n    classes: any\n    chartPalette: string[]\n    open: boolean\n    onDone: (recording: FieldDataSet[], blockId: string) => void\n    recordingCount: number\n    workspace: WorkspaceSvg\n}) {\n    const { classes, chartPalette, open, onDone, recordingCount, workspace } =\n        props\n    const [dialogType, setDialogType] = useState<\n        \"chooseSensors\" | \"recordData\"\n    >(\"chooseSensors\")\n\n    const { fileStorage } = useContext(ServiceManagerContext)\n\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const readingRegisters = useChange(bus, bus =>\n        arrayConcatMany(\n            bus.devices().map(device =>\n                device\n                    .services()\n                    .filter(srv => isSensor(srv.specification))\n                    .map(srv => srv.readingRegister)\n            )\n        )\n    )\n\n    const getWorkspaceClasses = (): string[] => {\n        // get updated list of class variables\n        const classes = workspace\n            .getVariablesOfType(MB_CLASS_VAR_TYPE)\n            .map(function (classVar) {\n                return classVar.name\n            })\n        if (classes.length == 0) return [\"class1\"]\n        return classes\n    }\n\n    /* For choosing sensors */\n    const [registerIdsChecked, setRegisterIdsChecked] = useState<string[]>([])\n    const [totalSamples, setTotalSamples] = useState(0)\n    const [recordingName, setRecordingName] = useState(\n        \"recording\" + recordingCount\n    )\n    const [className, setClassName] = useState(\"class1\")\n\n    const [, setRecordingLength] = useState(0)\n\n    const handleRegisterCheck = (reg: JDRegister) => {\n        const i = registerIdsChecked.indexOf(reg.id)\n        if (i > -1) registerIdsChecked.splice(i, 1)\n        else registerIdsChecked.push(reg.id)\n\n        registerIdsChecked.sort()\n        setRegisterIdsChecked([...registerIdsChecked])\n    }\n\n    const handleRecordingNameChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setRecordingName(event.target.value.trim())\n    }\n\n    const handleClassNameChange = (newClassName: string) => {\n        setClassName(newClassName)\n    }\n\n    /* For recording data*/\n    const recordingRegisters = readingRegisters.filter(\n        reg => registerIdsChecked.indexOf(reg.id) > -1\n    )\n    const [isRecording, setIsRecording] = useState(false)\n    const [liveRecording, setLiveRecording] = useState<FieldDataSet>(undefined)\n    const [, setLiveDataTimestamp] = useState(0)\n    const [currentRecording] = useState({\n        recording: [],\n        blockId: \"\",\n    })\n\n    const [samplingIntervalDelay, setSamplingIntervalDelay] = useState(\"50\")\n    const [samplingDuration, setSamplingDuration] = useState(\"1\")\n\n    const samplingIntervalDelayi = parseInt(samplingIntervalDelay)\n    const samplingCount = Math.ceil(\n        (parseFloat(samplingDuration) * 1000) / samplingIntervalDelayi\n    )\n    const errorSamplingIntervalDelay =\n        isNaN(samplingIntervalDelayi) || !/\\d+/.test(samplingIntervalDelay)\n    const errorSamplingDuration = isNaN(samplingCount)\n    const error = errorSamplingDuration || errorSamplingIntervalDelay\n    const startEnabled = !!recordingRegisters?.length\n\n    const handleSamplingIntervalChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setSamplingIntervalDelay(event.target.value.trim())\n    }\n    const handleSamplingDurationChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setSamplingDuration(event.target.value.trim())\n    }\n    const newRecording = (registerIds: string[], live: boolean) =>\n        registerIds.length\n            ? createDataSet(\n                  bus,\n                  readingRegisters.filter(\n                      reg => registerIds.indexOf(reg.id) > -1\n                  ),\n                  `${recordingName}.${totalSamples}`,\n                  live,\n                  chartPalette\n              )\n            : undefined\n\n    const stopRecording = () => {\n        if (isRecording) {\n            // add new samples to recording\n            currentRecording.recording.push(liveRecording)\n            setTotalSamples(totalSamples + 1)\n\n            // refresh live recording\n            setLiveRecording(newRecording(registerIdsChecked, true))\n\n            // stop recording\n            setIsRecording(false)\n        }\n    }\n    const startRecording = async () => {\n        if (!isRecording && recordingRegisters.length) {\n            setLiveRecording(newRecording(registerIdsChecked, false))\n            setIsRecording(true)\n        }\n    }\n    const startStreamingRegisters = () => {\n        console.log(`start streaming`)\n        const streamers = recordingRegisters?.map(reg =>\n            reg.subscribe(REPORT_UPDATE, () => {})\n        )\n        return () => {\n            console.log(`stop streaming`)\n            streamers.map(streamer => streamer())\n        }\n    }\n    const toggleRecording = () => {\n        if (isRecording) stopRecording()\n        else startRecording()\n    }\n    const handleDeleteSample = (sample: FieldDataSet) => {\n        const i = currentRecording.recording.indexOf(sample)\n        if (i > -1) currentRecording.recording.splice(i, 1)\n    }\n    const updateLiveData = () => {\n        setLiveRecording(liveRecording)\n        setRecordingLength(liveRecording.rows.length)\n        setLiveDataTimestamp(bus.timestamp)\n    }\n    const throttleUpdate = throttle(() => updateLiveData(), 30)\n    // data collection\n    // interval add data entry\n    const addRow = (values?: number[]) => {\n        if (!liveRecording) return\n        //console.log(values)\n        liveRecording.addRow(values)\n        if (isRecording && liveRecording.length >= samplingCount) {\n            // stop recording\n            updateLiveData()\n            stopRecording()\n        } else {\n            throttleUpdate()\n        }\n    }\n    // setting interval\n    useEffect(() => {\n        if (error) return\n        console.log(`set interval to ${samplingIntervalDelayi}`)\n        recordingRegisters.forEach(reg =>\n            reg.sendSetPackedAsync([samplingIntervalDelayi])\n        )\n    }, [samplingIntervalDelayi, registerIdsChecked, errorSamplingIntervalDelay])\n    // collecting\n    useEffect(() => {\n        if (error) return undefined\n        const interval = setInterval(() => addRow(), samplingIntervalDelayi)\n        const stopStreaming = startStreamingRegisters()\n\n        return () => {\n            clearInterval(interval)\n            stopStreaming()\n        }\n    }, [isRecording, dialogType, samplingIntervalDelayi, samplingCount])\n\n    /* For placing a block on the workspace */\n    const addNewRecording = () => {\n        // Create new block for this recording\n        if (className != null && className != undefined) {\n            // Get or create new class typed variable\n            // (createVariable will return an existing variable if one with a particular name already exists)\n            const classVar = workspace.createVariable(\n                className,\n                MB_CLASS_VAR_TYPE\n            )\n\n            // Create new recording block on the workspace\n            const newRecordingBlock = workspace.newBlock(\n                MODEL_BLOCKS + \"recording\"\n            ) as BlockSvg\n            currentRecording.blockId = newRecordingBlock.id\n\n            // Automatically insert the recording name into the new block\n            const recordingNameField = newRecordingBlock.getField(\n                \"RECORDING_NAME\"\n            ) as FieldVariable\n            recordingNameField.setValue(recordingName)\n\n            // Automatically insert the class name into the new block\n            const classNameField = newRecordingBlock.getField(\n                \"CLASS_NAME\"\n            ) as FieldVariable\n            classNameField.setValue(classVar.getId())\n\n            // Save recording data to block\n            const recordingBlockField = newRecordingBlock.getField(\n                \"EXPAND_BUTTON\"\n            ) as ExpandModelBlockField\n            const recordingBlockParams = {\n                parametersVisible: null,\n                numSamples: currentRecording.recording.length,\n                timestamp: currentRecording.recording[0].startTimestamp,\n                inputTypes: currentRecording.recording[0].headers,\n            }\n            recordingBlockField.updateFieldValue(recordingBlockParams)\n\n            newRecordingBlock.initSvg()\n            newRecordingBlock.render(false)\n            workspace.centerOnBlock(newRecordingBlock.id)\n        }\n    }\n\n    /* For interface controls */\n    const resetInputs = () => {\n        setClassName(\"class1\")\n        setRecordingName(\"recording\" + recordingCount)\n    }\n    const handleDownloadDataSet = () => {\n        const recordingCountHeader = `Number of recordings,${currentRecording.recording.length}`\n\n        const recordingData: string[] = []\n        currentRecording.recording.forEach(sample => {\n            recordingData.push(\n                \"Recording metadata,\" +\n                    sample.name +\n                    \",\" +\n                    sample.rows.length +\n                    \",\" +\n                    className\n            )\n            recordingData.push(sample.toCSV())\n        })\n        const recordData = recordingData.join(\"\\n\")\n\n        const csv: string[] = [recordingCountHeader, recordData]\n        fileStorage.saveText(`${recordingName}.csv`, csv.join(\"\\n\"))\n    }\n    const handleCancel = () => {\n        // reset the user inputs\n        resetInputs()\n        // close the modal\n        onDone(null, null)\n    }\n    const handleNext = () => {\n        // begin recording live data\n        setLiveRecording(newRecording(registerIdsChecked, true))\n\n        // go to the next page\n        setDialogType(\"recordData\")\n    }\n\n    const handleDone = () => {\n        // create new recording block\n        addNewRecording()\n\n        // reset the user inputs\n        resetInputs()\n\n        // call the done function and close modal\n        const { recording, blockId } = currentRecording\n        onDone(recording, blockId)\n    }\n\n    if (dialogType == \"chooseSensors\")\n        return (\n            <Dialog\n                open={open}\n                onClose={handleCancel}\n                fullWidth={true}\n                maxWidth={\"md\"}\n            >\n                <DialogContent>\n                    <Grid container direction={\"column\"}>\n                        <Grid item>\n                            <h2>Collect new recording</h2>\n                            {/* TODO Toggle button to get data from sensors vs upload from file */}\n                            <div key=\"sensors\">\n                                <div className={classes.row}>\n                                    <TextField\n                                        className={classes.field}\n                                        label=\"Recording name\"\n                                        value={recordingName}\n                                        variant=\"outlined\"\n                                        onChange={handleRecordingNameChange}\n                                    />\n                                    <Autocomplete\n                                        className={classes.field}\n                                        disabled={isRecording}\n                                        options={getWorkspaceClasses()}\n                                        style={{\n                                            width: 250,\n                                            display: \"inline-flex\",\n                                        }}\n                                        renderInput={params => (\n                                            <TextField\n                                                {...params}\n                                                label=\"Class label\"\n                                                variant=\"outlined\"\n                                            />\n                                        )}\n                                        value={className}\n                                        onInputChange={(event, newValue) =>\n                                            handleClassNameChange(newValue)\n                                        }\n                                    />\n                                </div>\n                                <div className={classes.row}>\n                                    <TextField\n                                        className={classes.field}\n                                        error={errorSamplingDuration}\n                                        disabled={isRecording}\n                                        label=\"Sampling duration\"\n                                        value={samplingDuration}\n                                        variant=\"outlined\"\n                                        InputProps={{\n                                            startAdornment: (\n                                                <InputAdornment position=\"start\">\n                                                    s\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                        onChange={handleSamplingDurationChange}\n                                    />\n                                    <TextField\n                                        className={classes.field}\n                                        error={errorSamplingIntervalDelay}\n                                        disabled={isRecording}\n                                        label=\"Sampling interval\"\n                                        value={samplingIntervalDelay}\n                                        variant=\"outlined\"\n                                        InputProps={{\n                                            startAdornment: (\n                                                <InputAdornment position=\"start\">\n                                                    ms\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                        onChange={handleSamplingIntervalChange}\n                                    />\n                                </div>\n                                <h3>Collect data from</h3>\n                                {!readingRegisters.length && (\n                                    <span>Waiting for sensors...</span>\n                                )}\n                                {!!readingRegisters.length && (\n                                    <ReadingFieldGrid\n                                        readingRegisters={readingRegisters}\n                                        registerIdsChecked={registerIdsChecked}\n                                        recording={isRecording}\n                                        liveDataSet={liveRecording}\n                                        handleRegisterCheck={\n                                            handleRegisterCheck\n                                        }\n                                    />\n                                )}\n                            </div>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"contained\" onClick={handleCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        endIcon={<NavigateNextIcon />}\n                        disabled={!registerIdsChecked.length}\n                        onClick={handleNext}\n                    >\n                        Next\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    else\n        return (\n            // recordData\n            <Dialog\n                open={open}\n                onClose={handleCancel}\n                fullWidth={true}\n                maxWidth={\"md\"}\n            >\n                <DialogContent>\n                    <Grid container direction={\"column\"}>\n                        <Grid item>\n                            <h3>Edit recording: {recordingName}</h3>\n                            <div key=\"recordedData\">\n                                <div key=\"recordings\">\n                                    <h4>\n                                        Recorded samples\n                                        <IconButtonWithTooltip\n                                            onClick={handleDownloadDataSet}\n                                            title=\"Download all recording data\"\n                                            disabled={\n                                                currentRecording.recording\n                                                    .length == 0\n                                            }\n                                        >\n                                            <DownloadIcon />\n                                        </IconButtonWithTooltip>\n                                    </h4>\n                                    {currentRecording.recording.length ? (\n                                        <ClassDataSetGrid\n                                            key={\"samples-\" + recordingName}\n                                            label={className}\n                                            tables={currentRecording.recording}\n                                            handleDeleteTable={\n                                                handleDeleteSample\n                                            }\n                                        />\n                                    ) : (\n                                        <span>None</span>\n                                    )}\n                                </div>\n                            </div>\n                        </Grid>\n                        <Grid item>\n                            <br />\n                        </Grid>\n                        <Grid item>\n                            <div key=\"record\">\n                                <div className={classes.row}>\n                                    <h4>Add more samples</h4>\n                                    <Button\n                                        size=\"large\"\n                                        variant=\"contained\"\n                                        color={\n                                            isRecording\n                                                ? \"secondary\"\n                                                : \"primary\"\n                                        }\n                                        aria-label=\"start/stop recording\"\n                                        title=\"start/stop recording\"\n                                        onClick={toggleRecording}\n                                        startIcon={\n                                            isRecording ? (\n                                                <StopIcon />\n                                            ) : (\n                                                <PlayArrowIcon />\n                                            )\n                                        }\n                                        disabled={!startEnabled}\n                                    >\n                                        {isRecording ? \"Stop\" : \"Start\"}\n                                    </Button>\n                                </div>\n                            </div>\n                            <div key=\"liveData\">\n                                {liveRecording && (\n                                    <Trend\n                                        key=\"trends\"\n                                        height={12}\n                                        dataSet={liveRecording}\n                                        horizon={LIVE_HORIZON}\n                                        dot={true}\n                                        gradient={true}\n                                    />\n                                )}\n                            </div>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"contained\" onClick={handleCancel}>\n                        Cancel\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        endIcon={<NavigateNextIcon />}\n                        disabled={!currentRecording.recording.length}\n                        onClick={handleDone}\n                    >\n                        Done\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n}\n"],"names":["React","Card","CardContent","CardHeader","Grid","IconButton","DeleteIcon","Trend","ClassDataSetGrid","props","label","tables","handleDeleteTable","handleDelete","table","length","map","id","CardActions","useGridBreakpoints","FiberManualRecordIcon","useDeviceName","SwitchWithLabel","ReadingFieldGridItem","register","handleRegisterCheck","recording","registerChecked","liveDataSet","service","device","gridBreakpoints","deviceName","handleCheck","name","fields","field","verticalAlign","color","colorOf","ReadingFieldGrid","readingRegisters","registerIdsChecked","indexOf","useEffect","useContext","useState","Button","Dialog","DialogActions","DialogContent","TextField","InputAdornment","IconButtonWithTooltip","PlayArrowIcon","StopIcon","DownloadIcon","NavigateNextIcon","Autocomplete","FieldDataSet","useChange","JacdacContext","arrayConcatMany","isSensor","REPORT_UPDATE","throttle","MB_CLASS_VAR_TYPE","MODEL_BLOCKS","ServiceManagerContext","LIVE_HORIZON","createDataSet","bus","registers","live","palette","reg","colors","f","i","set","maxRows","BlocklyDataRecordingDialog","classes","chartPalette","open","onDone","recordingCount","workspace","dialogType","setDialogType","fileStorage","devices","services","filter","srv","specification","readingRegister","getWorkspaceClasses","getVariablesOfType","classVar","setRegisterIdsChecked","totalSamples","setTotalSamples","recordingName","setRecordingName","className","setClassName","setRecordingLength","splice","push","sort","handleRecordingNameChange","event","target","value","trim","handleClassNameChange","newClassName","recordingRegisters","isRecording","setIsRecording","liveRecording","setLiveRecording","undefined","setLiveDataTimestamp","currentRecording","blockId","samplingIntervalDelay","setSamplingIntervalDelay","samplingDuration","setSamplingDuration","samplingIntervalDelayi","parseInt","samplingCount","Math","ceil","parseFloat","errorSamplingIntervalDelay","isNaN","test","errorSamplingDuration","error","startEnabled","handleSamplingIntervalChange","handleSamplingDurationChange","newRecording","registerIds","stopRecording","startRecording","startStreamingRegisters","console","log","streamers","subscribe","streamer","toggleRecording","handleDeleteSample","sample","updateLiveData","rows","timestamp","throttleUpdate","addRow","values","forEach","sendSetPackedAsync","interval","setInterval","stopStreaming","clearInterval","addNewRecording","createVariable","newRecordingBlock","newBlock","recordingNameField","getField","setValue","classNameField","getId","recordingBlockField","recordingBlockParams","parametersVisible","numSamples","startTimestamp","inputTypes","headers","updateFieldValue","initSvg","render","centerOnBlock","resetInputs","handleDownloadDataSet","recordingCountHeader","recordingData","toCSV","recordData","join","csv","saveText","handleCancel","handleNext","handleDone","row","width","display","params","newValue","startAdornment"],"sourceRoot":""}