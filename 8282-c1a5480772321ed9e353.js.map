{"version":3,"file":"8282-c1a5480772321ed9e353.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEe,SAASa,YAAT,CAAsBC,KAAtB,EAAoD;AAC/D,MAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AACA,MAAM;AAAEE,IAAAA;AAAF,MAAef,iDAAU,CAACQ,6DAAD,CAA/B;AACA,MAAMQ,MAAM,GAAGd,4EAAgB,CAAYY,OAAZ,CAA/B;AACA,MAAMG,KAAK,GAAGD,MAAM,GAAG,WAAH,GAAiB,SAArC;AACA,MAAM;AAAA,OAACE,GAAD;AAAA,OAAMC;AAAN,MAAgBlB,+CAAQ,CAAC,CAAD,CAA9B;AACA,MAAM;AAAA,OAACmB,KAAD;AAAA,OAAQC;AAAR,MAAoBpB,+CAAQ,CAAC,EAAD,CAAlC;AACA,MAAM;AAAA,OAACqB,UAAD;AAAA,OAAaC;AAAb,MAA8BtB,+CAAQ,CAAC,EAAD,CAA5C;AAEA,MAAMuB,kBAAkB,GAAGd,uEAAW,CAACI,OAAD,EAAUT,kGAAV,CAAtC;AACA,MAAM,CAACqB,UAAD,IAAevB,4FAAwB,CACzCqB,kBADyC,EAEzCX,KAFyC,CAA7C;AAIA,MAAMc,gBAAgB,GAAGjB,uEAAW,CAACI,OAAD,EAAUT,8FAAV,CAApC;AACA,MAAM,CAACwB,QAAD,IAAa1B,4FAAwB,CACvCwB,gBADuC,EAEvCd,KAFuC,CAA3C;AAKA,MAAMiB,CAAC,GAAI,CAAC,CAAEZ,GAAG,IAAI,EAAR,GAAc,IAAf,KAAwB,CAAzB,IAA8BI,UAA/B,GAA6C,IAAvD;AACA,MAAMS,CAAC,GAAI,CAAC,CAAEb,GAAG,IAAI,CAAR,GAAa,IAAd,KAAuB,CAAxB,IAA6BI,UAA9B,GAA4C,IAAtD;AACA,MAAMU,CAAC,GAAI,CAAC,CAAEd,GAAG,IAAI,CAAR,GAAa,IAAd,KAAuB,CAAxB,IAA6BI,UAA9B,GAA4C,IAAtD,CAtB+D,CAwB/D;;AACA,MAAMW,OAAO;AAAA,iHAAG,aAAY;AACxB,UAAI;AACA,cAAMnB,OAAO,CAACoB,YAAR,CACF9B,4FADE,EAEFG,0EAAM,CAAmC,aAAnC,EAAkD,CACpDuB,CADoD,EAEpDC,CAFoD,EAGpDC,CAHoD,EAIpDZ,KAJoD,CAAlD,CAFJ,CAAN;AASH,OAVD,CAUE,OAAOgB,CAAP,EAAU;AACRrB,QAAAA,QAAQ,CAACqB,CAAD,CAAR;AACH;AACJ,KAdY;;AAAA,oBAAPH,OAAO;AAAA;AAAA;AAAA,KAAb,CAzB+D,CAyC/D;;;AACAtB,EAAAA,oEAAc,CAACsB,OAAD,EAAU,CAACf,GAAD,EAAME,KAAN,EAAaE,UAAb,CAAV,CAAd,CA1C+D,CA4C/D;;AACA,MAAIe,KAAK,CAACnB,GAAD,CAAT,EAAgB,oBAAO,iDAAC,oEAAD,OAAP;AAEhB,sBACI,iDAAC,0DAAD;AACI,SAAK,EAAED,KADX;AAEI,YAAQ,EAAEC,GAFd;AAGI,cAAU,EAAEQ,UAHhB;AAII,YAAQ,EAAEG,QAJd;AAKI,oBAAgB,EAAEV,MALtB;AAMI,SAAK,EAAEC,KANX;AAOI,iBAAa,EAAEC,QAPnB;AAQI,cAAU,EAAEC,UARhB;AASI,sBAAkB,EAAEC;AATxB,IADJ;AAaH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardLED.tsx"],"sourcesContent":["import React, { useContext, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport LEDServer from \"../../../jacdac-ts/src/servers/ledserver\"\nimport { LedCmd, LedReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport AppContext from \"../AppContext\"\nimport LEDWidget from \"../widgets/LEDWidget\"\nimport useRegister from \"../hooks/useRegister\"\nimport useEffectAsync from \"../useEffectAsync\"\n\nexport default function DashboardLED(props: DashboardServiceProps) {\n    const { service } = props\n    const { setError } = useContext(AppContext)\n    const server = useServiceServer<LEDServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const [rgb, setRgb] = useState(0)\n    const [speed, setSpeed] = useState(32)\n    const [brightness, setBrightness] = useState(16)\n\n    const waveLengthRegister = useRegister(service, LedReg.WaveLength)\n    const [waveLength] = useRegisterUnpackedValue<[number]>(\n        waveLengthRegister,\n        props\n    )\n    const ledCountRegister = useRegister(service, LedReg.LedCount)\n    const [ledCount] = useRegisterUnpackedValue<[number]>(\n        ledCountRegister,\n        props\n    )\n\n    const r = ((((rgb >> 16) & 0xff) << 8) / brightness) & 0xff\n    const g = ((((rgb >> 8) & 0xff) << 8) / brightness) & 0xff\n    const b = ((((rgb >> 0) & 0xff) << 8) / brightness) & 0xff\n\n    // send animate command\n    const animate = async () => {\n        try {\n            await service.sendCmdAsync(\n                LedCmd.Animate,\n                jdpack<[number, number, number, number]>(\"u8 u8 u8 u8\", [\n                    r,\n                    g,\n                    b,\n                    speed,\n                ])\n            )\n        } catch (e) {\n            setError(e)\n        }\n    }\n\n    // handle brightness, speed changes\n    useEffectAsync(animate, [rgb, speed, brightness])\n\n    // nothing to see\n    if (isNaN(rgb)) return <LoadingProgress />\n\n    return (\n        <LEDWidget\n            color={color}\n            ledColor={rgb}\n            waveLength={waveLength}\n            ledCount={ledCount}\n            onLedColorChange={setRgb}\n            speed={speed}\n            onSpeedChange={setSpeed}\n            brightness={brightness}\n            onBrightnessChange={setBrightness}\n        />\n    )\n}\n"],"names":["React","useContext","useState","useServiceServer","useRegisterUnpackedValue","LedCmd","LedReg","LoadingProgress","jdpack","AppContext","LEDWidget","useRegister","useEffectAsync","DashboardLED","props","service","setError","server","color","rgb","setRgb","speed","setSpeed","brightness","setBrightness","waveLengthRegister","WaveLength","waveLength","ledCountRegister","LedCount","ledCount","r","g","b","animate","sendCmdAsync","Animate","e","isNaN"],"sourceRoot":""}