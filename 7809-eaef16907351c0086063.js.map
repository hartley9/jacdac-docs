{"version":3,"file":"7809-eaef16907351c0086063.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardJoystick.tsx"],"sourcesContent":["import React, { CSSProperties, useMemo, useRef, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport JoystickServer, {\n    JOYSTICK_DPAD_BUTTONS,\n    JOYSTICK_GAMEPAD_EXTRA_BUTTONS,\n} from \"../../../jacdac-ts/src/servers/joystickserver\"\nimport {\n    JoystickButtons,\n    JoystickReg,\n    JoystickVariant,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useSvgButtonProps from \"../hooks/useSvgButtonProps\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useAnimationFrame from \"../hooks/useAnimationFrame\"\nimport useRegister from \"../hooks/useRegister\"\nimport OptionalTooltip from \"../widgets/OptionalTooltip\"\n\nconst buttonLabels = {\n    [JoystickButtons.Left]: \"\\u25C4\",\n    [JoystickButtons.Up]: \"\\u25B2\",\n    [JoystickButtons.Down]: \"\\u25BC\",\n    [JoystickButtons.Right]: \"\\u25BA\",\n}\n\nfunction decay(value: number, rate: number, precision: number) {\n    let nv = value * rate\n    if (Math.abs(nv) < precision) nv = 0\n    return nv\n}\n\nfunction JoystickWidget(props: DashboardServiceProps) {\n    const { service } = props\n    const register = useRegister(service, JoystickReg.Direction)\n    const [buttons, x, y] = useRegisterUnpackedValue<\n        [JoystickButtons, number, number]\n    >(register, props)\n    const server = useServiceServer<JoystickServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n\n    const hostValues = (): [number, number] => {\n        const [, x, y] = server.reading.values()\n        return [x, y]\n    }\n    const onUpdate = (newx: number, newy: number) => {\n        server.updateDirection(newx, newy)\n        register.refresh()\n    }\n    const { active, background, controlBackground } = useWidgetTheme(color)\n    const dragSurfaceRef = useRef<SVGCircleElement>()\n    const [grabbing, setGrabbing] = useState(false)\n\n    const w = 40\n    const w2 = w >> 1\n    const cx = w2\n    const cy = w2\n    const rp = 2\n    const rc = 6\n    const rj = 10\n    const pw = 12\n    const ph = 8\n\n    const jx = cx + (x || 0) * rj\n    const jy = cy + (y || 0) * rj\n    const jw = 1\n\n    const updateJoystickDrag = (x: number, y: number) => {\n        const bounds = dragSurfaceRef.current.getBoundingClientRect()\n\n        const dx = (x - bounds.left) * (w / bounds.width) - w2\n        const dy = (y - bounds.top) * (w / bounds.height) - w2\n\n        const angle = Math.atan2(dy, dx)\n        const distance =\n            Math.min(Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)), rj) / rj\n\n        const newx = distance * Math.cos(angle)\n        const newy = distance * Math.sin(angle)\n\n        onUpdate(newx, newy)\n    }\n\n    const handlePointerDown = async (\n        ev: React.PointerEvent<SVGCircleElement>\n    ) => {\n        ev.preventDefault()\n        const circle = ev.target as SVGCircleElement\n        circle.setPointerCapture(ev.pointerId)\n        setGrabbing(true)\n        updateJoystickDrag(ev.clientX, ev.clientY)\n    }\n    const handlePointerUp = (ev: React.PointerEvent<SVGCircleElement>) => {\n        ev.preventDefault()\n        const circle = ev.target as SVGCircleElement\n        circle.releasePointerCapture(ev.pointerId)\n        setGrabbing(false)\n    }\n    const handlePointerMove = async (\n        ev: React.PointerEvent<SVGCircleElement>\n    ) => {\n        ev.preventDefault()\n        if (grabbing) updateJoystickDrag(ev.clientX, ev.clientY)\n    }\n\n    useAnimationFrame(() => {\n        if (!server || grabbing) return false // let use do its thing\n        const [ax, ay] = hostValues()\n        const nx = decay(ax, 0.95, 16)\n        const ny = decay(ay, 0.95, 16)\n\n        // async\n        onUpdate(nx, ny)\n\n        return nx !== 0 || ny !== 0\n    }, [server, grabbing])\n\n    const handleStyle: CSSProperties = {\n        cursor: grabbing ? \"grabbing\" : \"grab\",\n    }\n\n    return (\n        <>\n            <circle\n                ref={dragSurfaceRef}\n                className=\"joystick-background\"\n                cx={cx}\n                cy={cy}\n                r=\"16\"\n                fill={background}\n            ></circle>\n            <rect\n                className=\"dpad-up\"\n                x={\"16\"}\n                y=\"6\"\n                width={ph}\n                height={pw}\n                rx={rp}\n                fill={buttons & JoystickButtons.Up ? active : controlBackground}\n            ></rect>\n            <rect\n                className=\"dpad-down\"\n                x=\"16\"\n                y=\"22\"\n                width={ph}\n                height={pw}\n                rx={rp}\n                fill={\n                    buttons & JoystickButtons.Down ? active : controlBackground\n                }\n            ></rect>\n            <rect\n                className=\"dpad-right\"\n                x=\"22\"\n                y=\"16\"\n                width={pw}\n                height={ph}\n                ry={rp}\n                fill={\n                    buttons & JoystickButtons.Right ? active : controlBackground\n                }\n            ></rect>\n            <rect\n                className=\"dpad-left\"\n                x=\"6\"\n                y=\"16\"\n                width={pw}\n                height={ph}\n                ry={rp}\n                fill={\n                    buttons & JoystickButtons.Left ? active : controlBackground\n                }\n            ></rect>\n            <circle\n                className=\"dpad-center\"\n                cx={cx}\n                cy={cy}\n                r={rc}\n                fill={controlBackground}\n            ></circle>\n            {server ? (\n                <circle\n                    className=\"joystick-handle\"\n                    cx={jx}\n                    cy={jy}\n                    r={rc}\n                    fill={background}\n                    stroke={active}\n                    strokeWidth={jw}\n                    tabIndex={0}\n                    role=\"button\"\n                    aria-label=\"joystick handle\"\n                    arial-live=\"polite\"\n                    onPointerMove={handlePointerMove}\n                    onPointerDown={handlePointerDown}\n                    onPointerUp={handlePointerUp}\n                    style={handleStyle}\n                />\n            ) : (\n                <circle\n                    className=\"joystick-handle\"\n                    cx={jx}\n                    cy={jy}\n                    r={rc}\n                    fill={background}\n                    stroke={active}\n                    strokeWidth={jw}\n                    role=\"button\"\n                    aria-label=\"joystick handle\"\n                    arial-live=\"polite\"\n                />\n            )}\n        </>\n    )\n}\n\nfunction ArcadeButton(props: {\n    cx: number\n    cy: number\n    ro: number\n    ri: number\n    pressure: number\n    button: JoystickButtons\n    server: JoystickServer\n    onRefresh: () => void\n    color?: \"primary\" | \"secondary\"\n}) {\n    const { cx, cy, ro, color, pressure, ri, button, server, onRefresh } = props\n    const { textProps, active, background, controlBackground } =\n        useWidgetTheme(color)\n    const checked = (pressure || 0) > 0\n    const title = JoystickButtons[button]\n    const label = buttonLabels[button] || title[0]\n\n    const handleDown = server\n        ? () => {\n              server.down(button) //, 0.7)\n              onRefresh()\n          }\n        : undefined\n    const handleUp = server\n        ? () => {\n              server.up(button)\n              onRefresh()\n          }\n        : undefined\n    const buttonProps = useSvgButtonProps<SVGCircleElement>(\n        title,\n        handleDown,\n        handleUp\n    )\n\n    return (\n        <g\n            transform={`translate(${cx},${cy})`}\n            role=\"button\"\n            aria-live=\"polite\"\n            aria-label={`button ${title} ${checked ? \"down\" : \"up\"}`}\n        >\n            <circle cx={0} cy={0} r={ro} fill={background} />\n            <circle\n                cx={0}\n                cy={0}\n                r={ri}\n                fill={checked ? active : controlBackground}\n                {...buttonProps}\n            >\n                <title>{title}</title>\n            </circle>\n            <text cx={0} cy={0} fontSize={ri} {...textProps}>\n                {label}\n            </text>\n        </g>\n    )\n}\n\nexport default function DashboardJoystick(props: DashboardServiceProps) {\n    const { service } = props\n    const variantRegister = useRegister(service, JoystickReg.Variant)\n    let [variant] = useRegisterUnpackedValue<[JoystickVariant]>(\n        variantRegister,\n        props\n    )\n    const buttonsAvailableRegister = useRegister(\n        service,\n        JoystickReg.ButtonsAvailable\n    )\n    const [buttonsAvailable] = useRegisterUnpackedValue<[JoystickButtons]>(\n        buttonsAvailableRegister,\n        props\n    )\n\n    // if variant is not specific, infer from buttons\n    if (variant === undefined) {\n        if (buttonsAvailable & JOYSTICK_GAMEPAD_EXTRA_BUTTONS)\n            variant = JoystickVariant.Gamepad\n        else if (!buttonsAvailable || buttonsAvailable === JoystickButtons.A)\n            variant = JoystickVariant.Thumb\n    }\n    const directionRegister = useRegister(service, JoystickReg.Direction)\n    const [buttons] = useRegisterUnpackedValue<\n        [JoystickButtons, number, number]\n    >(directionRegister, props)\n    const server = useServiceServer<JoystickServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background } = useWidgetTheme(color)\n\n    // buttonsAvailable should be defined by now\n    const analog = !(buttonsAvailable & JOYSTICK_DPAD_BUTTONS)\n    const hasButtons = !!(buttonsAvailable & ~JOYSTICK_DPAD_BUTTONS)\n\n    const w = 256\n    const h = 128\n\n    const cw = w / 12\n    const ch = h / 4\n\n    const ro = cw - 2\n    const ri = ro - 4\n\n    const sro = ro - 10\n    const sri = sro - 2\n    const scy = sro\n\n    const pos = useMemo(\n        () =>\n            [\n                {\n                    id: JoystickButtons.Left,\n                    cx: cw * 1.5,\n                    cy: 2 * ch,\n                    small: false,\n                },\n                { id: JoystickButtons.Up, cx: cw * 3, cy: ch, small: false },\n                {\n                    id: JoystickButtons.Right,\n                    cx: cw * 4.5,\n                    cy: 2 * ch,\n                    small: false,\n                },\n                {\n                    id: JoystickButtons.Down,\n                    cx: cw * 3,\n                    cy: 3 * ch,\n                    small: false,\n                },\n                {\n                    id: JoystickButtons.A,\n                    cx: cw * 10.5,\n                    cy: ch * 1.25,\n                    small: false,\n                },\n                {\n                    id: JoystickButtons.B,\n                    cx: cw * 9.5,\n                    cy: ch * 2.75,\n                    small: false,\n                },\n                { id: JoystickButtons.Menu, cx: cw * 7, cy: scy, small: true },\n                {\n                    id: JoystickButtons.Select,\n                    cx: cw * 6,\n                    cy: scy,\n                    small: true,\n                },\n\n                { id: JoystickButtons.Exit, cx: cw * 8, cy: scy, small: true },\n                { id: JoystickButtons.Reset, cx: cw * 9, cy: scy, small: true },\n            ].filter(p => !!(p.id & buttonsAvailable)),\n        [buttonsAvailable]\n    )\n\n    const handleRefresh = async () => await directionRegister.refresh()\n\n    const abx = cw * 8 + 1\n    const aby = ch * 3 + 4\n    const abr = cw / 2\n    const abw = cw * 5 - 6\n    const padcx = 3 * cw\n    const padcy = 2 * ch\n    const padr = 2.6 * cw\n\n    // need button info\n    if (buttonsAvailable === undefined) return <LoadingProgress />\n\n    return (\n        <OptionalTooltip\n            title={!server ? \"Use the physical joystick!\" : undefined}\n        >\n            <SvgWidget width={w} height={h}>\n                {!analog && (\n                    <circle\n                        cx={padcx}\n                        cy={padcy}\n                        r={padr}\n                        fill=\"none\"\n                        stroke={background}\n                        strokeWidth={4}\n                    />\n                )}\n                {analog && (\n                    <g\n                        transform={`scale(${\n                            padr / 16\n                        }) translate(${-1.8},${-1.8})`}\n                    >\n                        <JoystickWidget {...props} />\n                    </g>\n                )}\n                {hasButtons && (\n                    <rect\n                        transform={`rotate(-66, ${abx}, ${aby})`}\n                        x={abx}\n                        y={aby}\n                        rx={abr}\n                        ry={abr}\n                        width={abw}\n                        height={cw * 2.2}\n                        fill=\"none\"\n                        stroke={background}\n                        strokeWidth={4}\n                    />\n                )}\n                {pos.map(({ id, cx, cy, small }) => (\n                    <ArcadeButton\n                        key={id}\n                        cx={cx}\n                        cy={cy}\n                        ro={small ? sro : ro}\n                        ri={small ? sri : ri}\n                        button={id}\n                        server={server}\n                        onRefresh={handleRefresh}\n                        pressure={buttons & id ? 1 : 0}\n                        color={color}\n                    />\n                ))}\n            </SvgWidget>\n        </OptionalTooltip>\n    )\n}\n"],"names":["React","useMemo","useRef","useState","useServiceServer","useRegisterUnpackedValue","JOYSTICK_DPAD_BUTTONS","JOYSTICK_GAMEPAD_EXTRA_BUTTONS","JoystickButtons","JoystickReg","JoystickVariant","SvgWidget","useWidgetTheme","useSvgButtonProps","LoadingProgress","useAnimationFrame","useRegister","OptionalTooltip","buttonLabels","Left","Up","Down","Right","decay","value","rate","precision","nv","Math","abs","JoystickWidget","props","service","register","Direction","buttons","x","y","server","color","hostValues","reading","values","onUpdate","newx","newy","updateDirection","refresh","active","background","controlBackground","dragSurfaceRef","grabbing","setGrabbing","w","w2","cx","cy","rp","rc","rj","pw","ph","jx","jy","jw","updateJoystickDrag","bounds","current","getBoundingClientRect","dx","left","width","dy","top","height","angle","atan2","distance","min","sqrt","pow","cos","sin","handlePointerDown","ev","preventDefault","circle","target","setPointerCapture","pointerId","clientX","clientY","handlePointerUp","releasePointerCapture","handlePointerMove","ax","ay","nx","ny","handleStyle","cursor","ArcadeButton","ro","pressure","ri","button","onRefresh","textProps","checked","title","label","handleDown","down","undefined","handleUp","up","buttonProps","DashboardJoystick","variantRegister","Variant","variant","buttonsAvailableRegister","ButtonsAvailable","buttonsAvailable","Gamepad","A","Thumb","directionRegister","analog","hasButtons","h","cw","ch","sro","sri","scy","pos","id","small","B","Menu","Select","Exit","Reset","filter","p","handleRefresh","abx","aby","abr","abw","padcx","padcy","padr","map"],"sourceRoot":""}