{"version":3,"file":"3909-5c9f5ed4400142257161.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/specification/DeviceSpecificationList.tsx","webpack://jacdac-docs/./src/components/useGridBreakpoints.ts"],"sourcesContent":["import React, { useMemo } from \"react\"\nimport { Card, CardContent, Grid, Typography } from \"@mui/material\"\nimport {\n    identifierToUrlPath,\n    serviceSpecificationFromClassIdentifier,\n} from \"../../../jacdac-ts/src/jdom/spec\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport { CardActionArea } from \"gatsby-theme-material-ui\"\nimport { arrayShuffle } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useDeviceImage from \"../devices/useDeviceImage\"\nimport {\n    escapeDeviceIdentifier,\n    humanify,\n} from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport useDeviceSpecifications from \"../devices/useDeviceSpecifications\"\nimport useGridBreakpoints from \"../useGridBreakpoints\"\n\nfunction DeviceSpecificationCard(props: {\n    specification: jdspec.DeviceSpec\n    size: \"list\" | \"preview\" | \"catalog\"\n}) {\n    const { specification, size } = props\n    const { id, name, company, services } = specification\n    const imageUrl = useDeviceImage(specification, size)\n    const serviceNames = services\n        ?.map(sc =>\n            humanify(serviceSpecificationFromClassIdentifier(sc)?.shortName)\n        )\n        ?.join(\", \")\n    return (\n        <Card>\n            <CardActionArea to={`/devices/${identifierToUrlPath(id)}`}>\n                <img\n                    src={imageUrl}\n                    style={{ aspectRatio: \"3 / 2\", width: \"100%\" }}\n                    alt={`photograph of ${specification.name}`}\n                />\n                <CardContent>\n                    <Typography\n                        gutterBottom\n                        variant=\"subtitle1\"\n                        component=\"div\"\n                    >\n                        {name}\n                    </Typography>\n                    <Typography component=\"div\" variant=\"subtitle2\">\n                        {serviceNames || \"\"}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                        {company}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    )\n}\n\nexport default function DeviceSpecificationList(props: {\n    count?: number\n    shuffle?: boolean\n    company?: string\n    requiredServiceClasses?: number[]\n    devices?: jdspec.DeviceSpec[]\n}) {\n    const { count, shuffle, requiredServiceClasses, company, devices } = props\n    const specifications = useDeviceSpecifications()\n    const specs = useMemo(() => {\n        let r = devices || specifications\n        if (company) {\n            const lc = escapeDeviceIdentifier(company)\n            r = r.filter(spec =>\n                escapeDeviceIdentifier(spec.company).startsWith(lc)\n            )\n        }\n        if (requiredServiceClasses)\n            r = r.filter(\n                spec =>\n                    spec.services.length &&\n                    requiredServiceClasses.every(\n                        srv => spec.services.indexOf(srv) > -1\n                    )\n            )\n        if (shuffle) arrayShuffle(r)\n        if (count !== undefined) r = r.slice(0, count)\n        return r\n    }, [\n        requiredServiceClasses,\n        shuffle,\n        count,\n        company,\n        JSON.stringify(devices?.map(d => d.id)),\n        specifications,\n    ])\n    const gridBreakpoints = useGridBreakpoints(specs.length)\n    const size = specs?.length < 6 ? \"catalog\" : \"preview\"\n\n    if (!specs.length)\n        return (\n            <Typography variant=\"body1\">No device registered yet.</Typography>\n        )\n\n    return (\n        <Grid container spacing={2}>\n            {specs.map(specification => (\n                <Grid key={specification.id} item {...gridBreakpoints}>\n                    <DeviceSpecificationCard\n                        specification={specification}\n                        size={size}\n                    />\n                </Grid>\n            ))}\n        </Grid>\n    )\n}\n","import { GridSize } from \"@mui/material\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize\n    md?: GridSize\n    sm?: GridSize\n    lg?: GridSize\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(\n    itemCount?: number\n): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n    const hasDrawer = drawerType !== DrawerType.None\n\n    if (!drawerType && itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2:\n                return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3:\n                return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (hasDrawer) return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else\n        return {\n            xs: 12,\n            sm: 6,\n            md: 4,\n            lg: 4,\n            xl: 3,\n        }\n}\n"],"names":["React","useMemo","Card","CardContent","Grid","Typography","identifierToUrlPath","serviceSpecificationFromClassIdentifier","CardActionArea","arrayShuffle","useDeviceImage","escapeDeviceIdentifier","humanify","useDeviceSpecifications","useGridBreakpoints","DeviceSpecificationCard","props","specification","size","id","name","company","services","imageUrl","serviceNames","map","sc","shortName","join","aspectRatio","width","DeviceSpecificationList","count","shuffle","requiredServiceClasses","devices","specifications","specs","r","lc","filter","spec","startsWith","length","every","srv","indexOf","undefined","slice","JSON","stringify","d","gridBreakpoints","useContext","AppContext","DrawerType","itemCount","drawerType","hasDrawer","None","xs","sm","md","lg","xl"],"sourceRoot":""}