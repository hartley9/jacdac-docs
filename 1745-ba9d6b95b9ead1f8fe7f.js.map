{"version":3,"file":"1745-ba9d6b95b9ead1f8fe7f.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGe,SAASS,gBAAT,CAA0BC,KAA1B,EAGZ;AACC,MAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBF,KAA7B;AACA,MAAMG,IAAI,GAAG,CAAC,CAACF,OAAf;AACA,MAAMG,QAAQ,GAAGT,kEAAK,EAAtB;AACA,MAAMU,OAAO,GAAGV,kEAAK,EAArB;AACA,MAAMW,WAAW,GAAGV,mFAAoB,EAAxC;AACA,MAAMW,KAAK,GAAGV,sEAAS,CAACS,WAAD,EAAcE,EAAE,IAAIA,EAAJ,aAAIA,EAAJ,uBAAIA,EAAE,CAAEC,eAAJ,CAAoBR,OAApB,CAApB,EAAkD,CACrEA,OADqE,CAAlD,CAAvB;AAGA,MAAMS,WAAW,GAAGb,sEAAS,CAACI,OAAD,EAAUU,GAAG,IAAIA,GAAG,CAACC,IAArB,CAA7B;AACA,MAAMC,QAAQ,GAAG,CAAC,EAACN,KAAD,aAACA,KAAD,eAACA,KAAK,CAAEO,MAAR,CAAlB;;AAEA,MAAMC,WAAW,GAAIH,IAAD,kHAAgB,aAAY;AAC5C,UAAMN,WAAW,CAACU,OAAZ,CAAoBf,OAApB,EAA6BW,IAAI,CAACK,IAAlC,CAAN;AACAf,IAAAA,OAAO;AACV,GAHmB,CAApB;;AAKA,sBACI,iDAAC,8DAAD;AACI,MAAE,EAAEE,QADR;AAEI,uBAAiBC,OAFrB;AAGI,QAAI,EAAEF,IAHV;AAII,WAAO,EAAED;AAJb,kBAMI,iDAAC,8DAAD;AAAa,MAAE,EAAEG;AAAjB,KACKQ,QAAQ,wCADb,CANJ,EASKA,QAAQ,iBACL,iDAAC,8DAAD,qBACI,iDAAC,8DAAD,QACKN,KADL,aACKA,KADL,uBACKA,KAAK,CAAEW,GAAP,CAAWN,IAAI,iBACZ,iDAAC,uEAAD;AACI,OAAG,EAAEA,IAAI,CAACK,IADd;AAEI,QAAI,EAAEL,IAFV;AAGI,YAAQ,EAAEF,WAAW,KAAKE,IAAI,CAACK,IAHnC;AAII,WAAO,EAAEF,WAAW,CAACH,IAAD;AAJxB,IADH,CADL,CADJ,CAVR,CADJ;AA0BH","sources":["webpack://jacdac-docs/./src/components/dialogs/SelectRoleDialog.tsx"],"sourcesContent":["import { Dialog, DialogContent, DialogTitle, List } from \"@mui/material\"\nimport React from \"react\"\nimport { useId } from \"react-use-id-hook\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport useRoleManagerClient from \"../services/useRoleManagerClient\"\nimport useChange from \"../../jacdac/useChange\"\nimport RoleListItem from \"../services/RoleListItem\"\nimport { Role } from \"../../../jacdac-ts/src/jdom/clients/rolemanagerclient\"\n\nexport default function SelectRoleDialog(props: {\n    service: JDService\n    onClose: () => void\n}) {\n    const { service, onClose } = props\n    const open = !!service\n    const dialogId = useId()\n    const labelId = useId()\n    const roleManager = useRoleManagerClient()\n    const roles = useChange(roleManager, rm => rm?.compatibleRoles(service), [\n        service,\n    ])\n    const currentRole = useChange(service, srv => srv.role)\n    const hasRoles = !!roles?.length\n\n    const handleClick = (role: Role) => async () => {\n        await roleManager.setRole(service, role.name)\n        onClose()\n    }\n\n    return (\n        <Dialog\n            id={dialogId}\n            aria-labelledby={labelId}\n            open={open}\n            onClose={onClose}\n        >\n            <DialogTitle id={labelId}>\n                {hasRoles ? `Select a role` : `No role available`}\n            </DialogTitle>\n            {hasRoles && (\n                <DialogContent>\n                    <List>\n                        {roles?.map(role => (\n                            <RoleListItem\n                                key={role.name}\n                                role={role}\n                                selected={currentRole === role.name}\n                                onClick={handleClick(role)}\n                            />\n                        ))}\n                    </List>\n                </DialogContent>\n            )}\n        </Dialog>\n    )\n}\n"],"names":["Dialog","DialogContent","DialogTitle","List","React","useId","useRoleManagerClient","useChange","RoleListItem","SelectRoleDialog","props","service","onClose","open","dialogId","labelId","roleManager","roles","rm","compatibleRoles","currentRole","srv","role","hasRoles","length","handleClick","setRole","name","map"],"sourceRoot":""}