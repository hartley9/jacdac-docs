{"version":3,"file":"1253-318312bd21b5cde2d962.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,IAAMU,UAAU,gBAAGT,2CAAI,CAAC,MAAM,qGAAP,CAAvB;AAEe,SAASU,cAAT,CAAwBC,KAAxB,EAAsD;AACjE,MAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AACA,MAAME,QAAQ,GAAGN,uEAAW,CAACK,OAAD,EAAUX,0FAAV,CAA5B;AACA,MAAM,CAACc,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYf,4FAAwB,CACtCW,QADsC,EAEtCF,KAFsC,CAA1C;AAIA,MAAMO,MAAM,GACRf,4EAAgB,CAAyCS,OAAzC,CADpB;AAEA,MAAMO,KAAK,GAAGD,MAAM,GAAG,WAAH,GAAiB,SAArC;AACA,MAAM;AAAEE,IAAAA;AAAF,MAAiBf,4EAAc,CAACc,KAAD,CAArC;AAEA,MAAIJ,CAAC,KAAKM,SAAV,EAAqB,oBAAO,iDAAC,oEAAD,OAAP;AAErB,MAAMC,KAAK,aAAWP,CAAC,GAAG,IAAL,GAAa,CAAvB,YAA8BC,CAAC,GAAG,IAAL,GAAa,CAA1C,YAAiDC,CAAC,GAAG,IAAL,GAAa,CAA7D,OAAX;;AACA,MAAMM,YAAY,GAAIJ,KAAD,IAAmB;AACpC,QAAMK,GAAG,GAAGL,KAAK,CAACM,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAZ;AACA,QAAMC,GAAG,GAAGC,QAAQ,CAACH,GAAD,EAAM,EAAN,CAApB;AACA,QAAMT,CAAC,GAAIW,GAAG,IAAI,EAAR,GAAc,IAAxB;AACA,QAAMV,CAAC,GAAIU,GAAG,IAAI,CAAR,GAAa,IAAvB;AACA,QAAMT,CAAC,GAAG,CAACS,GAAG,GAAG,CAAP,IAAY,IAAtB;AACAR,IAAAA,MAAM,CAACU,OAAP,CAAeC,SAAf,CAAyB,CAACd,CAAC,GAAG,IAAL,EAAWC,CAAC,GAAG,IAAf,EAAqBC,CAAC,GAAG,IAAzB,CAAzB;AACAJ,IAAAA,QAAQ,CAACiB,OAAT;AACH,GARD;;AASA,MAAMC,CAAC,GAAG,EAAV;AACA,MAAMC,EAAE,GAAG,CAAX;AAEA,MAAId,MAAJ,EACI,oBACI,iDAAC,6DAAD,qBACI,iDAAC,UAAD;AAAY,SAAK,EAAEI,KAAnB;AAA0B,YAAQ,EAAEC;AAApC,IADJ,CADJ,CADJ,KAOI,oBACI,iDAAC,mEAAD;AAAW,SAAK,EAAEQ,CAAlB;AAAqB,UAAM,EAAEA;AAA7B,kBACI;AACI,KAAC,EAAE,CADP;AAEI,KAAC,EAAE,CAFP;AAGI,SAAK,EAAEA,CAHX;AAII,UAAM,EAAEA,CAJZ;AAKI,MAAE,EAAEC,EALR;AAMI,MAAE,EAAEA,EANR;AAOI,QAAI,EAAEV,KAPV;AAQI,UAAM,EAAEF,UARZ;AASI,eAAW,EAAE,CATjB;AAUI,YAAQ,EAAE,CAVd;AAWI,6BAAqBE,KAArB;AAXJ,IADJ,CADJ;AAiBP","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardColor.tsx"],"sourcesContent":["import React, { lazy } from \"react\"\nimport { ColorReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport SensorServer from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useRegister from \"../hooks/useRegister\"\nimport Suspense from \"../ui/Suspense\"\nconst ColorInput = lazy(() => import(\"../ui/ColorInput\"))\n\nexport default function DashboardColor(props: DashboardServiceProps) {\n    const { service } = props\n    const register = useRegister(service, ColorReg.Color)\n    const [r, g, b] = useRegisterUnpackedValue<[number, number, number]>(\n        register,\n        props\n    )\n    const server =\n        useServiceServer<SensorServer<[number, number, number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background } = useWidgetTheme(color)\n\n    if (r === undefined) return <LoadingProgress />\n\n    const value = `rgb(${(r * 0xff) | 0}, ${(g * 0xff) | 0}, ${(b * 0xff) | 0})`\n    const handleChange = (color: string) => {\n        const hex = color.replace(/^#/, \"\")\n        const rgb = parseInt(hex, 16)\n        const r = (rgb >> 16) & 0xff\n        const g = (rgb >> 8) & 0xff\n        const b = (rgb | 0) & 0xff\n        server.reading.setValues([r / 0xff, g / 0xff, b / 0xff])\n        register.refresh()\n    }\n    const w = 64\n    const rx = 4\n\n    if (server)\n        return (\n            <Suspense>\n                <ColorInput value={value} onChange={handleChange} />\n            </Suspense>\n        )\n    else\n        return (\n            <SvgWidget width={w} height={w}>\n                <rect\n                    x={0}\n                    y={0}\n                    width={w}\n                    height={w}\n                    rx={rx}\n                    ry={rx}\n                    fill={value}\n                    stroke={background}\n                    strokeWidth={2}\n                    tabIndex={0}\n                    aria-label={`color ${value} detected`}\n                />\n            </SvgWidget>\n        )\n}\n"],"names":["React","lazy","ColorReg","useRegisterUnpackedValue","useServiceServer","SvgWidget","useWidgetTheme","LoadingProgress","useRegister","Suspense","ColorInput","DashboardColor","props","service","register","Color","r","g","b","server","color","background","undefined","value","handleChange","hex","replace","rgb","parseInt","reading","setValues","refresh","w","rx"],"sourceRoot":""}