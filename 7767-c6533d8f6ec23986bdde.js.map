{"version":3,"file":"7767-c6533d8f6ec23986bdde.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Delete.js","webpack://jacdac-docs/./node_modules/@mui/material/CardActions/cardActionsClasses.js","webpack://jacdac-docs/./node_modules/@mui/material/CardActions/CardActions.js","webpack://jacdac-docs/./src/components/hooks/useCommandPipeResults.ts","webpack://jacdac-docs/./src/components/dashboard/DashboardWifi.tsx","webpack://jacdac-docs/./src/components/useGridBreakpoints.ts"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nvar cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"disableSpacing\", \"className\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardActionsUtilityClass } from './cardActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = ownerState => {\n  var {\n    classes,\n    disableSpacing\n  } = ownerState;\n  var slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\n\nvar CardActionsRoot = styled('div', {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    var {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(_ref => {\n  var {\n    ownerState\n  } = _ref;\n  return _extends({\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  }, !ownerState.disableSpacing && {\n    '& > :not(:first-of-type)': {\n      marginLeft: 8\n    }\n  });\n});\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n\n  var {\n    disableSpacing = false,\n    className\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var ownerState = _extends({}, props, {\n    disableSpacing\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default CardActions;","import { DependencyList, useEffect, useState } from \"react\"\nimport { EVENT } from \"../../../jacdac-ts/src/jdom/constants\"\nimport JDEvent from \"../../../jacdac-ts/src/jdom/event\"\nimport { PackedValues } from \"../../../jacdac-ts/src/jdom/pack\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport useChange from \"../../jacdac/useChange\"\nimport useMounted from \"./useMounted\"\n\nexport default function useCommandPipeResults<TItem extends PackedValues>(\n    service: JDService,\n    cmd: number,\n    packFormat: string,\n    changeEvent?: JDEvent,\n    deps?: DependencyList\n) {\n    const [results, setResults] = useState<PackedValues[]>([])\n    const mounted = useMounted()\n\n    const update = async () => {\n        const newResults = await service.receiveWithInPipe(cmd, packFormat)\n        if (mounted()) setResults(newResults || [])\n    }\n\n    // listen to change event if any\n    useEffect(() => changeEvent?.subscribe(EVENT, update), [changeEvent])\n    useChange(service, update, [cmd, packFormat, ...(deps || [])])\n\n    return results as TItem[]\n}\n","import React, { ChangeEvent, useEffect, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Chip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    TextField,\n    Typography,\n} from \"@mui/material\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport { useId } from \"react-use-id-hook\"\nimport SettingsIcon from \"@mui/icons-material/Settings\"\nimport CmdButton from \"../CmdButton\"\nimport {\n    useRegisterBoolValue,\n    useRegisterUnpackedValue,\n} from \"../../jacdac/useRegisterValue\"\nimport {\n    WifiAPFlags,\n    WifiCmd,\n    WifiReg,\n    WifiEvent,\n} from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport { toHex, unique } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useInterval from \"../hooks/useInterval\"\nimport useEvent from \"../hooks/useEvent\"\nimport useCommandPipeResults from \"../hooks/useCommandPipeResults\"\nimport DeleteIcon from \"@mui/icons-material/Delete\"\nimport ChipList from \"../ui/ChipList\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport WifiServer from \"../../../jacdac-ts/src/servers/wifiserver\"\nimport { Alert, AlertTitle } from \"@mui/material\"\nimport { EVENT } from \"../../../jacdac-ts/src/jdom/constants\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport useGridBreakpoints from \"../useGridBreakpoints\"\nimport WifiIcon from \"@mui/icons-material/Wifi\"\nimport WifiOffIcon from \"@mui/icons-material/WifiOff\"\n\n// flags, rssi, channel, bssid, ssid\ntype ScanResult = [WifiAPFlags, number, number, Uint8Array, string]\n\n// priority, flags, ssid\ntype NetworkResult = [number, number, string]\n\nfunction toMAC(buffer: Uint8Array) {\n    const hex = toHex(buffer, \":\")\n    return hex\n}\n\nfunction toIP(buffer: Uint8Array): string {\n    if (!buffer) return undefined\n    if (buffer.length === 4)\n        return `${buffer[0]}.${buffer[1]}.${buffer[2]}.${buffer[3]}`\n    else return toHex(buffer, \".\")\n}\n\nfunction Network(props: {\n    service: JDService\n    ssid: string\n    network?: NetworkResult\n    info?: ScanResult\n    connected: boolean\n}) {\n    const { service, info, network, ssid, connected } = props\n    const [priority, networkFlags] = network || []\n    const [scanFlags, rssi, channel] = info || []\n    const [password, setPassword] = useState(\"\")\n    const known = !!network\n    const scanned = !!info\n    const passwordId = useId()\n    const handlePasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setPassword(event.target.value)\n    }\n    const handleAddNetwork = async () => {\n        await service.sendCmdPackedAsync<[string, string]>(\n            WifiCmd.AddNetwork,\n            [ssid, password || \"\"],\n            true\n        )\n    }\n    const handleForgetNetwork = async () =>\n        await service.sendCmdPackedAsync<[string]>(WifiCmd.ForgetNetwork, [\n            ssid,\n        ])\n    const handlePriorityChange = async (ev: ChangeEvent<HTMLInputElement>) => {\n        const newPriority = parseInt(ev.target.value)\n        if (!isNaN(newPriority))\n            await service.sendCmdPackedAsync(\n                WifiCmd.SetNetworkPriority,\n                [newPriority, ssid],\n                true\n            )\n    }\n    // hasPassword == requires password\n    const hasPassword = !!(networkFlags & WifiAPFlags.HasPassword)\n    const connectError =\n        hasPassword && !password ? \"password required\" : undefined\n\n    return (\n        <Card>\n            <CardHeader\n                title={ssid}\n                subheader={[\n                    known && `priority ${priority}`,\n                    scanned && `RSSI ${rssi}, channel ${channel}`,\n                ]\n                    .filter(s => !!s)\n                    .join(\", \")}\n            />\n            <CardContent>\n                {connected && <Alert severity=\"info\">Connected</Alert>}\n                {known && !scanned && <Alert severity=\"info\">Not found</Alert>}\n                {!known && !hasPassword && (\n                    <TextField\n                        id={passwordId}\n                        value={password}\n                        label=\"Password\"\n                        fullWidth={true}\n                        type=\"password\"\n                        required={hasPassword}\n                        helperText={connectError}\n                        onChange={handlePasswordChange}\n                    />\n                )}\n            </CardContent>\n            <CardActions>\n                {!known ? (\n                    <CmdButton\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={!!connectError}\n                        onClick={handleAddNetwork}\n                    >\n                        Connect\n                    </CmdButton>\n                ) : (\n                    <CmdButton\n                        variant=\"outlined\"\n                        disabled={!!connectError}\n                        onClick={handleForgetNetwork}\n                    >\n                        Forget\n                    </CmdButton>\n                )}\n                {known && (\n                    <TextField\n                        type=\"number\"\n                        value={priority}\n                        label=\"priority\"\n                        onChange={handlePriorityChange}\n                    />\n                )}\n            </CardActions>\n        </Card>\n    )\n}\n\nfunction ConnectDialog(props: {\n    open: boolean\n    setOpen: (v: boolean) => void\n    service: JDService\n    connectedSsid: string\n}) {\n    const { open, setOpen, service, connectedSsid } = props\n    const breakpoints = useGridBreakpoints()\n    const scan = () => service.sendCmdAsync(WifiCmd.Scan)\n    const knownNetworksChangedEvent = useEvent(\n        service,\n        WifiEvent.NetworksChanged\n    )\n    const knownNetworks = useCommandPipeResults<NetworkResult>(\n        service,\n        WifiCmd.ListKnownNetworks,\n        \"i16 i16 s\",\n        knownNetworksChangedEvent\n    )\n\n    // grad scan results\n    const scanCompleteEvent = useEvent(service, WifiEvent.ScanComplete)\n    const aps = useCommandPipeResults<ScanResult>(\n        service,\n        WifiCmd.LastScanResults,\n        \"u32 x[4] i8 u8 b[6] s[33]\",\n        scanCompleteEvent\n    )\n\n    // keep scanning\n    useInterval(open, scan, 30000, [service])\n    const handleClose = () => setOpen(false)\n    const handleForgetAll = async () =>\n        await service.sendCmdAsync(WifiCmd.ForgetAllNetworks)\n\n    const priority = (s: string) =>\n        knownNetworks.find(n => n[2] === s)?.[0] || -Infinity\n\n    const ssids = unique([\n        ...(knownNetworks || []).map(kn => kn[2]),\n        ...(aps || []).map(ap => ap[4]),\n    ]).sort((l, r) => -priority(l) + priority(r))\n\n    return (\n        <Dialog\n            open={open}\n            fullWidth={true}\n            maxWidth={\"lg\"}\n            onClose={handleClose}\n        >\n            <DialogContent>\n                <DialogTitle>Connect to Wifi</DialogTitle>\n                <Grid container spacing={1}>\n                    {ssids.map(ssid => (\n                        <Grid item {...breakpoints} key={ssid}>\n                            <Network\n                                service={service}\n                                connected={connectedSsid === ssid}\n                                ssid={ssid}\n                                network={knownNetworks?.find(\n                                    kn => kn[2] === ssid\n                                )}\n                                info={aps?.find(ap => ap[4] === ssid)}\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"outlined\" title=\"cancel\" onClick={handleClose}>\n                    Cancel\n                </Button>\n                <CmdButton\n                    trackName=\"dashboard.wifi.forgetall\"\n                    onClick={handleForgetAll}\n                    variant=\"outlined\"\n                    title=\"forget all\"\n                    icon={<DeleteIcon />}\n                >\n                    Forget all\n                </CmdButton>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default function DashboardWifi(props: DashboardServiceProps) {\n    const { service } = props\n    const [open, setOpen] = useState(false)\n\n    const server = useServiceServer<WifiServer>(service)\n    const color = server ? \"primary\" : \"secondary\"\n    const { textPrimary } = useWidgetTheme(color)\n    const enabledRegister = service.register(WifiReg.Enabled)\n    const enabled = useRegisterBoolValue(enabledRegister)\n    const ssidRegister = service.register(WifiReg.Ssid)\n    const [ssid] = useRegisterUnpackedValue<[string]>(ssidRegister)\n    const ipAddressRegister = service.register(WifiReg.IpAddress)\n    const [ip] = useRegisterUnpackedValue<[Uint8Array]>(ipAddressRegister)\n    const macRegister = service.register(WifiReg.Eui48)\n    const [mac] = useRegisterUnpackedValue<[Uint8Array]>(macRegister)\n    const lostIpEvent = useEvent(service, WifiEvent.LostIp)\n    const gotIpEvent = useEvent(service, WifiEvent.GotIp)\n    const connected = !!ip?.length\n\n    const handleConnect = async () => {\n        if (connected) await enabledRegister.sendSetBoolAsync(false)\n        else await service.sendCmdPackedAsync(WifiCmd.Reconnect)\n    }\n    const handleConfigure = () => setOpen(true)\n\n    // force register refreshs on various events\n    const refreshRegisters = () => {\n        ssidRegister.clearGetTimestamp()\n        ipAddressRegister.clearGetTimestamp()\n    }\n    useEffect(\n        () => gotIpEvent?.subscribe(EVENT, refreshRegisters),\n        [gotIpEvent]\n    )\n    useEffect(\n        () => lostIpEvent?.subscribe(EVENT, refreshRegisters),\n        [lostIpEvent]\n    )\n\n    return (\n        <>\n            <Grid\n                container\n                spacing={1}\n                style={{ color: textPrimary, minWidth: \"16rem\" }}\n            >\n                {server && (\n                    <Grid item xs={12}>\n                        <Alert severity=\"warning\">\n                            <AlertTitle>Test WiFi</AlertTitle>\n                            This WiFi does not exist; it is purely for testing\n                            purposes.\n                        </Alert>\n                    </Grid>\n                )}\n                <Grid item xs={12}>\n                    <Typography component=\"span\" variant=\"subtitle2\">\n                        WiFi\n                    </Typography>\n                    {(ssid || ip || mac) && (\n                        <ChipList>\n                            {!!ssid && <Chip color=\"primary\" label={ssid} />}\n                            {!!ip && <Chip label={`IP: ${toIP(ip)}`} />}\n                            {!!mac && <Chip label={`MAC: ${toMAC(mac)}`} />}\n                        </ChipList>\n                    )}\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={1} direction=\"row\">\n                        <Grid item>\n                            <CmdButton\n                                trackName=\"dashboard.wifi.connect\"\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                onClick={handleConnect}\n                                title={connected ? \"connected\" : \"disconnected\"}\n                                icon={\n                                    connected ? <WifiIcon /> : <WifiOffIcon />\n                                }\n                            />\n                        </Grid>\n                        <Grid item>\n                            <IconButtonWithTooltip\n                                onClick={handleConfigure}\n                                title=\"configure\"\n                            >\n                                <SettingsIcon />\n                            </IconButtonWithTooltip>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            {open && (\n                <ConnectDialog\n                    open={open}\n                    setOpen={setOpen}\n                    service={service}\n                    connectedSsid={connected ? ssid : undefined}\n                />\n            )}\n        </>\n    )\n}\n","import { GridSize } from \"@mui/material\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize\n    md?: GridSize\n    sm?: GridSize\n    lg?: GridSize\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(\n    itemCount?: number\n): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n\n    if (itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2:\n                return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3:\n                return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (drawerType != DrawerType.None)\n        return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else\n        return {\n            xs: 12,\n            sm: 6,\n            md: 4,\n            lg: 4,\n            xl: 3,\n        }\n}\n"],"names":["useEffect","useState","EVENT","useChange","useMounted","useCommandPipeResults","service","cmd","packFormat","changeEvent","deps","results","setResults","mounted","update","newResults","receiveWithInPipe","subscribe","React","Button","Card","CardActions","CardContent","CardHeader","Chip","Dialog","DialogActions","DialogContent","DialogTitle","Grid","TextField","Typography","useWidgetTheme","useId","SettingsIcon","CmdButton","useRegisterBoolValue","useRegisterUnpackedValue","WifiAPFlags","WifiCmd","WifiReg","WifiEvent","toHex","unique","useInterval","useEvent","DeleteIcon","ChipList","useServiceServer","Alert","AlertTitle","IconButtonWithTooltip","useGridBreakpoints","WifiIcon","WifiOffIcon","toMAC","buffer","hex","toIP","undefined","length","Network","props","info","network","ssid","connected","priority","networkFlags","scanFlags","rssi","channel","password","setPassword","known","scanned","passwordId","handlePasswordChange","event","target","value","handleAddNetwork","sendCmdPackedAsync","AddNetwork","handleForgetNetwork","ForgetNetwork","handlePriorityChange","ev","newPriority","parseInt","isNaN","SetNetworkPriority","hasPassword","HasPassword","connectError","filter","s","join","ConnectDialog","open","setOpen","connectedSsid","breakpoints","scan","sendCmdAsync","Scan","knownNetworksChangedEvent","NetworksChanged","knownNetworks","ListKnownNetworks","scanCompleteEvent","ScanComplete","aps","LastScanResults","handleClose","handleForgetAll","ForgetAllNetworks","find","n","Infinity","ssids","map","kn","ap","sort","l","r","DashboardWifi","server","color","textPrimary","enabledRegister","register","Enabled","enabled","ssidRegister","Ssid","ipAddressRegister","IpAddress","ip","macRegister","Eui48","mac","lostIpEvent","LostIp","gotIpEvent","GotIp","handleConnect","sendSetBoolAsync","Reconnect","handleConfigure","refreshRegisters","clearGetTimestamp","minWidth","useContext","AppContext","DrawerType","itemCount","drawerType","xs","sm","md","lg","xl","None"],"sourceRoot":""}