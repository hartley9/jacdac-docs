{"version":3,"file":"5754-890cc73b6d6a0634a00f.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASe,OAAT,CAAiBC,KAAjB,EAIG;AACC,MAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,MAAgCH,KAAtC;AACA,MAAMI,KAAK,GAAGjB,4FAAwB,CAA2Be,QAA3B,EAAqC;AACvEC,IAAAA;AADuE,GAArC,CAAtC,CAFD,CAKC;;AACA,MAAME,aAAkB,GAAG,CACvBC,KADuB,EAEvBC,QAFuB,KAGtB;AACD,QAAM,GAAGC,CAAH,EAAMC,CAAN,IAAWR,MAAM,CAACS,OAAP,CAAeC,MAAf,EAAjB,CADC,CAED;;AACA,QAAMC,CAAC,GAAGL,QAAV;AACAN,IAAAA,MAAM,CAACS,OAAP,CAAeG,SAAf,CAAyB,CAACD,CAAD,EAAIJ,CAAJ,EAAOC,CAAP,CAAzB;AACAP,IAAAA,QAAQ,CAACY,YAAT;AACH,GATD,CAND,CAgBC;;;AACA,MAAMC,aAAkB,GAAG,CACvBT,KADuB,EAEvBC,QAFuB,KAGtB;AACD,QAAM,CAACS,CAAD,GAAMP,CAAN,IAAWR,MAAM,CAACS,OAAP,CAAeC,MAAf,EAAjB,CADC,CAED;;AACA,QAAMC,CAAC,GAAGL,QAAV;AACAN,IAAAA,MAAM,CAACS,OAAP,CAAeG,SAAf,CAAyB,CAACG,CAAD,EAAIJ,CAAJ,EAAOH,CAAP,CAAzB;AACAP,IAAAA,QAAQ,CAACY,YAAT;AACH,GATD,CAjBD,CA2BC;;;AACA,MAAMG,aAAkB,GAAG,CACvBX,KADuB,EAEvBC,QAFuB,KAGtB;AACD,QAAM,CAACS,CAAD,EAAIR,CAAJ,IAASP,MAAM,CAACS,OAAP,CAAeC,MAAf,EAAf,CADC,CAED;;AACA,QAAMC,CAAC,GAAGL,QAAV;AACAN,IAAAA,MAAM,CAACS,OAAP,CAAeG,SAAf,CAAyB,CAACG,CAAD,EAAIR,CAAJ,EAAOI,CAAP,CAAzB;AACAV,IAAAA,QAAQ,CAACY,YAAT;AACH,GATD;;AAUA,MAAMI,YAAY,GAAIC,CAAD,IAAkB3B,uFAAkB,CAAC2B,CAAD,EAAI,CAAJ,CAApC,WAArB;;AAEA,MAAI,EAACf,KAAD,aAACA,KAAD,eAACA,KAAK,CAAEgB,MAAR,CAAJ,EAAoB,oBAAO,iDAAC,oEAAD,OAAP;AACpB,MAAM,CAACJ,CAAD,EAAIR,CAAJ,EAAOC,CAAP,IAAYL,KAAlB;AACA,MAAMiB,IAAI,GAAG,CAAb;AACA,MAAMC,KAAa,GAAG,CAClB;AACIC,IAAAA,KAAK,EAAE;AADX,GADkB,CAAtB;AAKA,sBACI,iHACI,iDAAC,gEAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,iDAAC,oEAAD;AACI,SAAK,EAAC,GADV;AAEI,qBAAiB,EAAC,MAFtB;AAGI,oBAAgB,EAAEL,YAHtB;AAII,kBAAW,wBAJf;AAKI,OAAG,EAAE,CAAC,GALV;AAMI,OAAG,EAAE,GANT;AAOI,QAAI,EAAEG,IAPV;AAQI,SAAK,EAAEL,CARX;AASI,SAAK,EAAEM,KATX;AAUI,YAAQ,EAAEjB;AAVd,IADJ,CADJ,eAeI,iDAAC,gEAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,iDAAC,oEAAD;AACI,SAAK,EAAE,GADX;AAEI,qBAAiB,EAAC,MAFtB;AAGI,oBAAgB,EAAEa,YAHtB;AAII,kBAAW,wBAJf;AAKI,OAAG,EAAE,CAAC,GALV;AAMI,OAAG,EAAE,GANT;AAOI,QAAI,EAAEG,IAPV;AAQI,SAAK,EAAEb,CARX;AASI,SAAK,EAAEc,KATX;AAUI,YAAQ,EAAEP;AAVd,IADJ,CAfJ,eA6BI,iDAAC,gEAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,iDAAC,oEAAD;AACI,SAAK,EAAC,GADV;AAEI,qBAAiB,EAAC,MAFtB;AAGI,oBAAgB,EAAEG,YAHtB;AAII,kBAAW,wBAJf;AAKI,OAAG,EAAE,CAAC,GALV;AAMI,OAAG,EAAE,GANT;AAOI,QAAI,EAAEG,IAPV;AAQI,SAAK,EAAEZ,CARX;AASI,SAAK,EAAEa,KATX;AAUI,YAAQ,EAAEL;AAVd,IADJ,CA7BJ,CADJ;AA8CH;;AAEc,SAASO,kBAAT,CAA4BxB,KAA5B,EAA0D;AACrE,MAAM;AAAEyB,IAAAA,OAAF;AAAWtB,IAAAA;AAAX,MAAuBH,KAA7B;AACA,MAAME,QAAQ,GAAGL,wEAAW,CAAC4B,OAAD,EAAUvC,8GAAV,CAA5B;AACAC,EAAAA,4FAAwB,CAA2Be,QAA3B,EAAqCF,KAArC,CAAxB;AACA,MAAMC,MAAM,GACRZ,4EAAgB,CAAyCoC,OAAzC,CADpB;AAEA,MAAME,KAAK,GAAG1B,MAAM,GAAG,WAAH,GAAiB,SAArC;AACA,MAAM;AAAE2B,IAAAA;AAAF,MAAaxC,4EAAc,CAACuC,KAAD,CAAjC;AACA,MAAME,OAAO,GAAG5C,kDAAW,CACvB,CAAC6C,KAAD,EAAQC,QAAR,KAA6B;AACzB,QAAM3B,KAAK,GAAGF,QAAQ,CAAC8B,aAAvB;AACA,QAAI,CAAC5B,KAAL,EAAY;AAEZ,QAAM,CAACY,CAAD,EAAIR,CAAJ,EAAOC,CAAP,IAAYL,KAAlB,CAJyB,CAID;;AACxB,QAAM6B,gBAAgB,GAAGC,IAAI,CAACC,EAAL,GAAU,GAAnC;AACA,QAAMC,CAAC,GAAGN,KAAK,GAAGG,gBAAlB;AACA,WAAO;AACHjB,MAAAA,CAAC,EAAEe,QAAQ,CAACf,CAAT,GAAaA,CAAC,GAAGoB,CADjB;AAEH5B,MAAAA,CAAC,EAAEuB,QAAQ,CAACvB,CAAT,GAAaC,CAAC,GAAG2B,CAFjB;AAGH3B,MAAAA,CAAC,EAAEsB,QAAQ,CAACtB,CAAT,GAAaD,CAAC,GAAG4B;AAHjB,KAAP;AAKH,GAbsB,EAcvB,CAAClC,QAAD,CAduB,CAA3B;AAiBA,sBACI,iDAAC,gEAAD;AAAM,aAAS,MAAf;AAAgB,aAAS,EAAC;AAA1B,kBACI,iDAAC,gEAAD;AAAM,QAAI;AAAV,kBACI,iDAAC,+DAAD,qBACI,iDAAC,6DAAD,qBACI,iDAAC,6DAAD;AAAc,SAAK,EAAE0B,MAArB;AAA6B,WAAO,EAAEC;AAAtC,IADJ,CADJ,CADJ,CADJ,EAQK5B,MAAM,iBACH,iDAAC,OAAD;AACI,UAAM,EAAEA,MADZ;AAEI,YAAQ,EAAEC,QAFd;AAGI,WAAO,EAAEC;AAHb,IATR,eAeI,iDAAC,kEAAD;AAAiB,gBAAY,EAAEjB,kGAAoBmD;AAAnD,KAAyDrC,KAAzD,EAfJ,CADJ;AAmBH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardGyroscope.tsx"],"sourcesContent":["import React, { useCallback } from \"react\"\nimport { GyroscopeReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport SensorServer from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport JDRegister from \"../../../jacdac-ts/src/jdom/register\"\nimport { Grid, Mark, NoSsr } from \"@mui/material\"\nimport { roundWithPrecision } from \"../../../jacdac-ts/src/jdom/utils\"\nimport CanvasWidget from \"../widgets/CanvasWidget\"\nimport { Vector } from \"../widgets/threeutils\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport Suspense from \"../ui/Suspense\"\nimport SliderWithLabel from \"../ui/SliderWithLabel\"\nimport useRegister from \"../hooks/useRegister\"\nimport MaxReadingField from \"./MaxReadingField\"\n\nfunction Sliders(props: {\n    server: SensorServer<[number, number, number]>\n    register: JDRegister\n    visible: boolean\n}) {\n    const { server, register, visible } = props\n    const rates = useRegisterUnpackedValue<[number, number, number]>(register, {\n        visible,\n    })\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeX: any = (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [, y, z] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = newValue as any as number\n        server.reading.setValues([n, y, z])\n        register.sendGetAsync()\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeY: any = (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [x, , z] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = newValue as any as number\n        server.reading.setValues([x, n, z])\n        register.sendGetAsync()\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const handleChangeZ: any = (\n        event: unknown,\n        newValue: number | number[]\n    ) => {\n        const [x, y] = server.reading.values()\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const n = newValue as any as number\n        server.reading.setValues([x, y, n])\n        register.sendGetAsync()\n    }\n    const valueDisplay = (v: number) => `${roundWithPrecision(v, 1)}Â°/s`\n\n    if (!rates?.length) return <LoadingProgress />\n    const [x, y, z] = rates\n    const step = 1\n    const marks: Mark[] = [\n        {\n            value: 0,\n        },\n    ]\n    return (\n        <>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label=\"X\"\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"x rotation rate slider\"\n                    min={-180}\n                    max={180}\n                    step={step}\n                    value={x}\n                    marks={marks}\n                    onChange={handleChangeX}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label={\"Y\"}\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"y rotation rate slider\"\n                    min={-180}\n                    max={180}\n                    step={step}\n                    value={y}\n                    marks={marks}\n                    onChange={handleChangeY}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <SliderWithLabel\n                    label=\"Z\"\n                    valueLabelDisplay=\"auto\"\n                    valueLabelFormat={valueDisplay}\n                    aria-label=\"z rotation rate slider\"\n                    min={-180}\n                    max={180}\n                    step={step}\n                    value={z}\n                    marks={marks}\n                    onChange={handleChangeZ}\n                />\n            </Grid>\n        </>\n    )\n}\n\nexport default function DashboardGyroscope(props: DashboardServiceProps) {\n    const { service, visible } = props\n    const register = useRegister(service, GyroscopeReg.RotationRates)\n    useRegisterUnpackedValue<[number, number, number]>(register, props)\n    const server =\n        useServiceServer<SensorServer<[number, number, number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { active } = useWidgetTheme(color)\n    const rotator = useCallback(\n        (delta, rotation: Vector) => {\n            const rates = register.unpackedValue\n            if (!rates) return\n\n            const [x, y, z] = rates // degrees\n            const degreesToRadians = Math.PI / 180\n            const f = delta * degreesToRadians\n            return {\n                x: rotation.x - x * f,\n                y: rotation.y - z * f,\n                z: rotation.z - y * f,\n            }\n        },\n        [register]\n    )\n\n    return (\n        <Grid container direction=\"row\">\n            <Grid item>\n                <NoSsr>\n                    <Suspense>\n                        <CanvasWidget color={active} rotator={rotator} />\n                    </Suspense>\n                </NoSsr>\n            </Grid>\n            {server && (\n                <Sliders\n                    server={server}\n                    register={register}\n                    visible={visible}\n                />\n            )}\n            <MaxReadingField registerCode={GyroscopeReg.MaxRate} {...props} />\n        </Grid>\n    )\n}\n"],"names":["React","useCallback","GyroscopeReg","useRegisterUnpackedValue","useWidgetTheme","useServiceServer","Grid","NoSsr","roundWithPrecision","CanvasWidget","LoadingProgress","Suspense","SliderWithLabel","useRegister","MaxReadingField","Sliders","props","server","register","visible","rates","handleChangeX","event","newValue","y","z","reading","values","n","setValues","sendGetAsync","handleChangeY","x","handleChangeZ","valueDisplay","v","length","step","marks","value","DashboardGyroscope","service","RotationRates","color","active","rotator","delta","rotation","unpackedValue","degreesToRadians","Math","PI","f","MaxRate"],"sourceRoot":""}