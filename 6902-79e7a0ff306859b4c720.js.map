{"version":3,"file":"6902-79e7a0ff306859b4c720.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardWindDirection.tsx"],"sourcesContent":["import React from \"react\"\nimport { WindDirectionReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport { useId } from \"react-use-id-hook\"\nimport useThrottledValue from \"../hooks/useThrottledValue\"\nimport { Grid, Slider } from \"@mui/material\"\nimport SensorServer from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashboardWindDirection(props: DashboardServiceProps) {\n    const { service } = props\n\n    const directionRegister = useRegister(\n        service,\n        WindDirectionReg.WindDirection\n    )\n    const [direction] = useRegisterUnpackedValue<[number]>(\n        directionRegister,\n        props\n    )\n\n    const server = useServiceServer<SensorServer<[number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active } = useWidgetTheme(color)\n    const arrowHeadId = useId()\n\n    const a = useThrottledValue(direction, 360)\n\n    if (direction === undefined) return <LoadingProgress />\n\n    const w = 64\n    const h = 64\n    const mw = 5\n    const mh = 4.5\n    const r = (w >> 1) - 4\n    const sw = 3\n    const cx = w >> 1\n    const cy = (h * 4) / 5\n    const cy2 = (h * 2) / 5\n\n    const handleChange = async (ev: unknown, newValue: number | number[]) => {\n        await server?.reading.setValues([newValue as number])\n        directionRegister.refresh()\n    }\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item xs={12}>\n                <SvgWidget width={w} height={h}>\n                    <defs>\n                        <marker\n                            id={arrowHeadId}\n                            markerWidth={mw}\n                            markerHeight={mh}\n                            refX={0}\n                            refY={mh / 2}\n                            orient=\"auto\"\n                        >\n                            <polygon\n                                fill={active}\n                                points={`0 0, ${mw} ${mh / 2}, 0 ${mh}`}\n                            />\n                        </marker>\n                    </defs>\n                    <g transform={`rotate(${a}, ${w >> 1}, ${h >> 1})`}>\n                        <circle\n                            cx={w >> 1}\n                            cy={h >> 1}\n                            r={r}\n                            fill={controlBackground}\n                            stroke={background}\n                            strokeWidth={sw}\n                        />\n                        <line\n                            x1={cx}\n                            y1={cy}\n                            x2={cx}\n                            y2={cy2}\n                            stroke={active}\n                            strokeWidth={sw}\n                            markerEnd={`url(#${arrowHeadId})`}\n                            aria-label={`arrow point at ${direction}Â°`}\n                        />\n                    </g>\n                </SvgWidget>\n            </Grid>\n            {server && (\n                <Grid item>\n                    <Slider\n                        color={color}\n                        valueLabelDisplay=\"auto\"\n                        min={0}\n                        max={360}\n                        step={5}\n                        value={direction}\n                        onChange={handleChange}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"names":["React","WindDirectionReg","useRegisterUnpackedValue","SvgWidget","useWidgetTheme","useServiceServer","useId","useThrottledValue","Grid","Slider","LoadingProgress","useRegister","DashboardWindDirection","props","service","directionRegister","WindDirection","direction","server","color","background","controlBackground","active","arrowHeadId","a","undefined","w","h","mw","mh","r","sw","cx","cy","cy2","handleChange","ev","newValue","reading","setValues","refresh"],"sourceRoot":""}