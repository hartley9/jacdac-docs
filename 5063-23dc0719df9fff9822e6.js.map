{"version":3,"file":"5063-23dc0719df9fff9822e6.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/model-editor/components/ConfusionMatrixHeatMap.tsx"],"sourcesContent":["import React, { lazy } from \"react\"\nimport { Grid } from \"@mui/material\"\nimport Suspense from \"../../ui/Suspense\"\n\nconst VegaLite = lazy(() => import(\"../../blockly/fields/chart/VegaLite\"))\n\nexport default function ConfusionMatrixHeatMap(props: {\n    chartProps: any\n    yActual: string[]\n    yPredicted: string[]\n    labels: string[]\n    timestamp: number\n}) {\n    const { yActual, yPredicted, labels, timestamp } = props\n    const chartProps = props.chartProps\n\n    const compileConfusionMatrixData = (\n        actualLabel: string[],\n        predictedLabel: string[],\n        labels: string[]\n    ) => {\n        if (!yActual || !yPredicted) return []\n        if (yActual.length !== yPredicted.length) return []\n\n        const data = []\n\n        // create list of all actual -> predicted label combos\n        labels.forEach((actualVal, actualIdx) => {\n            labels.forEach((predVal, predIdx) => {\n                const dataPoint = {}\n                dataPoint[\"Actual label\"] = actualVal\n                dataPoint[\"Predicted label\"] = predVal\n                dataPoint[\"Actual index\"] = actualIdx\n                dataPoint[\"Predicted index\"] = predIdx\n                dataPoint[\"Count\"] = 0\n                data.push(dataPoint)\n            })\n        })\n\n        // convert label names to indices\n        const actual = actualLabel.map(label => labels.indexOf(label))\n        const predicted = predictedLabel.map(label => labels.indexOf(label))\n\n        // iterate through all of the combinations of actual and predicted labels\n        actual.forEach((actualVal, idx) => {\n            const predIdx = predicted[idx]\n            const actualIdx = actual[idx]\n\n            const dataIdx = actualIdx * labels.length + predIdx\n            data[dataIdx][\"Count\"] += 1\n        })\n\n        return data\n    }\n    const confusionMatrix = compileConfusionMatrixData(\n        yActual,\n        yPredicted,\n        labels\n    )\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            <Grid item xs={12}>\n                <Suspense>\n                    <VegaLite\n                        actions={false}\n                        spec={{\n                            title: { timestamp },\n                            width: chartProps.CHART_WIDTH,\n                            height: chartProps.CHART_HEIGHT,\n                            mark: \"rect\",\n                            data: { values: confusionMatrix },\n                            encoding: {\n                                x: {\n                                    field: \"Predicted label\",\n                                    type: \"nominal\",\n                                },\n                                y: { field: \"Actual label\", type: \"nominal\" },\n                            },\n                            layer: [\n                                {\n                                    mark: \"rect\",\n                                    encoding: {\n                                        color: {\n                                            field: \"Count\",\n                                            type: \"quantitative\",\n                                            scale: {\n                                                range: [\n                                                    \"#eee\",\n                                                    chartProps.PALETTE[2],\n                                                ],\n                                            },\n                                        },\n                                    },\n                                },\n                                {\n                                    mark: \"text\",\n                                    encoding: {\n                                        text: {\n                                            field: \"Count\",\n                                            type: \"quantitative\",\n                                        },\n                                        color: {\n                                            condition: {\n                                                test: \"datum['Count'] < 1\",\n                                                value: \"#eee\",\n                                            },\n                                            value: \"white\",\n                                        },\n                                    },\n                                },\n                            ],\n                        }}\n                    />\n                </Suspense>\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["React","lazy","Grid","Suspense","VegaLite","ConfusionMatrixHeatMap","props","yActual","yPredicted","labels","timestamp","chartProps","compileConfusionMatrixData","actualLabel","predictedLabel","length","data","forEach","actualVal","actualIdx","predVal","predIdx","dataPoint","push","actual","map","label","indexOf","predicted","idx","dataIdx","confusionMatrix","title","width","CHART_WIDTH","height","CHART_HEIGHT","mark","values","encoding","x","field","type","y","layer","color","scale","range","PALETTE","text","condition","test","value"],"sourceRoot":""}