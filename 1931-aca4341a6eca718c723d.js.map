{"version":3,"file":"1931-aca4341a6eca718c723d.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js","webpack://jacdac-docs/./src/jacdac/useServiceClient.ts","webpack://jacdac-docs/./jacdac-ts/src/clients/azureiothubhealthclient.ts","webpack://jacdac-docs/./src/components/dashboard/DashboardAzureIoTHubHealth.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    marginBottom: 12\n  }\n};\nvar DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(props, ref) {\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContentText'\n})(DialogContentText);","import { useEffect, useState } from \"react\"\nimport JDService from \"../../jacdac-ts/src/jdom/service\"\nimport { JDServiceClient } from \"../../jacdac-ts/src/jdom/serviceclient\"\n\nexport default function useServiceClient<\n    TServiceClient extends JDServiceClient\n>(service: JDService, factory: (service: JDService) => TServiceClient) {\n    const [client, setClient] = useState<TServiceClient>(undefined)\n\n    useEffect(() => {\n        const c = service && factory(service)\n        setClient(c)\n        return () => c?.unmount()\n    }, [service, factory])\n\n    return client\n}\n","import {\n    AzureIotHubHealthCmd,\n    AzureIotHubHealthConnectionStatus,\n    AzureIotHubHealthEvent,\n    AzureIotHubHealthReg,\n    CHANGE,\n    EVENT,\n    REPORT_UPDATE,\n    SRV_AZURE_IOT_HUB_HEALTH,\n} from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport JDRegister from \"../jdom/register\"\nimport JDService from \"../jdom/service\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { assert } from \"../jdom/utils\"\n\nexport class AzureIoTHubHealthClient extends JDServiceClient {\n    private readonly hubNameRegister: JDRegister\n    private readonly hubDeviceIdRegister: JDRegister\n    private readonly connectionStatusRegister: JDRegister\n\n    constructor(service: JDService) {\n        super(service)\n        assert(service.serviceClass === SRV_AZURE_IOT_HUB_HEALTH)\n\n        // tell the bus to refresh these register\n        this.hubNameRegister = this.service.register(\n            AzureIotHubHealthReg.HubName\n        )\n        this.hubDeviceIdRegister = this.service.register(\n            AzureIotHubHealthReg.HubDeviceId\n        )\n        this.connectionStatusRegister = this.service.register(\n            AzureIotHubHealthReg.ConnectionStatus\n        )\n        this.mount(() =>\n            this.hubNameRegister.subscribe(REPORT_UPDATE, () =>\n                this.emit(CHANGE)\n            )\n        )\n        this.mount(() =>\n            this.connectionStatusRegister.subscribe(REPORT_UPDATE, () => {\n                this.emit(CHANGE)\n            })\n        )\n        this.mount(() =>\n            this.service\n                .event(AzureIotHubHealthEvent.ConnectionStatusChange)\n                .on(EVENT, () => {\n                    this.connectionStatusRegister.refresh()\n                })\n        )\n    }\n\n    get hubName() {\n        return this.hubNameRegister.stringValue\n    }\n\n    get hubDeviceId() {\n        return this.hubDeviceIdRegister.stringValue\n    }\n\n    get connectionStatus(): AzureIotHubHealthConnectionStatus {\n        const reg = this.connectionStatusRegister\n        const status = reg\n            .unpackedValue?.[0] as AzureIotHubHealthConnectionStatus\n        if (status === undefined) reg.refresh()\n        return status\n    }\n\n    /**\n     * Sends a connect command to the hub\n     */\n    async connect() {\n        await this.service.sendCmdAsync(\n            AzureIotHubHealthCmd.Connect,\n            undefined,\n            true\n        )\n    }\n\n    /**\n     * Sends a disconnect command to the hub\n     */\n    async disconnect() {\n        await this.service.sendCmdAsync(\n            AzureIotHubHealthCmd.Disconnect,\n            undefined,\n            true\n        )\n    }\n\n    /**\n     * Sends a new connection string to the iot debice\n     * @param connectionString\n     */\n    async setConnectionString(connectionString: string) {\n        const data = jdpack<[string]>(\"s\", [connectionString || \"\"])\n        await this.service.sendCmdAsync(\n            AzureIotHubHealthCmd.SetConnectionString,\n            data,\n            true\n        )\n    }\n}\nexport default AzureIoTHubHealthClient\n","import React, { ChangeEvent, useCallback, useState } from \"react\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport {\n    Badge,\n    Chip,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    Grid,\n    TextField,\n    Typography,\n} from \"@material-ui/core\"\nimport useServiceClient from \"../../jacdac/useServiceClient\"\nimport AzureIoTHubHealthClient from \"../../../jacdac-ts/src/clients/azureiothubhealthclient\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport {\n    AzureIotHubHealthCmd,\n    AzureIotHubHealthConnectionStatus,\n    AzureIotHubHealthEvent,\n    AzureIotHubHealthReg,\n} from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { useId } from \"react-use-id-hook\"\nimport SettingsIcon from \"@material-ui/icons/Settings\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport { Button } from \"gatsby-material-ui-components\"\nimport CmdButton from \"../CmdButton\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport ChipList from \"../ui/ChipList\"\nimport WifiIcon from \"@material-ui/icons/Wifi\"\nimport WifiOffIcon from \"@material-ui/icons/WifiOff\"\nimport useEvent from \"../hooks/useEvent\"\nimport useEventCount from \"../../jacdac/useEventCount\"\n\nfunction ConnectionStringDialog(props: {\n    open: boolean\n    setOpen: (v: boolean) => void\n    client: AzureIoTHubHealthClient\n}) {\n    const { client, open, setOpen } = props\n    const [value, setValue] = useState(\"\")\n    const connectionStringId = useId()\n    const handleCancel = () => {\n        setValue(\"\")\n        setOpen(false)\n    }\n    const handleValueChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setValue(event.target.value)\n    }\n    const handleOk = async mounted => {\n        await client.setConnectionString(value || \"\")\n        if (!mounted()) return\n        setValue(\"\")\n        setOpen(false)\n    }\n    return (\n        <Dialog open={open} fullWidth={true} maxWidth={\"lg\"}>\n            <DialogContent>\n                <DialogContentText>\n                    Enter device connection string\n                    <Typography component=\"p\" variant=\"caption\">\n                        Open your IoT Hub in the Azure portal, select IoT\n                        Devices, select or create a device, copy the primary or\n                        secondary connection string.\n                    </Typography>\n                </DialogContentText>\n                <TextField\n                    id={connectionStringId}\n                    value={value}\n                    label=\"Value\"\n                    fullWidth={true}\n                    type=\"password\"\n                    placeholder=\"Connection string\"\n                    onChange={handleValueChange}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"contained\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n                <CmdButton\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!client}\n                    onClick={handleOk}\n                >\n                    Save\n                </CmdButton>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default function DashboardAzureIoTHubHealth(\n    props: DashboardServiceProps\n) {\n    const { service } = props\n    const [open, setOpen] = useState(false)\n\n    const hubNameRegister = service.register(AzureIotHubHealthReg.HubName)\n    const [hubName] = useRegisterUnpackedValue<[string]>(hubNameRegister, props)\n    const hubDeviceIdRegister = service.register(\n        AzureIotHubHealthReg.HubDeviceId\n    )\n    const [hubDeviceId] = useRegisterUnpackedValue<[string]>(\n        hubDeviceIdRegister,\n        props\n    )\n    const connectionStatusRegister = service.register(\n        AzureIotHubHealthReg.ConnectionStatus\n    )\n    const [connectionStatus] = useRegisterUnpackedValue<\n        [AzureIotHubHealthConnectionStatus]\n    >(connectionStatusRegister, props)\n    const messageSentEvent = useEvent(\n        service,\n        AzureIotHubHealthEvent.MessageSent\n    )\n    const messageSent = useEventCount(messageSentEvent)\n    const factory = useCallback(srv => new AzureIoTHubHealthClient(srv), [])\n    const client = useServiceClient(service, factory)\n    const color = \"primary\"\n    const { textPrimary } = useWidgetTheme(color)\n    const connected =\n        connectionStatus === AzureIotHubHealthConnectionStatus.Connected\n\n    const handleConnect = async () => {\n        const cmd = connected\n            ? AzureIotHubHealthCmd.Disconnect\n            : AzureIotHubHealthCmd.Connect\n        await service.sendCmdAsync(cmd)\n    }\n    const handleConfigure = () => setOpen(true)\n    return (\n        <>\n            <Grid\n                container\n                spacing={1}\n                style={{ color: textPrimary, minWidth: \"16rem\" }}\n            >\n                <Grid item xs={12}>\n                    <Typography component=\"span\" variant=\"subtitle2\">\n                        Azure IoT Hub\n                    </Typography>\n                    <ChipList>\n                        {hubName && (\n                            <Chip\n                                color={connected ? \"primary\" : \"default\"}\n                                label={hubName}\n                            />\n                        )}\n                        {hubDeviceId && (\n                            <Chip label={`device: ${hubDeviceId}`} />\n                        )}\n                        {messageSent !== undefined && (\n                            <Badge badgeContent={messageSent} color=\"primary\">\n                                <Chip label={`messages`} />\n                            </Badge>\n                        )}\n                    </ChipList>\n                </Grid>\n                <Grid item xs={12}>\n                    <CmdButton\n                        trackName=\"dashboard.azureiothealth.connect\"\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        onClick={handleConnect}\n                        disabled={connectionStatus === undefined}\n                        title={\n                            AzureIotHubHealthConnectionStatus[\n                                connectionStatus\n                            ] || \"Waiting...\"\n                        }\n                        icon={connected ? <WifiIcon /> : <WifiOffIcon />}\n                    />\n                    <IconButtonWithTooltip\n                        title=\"Configure\"\n                        onClick={handleConfigure}\n                    >\n                        <SettingsIcon />\n                    </IconButtonWithTooltip>\n                </Grid>\n            </Grid>\n            <ConnectionStringDialog\n                client={client}\n                open={open}\n                setOpen={setOpen}\n            />\n        </>\n    )\n}\n"],"names":["useEffect","useState","useServiceClient","service","factory","client","setClient","undefined","c","unmount","AzureIotHubHealthCmd","AzureIotHubHealthEvent","AzureIotHubHealthReg","CHANGE","EVENT","REPORT_UPDATE","SRV_AZURE_IOT_HUB_HEALTH","jdpack","JDServiceClient","assert","AzureIoTHubHealthClient","serviceClass","hubNameRegister","register","HubName","hubDeviceIdRegister","HubDeviceId","connectionStatusRegister","ConnectionStatus","mount","subscribe","emit","event","ConnectionStatusChange","on","refresh","connect","sendCmdAsync","Connect","disconnect","Disconnect","setConnectionString","connectionString","data","SetConnectionString","stringValue","reg","status","unpackedValue","React","useCallback","Badge","Chip","Dialog","DialogActions","DialogContent","DialogContentText","Grid","TextField","Typography","useWidgetTheme","AzureIotHubHealthConnectionStatus","useId","SettingsIcon","IconButtonWithTooltip","Button","CmdButton","useRegisterUnpackedValue","ChipList","WifiIcon","WifiOffIcon","useEvent","useEventCount","ConnectionStringDialog","props","open","setOpen","value","setValue","connectionStringId","handleCancel","handleValueChange","target","handleOk","mounted","DashboardAzureIoTHubHealth","hubName","hubDeviceId","connectionStatus","messageSentEvent","MessageSent","messageSent","srv","color","textPrimary","connected","Connected","handleConnect","cmd","handleConfigure","minWidth"],"sourceRoot":""}