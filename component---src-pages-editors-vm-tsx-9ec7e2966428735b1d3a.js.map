{"version":3,"file":"component---src-pages-editors-vm-tsx-9ec7e2966428735b1d3a.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@material-ui/icons/BugReport.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/Cancel.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/Pause.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/PlayArrow.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/PlayForWork.js","webpack://jacdac-docs/./node_modules/@material-ui/icons/Stop.js","webpack://jacdac-docs/./src/components/blockly/dsl/datadsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/shadowdsl.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/server.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/client.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/environment.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/expr.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/ir.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/symutils.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/compile.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/utils.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/runner.ts","webpack://jacdac-docs/./src/components/vm/useVMRunner.ts","webpack://jacdac-docs/./src/components/vm/VMDiagnostics.tsx","webpack://jacdac-docs/./src/components/blockly/RoleChip.tsx","webpack://jacdac-docs/./src/components/blockly/BlockRoles.tsx","webpack://jacdac-docs/./src/components/vm/VMRunnerButtons.tsx","webpack://jacdac-docs/./src/components/vm/VMStartSimulatorButton.tsx","webpack://jacdac-docs/./src/components/vm/VMToolbar.tsx","webpack://jacdac-docs/./src/components/blockly/dsl/servicesbase.ts","webpack://jacdac-docs/./src/components/vm/VMgenerator.ts","webpack://jacdac-docs/./src/components/blockly/dsl/servicesdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/serverservicesdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/toolsdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/loopsdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/logicdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/mathdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/variablesdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/jsondsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/widgetdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/mlblocksdsl.ts","webpack://jacdac-docs/./src/components/vm/vmdsls.ts","webpack://jacdac-docs/./src/components/vm/VMEditor.tsx","webpack://jacdac-docs/./src/pages/editors/vm.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49 0-.96.06-1.41.17L8.41 3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6 8h-4v-2h4v2zm0-4h-4v-2h4v2z\"\n}), 'BugReport');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"\n}), 'Cancel');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"\n}), 'Pause');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M8 5v14l11-7z\"\n}), 'PlayArrow');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z\"\n}), 'PlayForWork');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 6h12v12H6z\"\n}), 'Stop');\n\nexports.default = _default;","/* eslint-disable @typescript-eslint/ban-types */\nimport { Block } from \"blockly\"\nimport DataColumnChooserField from \"../fields/DataColumnChooserField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n    TextInputDefinition,\n    DataColumnInputDefinition,\n    DummyInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport postTransformData from \"./workers/data.proxy\"\nimport type {\n    DataSelectRequest,\n    DataDropRequest,\n    DataArrangeRequest,\n    DataFilterColumnsRequest,\n    DataFilterStringRequest,\n    DataSummarizeRequest,\n    DataSummarizeByGroupRequest,\n    DataMutateColumnsRequest,\n    DataMutateNumberRequest,\n    DataCountRequest,\n    DataBinRequest,\n    DataCorrelationRequest,\n    DataLinearRegressionRequest,\n} from \"../../../workers/data/dist/node_modules/data.worker\"\nimport palette from \"./palette\"\nimport {\n    tidyResolveFieldColumn,\n    tidyResolveFieldColumns,\n    tidySlice,\n} from \"../fields/tidy\"\nimport DataTableField from \"../fields/DataTableField\"\nimport DataPreviewField from \"../fields/DataPreviewField\"\nimport ScatterPlotField from \"../fields/chart/ScatterPlotField\"\n\nconst DATA_ARRANGE_BLOCK = \"data_arrange\"\nconst DATA_SELECT_BLOCK = \"data_select\"\nconst DATA_DROP_BLOCK = \"data_drop\"\nconst DATA_FILTER_COLUMNS_BLOCK = \"data_filter_columns\"\nconst DATA_FILTER_STRING_BLOCK = \"data_filter_string\"\nconst DATA_MUTATE_COLUMNS_BLOCK = \"data_mutate_columns\"\nconst DATA_MUTATE_NUMBER_BLOCK = \"data_mutate_number\"\nconst DATA_SLICE_BLOCK = \"data_slice\"\nconst DATA_SUMMARIZE_BLOCK = \"data_summarize\"\nconst DATA_SUMMARIZE_BY_GROUP_BLOCK = \"data_summarize_by_group\"\nconst DATA_COUNT_BLOCK = \"data_count\"\nconst DATA_BIN_BLOCK = \"data_bin\"\nconst DATA_CORRELATION_BLOCK = \"data_correlation\"\nconst DATA_LINEAR_REGRESSION_BLOCK = \"data_linear_regression\"\nconst DATA_COMMENT_BLOCK = \"data_comment_block\"\n\nconst [, operatorsColour, computeColour, statisticsColour] = palette()\nconst calcOptions = [\n    \"mean\",\n    \"median\",\n    \"min\",\n    \"max\",\n    \"sum\",\n    \"deviation\",\n    \"variance\",\n].map(n => [n, n])\nconst dataDsl: BlockDomainSpecificLanguage = {\n    id: \"dataScience\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: DATA_ARRANGE_BLOCK,\n            message0: \"arrange %1 %2\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"order\",\n                    options: [\n                        [\"ascending\", \"ascending\"],\n                        [\"descending\", \"descending\"],\n                    ],\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const order = b.getFieldValue(\"order\")\n                const descending = order === \"descending\"\n                if (!column) return Promise.resolve(data)\n                return postTransformData(<DataArrangeRequest>{\n                    type: \"arrange\",\n                    column,\n                    descending,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_DROP_BLOCK,\n            message0: \"drop %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column3\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2, 3]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                if (!columns?.length) return Promise.resolve(data)\n                return postTransformData(<DataDropRequest>{\n                    type: \"drop\",\n                    columns,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SELECT_BLOCK,\n            message0: \"select %1 %2 %3 %4\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column3\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column4\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2, 3, 4]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                if (!columns?.length) return Promise.resolve(data)\n                return postTransformData(<DataSelectRequest>{\n                    type: \"select\",\n                    columns,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_FILTER_COLUMNS_BLOCK,\n            message0: \"filter %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column1\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column2\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const columns = [1, 2]\n                    .map(column =>\n                        tidyResolveFieldColumn(data, b, `column${column}`)\n                    )\n                    .filter(c => !!c)\n                const logic = b.getFieldValue(\"logic\")\n                if (columns.length !== 2) return Promise.resolve(data)\n                return postTransformData(<DataFilterColumnsRequest>{\n                    type: \"filter_columns\",\n                    columns,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_FILTER_STRING_BLOCK,\n            message0: \"filter %1 %2 %3\",\n            colour: operatorsColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"rhs\",\n                    spellcheck: false,\n                    text: \"0\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const logic = b.getFieldValue(\"logic\")\n                const rhs = b.getFieldValue(\"rhs\")\n                if (!column) return Promise.resolve(data)\n                return postTransformData(<DataFilterStringRequest>{\n                    type: \"filter_string\",\n                    column,\n                    logic,\n                    rhs,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_MUTATE_COLUMNS_BLOCK,\n            message0: \"compute column %1 as %2 %3 %4\",\n            colour: computeColour,\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"newcolumn\",\n                    spellcheck: false,\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"lhs\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\"+\", \"plus\"],\n                        [\"-\", \"minus\"],\n                        [\"*\", \"mult\"],\n                        [\"/\", \"div\"],\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"rhs\",\n                    dataType: \"number\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            transformData: (b: Block, data: object[]) => {\n                const newcolumn = b.getFieldValue(\"newcolumn\")\n                const lhs = tidyResolveFieldColumn(data, b, \"lhs\", {\n                    type: \"number\",\n                })\n                const rhs = tidyResolveFieldColumn(data, b, \"rhs\", {\n                    type: \"number\",\n                })\n                const logic = b.getFieldValue(\"logic\")\n                if (!newcolumn || !lhs || !rhs) return Promise.resolve(data)\n                return postTransformData(<DataMutateColumnsRequest>{\n                    type: \"mutate_columns\",\n                    newcolumn,\n                    lhs,\n                    rhs,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_MUTATE_NUMBER_BLOCK,\n            message0: \"compute column %1 as %2 %3 %4\",\n            colour: computeColour,\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"newcolumn\",\n                    spellcheck: false,\n                },\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"lhs\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"logic\",\n                    options: [\n                        [\"+\", \"plus\"],\n                        [\"-\", \"minus\"],\n                        [\"*\", \"mult\"],\n                        [\"/\", \"div\"],\n                        [\">\", \"gt\"],\n                        [\"<\", \"lt\"],\n                        [\">=\", \"ge\"],\n                        [\"<=\", \"le\"],\n                        [\"==\", \"eq\"],\n                        [\"!=\", \"ne\"],\n                    ],\n                },\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"rhs\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: object[]) => {\n                const newcolumn = b.getFieldValue(\"newcolumn\")\n                const lhs = tidyResolveFieldColumn(data, b, \"lhs\", {\n                    type: \"number\",\n                })\n                const rhs = b.getFieldValue(\"rhs\")\n                const logic = b.getFieldValue(\"logic\")\n                if (!newcolumn || !lhs) return Promise.resolve(data)\n                return postTransformData(<DataMutateNumberRequest>{\n                    type: \"mutate_number\",\n                    newcolumn,\n                    lhs,\n                    rhs,\n                    logic,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SUMMARIZE_BLOCK,\n            message0: \"summarize %1 calculate %2\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                    dataType: \"number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"calc\",\n                    options: calcOptions,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const columns = tidyResolveFieldColumns(\n                    data,\n                    b,\n                    \"column\",\n                    \"number\"\n                )\n                const calc = b.getFieldValue(\"calc\")\n                return postTransformData(<DataSummarizeRequest>{\n                    type: \"summarize\",\n                    columns,\n                    calc,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SUMMARIZE_BY_GROUP_BLOCK,\n            message0: \"group %1 by %2 calculate %3\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"by\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"calc\",\n                    options: calcOptions,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                const by = tidyResolveFieldColumn(data, b, \"by\")\n                const calc = b.getFieldValue(\"calc\")\n                if (!by) return Promise.resolve([])\n                return postTransformData(<DataSummarizeByGroupRequest>{\n                    type: \"summarize_by_group\",\n                    column,\n                    by,\n                    calc,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_SLICE_BLOCK,\n            message0: \"slice %1 rows from %2\",\n            colour: operatorsColour,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"count\",\n                    min: 1,\n                    precision: 1,\n                    value: 100,\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"operator\",\n                    options: [\n                        [\"head\", \"head\"],\n                        [\"tail\", \"tail\"],\n                        [\"sample\", \"sample\"],\n                    ],\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const count = b.getFieldValue(\"count\")\n                const operator = b.getFieldValue(\"operator\")\n                return tidySlice(data, {\n                    sliceHead: operator === \"head\" ? count : undefined,\n                    sliceTail: operator === \"tail\" ? count : undefined,\n                    sliceSample: operator === \"sample\" ? count : undefined,\n                })\n            },\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: DATA_COUNT_BLOCK,\n            message0: \"count distinct %1\",\n            colour: computeColour,\n            args0: [\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            dataPreviewField: true,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            transformData: (b: Block, data: any[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\")\n                if (!column) return Promise.resolve([])\n                return postTransformData(<DataCountRequest>{\n                    type: \"count\",\n                    column,\n                    data,\n                })\n            },\n            template: \"meta\",\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_BIN_BLOCK,\n            message0: \"bin by %1\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"column\",\n                    dataType: \"number\",\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: computeColour,\n            template: \"meta\",\n            dataPreviewField: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column = tidyResolveFieldColumn(data, b, \"column\", {\n                    type: \"number\",\n                })\n                if (!column) return Promise.resolve([])\n                return postTransformData(<DataBinRequest>{\n                    type: \"bin\",\n                    column,\n                    data,\n                })\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_CORRELATION_BLOCK,\n            message0: \"correlation of %1 %2 %3 %4 %5\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"x\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"y\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                    compare: true,\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: DataTableField.KEY,\n                    name: \"table\",\n                    transformed: true,\n                    small: true,\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: statisticsColour,\n            template: \"meta\",\n            dataPreviewField: false,\n            passthroughData: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column1 = tidyResolveFieldColumn(data, b, \"x\", {\n                    type: \"number\",\n                })\n                const column2 = tidyResolveFieldColumn(data, b, \"y\", {\n                    type: \"number\",\n                })\n                if (!column1 || !column2) return Promise.resolve([])\n                return postTransformData(<DataCorrelationRequest>{\n                    type: \"correlation\",\n                    column1,\n                    column2,\n                    data,\n                })\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: DATA_LINEAR_REGRESSION_BLOCK,\n            message0: \"linear regression of x %1 y %2 %3 %4 %5\",\n            args0: [\n                <DataColumnInputDefinition>{\n                    type: DataColumnChooserField.KEY,\n                    name: \"x\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"y\",\n                    dataType: \"number\",\n                },\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                    compare: true,\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: ScatterPlotField.KEY,\n                    name: \"plot\",\n                    linearRegression: true,\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: statisticsColour,\n            template: \"meta\",\n            dataPreviewField: false,\n            passthroughData: true,\n            transformData: async (b: Block, data: object[]) => {\n                const column1 = tidyResolveFieldColumn(data, b, \"x\", {\n                    type: \"number\",\n                })\n                const column2 = tidyResolveFieldColumn(data, b, \"y\", {\n                    type: \"number\",\n                })\n                if (!column1 || !column2) return Promise.resolve([])\n                return postTransformData(<DataLinearRegressionRequest>{\n                    type: \"linear_regression\",\n                    column1,\n                    column2,\n                    data,\n                })\n            },\n        },\n        {\n            kind: \"block\",\n            type: DATA_COMMENT_BLOCK,\n            message0: \"comment %1 %2 %3\",\n            args0: [\n                {\n                    type: DataPreviewField.KEY,\n                    name: \"preview\",\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: \"field_multilinetext\",\n                    name: \"text\",\n                    text: \"And then...\",\n                    spellcheck: true,\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: operatorsColour,\n            template: \"meta\",\n            inputsInline: false,\n            dataPreviewField: false,\n            transformData: identityTransformData,\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Organize\",\n            colour: operatorsColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_COMMENT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_ARRANGE_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SELECT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_DROP_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_FILTER_COLUMNS_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_FILTER_STRING_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SLICE_BLOCK,\n                },\n            ],\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Compute\",\n            colour: computeColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_MUTATE_COLUMNS_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_MUTATE_NUMBER_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SUMMARIZE_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_SUMMARIZE_BY_GROUP_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_COUNT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_BIN_BLOCK,\n                },\n            ],\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Statistics\",\n            colour: statisticsColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_CORRELATION_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: DATA_LINEAR_REGRESSION_BLOCK,\n                },\n            ],\n        },\n    ],\n}\nexport default dataDsl\n","import { Block } from \"blockly\"\nimport { SMap } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    ColorInputDefnition,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst builtins: SMap<(block: Block) => string | number | boolean> = {\n    jacdac_on_off: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_yes_no: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_time_picker: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_angle: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_percent: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_ratio: block => Number(block.getFieldValue(\"value\") || \"0\"),\n}\n\nconst shadowDsl: BlockDomainSpecificLanguage = {\n    id: \"shadow\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: `jacdac_on_off`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"enabled\", \"on\"],\n                        [\"disabled\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_yes_no`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"yes\", \"on\"],\n                        [\"no\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_time_picker`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"0.1\", \"0.1\"],\n                        [\"1\", \"1\"],\n                        [\"5\", \"5\"],\n                        [\"30\", \"30\"],\n                        [\"60\", \"60\"],\n                    ],\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_angle`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_angle\",\n                    name: \"value\",\n                    min: 0,\n                    max: 360,\n                    precision: 10,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_percent`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 100,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_byte`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 255,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_ratio`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 1,\n                    precision: 0.1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_color`,\n            message0: `%1`,\n            args0: [\n                <ColorInputDefnition>{\n                    type: \"field_colour\",\n                    name: \"col\",\n                    colour: \"#ff0000\",\n                    colourOptions: [\n                        \"#ff0000\",\n                        \"#ff8000\",\n                        \"#ffff00\",\n                        \"#ff9da5\",\n                        \"#00ff00\",\n                        \"#b09eff\",\n                        \"#00ffff\",\n                        \"#007fff\",\n                        \"#65471f\",\n                        \"#0000ff\",\n                        \"#7f00ff\",\n                        \"#ff0080\",\n                        \"#ff00ff\",\n                        \"#ffffff\",\n                        \"#999999\",\n                        \"#000000\",\n                    ],\n                    columns: 4,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Color\",\n        },\n    ],\n\n    blockToValue: block => builtins[block.type]?.(block),\n}\nexport default shadowDsl\n","import {\n    isHighLevelRegister,\n    isHighLevelEvent,\n    isCommand,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport { SMap } from \"../jdom/utils\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\nimport { atomic } from \"./utils\"\nimport { CHANGE } from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport { DecodedPacket } from \"../jdom/pretty\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport { ExternalRequest } from \"./environment\"\nimport SensorServer from \"../servers/sensorserver\"\n\nexport const VM_EXTERNAL_REQUEST = \"vmExternalRequest\"\n\nclass VMRegisterServer extends JDRegisterServer<PackedValues> {\n    constructor(\n        private serviceServer: VMServiceServer,\n        private reg: jdspec.PacketInfo,\n        defaultValue?: PackedValues\n    ) {\n        super(serviceServer, reg.identifier, defaultValue)\n    }\n\n    async sendGetAsync() {\n        this.serviceServer.raiseGetRegisterEvent(this.reg.name)\n    }\n\n    async theRealSendGetAsync() {\n        await super.sendGetAsync()\n    }\n}\n\n// TODO: need to take specification into account and\n// TOOD: implement the proper base class (SensorServer)\nexport class VMServiceServer extends SensorServer<any[]> {\n    private eventNameToId: SMap<number> = {}\n    private regNameToId: SMap<number> = {}\n    private regFieldToId: SMap<number> = {}\n    private commandPackets: SMap<DecodedPacket> = {}\n    private cmdFieldToId: SMap<number> = {}\n\n    constructor(public role: string, private spec: jdspec.ServiceSpec) {\n        super(spec.classIdentifier, {\n            readingValues: [false],\n            streamingInterval: 50,\n        })\n        spec.packets.filter(isHighLevelRegister).map(reg => {\n            const regServer = this.addExistingRegister(\n                new VMRegisterServer(this, reg)\n            )\n            this.regNameToId[reg.name] = reg.identifier\n            reg.fields?.forEach((pkt, index) => {\n                this.regFieldToId[`${reg.name}:${pkt.name}`] = index\n            })\n            regServer.subscribe(CHANGE, () => {\n                this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n                    kind: \"set\",\n                    role: this.role,\n                    tgt: reg.name,\n                })\n            })\n        })\n\n        spec.packets.filter(isCommand).map(cmd => {\n            this.addCommand(cmd.identifier, (pkt: Packet) => {\n                this.commandPackets[cmd.identifier] = pkt.decoded\n                this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n                    kind: \"cmd\",\n                    role: this.role,\n                    tgt: cmd.name,\n                })\n            })\n            cmd.fields?.forEach((pkt, index) => {\n                this.regFieldToId[`${cmd.name}:${pkt.name}`] = index\n            })\n        })\n\n        spec.packets.filter(isHighLevelEvent).forEach(pkt => {\n            this.eventNameToId[pkt.name] = pkt.identifier\n        })\n    }\n\n    raiseGetRegisterEvent(regName: string) {\n        this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n            kind: \"get\",\n            role: this.role,\n            tgt: regName,\n        })\n    }\n\n    async respondToGetRegisterEvent(regName: string) {\n        const reg = this.register(this.regNameToId[regName]) as VMRegisterServer\n        await reg.theRealSendGetAsync()\n    }\n\n    async sendEventNameAsync(eventName: string, values?: PackedValues) {\n        const pkt = this.spec.packets.find(\n            p => isHighLevelEvent(p) && p.name === eventName\n        )\n        if (pkt) {\n            await this.sendEvent(\n                this.eventNameToId[eventName],\n                jdpack(pkt.packFormat, values)\n            )\n        }\n    }\n\n    lookupRegister(root: string, fld: string) {\n        if (this.regNameToId[root]) {\n            const reg = this.register(this.regNameToId[root])\n            if (!fld) return reg.values()?.[0]\n            else {\n                return reg.values()?.[this.regFieldToId[`${root}:${fld}`]]\n            }\n        } else if (this.commandPackets[root]) {\n            const cmd = this.commandPackets[root]\n            return cmd.decoded?.[this.cmdFieldToId[`${root}:${fld}`]]?.value\n        }\n        return undefined\n    }\n\n    public writeRegister(root: string, ev: atomic[]) {\n        const reg = this.register(this.regNameToId[root])\n        reg.setValues(ev)\n    }\n}\n","import { isEvent, isRegister, isCommand, isIntensity } from \"../jdom/spec\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport JDService from \"../jdom/service\"\nimport JDRegister from \"../jdom/register\"\nimport JDEvent from \"../jdom/event\"\nimport { CHANGE, EVENT, REPORT_UPDATE, SystemReg } from \"../jdom/constants\"\nimport { SMap } from \"../jdom/utils\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\nimport { atomic } from \"./utils\"\n\nexport class VMServiceClient extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _reportUpdate: SMap<boolean> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    public async sendCommandAsync(commandName: string, values: PackedValues) {\n        const pkt = this.service.specification.packets.find(\n            p => isCommand(p) && p.name === commandName\n        )\n        if (pkt) {\n            await this.service.sendCmdAsync(\n                pkt.identifier,\n                jdpack(pkt.packFormat, values),\n                true\n            )\n        }\n    }\n\n    public async writeRegisterAsync(regName: string, values: atomic[]) {\n        const register = this._registers[regName]\n        if (register.code === SystemReg.Value) await this.setEnabled()\n        await this.writeRegAsync(this._registers[regName], values)\n    }\n\n    private async writeRegAsync(jdreg: JDRegister, values: atomic[]) {\n        await jdreg?.sendSetPackedAsync(values, true)\n    }\n\n    private async setEnabled() {\n        const pkt = this.service.specification.packets.find(isIntensity)\n        if (pkt && pkt.fields[0].type === \"bool\") {\n            const jdreg = this.service.register(SystemReg.Intensity)\n            await this.writeRegAsync(jdreg, [true])\n        }\n    }\n\n    public async lookupRegisterAsync(\n        root: string,\n        fld: string,\n        reportUpdate = false\n    ) {\n        if (root in this._registers) {\n            const register = this._registers[root]\n            if (reportUpdate && !this._reportUpdate[root]) {\n                this._reportUpdate[root] = true\n                this.mount(register.subscribe(REPORT_UPDATE, () => {}))\n            }\n            await register.refresh()\n            if (!fld) return register.unpackedValue?.[0]\n            else {\n                const field = register.fields.find(f => f.name === fld)\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n}\n","import jsep from \"jsep\"\nimport { assert, SMap } from \"../jdom/utils\"\nimport JDService from \"../jdom/service\"\nimport JDEventSource from \"../jdom/eventsource\"\nimport { PackedValues } from \"../jdom/pack\"\nimport { serviceSpecificationFromClassIdentifier } from \"../jdom/spec\"\nimport { RoleRegister, RoleEvent } from \"./compile\"\nimport { VMEnvironmentInterface } from \"./runner\"\nimport { VMRole } from \"./ir\"\nimport { VMServiceServer, VM_EXTERNAL_REQUEST } from \"./server\"\nimport { VMServiceClient } from \"./client\"\nimport { atomic } from \"./utils\"\n\nexport const GLOBAL_CHANGE = \"vmEnvGlobalChange\"\nexport const REGISTER_CHANGE = \"vmEnvRegisterChange\"\nexport const EXTERNAL_REQUEST = \"vmEnvEventChange\"\n\nexport interface ExternalRequest {\n    kind: \"event\" | \"get\" | \"set\" | \"cmd\"\n    role: string\n    tgt: string\n}\n\nexport enum VMExceptionCode {\n    RoleNoService = \"vmEnvRoleNoService\",\n    TypeMismatch = \"vmEnvTypeMismatch\",\n    InternalError = \"vmInternalError\",\n}\n\nexport class VMException extends Error {\n    constructor(readonly code: VMExceptionCode, readonly data: string) {\n        super()\n    }\n}\n\nexport interface GlobalVariable {\n    type: \"number\" | \"boolean\" | \"string\"\n    value: atomic\n}\n\nexport class VMEnvironment\n    extends JDEventSource\n    implements VMEnvironmentInterface\n{\n    private _currentRequest: ExternalRequest = undefined\n    private _clientEnvs: SMap<VMServiceClient> = {}\n    private _serverEnvs: SMap<VMServiceServer> = {}\n    private _globals: SMap<GlobalVariable> = {}\n\n    constructor(\n        private registers: RoleRegister[],\n        private events: RoleEvent[],\n        private serverRoles: VMRole[]\n    ) {\n        super()\n        this.setupServers()\n    }\n\n    private setupServers() {\n        this.serverRoles.forEach(p => {\n            // get the service\n            const service = serviceSpecificationFromClassIdentifier(\n                p.serviceClass\n            )\n            if (service) {\n                // spin up JDServiceServer\n                const serviceServer = new VMServiceServer(p.role, service)\n                this._serverEnvs[p.role] = serviceServer\n                serviceServer.subscribe(\n                    VM_EXTERNAL_REQUEST,\n                    (p: ExternalRequest) => {\n                        this._currentRequest = p\n                        this.emit(EXTERNAL_REQUEST, p)\n                    }\n                )\n            }\n        })\n    }\n\n    public globals() {\n        return this._globals\n    }\n\n    public servers() {\n        return Object.keys(this._serverEnvs).map(k => {\n            return {\n                role: k,\n                serviceClass: this._serverEnvs[k].serviceClass,\n                server: this._serverEnvs[k],\n            }\n        })\n    }\n\n    public serviceChanged(role: string, service: JDService) {\n        if (this._clientEnvs[role]) {\n            this._clientEnvs[role].unmount()\n            this._clientEnvs[role] = undefined\n        }\n        if (!service) this._rolesUnbound.push(role)\n        else {\n            this._rolesBound.push(role)\n            this._clientEnvs[role] = new VMServiceClient(service)\n            this.registers.forEach(r => {\n                if (r.role === role) {\n                    this.registerRegister(role, r.register)\n                }\n            })\n            this.events.forEach(e => {\n                if (e.role === role) {\n                    this.registerEvent(role, e.event)\n                }\n            })\n        }\n    }\n\n    public roleBound(role: string) {\n        return !!this._clientEnvs[role]\n    }\n\n    public registerRegister(role: string, reg: string) {\n        const serviceEnv = this.getService(role)\n        serviceEnv.registerRegister(reg, () => {\n            this.emit(REGISTER_CHANGE, reg)\n        })\n    }\n\n    public registerEvent(role: string, tgt: string) {\n        const serviceEnv = this.getService(role)\n        serviceEnv.registerEvent(tgt, () => {\n            this._currentRequest = { kind: \"event\", role, tgt }\n            this.emit(EXTERNAL_REQUEST, this._currentRequest)\n        })\n    }\n\n    private getRootName(e: jsep.MemberExpression | string) {\n        if (!e) return undefined\n        if (typeof e === \"string\") return e\n        if (e.type === \"MemberExpression\")\n            return (e.object as jsep.Identifier).name\n        return undefined\n    }\n\n    private getService(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        const s = this._clientEnvs[root]\n        return s\n    }\n\n    private getServer(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        const s = this._serverEnvs[root]\n        return s\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public async sendCommandAsync(\n        e: jsep.MemberExpression,\n        values: PackedValues\n    ) {\n        const serviceEnv = this.getService(e)\n        if (serviceEnv) {\n            await serviceEnv?.sendCommandAsync(\n                (e.property as jsep.Identifier).name,\n                values\n            )\n        } else {\n            const server = this.getServer(e)\n            await server?.sendEventNameAsync(\n                (e.property as jsep.Identifier).name,\n                values\n            )\n        }\n    }\n\n    public async lookupAsync(\n        e: jsep.MemberExpression | string,\n        reportUpdate = false\n    ) {\n        const roleName = this.getRootName(e)\n        if (roleName.startsWith(\"$var\")) {\n            const me = e as jsep.MemberExpression\n            if (me.property.type === \"Identifier\") {\n                const local = (me.property as jsep.Identifier).name\n                return this._globals[local]?.value\n            }\n            return undefined\n        }\n        const ep = (e as jsep.MemberExpression).property as\n            | jsep.Identifier\n            | jsep.MemberExpression\n        const root =\n            typeof ep === \"string\"\n                ? ep\n                : ep.type === \"Identifier\"\n                ? ep.name\n                : (ep.object as jsep.Identifier).name\n        const fld =\n            typeof ep === \"string\"\n                ? undefined\n                : ep.type === \"Identifier\"\n                ? undefined\n                : (ep.property as jsep.Identifier).name\n        const serviceEnv = this.getService(e)\n        if (serviceEnv) {\n            return await serviceEnv.lookupRegisterAsync(root, fld, reportUpdate)\n        } else {\n            const server = this.getServer(e)\n            return server.lookupRegister(root, fld)\n        }\n    }\n\n    public async writeRegisterAsync(\n        e: jsep.MemberExpression | string,\n        values: atomic[]\n    ) {\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            if (serviceEnv) await serviceEnv.writeRegisterAsync(reg, values)\n            else {\n                const server = this.getServer(e)\n                return server.writeRegister(reg, values)\n            }\n        }\n    }\n\n    public writeGlobal(\n        e: jsep.MemberExpression | string,\n        value: string | boolean | number\n    ) {\n        const roleName = this.getRootName(e)\n        if (!roleName || !roleName.startsWith(\"$var\")) return undefined\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const local = (me.property as jsep.Identifier).name\n            if (this._globals[local]) {\n                const firstType = this._globals[local].type\n                if (firstType !== typeof value) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `variable ${local} has first type ${firstType}; trying to assign ${value.toString()}`\n                    )\n                }\n                if (value !== this._globals[local].value) {\n                    this._globals[local].value = value\n                    this.emit(GLOBAL_CHANGE)\n                }\n            } else {\n                const firstType = typeof value\n                if (\n                    firstType !== \"string\" &&\n                    firstType !== \"boolean\" &&\n                    firstType !== \"number\"\n                ) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `Value of type ${firstType} not supported`\n                    )\n                }\n                this._globals[local] = { type: firstType, value }\n                this.emit(GLOBAL_CHANGE)\n            }\n            return true\n        }\n        return false\n    }\n\n    public clearExternalStimulii() {\n        this._currentRequest = undefined\n        this.rolesReset()\n    }\n\n    public hasRequest(e: jsep.MemberExpression | string): ExternalRequest {\n        const roleName = this.getRootName(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const op = (me.property as jsep.Identifier).name\n            if (\n                this._currentRequest?.role === roleName &&\n                this._currentRequest?.tgt === op\n            )\n                return this._currentRequest\n        }\n        return undefined\n    }\n\n    public async completeRequest(request: ExternalRequest) {\n        assert(request.kind === \"get\")\n        const server = this.getServer(request.role)\n        await server.respondToGetRegisterEvent(request.tgt)\n    }\n\n    // role events\n    private _rolesBound: string[] = []\n    private _rolesUnbound: string[] = []\n    private rolesReset() {\n        this._rolesBound = []\n        this._rolesUnbound = []\n    }\n    public initRoles() {\n        this._rolesBound = Object.keys(this._clientEnvs).slice(0)\n    }\n    public roleTransition(role: string, event: string): boolean {\n        if (event === \"bound\") {\n            return !!this._rolesBound.find(r => role === \"any\" || r === role)\n        } else {\n            return !!this._rolesUnbound.find(r => role === \"any\" || r === role)\n        }\n    }\n\n    public unsubscribe() {\n        for (const vs of Object.values(this._clientEnvs)) {\n            vs.unmount()\n        }\n    }\n}\n","import jsep from \"jsep\"\n\nexport type GetValue = (\n    e: jsep.MemberExpression | string,\n    reportUpdate: boolean\n) => any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StartMap = { e: jsep.Expression; v: any }[]\n\nexport type CallEvaluator = (\n    ce: jsep.CallExpression,\n    ee: VMExprEvaluator\n) => any\n\nexport function unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements.map(unparse).join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"MemberExpression\": {\n            const root = e as jsep.MemberExpression\n            return root.computed\n                ? `${unparse(root.object)}[${unparse(root.property)}]`\n                : `${unparse(root.object)}.${unparse(root.property)}`\n        }\n        case \"BinaryExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\nexport class VMExprEvaluator {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private exprStack: any[] = []\n    private reportUpdate = false\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private env: GetValue, private callEval: CallEvaluator) {}\n\n    public tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public pop() {\n        return this.exprStack.pop()\n    }\n\n    public async evalAsync(e: jsep.Expression, reportUpdate = false) {\n        this.exprStack = []\n        this.reportUpdate = reportUpdate\n        await this.visitExpressionAsync(e)\n        return this.exprStack.pop()\n    }\n\n    public async visitExpressionAsync(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                if (this.callEval) {\n                    const ret = this.callEval(<jsep.CallExpression>e, this)\n                    this.exprStack.push(ret)\n                } else this.exprStack.push(undefined)\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                if (be.operator === \"&&\" || be.operator === \"||\") {\n                    await this.visitExpressionAsync(be.left)\n                    switch (be.operator) {\n                        case \"||\":\n                            if (this.tos()) return\n                            else await this.visitExpressionAsync(be.right)\n                            return\n                        case \"&&\":\n                            if (!this.tos()) return\n                            else await this.visitExpressionAsync(be.right)\n                            return\n                    }\n                }\n                await this.visitExpressionAsync(be.left)\n                await this.visitExpressionAsync(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\": {\n                const ue = <jsep.UnaryExpression>e\n                await this.visitExpressionAsync(ue.argument)\n                const top = this.exprStack.pop()\n                switch (ue.operator) {\n                    case \"ABS\":\n                        this.exprStack.push(Math.abs(top))\n                        return\n                    case \"!\":\n                        this.exprStack.push(!top)\n                        return\n                    case \"~\":\n                        this.exprStack.push(~top)\n                        return\n                    case \"-\":\n                        this.exprStack.push(-top)\n                        return\n                    case \"+\":\n                        this.exprStack.push(+top)\n                        return\n                }\n                break\n            }\n\n            case \"MemberExpression\": {\n                // for now, we don't support evaluation of obj or prop\n                // of obj.prop\n                const val = await this.env(\n                    e as jsep.MemberExpression,\n                    this.reportUpdate\n                )\n                //if (val === undefined) {\n                //    throw new VMError(VMCode.InternalError, `lookup of ${unparse(e)} failed`)\n                //}\n                this.exprStack.push(val)\n                return\n            }\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                const val = await this.env(id.name, this.reportUpdate)\n                // if (val === undefined)\n                //    throw new VMError(VMCode.InternalError, `lookup of ${id.name} failed`)\n                this.exprStack.push(val)\n                return\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                return\n            }\n            default:\n        }\n    }\n}\n","import jsep from \"jsep\"\n\nexport interface VMError {\n    sourceId?: string\n    code?: number\n    message: string\n}\n\nexport interface VMBase {\n    type: \"ite\" | \"cmd\"\n    sourceId?: string\n}\n\nexport interface VMIfThenElse extends VMBase {\n    type: \"ite\"\n    expr: jsep.Expression\n    then?: VMBase[]\n    else?: VMBase[]\n}\n\nexport interface VMCommand extends VMBase {\n    type: \"cmd\"\n    command: jsep.CallExpression\n}\n\nexport interface VMHandler {\n    commands: VMBase[]\n    roles?: string[]\n    errors?: VMError[]\n    // this handler support the editing experience but\n    // should not be compiled down or debugged\n    meta?: boolean\n}\n\nexport interface VMRole {\n    role: string\n    serviceClass: number\n}\n\nexport interface VMProgram {\n    roles: VMRole[]\n    serverRoles: VMRole[]\n    handlers: VMHandler[]\n}\n\nexport type VMFunctionNames =\n    | \"start\"\n    | \"halt\"\n    | \"nop\"\n    | \"label\"\n    | \"jump\"\n    | \"branchOnCondition\"\n    | \"wait\"\n    | \"awaitRegister\"\n    | \"awaitChange\"\n    | \"awaitEvent\"\n    | \"awaitCondition\"\n    | \"writeRegister\"\n    | \"writeLocal\"\n    | \"watch\"\n    | \"log\"\n    | \"roleBound\"\n    | \"roleBoundExpression\"\n    | \"onRoleConnected\"\n    | \"onRoleDisconnected\"\n    | \"raiseEvent\"\n\ntype Context = \"command\" | \"expression\" | \"either\"\n\nexport interface VMFunctionDescription {\n    id: string\n    args: (string | [string, any])[]\n    prompt: string\n    context: Context\n}\n\nexport const VMFunctions: VMFunctionDescription[] = [\n    {\n        id: \"start\",\n        args: [],\n        prompt: `start block`,\n        context: \"command\",\n    },\n    {\n        id: \"halt\",\n        args: [],\n        prompt: `terminates the current handler`,\n        context: \"command\",\n    },\n    {\n        id: \"nop\",\n        args: [],\n        prompt: `no operation`,\n        context: \"command\",\n    },\n    {\n        id: \"label\",\n        args: [\"Identifier\"],\n        prompt: `label target {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"jump\",\n        args: [\"Identifier\"],\n        prompt: `jump to label {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"branchOnCondition\",\n        args: [\"boolean\", \"Identifier\"],\n        prompt: `if {1} then jump to label {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"wait\",\n        args: [\"number\"],\n        prompt: `wait for {1} milliseconds`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitRegister\",\n        args: [\"register\"],\n        prompt: `wait on register {1} to change value`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitChange\",\n        args: [\"register\", \"number\"],\n        prompt: `wait for register {1} to change by {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitCondition\",\n        args: [\"boolean\"],\n        prompt: `wait for condition {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeRegister\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeLocal\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"watch\",\n        args: [\"number\"],\n        prompt: `watch expression {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"log\",\n        args: [\"number\"],\n        prompt: `not used`,\n        context: \"command\",\n    },\n    {\n        id: \"roleBound\",\n        args: [\"Identifier\", \"Identifier\"],\n        prompt: `role {1} {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"roleBoundExpression\",\n        args: [\"Identifier\"],\n        prompt: `is role {1} bound?`,\n        context: \"expression\",\n    },\n    {\n        id: \"onRoleConnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is connected`,\n        context: \"command\",\n    },\n    {\n        id: \"onRoleDisconnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is disconnected`,\n        context: \"command\",\n    },\n]\n","import jsep from \"jsep\"\nimport { VMFunctionDescription } from \"./ir\"\nimport { parseIntFloat } from \"../../jacdac-spec/spectool/jdutils\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function exprVisitor(\n    parent: any,\n    current: any,\n    structVisit: (par: jsep.Expression, curr: jsep.Expression) => void\n) {\n    if (Array.isArray(current)) {\n        ;(current as any[]).forEach(c => exprVisitor(current, c, structVisit))\n    } else if (typeof current === \"object\") {\n        if (parent && current) structVisit(parent, current)\n        Object.keys(current).forEach((key: string) => {\n            exprVisitor(current, current[key], structVisit)\n        })\n    }\n}\n\ninterface Resolve {\n    role: string\n    client: boolean\n    spec: jdspec.ServiceSpec\n    rest: jsep.Expression\n}\n\nexport class SpecSymbolResolver {\n    registers: string[]\n    events: string[]\n    roles: string[]\n\n    constructor(\n        private readonly spec: jdspec.ServiceSpec,\n        private readonly role2spec: (role: string) => {\n            spec: jdspec.ServiceSpec\n            client: boolean\n        },\n        private readonly error: (m: string) => void\n    ) {\n        this.reset()\n    }\n\n    reset() {\n        this.registers = []\n        this.events = []\n        this.roles = []\n    }\n\n    public check(e: jsep.Expression, type: string) {\n        if (!e) {\n            this.error(`expression is undefined`)\n            return false\n        } else if (e.type !== type) {\n            this.error(`expected ${type}; got ${e.type}`)\n            return false\n        }\n        return true\n    }\n\n    public specResolve(e: jsep.Expression): Resolve {\n        let ret: Resolve = undefined\n        if (this.spec) {\n            ret = {\n                role: this.spec.shortName,\n                spec: this.spec,\n                client: true,\n                rest: e,\n            }\n        } else if (e.type === \"Identifier\") {\n            return undefined\n        } else if (\n            this.check(e, \"MemberExpression\") &&\n            this.check((e as jsep.MemberExpression).object, \"Identifier\") &&\n            this.role2spec\n        ) {\n            const obj = (e as jsep.MemberExpression).object as jsep.Identifier\n            if (obj.name.startsWith(\"$\")) return undefined\n            if (!this.role2spec(obj.name)) {\n                this.error(`no specification found for ${obj.name}`)\n            }\n            const { spec, client } = this.role2spec(obj.name)\n            ret = {\n                role: obj.name,\n                spec,\n                client,\n                rest: (e as jsep.MemberExpression).property,\n            }\n        }\n        if (ret && this.roles.indexOf(ret.role) < 0) this.roles.push(ret.role)\n        return ret\n    }\n\n    public destructAccessPath(e: jsep.Expression, expectIdentifier = false) {\n        if (e.type === \"Identifier\") {\n            return [(e as jsep.Identifier).name, \"\"]\n        } else if (!expectIdentifier && e.type === \"MemberExpression\") {\n            const object = (e as jsep.MemberExpression)\n                .object as jsep.Identifier\n            const property = (e as jsep.MemberExpression)\n                .property as jsep.Identifier\n            if (\n                this.check(object, \"Identifier\") &&\n                this.check(property, \"Identifier\")\n            )\n                return [object.name, property.name]\n            return undefined\n        } else {\n            if (!expectIdentifier)\n                this.error(\n                    `expected Identifier or MemberExpression; got ${e.type}`\n                )\n            else this.error(`expected Identifier; got ${e.type}`)\n            return undefined\n        }\n    }\n\n    public lookupEvent(e: jsep.Expression) {\n        const resolve = this.specResolve(e)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [id, _] = this.destructAccessPath(rest, true)\n        const events = spec.packets?.filter(pkt => pkt.kind === \"event\")\n        const pkt = events.find(p => p.name === id)\n        if (!pkt) {\n            this.error(`no event ${id} in specification`)\n            return undefined\n        } else {\n            const ev = `${role}.${id}`\n            if (this.events.indexOf(ev) < 0) this.events.push(ev)\n            return pkt\n        }\n    }\n\n    public lookupRegister(e: jsep.Expression) {\n        const resolve = this.specResolve(e)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [root, fld] = this.destructAccessPath(rest)\n        this.lookupRegisterRaw(spec, root, fld)\n        const reg = `${role}.${root}`\n        if (this.registers.indexOf(reg) < 0) this.registers.push(reg)\n    }\n\n    private lookupRegisterRaw(\n        spec: jdspec.ServiceSpec,\n        root: string,\n        fld: string\n    ) {\n        const reg = getRegister(spec, root, fld)\n        if (\n            reg.pkt &&\n            ((!reg.fld && !isBoolOrNumericFormat(reg.pkt.packFormat)) ||\n                (reg.fld &&\n                    reg.fld.type &&\n                    !isBoolOrNumericFormat(reg.fld.type)))\n        )\n            this.error(\"only bool/numeric registers allowed\")\n        // if (!fld && regField.pkt.fields.length > 0)\n        //    error(`register ${root} has fields, but no field specified`)\n    }\n\n    public lookupReplace(\n        events: jdspec.PacketInfo[],\n        parent: jsep.Expression,\n        child: jsep.Identifier | jsep.MemberExpression\n    ) {\n        if (Array.isArray(parent)) {\n            const replace = this.lookup(events, parent, child)\n            parent.forEach(i => {\n                if (parent[i] === child) parent[i] = replace\n            })\n        } else {\n            // don't process identifiers that are callees of CallExpression\n            if (\n                parent?.type === \"CallExpression\" &&\n                child === (<jsep.CallExpression>parent).callee\n            )\n                return\n            const replace = this.lookup(events, parent, child)\n            if (replace) {\n                Object.keys(parent).forEach(k => {\n                    if ((parent as any)[k] === child)\n                        (parent as any)[k] = replace\n                })\n            }\n        }\n    }\n\n    private lookup(\n        events: jdspec.PacketInfo[],\n        parent: jsep.Expression,\n        child: jsep.Identifier | jsep.MemberExpression\n    ) {\n        const resolve = this.specResolve(child)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [root, fld] = this.destructAccessPath(rest)\n        try {\n            try {\n                const val = parseIntFloat(spec, fld ? `${root}.${fld}` : root)\n                const lit: jsep.Literal = {\n                    type: \"Literal\",\n                    value: val,\n                    raw: val.toString(),\n                }\n                return lit\n            } catch (e) {\n                this.lookupRegisterRaw(spec, root, fld)\n                const reg = `${role}.${root}`\n                if (this.registers.indexOf(reg) < 0) this.registers.push(reg)\n            }\n        } catch (e) {\n            let pkt: jdspec.PacketInfo = undefined\n            if (events.length) pkt = events.find(pkt => pkt.name === root)\n            else {\n                // we need a fully qualified name\n                pkt = spec.packets?.find(\n                    p => p.kind === \"event\" && p.name === root\n                )\n            }\n            if (!pkt) this.error(`event ${root} not bound correctly`)\n            else if (!fld && pkt.fields.length > 0)\n                this.error(`event ${root} has fields, but no field specified`)\n            else if (fld && !pkt.fields.find(f => f.name === fld))\n                this.error(\n                    `Field ${fld} of event ${root} not found in specification`\n                )\n        }\n    }\n}\n\nexport class VMChecker {\n    constructor(\n        private readonly resolver: SpecSymbolResolver,\n        private readonly supportedExpression: (\n            type: jsep.ExpressionType\n        ) => boolean,\n        private readonly error: (m: string) => void\n    ) {}\n\n    checkCommand(\n        root: jsep.CallExpression,\n        funs: VMFunctionDescription[]\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        if (!root || !root.type || root.type != \"CallExpression\") {\n            this.error(\n                `a command must be a call expression in JavaScript syntax`\n            )\n            return\n        }\n        // check for unsupported expression types\n        exprVisitor(null, root, (p, c) => {\n            if (!this.supportedExpression(c.type as jsep.ExpressionType))\n                this.error(\n                    `Expression of type ${c.type} not currently supported`\n                )\n        })\n        // first lookup in known functions\n        const callee = (root.callee as jsep.Identifier)?.name\n        const cmdIndex = funs.findIndex(r => callee === r.id)\n        let theCommand: jdspec.PacketInfo = undefined\n        if (cmdIndex < 0) {\n            if (root.callee.type === \"MemberExpression\") {\n                const { role, spec, rest, client } = this.resolver.specResolve(\n                    root.callee as jsep.MemberExpression\n                )\n                const [command, _] = this.resolver.destructAccessPath(rest)\n                if (!role) {\n                    this.error(\n                        `command does not conform to expected call expression`\n                    )\n                    return undefined\n                } else {\n                    // we have a spec, now look for command\n                    const commands = spec.packets?.filter(\n                        pkt =>\n                            (client && pkt.kind === \"command\") ||\n                            (!client && pkt.kind === \"event\")\n                    )\n                    theCommand = commands.find(c => c?.name === command)\n                    if (!theCommand) {\n                        this.error(\n                            `cannot find command named ${command} in spec ${spec.shortName}`\n                        )\n                    } else\n                        return this.processSpecCommandFunction(root, theCommand)\n                }\n            } else {\n                if (callee)\n                    this.error(`${callee} is not a registered function.`)\n                else\n                    this.error(\n                        `command does not conform to expected call expression`\n                    )\n                return undefined\n            }\n        } else return this.processTestFunction(funs, root, cmdIndex)\n        return undefined\n    }\n\n    private processSpecCommandFunction(\n        root: jsep.CallExpression,\n        command: jdspec.PacketInfo\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        if (root.arguments.length !== command?.fields?.length) {\n            this.error(\n                `Command ${command.name} expects ${command.fields.length} arguments: got ${root.arguments.length}`\n            )\n        } else {\n            const args = root.arguments\n            args.forEach(arg => {\n                this.visitReplace(root, arg, [])\n            })\n        }\n        return [undefined, root]\n    }\n\n    private processTestFunction(\n        funs: VMFunctionDescription[],\n        root: jsep.CallExpression,\n        cmdIndex: number\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        const callee = (root.callee as jsep.Identifier)?.name\n        // check arguments\n        const command = funs[cmdIndex]\n        const minArgs = argsRequiredOptional(command.args).length\n        const maxArgs = command.args.length\n        if (root.arguments.length < minArgs) {\n            this.error(\n                `${callee} expects at least ${minArgs} arguments; got ${root.arguments.length}`\n            )\n            return undefined\n        } else if (root.arguments.length > maxArgs) {\n            this.error(\n                `${callee} expects at most ${maxArgs} arguments; got ${root.arguments.length}`\n            )\n            return undefined\n        }\n        // deal with optional arguments\n        const newExpressions: jsep.Expression[] = []\n        for (let i = root.arguments.length; i < command.args.length; i++) {\n            const [name, def] = command.args[i] as [string, any]\n            const lit: jsep.Literal = {\n                type: \"Literal\",\n                value: def,\n                raw: def.toString(),\n            }\n            newExpressions.push(lit)\n        }\n        root.arguments = root.arguments.concat(newExpressions)\n        // type checking of arguments.\n        this.processTestArguments(command, root)\n        return [command, root]\n        function argsRequiredOptional(args: any[], optional = false) {\n            return args.filter(\n                a =>\n                    (!optional && typeof a === \"string\") ||\n                    (optional && typeof a === \"object\")\n            )\n        }\n    }\n\n    private processTestArguments(\n        command: VMFunctionDescription,\n        root: jsep.CallExpression\n    ) {\n        const args = root.arguments\n        const eventSymTable: jdspec.PacketInfo[] = []\n        args.forEach((arg, a) => {\n            let argType = command.args[a]\n\n            if (typeof argType === \"object\") argType = command.args[a][0]\n\n            if (\n                argType === \"register\" ||\n                argType === \"event\" ||\n                argType === \"Identifier\"\n            ) {\n                if (argType === \"Identifier\") {\n                    this.resolver.check(arg, \"Identifier\")\n                } else if (argType === \"event\" && a === 0) {\n                    const pkt = this.resolver.lookupEvent(arg)\n                    if (pkt && eventSymTable.indexOf(pkt) === -1)\n                        eventSymTable.push(pkt)\n                } else if (argType === \"register\") {\n                    try {\n                        this.resolver.lookupRegister(arg)\n                    } catch (e) {\n                        this.error(e.message)\n                    }\n                }\n            } else if (argType === \"events\") {\n                if (arg.type != \"ArrayExpression\")\n                    this.error(\n                        `events function expects a list of service events`\n                    )\n                else {\n                    ;(arg as jsep.ArrayExpression).elements.forEach(e =>\n                        this.resolver.lookupEvent(e)\n                    )\n                }\n            } else if (argType === \"number\" || argType === \"boolean\") {\n                this.visitReplace(root, arg, eventSymTable)\n            } else {\n                this.error(`unexpected argument type (${argType})`)\n            }\n        })\n    }\n\n    private visitReplace(\n        root: jsep.CallExpression,\n        arg: jsep.Expression,\n        eventSymTable: jdspec.PacketInfo[] = []\n    ) {\n        exprVisitor(root, arg, (p, c) => {\n            if (p.type !== \"MemberExpression\" && c.type === \"Identifier\") {\n                this.resolver.lookupReplace(\n                    eventSymTable,\n                    p,\n                    c as jsep.Identifier\n                )\n            } else if (c.type === \"ArrayExpression\") {\n                this.error(`array expression not allowed in this context`)\n            } else if (\n                p.type !== \"MemberExpression\" &&\n                c.type === \"MemberExpression\"\n            ) {\n                const member = c as jsep.MemberExpression\n                // A member expression must be of form <Identifier>.<memberExpression|Identifier>\n                if (member.object.type !== \"Identifier\" || member.computed) {\n                    this.error(\"property access must be of form id.property\")\n                } else {\n                    this.resolver.lookupReplace(\n                        eventSymTable,\n                        p,\n                        c as jsep.MemberExpression\n                    )\n                }\n            }\n        })\n    }\n}\n\n// private stuff\n\nfunction isBoolOrNumericFormat(fmt: string) {\n    return fmt === \"bool\" || /^[ui]\\d+/i.test(fmt)\n}\n\nfunction isRegister(pkt: jdspec.PacketInfo): boolean {\n    return (\n        pkt && (pkt.kind === \"const\" || pkt.kind === \"ro\" || pkt.kind === \"rw\")\n    )\n}\n\nfunction lookupRegister(\n    spec: jdspec.ServiceSpec,\n    id: string\n): jdspec.PacketInfo {\n    return spec.packets.find(pkt => isRegister(pkt) && pkt.name === id)\n}\n\nfunction lookupField(\n    pkt: jdspec.PacketInfo,\n    field: string\n): jdspec.PacketMember {\n    return pkt.fields.find(member => member.name === field)\n}\n\ninterface RegField {\n    pkt: jdspec.PacketInfo\n    fld: jdspec.PacketMember\n}\n\nfunction getRegister(\n    spec: jdspec.ServiceSpec,\n    root: string,\n    fld = \"\"\n): RegField {\n    const ret: RegField = { pkt: undefined, fld: undefined }\n    ret.pkt = lookupRegister(spec, root)\n    if (!ret.pkt) {\n        throw new Error(\n            `no register ${root} found in service ${spec.shortName}`\n        )\n    } else if (fld) {\n        ret.fld = lookupField(ret.pkt, fld)\n        if (!ret.fld)\n            throw new Error(\n                `no field ${fld} found in register ${root} of service ${spec.shortName}`\n            )\n    }\n    return ret\n}\n","import jsep from \"jsep\"\nimport {\n    serviceSpecificationFromClassIdentifier,\n    serviceSpecificationFromName,\n} from \"../jdom/spec\"\nimport {\n    VMBase,\n    VMCommand,\n    VMError,\n    VMHandler,\n    VMIfThenElse,\n    VMProgram,\n    VMFunctions,\n} from \"./ir\"\nimport { VMChecker, SpecSymbolResolver } from \"./symutils\"\nimport { assert } from \"../jdom/utils\"\n\nexport function toIdentifier(id: string) {\n    return {\n        type: \"Identifier\",\n        name: id,\n    } as jsep.Identifier\n}\n\nexport function toMemberExpression(\n    root: string,\n    field: string | jsep.Expression\n) {\n    return {\n        type: \"MemberExpression\",\n        object: toIdentifier(root),\n        property: typeof field === \"string\" ? toIdentifier(field) : field,\n        computed: false,\n    } as jsep.MemberExpression\n}\n\nfunction handlerVisitor(\n    handler: VMHandler,\n    visitITE: (ite: VMIfThenElse, time: number) => void,\n    visitCommand: (c: VMCommand) => void\n) {\n    handler.commands.forEach(visitBase)\n\n    function visitBase(base: VMBase) {\n        switch (base.type) {\n            case \"cmd\": {\n                if (visitCommand) visitCommand(base as VMCommand)\n                break\n            }\n            case \"ite\": {\n                const ite = base as VMIfThenElse\n                if (visitITE) visitITE(ite, 0)\n                ite?.else?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 1)\n                ite?.then?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 2)\n            }\n        }\n    }\n}\n\nexport function compileProgram({ roles, serverRoles, handlers }: VMProgram) {\n    const newProgram: VMProgram = { roles, serverRoles, handlers: [] }\n    // process start blocks\n    handlers.forEach(startBlock)\n    // remove if-then-else\n    newProgram.handlers = handlers.map(h => {\n        return { commands: removeIfThenElse(h), errors: h?.errors }\n    })\n    return newProgram\n}\n\nfunction checkCall(cmd: VMBase, id: string) {\n    if (cmd.type === \"cmd\") {\n        const callee = (cmd as VMCommand).command.callee\n        if (callee.type === \"Identifier\") {\n            const cid = (callee as jsep.Identifier).name\n            return id === cid\n        }\n    }\n    return undefined\n}\n\nfunction startBlock(handler: VMHandler) {\n    if (handler.commands.length && checkCall(handler.commands[0], \"start\")) {\n        handler.commands.shift()\n        handler.commands.push({\n            type: \"cmd\",\n            command: {\n                type: \"CallExpression\",\n                callee: toIdentifier(\"halt\"),\n                arguments: [],\n            },\n        } as VMCommand)\n    }\n}\n\nfunction removeIfThenElse(handler: VMHandler): VMBase[] {\n    const newSequence: VMCommand[] = []\n    const labels: { then: string; end: string }[] = []\n    let labelId = 1\n    handlerVisitor(\n        handler,\n        (ite, time) => {\n            switch (time) {\n                case 0: {\n                    // create the labels and branch instruction\n                    const then = `then_${labelId}`\n                    const end = `end_${labelId}`\n                    labels.push({ then, end })\n                    labelId++\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"branchOnCondition\"),\n                            arguments: [ite.expr, toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 1: {\n                    // insert the jump and then label\n                    const { then, end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"jump\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 2: {\n                    assert(labels.length > 0)\n                    const { end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    labels.pop()\n                }\n            }\n        },\n        cmd => {\n            newSequence.push(cmd)\n        }\n    )\n    return newSequence\n}\n\nexport interface RoleRegister {\n    role: string\n    register: string\n}\n\nexport interface RoleEvent {\n    role: string\n    event: string\n}\n\nexport const getServiceFromRole = (info: VMProgram) => (role: string) => {\n    // lookup in roles first\n    let roleFound = info.roles.find(pair => pair.role === role)\n    let client = true\n    if (!roleFound) {\n        roleFound = info.serverRoles.find(pair => pair.role === role)\n        client = false\n    }\n    if (roleFound) {\n        // must succeed\n        const spec = serviceSpecificationFromClassIdentifier(\n            roleFound.serviceClass\n        )\n        assert(!!spec, `service class ${roleFound.serviceClass} not resolved`)\n        return { spec, client }\n    } else {\n        const spec = serviceSpecificationFromName(role)\n        return { spec, client: true }\n    }\n}\n\nexport function checkProgram(prog: VMProgram): {\n    registers: RoleRegister[]\n    events: RoleEvent[]\n    errors: VMError[]\n} {\n    const allErrors: VMError[] = []\n    const goodHandlers: VMHandler[] = []\n    const errorFun = (e: string) => {\n        allErrors.push({ sourceId: undefined, message: e })\n    }\n    const symbolResolver = new SpecSymbolResolver(\n        undefined,\n        getServiceFromRole(prog),\n        errorFun\n    )\n    const checker = new VMChecker(symbolResolver, _ => true, errorFun)\n    prog.handlers.forEach(h => {\n        if (h?.errors.length) {\n            h?.errors.forEach(e => allErrors.push(e))\n            return\n        }\n        const errorCount = allErrors.length\n        symbolResolver.roles = []\n        handlerVisitor(h, undefined, c =>\n            checker.checkCommand(c.command, VMFunctions)\n        )\n        if (h?.errors.length === 0 && allErrors.length === errorCount) {\n            h.roles = symbolResolver.roles\n            goodHandlers.push(h)\n        } else {\n            h?.errors.forEach(e => allErrors.push(e))\n        }\n    })\n    prog.handlers = goodHandlers\n\n    return {\n        registers: symbolResolver.registers.map(s => {\n            const [root, fld] = s.split(\".\")\n            return { role: root, register: fld }\n        }),\n        events: symbolResolver.events.map(e => {\n            const [root, fld] = e.split(\".\")\n            return { role: root, event: fld }\n        }),\n        errors: allErrors,\n    }\n}\n","export type atomic = string | boolean | number\n\nexport class Mutex {\n    private promises: (() => Promise<any>)[] = []\n    private shift() {\n        this.promises.shift()\n        if (this.promises[0]) this.promises[0]()\n    }\n    acquire<T>(f: () => Promise<T>): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            this.promises.push(() =>\n                f().then(\n                    v => {\n                        this.shift()\n                        resolve(v)\n                    },\n                    e => {\n                        this.shift()\n                        reject(e)\n                    }\n                )\n            )\n            if (this.promises.length == 1) this.promises[0]()\n        })\n    }\n}\n","import jsep from \"jsep\"\nimport { VMProgram, VMHandler, VMCommand, VMRole } from \"./ir\"\nimport RoleManager from \"../jdom/rolemanager\"\nimport {\n    VMEnvironment,\n    VMException,\n    VMExceptionCode,\n    GLOBAL_CHANGE,\n    REGISTER_CHANGE,\n    EXTERNAL_REQUEST,\n    ExternalRequest,\n} from \"./environment\"\nimport { VMExprEvaluator, unparse, CallEvaluator } from \"./expr\"\nimport JDEventSource from \"../jdom/eventsource\"\nimport {\n    CHANGE,\n    ROLE_BOUND,\n    ROLE_UNBOUND,\n    SERVICE_PROVIDER_REMOVED,\n    TRACE,\n} from \"../jdom/constants\"\nimport { checkProgram, compileProgram } from \"./compile\"\nimport {\n    VM_GLOBAL_CHANGE,\n    VM_COMMAND_FAILED,\n    VM_WATCH_CHANGE,\n    VM_BREAKPOINT,\n    VM_INTERNAL_ERROR,\n    VM_LOG_ENTRY,\n    VM_ROLE_MISSING,\n} from \"./events\"\nimport { Mutex, atomic } from \"./utils\"\nimport { assert, SMap } from \"../jdom/utils\"\nimport { JDClient } from \"../jdom/client\"\nimport JDServerServiceProvider from \"../jdom/servers/serverserviceprovider\"\nimport JDDevice from \"../jdom/device\"\nimport JDServiceProvider from \"../jdom/servers/serviceprovider\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type VMTraceContext = any\n\nenum VMInternalStatus {\n    Ready = \"ready\", // the pc is at this instruction, but pre-condition not met\n    Enabled = \"enabled\", // the instruction pre-conditions are met (is this needed?)\n    Running = \"running\", // the instruction has started running (may need retries)\n    Sleeping = \"sleep\", // waiting to be woken by timer\n    Completed = \"completed\", // the instruction completed successfully\n    Stopped = \"stopped\", // halt instruction encountered, handler stopped\n}\n\nconst VM_WAKE_SLEEPER = \"vmWakeSleeper\"\n\nexport interface VMEnvironmentInterface {\n    writeRegisterAsync: (\n        e: jsep.MemberExpression | string,\n        v: atomic[]\n    ) => Promise<void>\n    sendCommandAsync: (\n        command: jsep.MemberExpression,\n        values: atomic[]\n    ) => Promise<void>\n    lookupAsync: (\n        e: jsep.MemberExpression | string,\n        reportUpdate: boolean\n    ) => Promise<atomic>\n    writeGlobal: (e: jsep.MemberExpression | string, v: atomic) => boolean\n    hasRequest: (e: jsep.MemberExpression | string) => ExternalRequest\n    roleTransition: (role: string, direction: string) => boolean\n    roleBound: (role: string) => boolean\n}\n\nclass VMJumpException extends Error {\n    constructor(public label: string) {\n        super()\n    }\n}\n\nclass VMTimerException extends Error {\n    constructor(public ms: number) {\n        super()\n    }\n}\n\nclass VMRequestException extends Error {\n    constructor(public request: ExternalRequest) {\n        super()\n    }\n}\n\nclass VMCommandEvaluator {\n    private _regSaved: number = undefined\n    private _changeSaved: number = undefined\n    private _started = false\n    constructor(\n        public parent: VMCommandRunner,\n        private readonly env: VMEnvironmentInterface,\n        private readonly cmd: VMCommand\n    ) {}\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { command: this.cmd.command.type, ...context })\n    }\n\n    private get inst() {\n        return (this.cmd.command.callee as jsep.Identifier)?.name\n    }\n\n    private callEval(): CallEvaluator {\n        return (caller: jsep.CallExpression, ee: VMExprEvaluator) => {\n            const callee = <jsep.MemberExpression>caller.callee\n            const namespace = (callee.object as jsep.Identifier).name\n            const funName = (callee.property as jsep.Identifier).name\n            const args = caller.arguments\n            if (namespace === \"$fun\") {\n                switch (funName) {\n                    case \"roleBoundExpression\": {\n                        const role = (args[0] as jsep.Identifier).name\n                        return this.env.roleBound(role)\n                    }\n                    default: // ERROR\n                }\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `unknown function ${namespace}.${funName}`\n                )\n            } else\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `unknown namespace ${namespace}`\n                )\n        }\n    }\n\n    private newEval() {\n        return new VMExprEvaluator(\n            async (e, reportUpdate) =>\n                await this.env.lookupAsync(e, reportUpdate),\n            this.callEval()\n        )\n    }\n\n    private async evalExpressionAsync(\n        e: jsep.Expression,\n        reportUpdate = false\n    ) {\n        const expr = this.newEval()\n        return await expr.evalAsync(e, reportUpdate)\n    }\n\n    private async checkExpressionAsync(\n        e: jsep.Expression,\n        reportUpdate = false\n    ) {\n        return (await this.evalExpressionAsync(e, reportUpdate)) ? true : false\n    }\n\n    private async startAsync() {\n        if (\n            this.cmd.command.callee.type !== \"MemberExpression\" &&\n            (this.inst === \"awaitRegister\" || this.inst === \"awaitChange\")\n        ) {\n            // need to capture register value for awaitChange/awaitRegister\n            const args = this.cmd.command.arguments\n            this._regSaved = await this.evalExpressionAsync(args[0], true)\n            if (this.inst === \"awaitChange\")\n                this._changeSaved = await this.evalExpressionAsync(args[1])\n            return true\n        }\n        return false\n    }\n\n    public async evaluate(): Promise<VMInternalStatus> {\n        if (!this._started) {\n            const neededStart = await this.startAsync()\n            this._started = true\n            if (neededStart) return VMInternalStatus.Running\n        }\n        const args = this.cmd.command.arguments\n        if (this.cmd.command.callee.type === \"MemberExpression\") {\n            // interpret as a service command (role.comand)\n            const expr = this.newEval()\n            const values: atomic[] = []\n            for (const a of this.cmd.command.arguments) {\n                values.push(await expr.evalAsync(a))\n            }\n            await this.env.sendCommandAsync(\n                this.cmd.command.callee as jsep.MemberExpression,\n                values\n            )\n            return VMInternalStatus.Completed\n        }\n        switch (this.inst) {\n            case \"branchOnCondition\": {\n                const expr = await this.checkExpressionAsync(args[0])\n                if (expr) {\n                    throw new VMJumpException((args[1] as jsep.Identifier).name)\n                }\n                return VMInternalStatus.Completed\n            }\n            case \"jump\": {\n                throw new VMJumpException((args[0] as jsep.Identifier).name)\n            }\n            case \"label\": {\n                return VMInternalStatus.Completed\n            }\n            case \"awaitEvent\": {\n                const event = args[0] as jsep.MemberExpression\n                const request = this.env.hasRequest(event)\n                if (request) {\n                    if (await this.checkExpressionAsync(args[1])) {\n                        throw new VMRequestException(request)\n                    }\n                }\n                return VMInternalStatus.Running\n            }\n            case \"roleBound\": {\n                const role = (args[0] as jsep.Identifier).name\n                const event = (args[1] as jsep.Identifier).name\n                return this.env.roleTransition(role, event)\n                    ? VMInternalStatus.Completed\n                    : VMInternalStatus.Running\n            }\n            case \"awaitCondition\": {\n                return (await this.checkExpressionAsync(args[0]))\n                    ? VMInternalStatus.Completed\n                    : VMInternalStatus.Running\n            }\n            case \"awaitChange\":\n            case \"awaitRegister\": {\n                const regValue = await this.evalExpressionAsync(args[0])\n                if (\n                    (this.inst === \"awaitRegister\" &&\n                        regValue !== this._regSaved) ||\n                    (this.inst === \"awaitChange\" &&\n                        Math.abs(regValue - this._regSaved) >=\n                            Math.abs(this._changeSaved))\n                ) {\n                    return VMInternalStatus.Completed\n                }\n                return VMInternalStatus.Running\n            }\n            case \"writeRegister\":\n            case \"writeLocal\": {\n                const expr = this.newEval()\n                const values: atomic[] = []\n                for (const a of this.cmd.command.arguments.slice(1)) {\n                    values.push(await expr.evalAsync(a))\n                }\n                this.trace(\"eval-end\", { expr: unparse(args[1]) })\n                const reg = args[0] as jsep.MemberExpression\n                if (this.inst === \"writeRegister\") {\n                    await this.env.writeRegisterAsync(reg, values)\n                    this.trace(\"write-after-wait\", {\n                        reg: unparse(reg),\n                        expr: values[0],\n                    })\n                } else this.env.writeGlobal(reg, values[0])\n                return VMInternalStatus.Completed\n            }\n            case \"watch\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                this.parent.watch(this.cmd?.sourceId, ev)\n                return VMInternalStatus.Completed\n            }\n            case \"log\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                const evString = ev + \"\"\n                this.parent.writeLog(this.cmd?.sourceId, evString)\n                return VMInternalStatus.Completed\n            }\n            case \"halt\": {\n                return VMInternalStatus.Stopped\n            }\n            case \"nop\": {\n                return VMInternalStatus.Completed\n            }\n            case \"wait\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                throw new VMTimerException(ev * 1000)\n            }\n            default:\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `Unknown instruction ${this.inst}`\n                )\n        }\n    }\n}\n\nclass VMCommandRunner {\n    private _eval: VMCommandEvaluator\n    private _status: VMInternalStatus = VMInternalStatus.Running\n    constructor(\n        public readonly parent: VMHandlerRunner,\n        private handlerId: number,\n        env: VMEnvironment,\n        public cmd: VMCommand\n    ) {\n        this._eval = new VMCommandEvaluator(this, env, cmd)\n    }\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { handler: this.handlerId, ...context })\n    }\n\n    watch(id: string, val: any) {\n        this.parent.watch(id, val)\n    }\n\n    writeLog(id: string, val: any) {\n        this.parent.writeLog(id, val)\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: VMInternalStatus) {\n        this._status = s\n    }\n\n    async stepAsync() {\n        if (this.status === VMInternalStatus.Running) {\n            this.trace(unparse(this.cmd.command))\n            this.status = await this._eval.evaluate()\n        }\n    }\n}\n\nclass VMHandlerRunner extends JDEventSource {\n    private _commandIndex: number = undefined\n    private _currentCommand: VMCommandRunner = undefined\n    private stopped = false\n    private _labelToIndex: SMap<number> = {}\n\n    constructor(\n        public readonly parent: VMProgramRunner,\n        public readonly id: number,\n        public readonly env: VMEnvironment,\n        public readonly handler: VMHandler\n    ) {\n        super()\n        // find the label commands (targets of jumps)\n        this.handler.commands.forEach((c, index) => {\n            const cmd = c as VMCommand\n            const id = cmd.command?.callee as jsep.Identifier\n            if (id?.name === \"label\") {\n                const label = cmd.command.arguments[0] as jsep.Identifier\n                this._labelToIndex[label.name] = index\n            }\n        })\n        this.reset()\n    }\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { id: this.id, ...context })\n    }\n\n    watch(id: string, val: any) {\n        this.parent.watch(id, val)\n    }\n\n    writeLog(id: string, val: any) {\n        this.parent.writeLog(id, val)\n    }\n\n    get status() {\n        return this.stopped\n            ? VMInternalStatus.Stopped\n            : this._commandIndex === undefined\n            ? VMInternalStatus.Ready\n            : this._currentCommand.status === VMInternalStatus.Completed &&\n              this._commandIndex < this.handler.commands.length - 1\n            ? VMInternalStatus.Running\n            : this._currentCommand.status\n    }\n\n    get command() {\n        return this._currentCommand\n    }\n\n    get atTop() {\n        return (\n            this.status === VMInternalStatus.Running && this._commandIndex === 0\n        )\n    }\n\n    gotoTop() {\n        if (\n            this.status === VMInternalStatus.Ready &&\n            this.handler.commands.length\n        )\n            this.commandIndex = 0\n    }\n\n    reset() {\n        this.commandIndex = undefined\n        this.stopped = false\n    }\n\n    wake() {\n        if (this._currentCommand) {\n            this._currentCommand.status = VMInternalStatus.Completed\n            this.next()\n        }\n    }\n\n    // run-to-completion semantics\n    // returns command if breakpoint encountered when not single stepping\n    async runToCompletionAsync(singleStep = false) {\n        if (this.stopped || !this.handler.commands.length) return undefined\n        if (this.commandIndex === undefined) {\n            this.commandIndex = 0\n        }\n        if ((await this.singleStepCheckBreakAsync(singleStep)) && !singleStep)\n            return this._currentCommand\n        while (this.next()) {\n            if (singleStep || (await this.singleStepCheckBreakAsync()))\n                return this._currentCommand\n        }\n        return undefined\n    }\n\n    private next() {\n        if (\n            this._currentCommand.status === VMInternalStatus.Completed &&\n            this.commandIndex < this.handler.commands.length - 1\n        ) {\n            this.commandIndex++\n            return true\n        }\n        return false\n    }\n\n    private getCommand() {\n        const cmd = this.handler.commands[this._commandIndex]\n        if (cmd.type === \"ite\") {\n            throw new VMException(\n                VMExceptionCode.InternalError,\n                \"ite not compiled away\"\n            )\n        }\n        return cmd as VMCommand\n    }\n\n    private async singleStepCheckBreakAsync(singleStep = false) {\n        this.trace(\"step begin\")\n        const sid = this._currentCommand.cmd?.sourceId\n        if (!singleStep && (await this.parent.breakpointOnAsync(sid))) {\n            return true\n        }\n        await this.singleStepAsync()\n        this.trace(\"step end\")\n        return false\n    }\n\n    private async singleStepAsync() {\n        try {\n            await this._currentCommand.stepAsync()\n        } catch (e) {\n            if (e instanceof VMJumpException) {\n                const { label } = e as VMJumpException\n                const index = this._labelToIndex[label]\n                this.commandIndex = index\n                this._currentCommand.status = VMInternalStatus.Completed\n            } else if (e instanceof VMTimerException) {\n                const { ms } = e as VMTimerException\n                this._currentCommand.status = VMInternalStatus.Sleeping\n                await this.parent.sleepAsync(this, ms)\n            } else if (e instanceof VMRequestException) {\n                const { request } = e as VMRequestException\n                this._currentCommand.status = VMInternalStatus.Completed\n                this.parent.handlerWokeOnRequest(this, request)\n            } else {\n                this.emit(VM_COMMAND_FAILED, this._currentCommand.cmd.sourceId)\n                throw e\n            }\n        }\n        if (this._currentCommand.status === VMInternalStatus.Stopped)\n            this.stopped = true\n    }\n\n    private set commandIndex(index: number) {\n        if (index === undefined) {\n            this._commandIndex = undefined\n            this._currentCommand = undefined\n        } else if (index !== this._commandIndex) {\n            this._commandIndex = index\n            this._currentCommand = new VMCommandRunner(\n                this,\n                this.id,\n                this.env,\n                this.getCommand()\n            )\n        }\n    }\n\n    private get commandIndex() {\n        return this._commandIndex\n    }\n}\n\nexport type WatchValueType = boolean | string | number\n\ninterface SleepingHandler {\n    ms: number\n    handlerRunner: VMHandlerRunner\n    handler?: VMHandler\n    id: NodeJS.Timeout\n}\n\nfunction isEveryHandler(h: VMHandler) {\n    assert(!!h)\n    if (h.commands.length) {\n        const cmd = (h.commands[0] as VMCommand).command\n            .callee as jsep.Identifier\n        return cmd.name === \"wait\"\n    }\n    return false\n}\n\nfunction isRegisterChangeHandler(h: VMHandler) {\n    assert(!!h)\n    if (h.commands.length) {\n        const cmd = (h.commands[0] as VMCommand).command\n            .callee as jsep.Identifier\n        return cmd.name === \"awaitChange\" || cmd.name === \"awaitRegister\"\n    }\n    return false\n}\n\nexport enum VMStatus {\n    Stopped = \"stopped\",\n    Running = \"running\",\n    Paused = \"paused\",\n}\n\nconst MAX_LOG = 100\n\nexport class VMProgramRunner extends JDClient {\n    // program, environment\n    private _handlerRunners: VMHandlerRunner[] = []\n    private _env: VMEnvironment\n    private _roles: VMRole[] = []\n    private _serverRoles: VMRole[] = []\n    // running\n    private _status: VMStatus\n    private _waitQueue: VMHandlerRunner[] = []\n    private _everyQueue: VMHandlerRunner[] = []\n    private _runQueue: VMHandlerRunner[] = []\n    private _waitRunMutex: Mutex\n    private _sleepQueue: SleepingHandler[] = []\n    private _sleepMutex: Mutex\n    // debugging\n    private _watch: SMap<any> = {}\n    private _log: { text: string; count: number }[] = []\n    private _breaks: SMap<boolean> = {}\n    private _breaksMutex: Mutex\n    // providing new services\n    private _provider: JDServerServiceProvider\n    private _device: JDDevice\n    private _onCompletionOfExternalRequest: {\n        handler: VMHandlerRunner\n        request: ExternalRequest\n    }[] = []\n\n    constructor(\n        readonly roleManager: RoleManager,\n        readonly program: VMProgram\n    ) {\n        super()\n\n        const compiled = compileProgram(program)\n        const { registers, events, errors } = checkProgram(compiled)\n        this._roles = compiled.roles\n        this._serverRoles = compiled.serverRoles\n        if (errors?.length) console.debug(\"ERRORS\", errors)\n\n        // data structures for running program\n        this._status = VMStatus.Stopped\n        this._env = new VMEnvironment(registers, events, compiled.serverRoles)\n        this._handlerRunners = compiled.handlers.map(\n            (h, index) => new VMHandlerRunner(this, index, this._env, h)\n        )\n\n        // TODO: can't add multiple handlers until we have deduplicate CHANGE on Event\n        /*\n        const len = this._handlerRunners.length\n        compiled.handlers.forEach((h, index) =>\n            this._handlerRunners.push(\n                new VMHandlerRunner(this, len + index, this._env, h)\n            )\n        )*/\n\n        this._waitRunMutex = new Mutex()\n        this._breaksMutex = new Mutex()\n        this._sleepMutex = new Mutex()\n        // TODO: only try to wake handlers that are waiting on change to reg or event\n        this.mount(\n            this._env.subscribe(REGISTER_CHANGE, () => {\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.roleManager.bus.subscribe(\n                SERVICE_PROVIDER_REMOVED,\n                (provider: JDServiceProvider) => {\n                    if (provider === this._provider) {\n                        this._provider = undefined\n                    }\n                }\n            )\n        )\n        // control requests (client:{event}, server:{set, get, cmd})\n        this.mount(\n            this._env.subscribe(\n                EXTERNAL_REQUEST,\n                (request: ExternalRequest) => {\n                    switch (request.kind) {\n                        case \"get\": {\n                            // TODO: in this case, if there is a handler\n                            // waiting on this Request then the function\n                            // handlerWokeOnRequest will be invoked. If\n                            // it is not then we should just return the\n                            // current value of register\n                            break\n                        }\n                        // these handler invocations are \"fire and forget\"\n                        case \"set\":\n                        case \"cmd\":\n                        case \"event\":\n                            break\n                    }\n                    this.waitingToRunning()\n                }\n            )\n        )\n        this.mount(\n            this._env.subscribe(GLOBAL_CHANGE, name => {\n                this.emit(VM_GLOBAL_CHANGE, name)\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.subscribe(\n                VM_WAKE_SLEEPER,\n                async (h: VMHandlerRunner | VMHandler) => {\n                    await this.wakeSleeper(h)\n                }\n            )\n        )\n        this.initializeRoleManagement()\n    }\n\n    public handlerWokeOnRequest(\n        handler: VMHandlerRunner,\n        request: ExternalRequest\n    ) {\n        if (request.kind === \"get\") {\n            this._onCompletionOfExternalRequest.push({ handler, request })\n        }\n    }\n\n    // control of VM\n    get status() {\n        return this._status\n    }\n\n    get logData() {\n        return this._log.slice(0)\n    }\n\n    globals(): { name: string; value: atomic }[] {\n        const g = this._env.globals()\n        return Object.keys(g).map(k => {\n            return { name: k, value: g[k].value }\n        })\n    }\n\n    private setStatus(s: VMStatus) {\n        if (s !== this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    // debugging\n    trace(message: string, context: VMTraceContext = {}) {\n        this.emit(TRACE, { message, context })\n    }\n\n    watch(sourceId: string, value: WatchValueType) {\n        this._watch[sourceId] = value\n        this.emit(VM_WATCH_CHANGE, sourceId)\n    }\n\n    writeLog(sourceId: string, value: WatchValueType) {\n        const s = value + \"\"\n        const last = this._log[this._log.length - 1]\n        if (last?.text === s) last.count++\n        else this._log.push({ text: value + \"\", count: 1 })\n        while (this._log.length > MAX_LOG) this._log.shift()\n        this.emit(VM_LOG_ENTRY, sourceId)\n    }\n\n    lookupWatch(sourceId: string) {\n        return this._watch[sourceId]\n    }\n\n    async setBreakpointsAsync(breaks: string[]) {\n        await this._breaksMutex.acquire(async () => {\n            this._breaks = {}\n            breaks.forEach(b => {\n                this._breaks[b] = true\n            })\n        })\n    }\n\n    async clearBreakpointsAsync() {\n        await this._breaksMutex.acquire(async () => {\n            this._breaks = {}\n        })\n    }\n\n    async breakpointOnAsync(id: string) {\n        let ret = false\n        await this._breaksMutex.acquire(async () => {\n            ret = !!this._breaks?.[id]\n        })\n        return ret\n    }\n\n    // utility called by handlerRunner\n    async sleepAsync(\n        h: VMHandlerRunner,\n        ms: number,\n        handler: VMHandler = undefined\n    ) {\n        assert(h.status === VMInternalStatus.Sleeping)\n        await this._sleepMutex.acquire(async () => {\n            const id = setTimeout(() => {\n                this.emit(VM_WAKE_SLEEPER, h ? h : handler)\n            }, ms)\n            this._sleepQueue.push({ ms, handlerRunner: h, id, handler })\n        })\n    }\n\n    async startAsync() {\n        if (this.status !== VMStatus.Stopped) return // already running\n        this.trace(\"start\")\n        try {\n            await this._waitRunMutex.acquire(async () => {\n                await this.device()\n                this._waitQueue = this._handlerRunners.slice(0)\n                this._waitQueue.forEach(h => h.reset())\n                this._runQueue = []\n                this._everyQueue = []\n                this._onCompletionOfExternalRequest = []\n                this._env.clearExternalStimulii()\n                this._env.initRoles()\n                this.stopSleepers()\n                // make sure to have another handler for every\n                /*\n                for (const h of this._waitQueue) {\n                    if (isEveryHandler(h.handler)) {\n                        const dup = new VMHandlerRunner(\n                            this,\n                            undefined,\n                            this._env,\n                            h.handler\n                        )\n                        dup.reset()\n                        this._everyQueue.push(dup)\n                    }\n                }*/\n            })\n            await this.clearBreakpointsAsync()\n            this.setStatus(VMStatus.Running)\n            await this.waitingToRunning()\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n    }\n\n    async device() {\n        if (!this._provider) {\n            await this.startProvider()\n        }\n        return this._device\n    }\n\n    cancel() {\n        if (this.status === VMStatus.Stopped) return // nothing to cancel\n        this.setStatus(VMStatus.Stopped)\n        this.trace(\"cancelled\")\n    }\n\n    async resumeAsync() {\n        if (this.status !== VMStatus.Paused) return\n        this.trace(\"resume\")\n        this.setStatus(VMStatus.Running)\n        await this.runAsync()\n    }\n\n    private async getCurrentRunner() {\n        return await this._waitRunMutex.acquire(async () => {\n            if (this._runQueue.length) return this._runQueue[0]\n            return undefined\n        })\n    }\n\n    async stepAsync() {\n        if (this.status !== VMStatus.Paused) return\n        this.trace(\"step\")\n        const h = await this.getCurrentRunner()\n        if (h) {\n            await this.runHandlerAsync(h, true)\n            await this.postProcessHandler(h)\n            const newHead = await this.getCurrentRunner()\n            if (newHead && newHead !== h) {\n                this.emitBreakpoint(newHead)\n            }\n        }\n    }\n\n    private _in_run = false\n    private async runAsync() {\n        if (this.status === VMStatus.Stopped) return\n        if (this._in_run) return\n        this.trace(\"run\")\n        this._in_run = true\n        try {\n            let h: VMHandlerRunner = undefined\n            while (\n                this.status === VMStatus.Running &&\n                (h = await this.getCurrentRunner())\n            ) {\n                assert(!h.atTop)\n                await this.runHandlerAsync(h)\n                await this.postProcessHandler(h)\n            }\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n        this._in_run = false\n        this.trace(\"run end\")\n    }\n\n    private emitBreakpoint(h: VMHandlerRunner) {\n        this.emit(\n            VM_BREAKPOINT,\n            h,\n            h.status === VMInternalStatus.Completed\n                ? \"\"\n                : h.command.cmd?.sourceId\n        )\n    }\n\n    private async runHandlerAsync(h: VMHandlerRunner, oneStep = false) {\n        try {\n            const brkCommand = await h.runToCompletionAsync(oneStep)\n            if ((brkCommand && !oneStep) || this.status === VMStatus.Paused) {\n                this.setStatus(VMStatus.Paused)\n                this.emitBreakpoint(h)\n            }\n            if (h.status === VMInternalStatus.Completed) {\n                h.reset()\n            }\n        } catch (e) {\n            if (e instanceof VMException) {\n                const ex = e as VMException\n                if (ex.code === VMExceptionCode.RoleNoService)\n                    this.emit(VM_ROLE_MISSING, (e as VMException).data)\n            } else {\n                console.debug(e)\n                this.emit(VM_INTERNAL_ERROR, e)\n            }\n            // on handler error, reset the handler\n            h.reset()\n        }\n    }\n\n    private async postProcessHandler(h: VMHandlerRunner) {\n        if (\n            h.status === VMInternalStatus.Ready ||\n            h.status === VMInternalStatus.Sleeping ||\n            h.status === VMInternalStatus.Stopped\n        ) {\n            let done: VMHandlerRunner = undefined\n            await this._waitRunMutex.acquire(async () => {\n                assert(!!this._runQueue.length)\n                assert(h === this._runQueue[0])\n                done = this._runQueue.shift()\n                const moveToWait = h.status === VMInternalStatus.Ready\n                if (moveToWait && !isEveryHandler(h.handler)) {\n                    this._waitQueue.push(done)\n                    done = undefined\n                }\n            })\n            if (\n                (done &&\n                    h.status === VMInternalStatus.Ready &&\n                    isEveryHandler(h.handler)) ||\n                isRegisterChangeHandler(h.handler)\n            ) {\n                if (this.status === VMStatus.Running)\n                    await this.runHandlerAsync(h)\n                else if (this.status === VMStatus.Paused) {\n                    await this._waitRunMutex.acquire(async () => {\n                        this._runQueue.unshift(h)\n                        // this.emitBreakpoint(h)\n                    })\n                }\n            }\n        } else if (h.status === VMInternalStatus.Completed) {\n            const q = this._onCompletionOfExternalRequest\n            const index = q.findIndex(p => p.handler === h)\n            if (index > -1) {\n                const [del] = q.splice(index, 1)\n                await this._env.completeRequest(del.request)\n            }\n        }\n    }\n\n    // call this whenever some event/change arises\n    private async waitingToRunning() {\n        if (this.status !== VMStatus.Stopped) {\n            this.trace(\"waiting to running - try\")\n            await this._waitRunMutex.acquire(async () => {\n                if (this.status === VMStatus.Paused && this._runQueue.length)\n                    return\n                this.trace(\"waiting to running - start\")\n                const handlersStarted: VMHandler[] = []\n                const newRunners: VMHandlerRunner[] = []\n                const sleepingRunners: VMHandlerRunner[] = []\n                for (const h of this._waitQueue) {\n                    await this.runHandlerAsync(h, true)\n                    if (h.status === VMInternalStatus.Sleeping) {\n                        sleepingRunners.push(h)\n                    } else if (\n                        !h.atTop &&\n                        handlersStarted.findIndex(hs => hs === h.handler) === -1\n                    ) {\n                        newRunners.push(h)\n                        handlersStarted.push(h.handler)\n                    }\n                }\n                newRunners.forEach(h => {\n                    this._runQueue.push(h)\n                    const index = this._waitQueue.indexOf(h)\n                    if (index >= 0) this._waitQueue.splice(index, 1)\n                })\n                sleepingRunners.forEach(h => {\n                    const index = this._waitQueue.indexOf(h)\n                    if (index >= 0) this._waitQueue.splice(index, 1)\n                })\n            })\n            await this.runAsync()\n            this._env.clearExternalStimulii()\n        }\n    }\n\n    private async stopSleepers() {\n        await this._sleepMutex.acquire(async () => {\n            for (const s of this._sleepQueue) {\n                clearTimeout(s.id)\n            }\n            this._sleepQueue = []\n        })\n    }\n\n    private async wakeSleeper(h: VMHandlerRunner | VMHandler) {\n        try {\n            // let handlerMs: number = undefined\n            let handlerRunner: VMHandlerRunner = undefined\n            // let handler: VMHandler = undefined\n            await this._sleepMutex.acquire(async () => {\n                const index = this._sleepQueue.findIndex(\n                    p => p?.handlerRunner === h // || p?.handler === h\n                )\n                assert(index >= 0)\n                if (index >= 0) {\n                    const p = this._sleepQueue[index]\n                    //  handlerMs = p.ms\n                    handlerRunner = p.handlerRunner\n                    // handler = p?.handler\n                    this._sleepQueue.splice(index, 1)\n                    // clearTimeout(p.id)\n                }\n            })\n            if (this.status === VMStatus.Stopped) return\n            // this logic is to deal with starting a handler rather than a runner\n            await this._waitRunMutex.acquire(async () => {\n                /*\n                if (!handlerRunner && isEveryHandler(handler)) {\n                    const index = this._everyQueue.findIndex(\n                        h => h.handler === handler\n                    )\n                    if (index >= 0) {\n                        handlerRunner = this._everyQueue[index]\n                        this._everyQueue.splice(index, 1)\n                        handlerRunner.gotoTop()\n                    }\n                }*/\n                if (handlerRunner) {\n                    // transition to the run queue\n                    handlerRunner.wake()\n                    this._runQueue.push(handlerRunner)\n                }\n            })\n            /*\n            const theHandler = handlerRunner?.handler || handler\n            if (isEveryHandler(theHandler)) {\n                // setup next\n                this.sleepAsync(undefined, handlerMs, theHandler)\n            }*/\n            if (handlerRunner) {\n                if (this.status === VMStatus.Running) {\n                    this.trace(\"wake sleeper run\")\n                    this.runAsync()\n                } else if (this.status === VMStatus.Paused) {\n                    this.emitBreakpoint(await this.getCurrentRunner())\n                }\n            }\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n    }\n\n    private initializeRoleManagement() {\n        // adding a (role,service) binding\n        const addRoleService = (role: string) => {\n            const service = this.roleManager.service(role)\n            if (service) {\n                this._env.serviceChanged(role, service)\n            }\n        }\n        // initialize client\n        this._roles.forEach(r => {\n            addRoleService(r.role)\n        })\n        this.mount(\n            this.roleManager.subscribe(ROLE_BOUND, async (role: string) => {\n                if (this._serverRoles.find(r => r.role === role)) return\n                addRoleService(role)\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.roleManager.subscribe(ROLE_UNBOUND, (role: string) => {\n                if (this._serverRoles.find(r => r.role === role)) return\n                this._env.serviceChanged(role, undefined)\n                this.waitingToRunning()\n            })\n        )\n    }\n\n    // spin up provider\n    private async startProvider() {\n        const servers = this._env.servers()\n        if (servers.length) {\n            this._provider = new JDServerServiceProvider(\n                \"vm\",\n                servers.map(s => s.server)\n                // if we create a deviceId, then trouble ensues\n                // as a second device gets spun up later\n                //{\n                //    deviceId: \"VMServiceProvider\",\n                //}\n            )\n            this._device = this.roleManager.bus.addServiceProvider(\n                this._provider\n            )\n            servers.forEach((s, index) => {\n                this.roleManager.updateRole(\n                    this._serverRoles[index].role,\n                    s.serviceClass,\n                    this._device.deviceId\n                )\n            })\n            // make sure it gets known (HACK)\n            for (const s of servers) {\n                await s.server.statusCode.sendGetAsync()\n            }\n        }\n    }\n\n    public unmount() {\n        console.log(\"VMProgram (unmount)\")\n        super.unmount()\n        if (this._provider) {\n            this.roleManager.bus.removeServiceProvider(this._provider)\n        }\n    }\n}\n","import { useContext, useEffect, useState } from \"react\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport {\n    VMProgramRunner,\n    VMTraceContext,\n} from \"../../../jacdac-ts/src/vm/runner\"\nimport AppContext from \"../AppContext\"\nimport { ERROR, TRACE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport RoleManager from \"../../../jacdac-ts/src/jdom/rolemanager\"\n\nexport default function useVMRunner(\n    roleManager: RoleManager,\n    program: VMProgram,\n    autoRun: boolean\n) {\n    const { setError } = useContext(AppContext)\n    const [runner, setRunner] = useState<VMProgramRunner>()\n    const [_autoStart, _setAutoStart] = useState<boolean>(!!autoRun)\n\n    const run = async () => {\n        _setAutoStart(!!autoRun)\n        await runner.startAsync()\n    }\n    const cancel = async () => {\n        _setAutoStart(false)\n        runner.cancel()\n    }\n\n    // auto start\n    useEffect(() => {\n        if (_autoStart && runner) runner.startAsync()\n        return () => runner?.cancel()\n    }, [runner, _autoStart])\n\n    // create runner\n    useEffect(() => {\n        try {\n            const newTestRunner =\n                program && new VMProgramRunner(roleManager, program)\n            setRunner(newTestRunner)\n\n            return () => newTestRunner?.unmount()\n        } catch (e) {\n            console.debug(e)\n            setRunner(undefined)\n        }\n    }, [roleManager, program])\n\n    // errors\n    useEffect(() => runner?.subscribe(ERROR, e => setError(e)), [runner])\n    // traces\n    const handleTrace = (value: {\n        message: string\n        context: VMTraceContext\n    }) => {\n        const { message, context } = value\n        if (Flags.diagnostics) console.debug(`vm> ${message}`, context)\n    }\n    useEffect(\n        () =>\n            runner?.subscribe<{ message: string; context: VMTraceContext }>(\n                TRACE,\n                handleTrace\n            ),\n        [runner]\n    )\n\n    return { runner, run, cancel }\n}\n","import { Grid, Typography } from \"@material-ui/core\"\nimport React from \"react\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport CodeBlock from \"../CodeBlock\"\n\nexport default function VMDiagnostics(props: { program: VMProgram }) {\n    const { program } = props\n    return (\n        <Grid item xs={12}>\n            <Typography variant=\"subtitle1\">VM</Typography>\n            <CodeBlock\n                className=\"json\"\n                downloadName={\"test.json.vm\"}\n                downloadText={JSON.stringify(program, null, 2)}\n            >\n                {JSON.stringify(program, null, 2)}\n            </CodeBlock>\n        </Grid>\n    )\n}\n","import React, { useContext } from \"react\"\nimport BlockContext from \"./BlockContext\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport DeviceAvatar from \"../devices/DeviceAvatar\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    addServiceProvider,\n    serviceProviderDefinitionFromServiceClass,\n} from \"../../../jacdac-ts/src/servers/servers\"\n\nimport { BlockSvg, FieldVariable } from \"blockly\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport CancelIcon from \"@material-ui/icons/Cancel\"\nimport { Chip, Tooltip } from \"@material-ui/core\"\nimport { TWIN_BLOCK } from \"./toolbox\"\n\nexport default function RoleChip(props: {\n    role: string\n    serviceClass: number\n    service: JDService\n    preferredDeviceId: string\n}) {\n    const { workspace } = useContext(BlockContext)\n    const { role, service, serviceClass, preferredDeviceId } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const serviceServer = useServiceServer(service)\n    const handleRoleClick = () => {\n        // spin off simulator\n        if (!service && !preferredDeviceId ) {\n            const specification =\n                serviceSpecificationFromClassIdentifier(serviceClass)\n            if (specification) {\n                addServiceProvider(\n                    bus,\n                    serviceProviderDefinitionFromServiceClass(\n                        specification.classIdentifier\n                    )\n                )\n            }\n        }\n        // add twin block\n        if (workspace) {\n            // try to find existing twin block\n            let twinBlock = workspace\n                .getTopBlocks(false)\n                .find(\n                    b =>\n                        b.type === TWIN_BLOCK &&\n                        (\n                            b.inputList[0].fieldRow.find(\n                                f => f.name === \"role\"\n                            ) as FieldVariable\n                        )?.getVariable()?.name === role\n                ) as BlockSvg\n            if (!twinBlock) {\n                twinBlock = workspace.newBlock(TWIN_BLOCK) as BlockSvg\n                let variable = workspace.getVariable(\n                    role,\n                    `${serviceClass}:client`\n                )\n                if (!variable)\n                    variable = workspace.getVariable(\n                        role,\n                        `${serviceClass}:server`\n                )\n                console.log(`new twin`, { twinBlock, variable })\n                const field = twinBlock.inputList[0].fieldRow.find(\n                    f => f.name === \"role\"\n                ) as FieldVariable\n                field.setValue(variable.getId())\n                const m = workspace.getMetrics()\n                twinBlock.moveBy(m.viewWidth / 2, m.viewHeight / 3)\n                twinBlock.initSvg()\n                twinBlock.render(false)\n            }\n            workspace.centerOnBlock(twinBlock.id)\n        }\n    }\n\n    const handleDelete = () => bus.removeServiceProvider(serviceServer.device)\n    return (\n        <Chip\n            label={role}\n            variant={service ? \"default\" : \"outlined\"}\n            avatar={service && <DeviceAvatar device={service.device} />}\n            onClick={handleRoleClick}\n            onDelete={serviceServer ? handleDelete : undefined}\n            deleteIcon={\n                <Tooltip title=\"stop simulator\">\n                    <CancelIcon />\n                </Tooltip>\n            }\n        />\n    )\n}\n","import React, { useContext } from \"react\"\nimport useChange from \"../../jacdac/useChange\"\nimport BlockContext from \"./BlockContext\"\nimport { Grid } from \"@material-ui/core\"\nimport RoleChip from \"./RoleChip\"\n\nexport default function BlockClientRoles() {\n    const { roleManager } = useContext(BlockContext)\n    const roles = useChange(roleManager, _ => _?.roles())\n\n    return (\n        <>\n            {roles?.map(({ role, service, serviceClass, preferredDeviceId }) => (\n                <Grid item key={role}>\n                    <RoleChip\n                        role={role}\n                        service={service}\n                        serviceClass={serviceClass}\n                        preferredDeviceId={preferredDeviceId}\n                    />\n                </Grid>\n            ))}\n        </>\n    )\n}\n","import React, { useContext, useEffect, useMemo, useState } from \"react\"\nimport useChange from \"../../jacdac/useChange\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport { VMProgramRunner, VMStatus } from \"../../../jacdac-ts/src/vm/runner\"\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\"\nimport StopIcon from \"@material-ui/icons/Stop\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport { Chip, Grid } from \"@material-ui/core\"\nimport PauseIcon from \"@material-ui/icons/Pause\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { VM_BREAKPOINT } from \"../../../jacdac-ts/src/vm/events\"\nimport { VMHandler, VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport PlayForWorkIcon from \"@material-ui/icons/PlayForWork\"\nimport useMounted from \"../hooks/useMounted\"\nimport IconButtonWithProgress from \"../ui/IconButtonWithProgress\"\nimport BugReportIcon from \"@material-ui/icons/BugReport\"\nimport BlockContext from \"../blockly/BlockContext\"\n\nfunction useWorkspaceBreakpoints(program: VMProgram) {\n    const { workspace } = useContext(BlockContext)\n    const breakpoints = useMemo(\n        () =>\n            arrayConcatMany(\n                program?.handlers\n                    ?.filter(h => !h.meta) // don't debug watch statements\n                    .map(h => h.commands.map(cmd => cmd.sourceId))\n            )?.filter(id => !!id) || [],\n        [program]\n    )\n    const setBreakpointHighlight = (sourceId: string) => {\n        workspace?.highlightBlock(sourceId)\n    }\n\n    return {\n        breakpoints,\n        setBreakpointHighlight,\n    }\n}\n\nexport default function VMRunnerButtons(props: {\n    runner: VMProgramRunner\n    run: () => Promise<void>\n    cancel: () => Promise<void>\n}) {\n    const { runner, run, cancel } = props\n    const status = useChange(runner, t => t?.status)\n    const stopped = !status || status === VMStatus.Stopped\n    const program = runner?.program\n    const [indeterminate, setIndeterminate] = useState(false)\n    const [breakpoint, setBreakpoint] = useState<string>(undefined)\n    const pausing = breakpoint === \"\"\n    const paused = !!breakpoint?.length\n    const mounted = useMounted()\n    const disabled = indeterminate || !runner\n    const { breakpoints, setBreakpointHighlight } =\n        useWorkspaceBreakpoints(program)\n\n    //console.log(\"runner status\", status)\n\n    const handleRun = async () => {\n        try {\n            setIndeterminate(true)\n            setBreakpoint(undefined)\n            await run()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleCancel = async () => {\n        try {\n            setIndeterminate(true)\n            await runner.clearBreakpointsAsync()\n            setBreakpoint(undefined)\n            await cancel()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleResume = async () => {\n        try {\n            setIndeterminate(true)\n            setBreakpoint(undefined)\n            await runner.clearBreakpointsAsync()\n            await runner.resumeAsync()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handlePause = async () => {\n        try {\n            setIndeterminate(true)\n            await runner.setBreakpointsAsync(breakpoints)\n            await runner.resumeAsync()\n            setBreakpoint(\"\")\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleStep = () => runner.stepAsync()\n\n    // register breakpoint handler\n    useEffect(\n        () =>\n            runner?.subscribe(\n                VM_BREAKPOINT,\n                (_: VMHandler, sourceId?: string) => {\n                    if (mounted()) setBreakpoint(sourceId)\n                }\n            ),\n        [runner]\n    )\n\n    // setting blockly breakpoint\n    useEffect(() => {\n        setBreakpointHighlight(breakpoint)\n        return () => setBreakpointHighlight(undefined)\n    }, [breakpoint])\n\n    // reset breakpoint in ui when runner, paused mode changes\n    useEffect(() => setBreakpoint(undefined), [runner])\n\n    return (\n        <>\n            <Grid item>\n                <IconButtonWithTooltip\n                    title={paused ? \"resume\" : stopped ? \"start\" : \"stop\"}\n                    disabled={disabled}\n                    color={stopped ? \"primary\" : \"default\"}\n                    onClick={\n                        paused\n                            ? handleResume\n                            : stopped\n                            ? handleRun\n                            : handleCancel\n                    }\n                >\n                    {paused || stopped ? <PlayArrowIcon /> : <StopIcon />}\n                </IconButtonWithTooltip>{\" \"}\n            </Grid>\n            <Grid item>\n                <IconButtonWithProgress\n                    title={pausing ? \"cancel pause\" : paused ? \"step\" : \"pause\"}\n                    disabled={disabled}\n                    indeterminate={pausing}\n                    onClick={\n                        pausing\n                            ? handleResume\n                            : paused\n                            ? handleStep\n                            : handlePause\n                    }\n                >\n                    {paused ? <PlayForWorkIcon /> : <PauseIcon />}\n                </IconButtonWithProgress>\n            </Grid>\n            {(pausing || paused) && (\n                <Grid item>\n                    <Chip\n                        icon={<BugReportIcon />}\n                        label={pausing ? \"pausing\" : \"paused\"}\n                        color={\"secondary\"}\n                    />\n                </Grid>\n            )}\n        </>\n    )\n}\n","import React from \"react\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport { useContext } from \"react\"\nimport AppContext from \"../AppContext\"\n\nexport default function VMStartSimulatorButton() {\n    const { toggleShowDeviceHostsDialog } = useContext(AppContext)\n    return (\n        <IconButtonWithTooltip\n            title=\"start simulator\"\n            onClick={toggleShowDeviceHostsDialog}\n        >\n            <AddIcon />\n        </IconButtonWithTooltip>\n    )\n}\n","import { Grid } from \"@material-ui/core\"\nimport React from \"react\"\nimport { VMProgramRunner } from \"../../../jacdac-ts/src/vm/runner\"\nimport BlockClientRoles from \"../blockly/BlockRoles\"\nimport VMRunnerButtons from \"./VMRunnerButtons\"\nimport VMStartSimulatorButton from \"./VMStartSimulatorButton\"\n\nexport default function VMToolbar(props: {\n    runner: VMProgramRunner\n    run: () => Promise<void>\n    cancel: () => Promise<void>\n}) {\n    const { runner, run, cancel } = props\n    return (\n        <Grid\n            container\n            direction=\"row\"\n            spacing={1}\n            alignItems=\"center\"\n            alignContent=\"center\"\n        >\n            <VMRunnerButtons runner={runner} run={run} cancel={cancel} />\n            <Grid item>\n                <VMStartSimulatorButton />\n            </Grid>\n            <BlockClientRoles />\n        </Grid>\n    )\n}\n","import jsep from \"jsep\"\nimport { Theme } from \"@material-ui/core\"\nimport { withPrefix } from \"gatsby\"\nimport {\n    humanify,\n    isNumericType,\n} from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    BuzzerCmd,\n    JoystickReg,\n    ServoReg,\n    SRV_BOOTLOADER,\n    SRV_BUZZER,\n    SRV_CONTROL,\n    SRV_JOYSTICK,\n    SRV_LOGGER,\n    SRV_PROTO_TEST,\n    SRV_ROLE_MANAGER,\n    SRV_SERVO,\n    SystemReg,\n} from \"../../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../../jacdac-ts/src/jdom/flags\"\nimport {\n    isHighLevelEvent,\n    isHighLevelRegister,\n    isCommand,\n    isSensor,\n    serviceSpecifications,\n    serviceSpecificationFromClassIdentifier,\n} from \"../../../../jacdac-ts/src/jdom/spec\"\nimport {\n    arrayConcatMany,\n    splitFilter,\n    toMap,\n    uniqueMap,\n} from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport { VMError } from \"../../../../jacdac-ts/src/vm/ir\"\nimport NoteField from \"../fields/NoteField\"\nimport ServoAngleField from \"../fields/ServoAngleField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    BOOLEAN_TYPE,\n    ButtonDefinition,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    EventBlockDefinition,\n    EventFieldDefinition,\n    InputDefinition,\n    JSON_TYPE,\n    NUMBER_TYPE,\n    OptionsInputDefinition,\n    RegisterBlockDefinition,\n    resolveBlockDefinition,\n    ServiceBlockDefinition,\n    STRING_TYPE,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport { ExpressionWithErrors, makeVMBase } from \"../../vm/VMgenerator\"\nimport {\n    CompileCommandToVMOptions,\n    CompileEventToVMOptions,\n    CompileEventToVMResult,\n    CompileExpressionToVMOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport { Variables } from \"blockly\"\nimport { paletteColorByIndex } from \"./palette\"\nimport { VariableJSON } from \"./workspacejson\"\n\nconst SET_STATUS_LIGHT_BLOCK = \"jacdac_set_status_light\"\nconst ROLE_BOUND_EVENT_BLOCK = \"jacdac_role_bound_event\"\nconst ROLE_BOUND_BLOCK = \"jacdac_role_bound\"\n\nfunction isBooleanField(field: jdspec.PacketMember) {\n    return field.type === \"bool\"\n}\n\nfunction isStringField(field: jdspec.PacketMember) {\n    return field.type === \"string\"\n}\n\nfunction toBlocklyType(field: jdspec.PacketMember) {\n    return field.encoding === \"JSON\"\n        ? JSON_TYPE\n        : isBooleanField(field)\n        ? BOOLEAN_TYPE\n        : isStringField(field)\n        ? STRING_TYPE\n        : isNumericType(field)\n        ? NUMBER_TYPE\n        : undefined\n}\nfunction enumInfo(srv: jdspec.ServiceSpec, field: jdspec.PacketMember) {\n    const e = srv.enums?.[field.type]\n    return e\n}\n\nconst ignoredServices = [\n    SRV_CONTROL,\n    SRV_LOGGER,\n    SRV_ROLE_MANAGER,\n    SRV_PROTO_TEST,\n    SRV_BOOTLOADER,\n]\n\nconst customMessages = [\n    {\n        service: SRV_JOYSTICK,\n        register: JoystickReg.Direction,\n        field: \"buttons\",\n        get: \"is %1 %2 pressed\",\n    },\n]\n\n// internal helper functions\nconst customShadows = [\n    {\n        serviceClass: SRV_SERVO,\n        kind: \"rw\",\n        identifier: ServoReg.Angle,\n        field: \"_\",\n        shadow: <BlockDefinition>{\n            kind: \"block\",\n            type: ServoAngleField.SHADOW.type,\n        },\n    },\n    {\n        serviceClass: SRV_BUZZER,\n        kind: \"command\",\n        identifier: BuzzerCmd.PlayNote,\n        field: \"frequency\",\n        shadow: <BlockDefinition>{\n            kind: \"block\",\n            type: NoteField.SHADOW.type,\n        },\n    },\n]\n\nconst lookupCustomShadow = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n) =>\n    customShadows.find(\n        cs =>\n            cs.serviceClass === service.classIdentifier &&\n            cs.kind == info.kind &&\n            cs.identifier === info.identifier &&\n            cs.field == field.name\n    )?.shadow\n\nconst fieldsSupported = (pkt: jdspec.PacketInfo) =>\n    pkt.fields.every(toBlocklyType)\n\nconst fieldName = (reg: jdspec.PacketInfo, field: jdspec.PacketMember) =>\n    field.name === \"_\" ? reg.name : field.name\n\nconst fieldToShadow = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n): BlockReference =>\n    lookupCustomShadow(service, info, field) ||\n    (isBooleanField(field)\n        ? { kind: \"block\", type: \"jacdac_on_off\" }\n        : isStringField(field)\n        ? { kind: \"block\", type: \"text\" }\n        : field.unit === \"°\"\n        ? {\n              kind: \"block\",\n              type: \"jacdac_angle\",\n          }\n        : field.unit === \"/\"\n        ? { kind: \"block\", type: \"jacdac_ratio\" }\n        : /^%/.test(field.unit)\n        ? { kind: \"block\", type: \"jacdac_percent\" }\n        : field.type === \"u8\"\n        ? { kind: \"block\", type: \"jacdac_byte\" }\n        : {\n              kind: \"block\",\n              type: \"math_number\",\n              value: field.defaultValue || 0,\n              min: field.typicalMin || field.absoluteMin,\n              max: field.typicalMax || field.absoluteMax,\n          })\n\nconst variableName = (srv: jdspec.ServiceSpec, client: boolean) =>\n    `${humanify(srv.camelName).toLowerCase()}${client ? \"\" : \" server\"} 1`\n\nconst isEnabledRegister = (info: jdspec.PacketInfo) =>\n    info.fields.length === 1 &&\n    info.fields[0].type === \"bool\" &&\n    info.name === \"enabled\"\n\nconst customMessage = (\n    srv: jdspec.ServiceSpec,\n    reg: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n) =>\n    customMessages.find(\n        m =>\n            m.service === srv.classIdentifier &&\n            m.register === reg.identifier &&\n            m.field === field.name\n    )\n\nconst eventFieldGroups = [\n    {\n        output: NUMBER_TYPE,\n        filter: isNumericType,\n    },\n    {\n        output: BOOLEAN_TYPE,\n        filter: isBooleanField,\n    },\n    {\n        output: STRING_TYPE,\n        filter: (f: jdspec.PacketMember) =>\n            isStringField(f) && f.encoding !== \"JSON\",\n    },\n    {\n        output: JSON_TYPE,\n        filter: (f: jdspec.PacketMember) =>\n            isStringField(f) && f.encoding === \"JSON\",\n    },\n]\n\ntype ServicePackets = {\n    service: jdspec.ServiceSpec\n    packets: jdspec.PacketInfo[]\n}\n\n// exports\n\nexport function toRoleType(service: jdspec.ServiceSpec, client = true) {\n    return `${service.classIdentifier}:${client ? \"client\" : \"server\"}`\n}\n\nexport function parseRoleType(v: VariableJSON) {\n    const split = v.type.split(\":\")\n    return {\n        role: v.name,\n        serviceClass: parseInt(split[0]),\n        client: split.length === 2 ? split[1] === \"client\" : true,\n    }\n}\n\nexport const fieldsToFieldInputs = (info: jdspec.PacketInfo) =>\n    info.fields.map(field => ({\n        type: \"input_value\",\n        name: fieldName(info, field),\n        check: toBlocklyType(field),\n    }))\n\nexport const fieldsToValues = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo\n) =>\n    toMap<jdspec.PacketMember, BlockReference | BlockDefinition>(\n        info.fields,\n        field => fieldName(info, field),\n        field => fieldToShadow(service, info, field)\n    )\n\nexport const fieldsToMessage = (info: jdspec.PacketInfo) =>\n    info.fields.map((field, i) => `${humanify(field.name)} %${2 + i}`).join(\" \")\n\nexport interface ServiceRegister {\n    service: jdspec.ServiceSpec\n    register: jdspec.PacketInfo\n}\n\ninterface ServiceRegisterField extends ServiceRegister {\n    field: jdspec.PacketMember\n    einfo: jdspec.EnumInfo\n}\n\nexport const serviceHelp = (service: jdspec.ServiceSpec) => {\n    return withPrefix(`/services/${service.shortId}`)\n}\n\nconst sensorColor = paletteColorByIndex(1)\nconst otherColor = paletteColorByIndex(3)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const createServiceColor = (theme: Theme) => {\n    const serviceColor = (srv: jdspec.ServiceSpec) =>\n        isSensor(srv) ? sensorColor : otherColor\n    return serviceColor\n}\n\nexport const roleVariable = (\n    service: jdspec.ServiceSpec,\n    client = true\n): VariableInputDefinition => {\n    return {\n        type: \"field_variable\",\n        name: \"role\",\n        variable: variableName(service, client),\n        variableTypes: [toRoleType(service, client)],\n        defaultType: toRoleType(service, client),\n    }\n}\n\nexport const getServiceInfo = () => {\n    const allServices = serviceSpecifications()\n    const supportedServices = allServices\n        .filter(\n            service =>\n                !/^_/.test(service.shortId) && service.status !== \"deprecated\"\n        )\n        .filter(service => ignoredServices.indexOf(service.classIdentifier) < 0)\n    const registers = arrayConcatMany(\n        supportedServices.map(service =>\n            service.packets.filter(isHighLevelRegister).map(register => ({\n                service,\n                register,\n            }))\n        )\n    )\n    const [registerSimples, registerComposites] = splitFilter(\n        registers,\n        reg => reg.register.fields.length == 1\n    )\n    const [registerSimpleTypes, registerSimpleOthers] = splitFilter(\n        registerSimples,\n        ({ register }) => !!toBlocklyType(register.fields[0])\n    )\n    const registerSimpleEnumTypes = registerSimpleOthers\n        .filter(\n            ({ service, register }) => !!enumInfo(service, register.fields[0])\n        )\n        .map(({ service, register }) => ({\n            service,\n            register,\n            field: register.fields[0],\n            einfo: enumInfo(service, register.fields[0]),\n        }))\n    const registerCompositeEnumTypes = arrayConcatMany(\n        registerComposites.map(({ service, register }) =>\n            register.fields\n                .map(field => ({\n                    service,\n                    register,\n                    field,\n                    einfo: enumInfo(service, field),\n                }))\n                .filter(({ einfo }) => !!einfo)\n        )\n    )\n\n    return {\n        allServices,\n        supportedServices,\n        registers,\n        registerSimpleTypes,\n        registerComposites,\n        registerSimpleEnumTypes,\n        registerCompositeEnumTypes,\n        events: supportedServices\n            .map(service => ({\n                service,\n                events: service.packets.filter(isHighLevelEvent),\n            }))\n            .filter(kv => !!kv.events.length),\n\n        commands: arrayConcatMany(\n            supportedServices.map(service =>\n                service.packets\n                    .filter(\n                        pkt =>\n                            isCommand(pkt) &&\n                            !pkt.lowLevel &&\n                            fieldsSupported(pkt)\n                    )\n                    .map(pkt => ({\n                        service,\n                        command: pkt,\n                    }))\n            )\n        ),\n    }\n}\n\nexport class ServicesBaseDSL {\n    // only state required across methods of class\n    protected _serviceBlocks: ServiceBlockDefinition[] = []\n    protected _eventFieldBlocks: EventFieldDefinition[] = []\n    protected serviceColor: (srv: jdspec.ServiceSpec) => string\n\n    protected makeRegisterSimpleGetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers.map<RegisterBlockDefinition>(\n            ({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_simple_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0:\n                    customMessage(service, register, register.fields[0])?.get ||\n                    `%1 ${humanify(register.name)}`,\n                args0: [roleVariable(service, client)],\n                inputsInline: true,\n                output: toBlocklyType(register.fields[0]),\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field: register.fields[0],\n\n                template: \"register_get\",\n            })\n        )\n    }\n\n    protected makeRegisterSetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(({ register }) => !client || register.kind === \"rw\")\n            .filter(({ register }) => fieldsSupported(register))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_set_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0: isEnabledRegister(register)\n                    ? `set %1 %2`\n                    : `set %1 ${register.name} to ${\n                          register.fields.length === 1\n                              ? \"%2\"\n                              : fieldsToMessage(register)\n                      }`,\n                args0: [\n                    roleVariable(service, client),\n                    ...fieldsToFieldInputs(register),\n                ],\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"register_set\",\n            }))\n    }\n\n    protected makeRegisterChangeByEventBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(({ service }) => !service.packets.some(isHighLevelEvent))\n            .filter(\n                ({ register }) =>\n                    register.fields.length === 1 &&\n                    isNumericType(register.fields[0]) &&\n                    register.identifier !== SystemReg.Intensity\n            )\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_change_by_events_${service.shortId}_${\n                    register.name\n                }${client ? \"\" : \"_server\"}`,\n                message0: `on %1 ${humanify(register.name)} change by %2`,\n                args0: [\n                    roleVariable(service, client),\n                    ...fieldsToFieldInputs(register),\n                ].filter(v => !!v),\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: this.serviceColor(service),\n                tooltip: `Event raised when ${register.name} changes`,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_change_event\",\n            }))\n    }\n\n    protected makeRegisterNumericsGetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(re => re.register.fields.some(isNumericType))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_numerics_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0: `%1 ${humanify(register.name)}${\n                    register.fields.length > 1 ? ` %2` : \"\"\n                }`,\n                args0: [\n                    roleVariable(service, client),\n                    register.fields.length > 1\n                        ? <OptionsInputDefinition>{\n                              type: \"field_dropdown\",\n                              name: \"field\",\n                              options: register.fields\n                                  .filter(f => isNumericType(f))\n                                  .map(field => [\n                                      humanify(field.name),\n                                      fieldName(register, field),\n                                  ]),\n                          }\n                        : undefined,\n                ].filter(v => !!v),\n                inputsInline: true,\n                output: \"Number\",\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_get\",\n            }))\n    }\n\n    protected makeRegisterEnumGetBlocks(\n        registers: ServiceRegisterField[],\n        client = true\n    ) {\n        return registers.map<RegisterBlockDefinition>(\n            ({ service, register, field, einfo }) => ({\n                kind: \"block\",\n                type: `jacdac_get_enum_${service.shortId}_${register.name}_${\n                    field.name\n                }${client ? \"\" : \"_server\"}`,\n                message0:\n                    customMessage(service, register, field)?.get ||\n                    `%1 ${humanify(register.name)}${\n                        field.name === \"_\" ? \"\" : ` ${field.name}`\n                    } %2`,\n                args0: [\n                    roleVariable(service, client),\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: field.name,\n                        options: Object.keys(einfo.members).map(member => [\n                            humanify(member),\n                            member,\n                        ]),\n                    },\n                ],\n                inputsInline: true,\n                output: \"Boolean\",\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field,\n\n                template: \"register_get\",\n            })\n        )\n    }\n\n    // generate accessor blocks for event/command data with numbers\n    protected makeFieldBlocks(sps: ServicePackets[], client = true) {\n        const worker = (\n            sp: ServicePackets,\n            output: string,\n            filter: (field: jdspec.PacketMember) => boolean\n        ) => {\n            const { service, packets } = sp\n            return packets\n                .filter(pkt => pkt.fields.filter(filter).length > 0)\n                .map(pkt => ({ service, pkt }))\n                .map(\n                    ({ service, pkt }) =>\n                        <EventFieldDefinition>{\n                            kind: \"block\",\n                            type: `jacdac_event_field_${output.toLowerCase()}_${\n                                service.shortId\n                            }_${pkt.name}${client ? \"\" : \"_server\"}`,\n                            message0: `${pkt.name} %1`,\n                            args0: [\n                                <InputDefinition>{\n                                    type: \"field_dropdown\",\n                                    name: \"field\",\n                                    options: pkt.fields.map(field => [\n                                        humanify(field.name),\n                                        field.name,\n                                    ]),\n                                },\n                            ],\n                            colour: this.serviceColor(service),\n                            inputsInline: true,\n                            tooltip: `Data fields of the ${pkt.name} ${\n                                client ? \"event\" : \"command\"\n                            }`,\n                            helpUrl: serviceHelp(service),\n                            service,\n                            event: pkt,\n                            output,\n                            template: \"event_field\",\n                        }\n                )\n        }\n\n        return arrayConcatMany(\n            arrayConcatMany(\n                eventFieldGroups.map(({ output, filter }) =>\n                    sps.map(sp => worker(sp, output, filter))\n                )\n            )\n        )\n    }\n\n    protected createCategoryHelper(options: CreateCategoryOptions) {\n        const { theme, source, liveServices } = options\n        this.serviceColor = createServiceColor(theme)\n\n        const blockServices: { serviceClass: number }[] =\n            source?.variables\n                .map(parseRoleType)\n                .filter(\n                    vt =>\n                        !!serviceSpecificationFromClassIdentifier(\n                            vt.serviceClass\n                        )\n                ) || []\n        const usedEvents: Set<jdspec.PacketInfo> = new Set(\n            source?.blocks\n                ?.map(block => ({\n                    block,\n                    definition: resolveBlockDefinition(block.type),\n                }))\n                .filter(({ definition }) => definition?.template === \"event\")\n                .map(({ block, definition }) => {\n                    const { events } = definition as EventBlockDefinition\n                    if (events.length === 1) return events[0]\n                    else {\n                        const eventName = block.inputs[0].fields[\"event\"]\n                            .value as string\n                        return events.find(ev => ev.name === eventName)\n                    }\n                })\n                .filter(ev => !!ev)\n        )\n        const jdBlocks = this._serviceBlocks.filter(block => !!block.service)\n        const services = uniqueMap(\n            jdBlocks,\n            block => block.service.shortId,\n            block => block.service\n        )\n\n        const toolboxServices: jdspec.ServiceSpec[] = uniqueMap(\n            Flags.diagnostics\n                ? services\n                : [\n                      ...blockServices\n                          .map(pair =>\n                              services.find(\n                                  service =>\n                                      service.classIdentifier ===\n                                      pair.serviceClass\n                              )\n                          )\n                          .filter(srv => !!srv),\n                      ...liveServices.map(s => s.specification),\n                  ],\n            srv => srv.shortId,\n            srv => srv\n        )\n            .filter(\n                srv => srv && ignoredServices.indexOf(srv.classIdentifier) < 0\n            )\n            .sort((l, r) => l.name.localeCompare(r.name))\n\n        const getFieldBlocks = (\n            service: jdspec.ServiceSpec,\n            fieldBlocks: EventFieldDefinition[]\n        ) =>\n            fieldBlocks\n                .filter(\n                    ev => ev.service === service && usedEvents.has(ev.event)\n                )\n                .map<BlockReference>(block => ({\n                    kind: \"block\",\n                    type: block.type,\n                    values: block.values,\n                }))\n\n        const makeCategory = (\n            service: jdspec.ServiceSpec,\n            isClient: boolean,\n            serviceBlocks: ServiceBlockDefinition[],\n            eventFieldBLocks: EventFieldDefinition[]\n        ) => {\n            return {\n                kind: \"category\",\n                name: service.name + (isClient ? \"\" : \" Server\"),\n                colour: this.serviceColor(service),\n                contents: [\n                    <ButtonDefinition>{\n                        kind: \"button\",\n                        text: `Add ${service.name} ${\n                            isClient ? \"role\" : \"server\"\n                        }`,\n                        callbackKey: `jacdac_add_role_callback_${toRoleType(\n                            service,\n                            isClient\n                        )}`,\n                        callback: workspace =>\n                            Variables.createVariableButtonHandler(\n                                workspace,\n                                null,\n                                toRoleType(service, isClient)\n                            ),\n                    },\n                    ...serviceBlocks.map<BlockReference>(block => ({\n                        kind: \"block\",\n                        type: block.type,\n                        values: block.values,\n                    })),\n                    ...getFieldBlocks(service, eventFieldBLocks),\n                ],\n            }\n        }\n\n        return (\n            serviceBlocks: ServiceBlockDefinition[],\n            eventFieldBlocks: EventFieldDefinition[],\n            client = true\n        ) =>\n            toolboxServices\n                .map(serviceClient => ({\n                    serviceClient,\n                    serviceBlocks: serviceBlocks.filter(\n                        block => block.service === serviceClient\n                    ),\n                }))\n                .map<CategoryDefinition>(\n                    sc =>\n                        makeCategory(\n                            sc.serviceClient,\n                            client,\n                            sc.serviceBlocks,\n                            eventFieldBlocks\n                        ) as CategoryDefinition\n                )\n    }\n\n    compileEventToVM(options: CompileEventToVMOptions): CompileEventToVMResult {\n        const makeAwaitEvent = (\n            cmd: string,\n            role: string,\n            eventName: string\n        ) => {\n            return <CompileEventToVMResult>{\n                expression: <jsep.CallExpression>{\n                    type: \"CallExpression\",\n                    arguments:\n                        cmd == \"awaitEvent\"\n                            ? [\n                                  toMemberExpression(\n                                      role.toString(),\n                                      eventName.toString()\n                                  ),\n                              ]\n                            : [\n                                  toIdentifier(role.toString()),\n                                  toIdentifier(eventName.toString()),\n                              ],\n                    callee: toIdentifier(cmd),\n                },\n                event: {\n                    role: role.toString(),\n                    event: eventName.toString(),\n                },\n            }\n        }\n\n        const { block, definition, blockToExpression } = options\n        const { inputs } = block\n        const { template } = definition\n\n        switch (template) {\n            case \"event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { value: eventName } = inputs[0].fields[\"event\"]\n                return makeAwaitEvent(\n                    \"awaitEvent\",\n                    role.toString(),\n                    eventName.toString()\n                )\n            }\n            case \"register_change_event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { register } = definition as RegisterBlockDefinition\n                const { expr, errors } = blockToExpression(\n                    undefined,\n                    inputs[0].child\n                )\n                return <CompileEventToVMResult>{\n                    expression: <jsep.CallExpression>{\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role.toString(), register.name),\n                            expr,\n                        ],\n                        callee: toIdentifier(\"awaitChange\"),\n                    },\n                    errors,\n                }\n            }\n            default: {\n                const { type } = block\n                switch (type) {\n                    case ROLE_BOUND_EVENT_BLOCK: {\n                        const { value: role } = inputs[0].fields[\"role\"]\n                        const { value: eventName } = inputs[0].fields[\"event\"]\n                        return makeAwaitEvent(\n                            \"roleBound\",\n                            role.toString(),\n                            eventName.toString()\n                        )\n                    }\n                }\n            }\n        }\n        return undefined\n    }\n\n    compileExpressionToVM(\n        options: CompileExpressionToVMOptions\n    ): ExpressionWithErrors {\n        const { event, definition, block } = options\n        const { inputs, id } = block\n        const { template } = definition\n        switch (template) {\n            case \"register_get\": {\n                const { register } = definition as RegisterBlockDefinition\n                const { value: role } = inputs[0].fields[\"role\"]\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        role as string,\n                        field\n                            ? toMemberExpression(\n                                  register.name,\n                                  field.value as string\n                              )\n                            : register.name\n                    ),\n                    errors: [],\n                }\n            }\n            case \"event_field\": {\n                const { event: eventInfo } = definition as EventFieldDefinition\n                const errors: VMError[] = []\n                if (event.event !== eventInfo.name) {\n                    errors.push({\n                        sourceId: id,\n                        message: `Event ${eventInfo.name} is not available in this handler.`,\n                    })\n                }\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        event.role,\n                        toMemberExpression(event.event, field.value as string)\n                    ),\n                    errors,\n                }\n            }\n            default: {\n                const { type } = block\n                const errors: VMError[] = []\n                switch (type) {\n                    case ROLE_BOUND_BLOCK: {\n                        const { value: role } = inputs[0].fields[\"role\"]\n                        return {\n                            expr: {\n                                type: \"CallExpression\",\n                                arguments: [toIdentifier(role.toString())],\n                                callee: toMemberExpression(\n                                    \"$fun\",\n                                    \"roleBoundExpression\"\n                                ),\n                            } as jsep.Expression,\n                            errors,\n                        }\n                    }\n                }\n            }\n        }\n        return undefined\n    }\n\n    compileCommandToVM(options: CompileCommandToVMOptions) {\n        const { event, block, definition, blockToExpression } = options\n        const { template } = definition\n        const { inputs } = block\n        switch (template) {\n            case \"register_set\": {\n                // TODO: need to handle the case of writing a register with fields\n                const { register } = definition as RegisterBlockDefinition\n                const exprsErrors = inputs.map(a => {\n                    return blockToExpression(event, a.child)\n                })\n                const { value: role } = inputs[0].fields.role\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role as string, register.name),\n                            ...exprsErrors.map(p => p.expr),\n                        ],\n                        callee: toIdentifier(\"writeRegister\"),\n                    }),\n                    errors: exprsErrors.flatMap(p => p.errors),\n                }\n            }\n            case \"raiseNo\":\n            case \"raiseArgs\":\n            case \"command\": {\n                const { command: serviceCommand } =\n                    definition as CommandBlockDefinition\n                const { value: role } = inputs[0].fields.role\n                const eventName =\n                    template === \"raiseNo\"\n                        ? inputs[0].fields[\"event\"].value.toString()\n                        : \"\"\n                const exprsErrors =\n                    template === \"raiseNo\"\n                        ? []\n                        : inputs.map(a => {\n                              return blockToExpression(event, a.child)\n                          })\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: exprsErrors.map(p => p.expr),\n                        callee: toMemberExpression(\n                            role as string,\n                            eventName ? eventName : serviceCommand.name\n                        ),\n                    }),\n                    errors: exprsErrors.flatMap(p => p.errors),\n                }\n            }\n            case \"server\": {\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [],\n                        callee: toIdentifier(\"nop\"),\n                    }),\n                    errors: [],\n                }\n            }\n            default: {\n                const { type } = block\n                switch (type) {\n                    case SET_STATUS_LIGHT_BLOCK: {\n                        console.log(\"SET_STATUS\")\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n}\n","import jsep from \"jsep\"\nimport {\n    VMBase,\n    VMHandler,\n    VMProgram,\n    VMRole,\n    VMIfThenElse,\n    VMError,\n} from \"../../../jacdac-ts/src/vm/ir\"\nimport { toIdentifier, RoleEvent } from \"../../../jacdac-ts/src/vm/compile\"\nimport {\n    BUILTIN_TYPES,\n    resolveBlockDefinition,\n    ServiceBlockDefinition,\n} from \"../blockly/toolbox\"\nimport Blockly from \"blockly\"\nimport BlockDomainSpecificLanguage, { resolveDsl } from \"../blockly/dsl/dsl\"\nimport { parseRoleType } from \"../blockly/dsl/servicesbase\"\nimport { splitFilter } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { BlockJSON, WorkspaceJSON } from \"../blockly/dsl/workspacejson\"\n\nexport interface ExpressionWithErrors {\n    expr: jsep.Expression\n    errors: VMError[]\n}\n\nexport interface CmdWithErrors {\n    cmd: VMBase\n    errors: VMError[]\n}\n\nexport const makeVMBase = (block: BlockJSON, command: jsep.CallExpression) => {\n    return {\n        sourceId: block.id,\n        type: \"cmd\",\n        command,\n    } as VMBase\n}\n\nexport const processErrors = (block: BlockJSON, errors: VMError[]) => {\n    return errors.map((e: VMError) => {\n        return {\n            sourceId: e.sourceId ? e.sourceId : block.id,\n            message: e.message,\n        }\n    })\n}\n\nexport default function workspaceJSONToVMProgram(\n    workspace: WorkspaceJSON,\n    dsls: BlockDomainSpecificLanguage[]\n): VMProgram {\n    //console.debug(`compile vm`, { workspace, dsls })\n\n    if (!workspace) return undefined\n\n    const [roles, serverRoles]: [VMRole[], VMRole[]] = splitFilter(\n        workspace.variables\n            .filter(v => BUILTIN_TYPES.indexOf(v.type) < 0)\n            .map(parseRoleType),\n        r => r.client\n    )\n\n    class EmptyExpression extends Error {}\n\n    const blockToExpression: (\n        ev: RoleEvent,\n        block: BlockJSON\n    ) => ExpressionWithErrors = (ev: RoleEvent, blockIn: BlockJSON) => {\n        const errors: VMError[] = []\n\n        const blockToExpressionInner = (ev: RoleEvent, block: BlockJSON) => {\n            if (!block) {\n                throw new EmptyExpression()\n            }\n            const { type, value, inputs } = block\n            console.log(`block2e`, { ev, block, type, value, inputs })\n\n            if (value !== undefined)\n                // literal\n                return <jsep.Literal>{\n                    type: \"Literal\",\n                    value: value,\n                    raw: value + \"\",\n                }\n\n            const dsl = resolveDsl(dsls, type)\n            if (!dsl) {\n                console.warn(`unknown block ${type}`, {\n                    type,\n                    ev,\n                    block,\n                    d: Blockly.Blocks[type],\n                })\n                errors.push({\n                    sourceId: block.id,\n                    message: `unknown block ${type}`,\n                })\n            } else {\n                const definition =\n                    resolveBlockDefinition<ServiceBlockDefinition>(type)\n                const res = dsl.compileExpressionToVM?.({\n                    event: ev,\n                    definition,\n                    block,\n                    blockToExpressionInner,\n                })\n                if (res) {\n                    if (res.errors) res.errors.forEach(e => errors.push(e))\n                    return res.expr\n                }\n\n                const { template } = definition\n                if (template === \"shadow\") {\n                    const field = inputs[0].fields[\"value\"]\n                    const v = field.value\n                    return <jsep.Literal>{\n                        type: \"Literal\",\n                        value: v,\n                        raw: v + \"\",\n                    }\n                }\n\n                errors.push({\n                    sourceId: block.id,\n                    message: `unknown block ${type}`,\n                })\n                console.warn(`unsupported expression block ${type}`, {\n                    ev,\n                    block,\n                    definition,\n                })\n            }\n            throw new EmptyExpression()\n        }\n        return {\n            expr: blockToExpressionInner(ev, blockIn),\n            errors,\n        }\n    }\n\n    const blockToCommand = (\n        event: RoleEvent,\n        block: BlockJSON\n    ): CmdWithErrors => {\n        const { type, inputs } = block\n        console.debug(`block2c`, { event, type, block, inputs })\n        switch (type) {\n            case \"dynamic_if\": {\n                const thenHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const elseHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const t = inputs[1]?.child\n                const e = inputs[2]?.child\n                if (t) {\n                    addCommands(\n                        event,\n                        [t, ...(t.children ? t.children : [])],\n                        thenHandler\n                    )\n                }\n                if (e) {\n                    addCommands(\n                        event,\n                        [e, ...(e.children ? e.children : [])],\n                        elseHandler\n                    )\n                }\n                let exprErrors: ExpressionWithErrors = undefined\n                try {\n                    exprErrors = blockToExpression(event, inputs[0]?.child)\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        exprErrors = {\n                            expr: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false \",\n                            } as jsep.Literal,\n                            errors: [],\n                        }\n                    } else {\n                        throw e\n                    }\n                }\n                const { expr, errors } = exprErrors\n\n                const ifThenElse: VMIfThenElse = {\n                    sourceId: block.id,\n                    type: \"ite\",\n                    expr,\n                    then: thenHandler.commands,\n                    else: elseHandler.commands,\n                }\n\n                console.log(\"dynamic if\")\n                return {\n                    cmd: ifThenElse,\n                    errors: processErrors(\n                        block,\n                        errors\n                            .concat(thenHandler.errors)\n                            .concat(elseHandler.errors)\n                    ),\n                }\n            }\n            // more builts\n            default: {\n                const dsl = resolveDsl(dsls, type)\n                if (dsl) {\n                    const definition =\n                        resolveBlockDefinition<ServiceBlockDefinition>(type)\n                    const template = definition?.template\n                    if (template === \"meta\") return undefined\n                    const dslRes = dsl.compileCommandToVM?.({\n                        event,\n                        block,\n                        definition,\n                        blockToExpression,\n                    })\n                    if (dslRes) {\n                        dslRes.errors = processErrors(block, dslRes.errors)\n                        return dslRes\n                    }\n                }\n                console.warn(`unsupported command block ${type}`, { block })\n                return {\n                    cmd: undefined,\n                    errors: [\n                        {\n                            sourceId: block.id,\n                            message: `unsupported command block ${type}`,\n                        },\n                    ],\n                }\n            }\n        }\n    }\n\n    const nop = {\n        type: \"CallExpression\",\n        arguments: [],\n        callee: toIdentifier(\"nop\"),\n    } as jsep.CallExpression\n\n    const addCommands = (\n        event: RoleEvent,\n        blocks: BlockJSON[],\n        handler: VMHandler\n    ) => {\n        blocks\n            ?.filter(child => !!child)\n            .forEach(child => {\n                try {\n                    const { cmd, errors } = blockToCommand(event, child) || {}\n                    if (cmd) handler.commands.push(cmd)\n                    errors?.forEach(e => handler.errors.push(e))\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        handler.commands.push({\n                            sourceId: child.id,\n                            type: \"cmd\",\n                            command: nop,\n                        } as VMBase)\n                    } else {\n                        console.debug(e)\n                    }\n                }\n            })\n    }\n\n    const handlers: VMHandler[] = workspace.blocks\n        .map(top => {\n            const { type } = top\n            let command: jsep.CallExpression\n            let topEvent: RoleEvent\n            let topErrors: VMError[]\n            let topMeta = false\n\n            try {\n                const dsl = resolveDsl(dsls, type)\n                const definition =\n                    resolveBlockDefinition<ServiceBlockDefinition>(type)\n                const { expression, errors, event, meta } =\n                    dsl?.compileEventToVM?.({\n                        block: top,\n                        definition,\n                        blockToExpression,\n                    }) || {}\n                command = expression as jsep.CallExpression\n                topErrors = errors\n                topEvent = event\n                topMeta = meta\n\n                // if dsl didn't compile anything try again\n                const { template } = definition || {}\n                if (!command && !topErrors?.length) {\n                    switch (template) {\n                        case \"meta\": {\n                            break\n                        }\n                        default: {\n                            topErrors = [\n                                {\n                                    sourceId: top.id,\n                                    message: `unsupported handler block ${type}`,\n                                },\n                            ]\n                            console.debug(\n                                `unsupported handler template ${template} for ${type}`,\n                                { top }\n                            )\n                            break\n                        }\n                    }\n                }\n            } catch (e) {\n                console.debug(e)\n                if (e instanceof EmptyExpression) {\n                    return undefined\n                } else {\n                    throw e\n                }\n            }\n\n            // nothing to compile here\n            if (!command && !topErrors?.length) return undefined\n\n            const handler: VMHandler = {\n                commands: [\n                    {\n                        sourceId: top.id,\n                        type: \"cmd\",\n                        command,\n                    } as VMBase,\n                ],\n                errors: topErrors || [],\n                meta: !!topMeta,\n            }\n\n            addCommands(topEvent, top.children, handler)\n            return handler\n        })\n        .filter(handler => !!handler)\n\n    return {\n        roles,\n        serverRoles,\n        handlers,\n    }\n}\n","import {\n    SRV_HID_KEYBOARD,\n    SRV_LED,\n    SRV_DOT_MATRIX,\n    SRV_SEVEN_SEGMENT_DISPLAY,\n} from \"../../../../jacdac-ts/src/jdom/constants\"\nimport type { DataRecordWindowRequest } from \"../../../workers/data/dist/node_modules/data.worker\"\n\nimport KeyboardKeyField from \"../fields/KeyboardKeyField\"\nimport LEDColorField from \"../fields/LEDColorField\"\nimport LEDMatrixField from \"../fields/LEDMatrixField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    CustomBlockDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    EventBlockDefinition,\n    identityTransformData,\n    InputDefinition,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n    toolsColour,\n    TWIN_BLOCK,\n    ValueInputDefinition,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport JDomTreeField from \"../fields/JDomTreeField\"\nimport TwinField from \"../fields/TwinField\"\nimport {\n    createServiceColor,\n    fieldsToFieldInputs,\n    fieldsToMessage,\n    fieldsToValues,\n    getServiceInfo,\n    roleVariable,\n    serviceHelp,\n    ServicesBaseDSL,\n    toRoleType,\n} from \"./servicesbase\"\nimport { humanify } from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport { Block } from \"blockly\"\nimport postTransformData from \"./workers/data.proxy\"\n\nconst SET_STATUS_LIGHT_BLOCK = \"jacdac_set_status_light\"\nconst ROLE_BOUND_EVENT_BLOCK = \"jacdac_role_bound_event\"\nconst ROLE_BOUND_BLOCK = \"jacdac_role_bound\"\nconst RECORD_WINDOW_BLOCK = \"jacdac_record_window\"\nconst INSPECT_BLOCK = \"jacdac_tools_inspect\"\nconst commandColor = \"#8c6a1d\"\n\nexport class ServicesBlockDomainSpecificLanguage\n    extends ServicesBaseDSL\n    implements BlockDomainSpecificLanguage\n{\n    id = \"jacdacServices\"\n    // generic role blocks\n    private _roleBlocks: BlockDefinition[]\n\n    createBlocks(options: CreateBlocksOptions) {\n        const { theme } = options\n        this.serviceColor = createServiceColor(theme)\n\n        // pure service information here\n        const {\n            allServices,\n            supportedServices,\n            registers,\n            events,\n            commands,\n            registerSimpleTypes,\n            registerComposites,\n            registerSimpleEnumTypes,\n            registerCompositeEnumTypes,\n        } = getServiceInfo()\n\n        const resolveService = (cls: number): jdspec.ServiceSpec[] =>\n            allServices.filter(srv => srv.classIdentifier === cls)\n\n        const customClientBlockDefinitions: CustomBlockDefinition[] = [\n            ...resolveService(SRV_HID_KEYBOARD).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `key`,\n                        message0: `%1 %2 key %3`,\n                        args0: [\n                            roleVariable(service),\n                            <OptionsInputDefinition>{\n                                type: \"field_dropdown\",\n                                name: \"action\",\n                                options: [\n                                    [\"press\", \"press\"],\n                                    [\"down\", \"down\"],\n                                    [\"up\", \"up\"],\n                                ],\n                            },\n                            {\n                                type: KeyboardKeyField.KEY,\n                                name: \"combo\",\n                            },\n                        ],\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Send a keyboard key combo`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.key(combo.selectors, combo.modifiers, action)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_LED).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `fade`,\n                        message0: `fade %1 to %2 at speed %3`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"color\",\n                                check: \"Number\",\n                            },\n                            {\n                                type: \"input_value\",\n                                name: \"speed\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            color: {\n                                kind: \"block\",\n                                type: LEDColorField.SHADOW.type,\n                            },\n                            speed: {\n                                kind: \"block\",\n                                type: \"jacdac_ratio\",\n                            },\n                        },\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Fade LED color`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.animate((color >> 16) & 0xff, (color >> 8) & 0xff, (color >> 0) & 0xff, speed * 0xff)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_SEVEN_SEGMENT_DISPLAY).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `set_digits`,\n                        message0: `set %1 digits to %2`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"digits\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            digits: {\n                                kind: \"block\",\n                                type: \"math_number\",\n                            },\n                        },\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display a number of the screen`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_DOT_MATRIX).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `show_dots`,\n                        message0: `show %1 dots %2`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: LEDMatrixField.KEY,\n                                name: \"dots\",\n                            },\n                        ],\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display dots on the dot matrix`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        // encode digits\n                        template: \"custom\",\n                    }\n            ),\n        ].map(def => {\n            def.type = `jacdac_custom_${def.service.shortId.toLowerCase()}_${\n                def.type\n            }`\n            return def\n        })\n\n        const eventClientBlocks = events.map<EventBlockDefinition>(\n            ({ service, events }) => ({\n                kind: \"block\",\n                type: `jacdac_events_${service.shortId}`,\n                message0: `on %1 %2`,\n                args0: [\n                    roleVariable(service),\n                    <InputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: events.map(event => [\n                            humanify(event.name),\n                            event.name,\n                        ]),\n                    },\n                ],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: `Events for the ${service.name} service`,\n                helpUrl: serviceHelp(service),\n                service,\n                events,\n                template: \"event\",\n            })\n        )\n\n        const registerChangeByEventClientBlocks =\n            this.makeRegisterChangeByEventBlocks(registers)\n        const registerSimpleGetClientBlocks =\n            this.makeRegisterSimpleGetBlocks(registerSimpleTypes)\n        const registerEnumGetClientBlocks = this.makeRegisterEnumGetBlocks([\n            ...registerSimpleEnumTypes,\n            ...registerCompositeEnumTypes,\n        ])\n        const registerNumericsGetClientBlocks =\n            this.makeRegisterNumericsGetBlocks(registerComposites)\n        const registerSetClientBlocks = this.makeRegisterSetBlocks(registers)\n\n        const commandClientBlocks = commands.map<CommandBlockDefinition>(\n            ({ service, command }) => ({\n                kind: \"block\",\n                type: `jacdac_command_${service.shortId}_${command.name}`,\n                message0: !command.fields.length\n                    ? `${humanify(command.name)} %1`\n                    : `${humanify(command.name)} %1 with ${fieldsToMessage(\n                          command\n                      )}`,\n                args0: [roleVariable(service), ...fieldsToFieldInputs(command)],\n                values: fieldsToValues(service, command),\n                inputsInline: true,\n                colour: this.serviceColor(service),\n                tooltip: command.description,\n                helpUrl: serviceHelp(service),\n                service,\n                command,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"command\",\n            })\n        )\n\n        this._serviceBlocks = [\n            ...eventClientBlocks,\n            ...registerSimpleGetClientBlocks,\n            ...registerEnumGetClientBlocks,\n            ...registerNumericsGetClientBlocks,\n            ...registerSetClientBlocks,\n            ...commandClientBlocks,\n            ...customClientBlockDefinitions,\n            ...registerChangeByEventClientBlocks,\n        ]\n\n        this._eventFieldBlocks = this.makeFieldBlocks(\n            events.map(p => ({ service: p.service, packets: p.events }))\n        )\n\n        // client only\n        this._roleBlocks = [\n            {\n                kind: \"block\",\n                type: ROLE_BOUND_EVENT_BLOCK,\n                message0: \"on %1 %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: [\n                            [\"bound\", \"bound\"],\n                            [\"unbound\", \"unbound\"],\n                        ],\n                    },\n                ],\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"role_binding_event\",\n            },\n            {\n                kind: \"block\",\n                type: ROLE_BOUND_BLOCK,\n                message0: \"%1 bound\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                ],\n                output: \"Boolean\",\n                inputsInline: true,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"role_bound\",\n            },\n            {\n                kind: \"block\",\n                type: SET_STATUS_LIGHT_BLOCK,\n                message0: \"set %1 status light to %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"all\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <ValueInputDefinition>{\n                        type: \"input_value\",\n                        name: \"color\",\n                        check: \"Number\",\n                    },\n                ],\n                values: {\n                    color: {\n                        kind: \"block\",\n                        type: LEDColorField.SHADOW.type,\n                    },\n                },\n                inputsInline: true,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Sets the color on the status light\",\n                helpUrl: \"\",\n            },\n        ]\n\n        const toolsBlocks: BlockDefinition[] = [\n            {\n                kind: \"block\",\n                type: TWIN_BLOCK,\n                message0: `view %1 %2 %3`,\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"none\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                            ...supportedServices.map(srv =>\n                                toRoleType(srv, false)\n                            ),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    {\n                        type: \"input_dummy\",\n                    },\n                    <InputDefinition>{\n                        type: TwinField.KEY,\n                        name: \"twin\",\n                    },\n                ],\n                colour: toolsColour,\n                inputsInline: false,\n                tooltip: `Twin of the selected service`,\n                nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                helpUrl: \"\",\n                template: \"meta\",\n                transformData: identityTransformData,\n            },\n            {\n                kind: \"block\",\n                type: INSPECT_BLOCK,\n                message0: `inspect %1 %2 %3`,\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"none\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    {\n                        type: \"input_dummy\",\n                    },\n                    <InputDefinition>{\n                        type: JDomTreeField.KEY,\n                        name: \"twin\",\n                    },\n                ],\n                colour: toolsColour,\n                inputsInline: false,\n                tooltip: `Inspect a service`,\n                helpUrl: \"\",\n                template: \"meta\",\n            },\n            <BlockDefinition>{\n                kind: \"block\",\n                type: RECORD_WINDOW_BLOCK,\n                message0: \"record last %1 s\",\n                args0: [\n                    <NumberInputDefinition>{\n                        type: \"field_number\",\n                        name: \"horizon\",\n                        value: 10,\n                    },\n                ],\n                inputsInline: false,\n                previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                colour: toolsColour,\n                template: \"meta\",\n                dataPreviewField: true,\n                transformData: async (\n                    block: Block,\n                    data: { time: number }[],\n                    previousData: { time: number }[]\n                ) => {\n                    const horizon = block.getFieldValue(\"horizon\") || 10\n                    return postTransformData(<DataRecordWindowRequest>{\n                        type: \"record_window\",\n                        data,\n                        previousData,\n                        horizon,\n                    })\n                },\n            },\n        ]\n\n        return [\n            ...this._serviceBlocks,\n            ...this._eventFieldBlocks,\n            ...this._roleBlocks,\n            ...toolsBlocks,\n        ]\n    }\n\n    createCategory(options: CreateCategoryOptions) {\n        const makeServicesCategories = this.createCategoryHelper(options)\n\n        const clientServicesCategories = makeServicesCategories(\n            this._serviceBlocks,\n            this._eventFieldBlocks\n        )\n\n        const commonCategory: CategoryDefinition = {\n            kind: \"category\",\n            name: \"Roles\",\n            colour: commandColor,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ROLE_BOUND_EVENT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ROLE_BOUND_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: SET_STATUS_LIGHT_BLOCK,\n                    values: {\n                        color: {\n                            kind: \"block\",\n                            type: LEDColorField.SHADOW.type,\n                        },\n                    },\n                },\n            ],\n        }\n\n        const toolsCategory: CategoryDefinition = {\n            kind: \"category\",\n            name: \"Tools\",\n            colour: toolsColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: TWIN_BLOCK,\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: RECORD_WINDOW_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: INSPECT_BLOCK,\n                },\n            ],\n        }\n\n        return [...clientServicesCategories, commonCategory, toolsCategory]\n    }\n}\nconst servicesDSL = new ServicesBlockDomainSpecificLanguage()\nexport default servicesDSL\n","import { humanify } from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    ContentDefinition,\n    EventBlockDefinition,\n    InputDefinition,\n    LabelDefinition,\n    SeparatorDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport {\n    createServiceColor,\n    fieldsToFieldInputs,\n    fieldsToMessage,\n    fieldsToValues,\n    getServiceInfo,\n    roleVariable,\n    serviceHelp,\n    ServiceRegister,\n    ServicesBaseDSL,\n} from \"./servicesbase\"\n\nexport class ServerServicesBlockDomainSpecificLanguage\n    extends ServicesBaseDSL\n    implements BlockDomainSpecificLanguage\n{\n    id = \"jacdacServerServices\"\n    supportedServices: jdspec.ServiceSpec[] = []\n\n    makeRegisterGetSetRequestBlocks(\n        registers: ServiceRegister[],\n        isGet: boolean\n    ) {\n        return registers\n            .filter(\n                r =>\n                    (isGet &&\n                        (r.register.kind === \"ro\" ||\n                            r.register.kind === \"rw\")) ||\n                    (!isGet && r.register.kind == \"rw\")\n            )\n            .map<EventBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_register_${isGet ? \"get\" : \"set\"}_request_${\n                    service.shortId\n                }_${register.name}`,\n                message0: `on register ${isGet ? \"get\" : \"set\"} %1 ${humanify(\n                    register.name\n                )}`,\n                args0: [roleVariable(service, false)],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                events: [register],\n                template: \"event\",\n            }))\n    }\n\n    createBlocks(options: CreateBlocksOptions) {\n        const { theme } = options\n        this.serviceColor = createServiceColor(theme)\n\n        // pure service information here\n        const {\n            registers,\n            events,\n            commands,\n            registerSimpleTypes,\n            registerComposites,\n            registerSimpleEnumTypes,\n            registerCompositeEnumTypes,\n        } = getServiceInfo()\n\n        const eventServerBlocks = events.flatMap<CommandBlockDefinition>(\n            ({ service, events }) => {\n                const eventsNoArgs = events.filter(ev => ev.fields.length === 0)\n                const retNoArgs: CommandBlockDefinition = {\n                    kind: \"block\",\n                    type: `jacdac_raise_event_${service.shortId}`,\n                    message0: `raise %1 %2`,\n                    args0: [\n                        roleVariable(service, false),\n                        <InputDefinition>{\n                            type: \"field_dropdown\",\n                            name: \"event\",\n                            options: eventsNoArgs.map(event => [\n                                humanify(event.name),\n                                event.name,\n                            ]),\n                        },\n                    ],\n                    inputsInline: true,\n                    colour: this.serviceColor(service),\n                    tooltip: `Events for the ${service.name} service`,\n                    helpUrl: serviceHelp(service),\n                    service,\n                    command: undefined,\n                    previousStatement: CODE_STATEMENT_TYPE,\n                    nextStatement: CODE_STATEMENT_TYPE,\n\n                    template: \"raiseNo\",\n                }\n                const eventsArgs = events.filter(ev => ev.fields.length)\n                const retArgs = eventsArgs.map<CommandBlockDefinition>(ev => {\n                    return {\n                        kind: \"block\",\n                        type: `jacdac_raise_event_${service.shortId}_${ev.name}`,\n                        message0: !ev.fields.length\n                            ? `raise %1 ${humanify(ev.name)}`\n                            : `raise %1 ${humanify(\n                                  ev.name\n                              )} with ${fieldsToMessage(ev)}`,\n                        args0: [\n                            roleVariable(service, false),\n                            ...fieldsToFieldInputs(ev),\n                        ],\n                        values: fieldsToValues(service, ev),\n                        inputsInline: true,\n                        colour: this.serviceColor(service),\n                        tooltip: ev.description,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        command: ev,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n\n                        template: \"raiseArgs\",\n                    }\n                })\n                return [retNoArgs, ...retArgs]\n            }\n        )\n\n        const registerSimpleGetServerBlocks = this.makeRegisterSimpleGetBlocks(\n            registerSimpleTypes,\n            false\n        )\n        const registerEnumGetServerBlocks = this.makeRegisterEnumGetBlocks(\n            [...registerSimpleEnumTypes, ...registerCompositeEnumTypes],\n            false\n        )\n        const registerNumericsGetServerBlocks =\n            this.makeRegisterNumericsGetBlocks(registerComposites, false)\n        const registerSetServerBlocks = this.makeRegisterSetBlocks(\n            registers,\n            false\n        )\n        const registerSetRequestBlocks = this.makeRegisterGetSetRequestBlocks(\n            registers,\n            false\n        )\n        const registerGetRequestBlocks = this.makeRegisterGetSetRequestBlocks(\n            registers,\n            true\n        )\n\n        const commandServerBlocks = commands.map<EventBlockDefinition>(\n            ({ service, command }) => ({\n                kind: \"block\",\n                type: `jacdac_command_server_${service.shortId}_${command.name}`,\n                message0: `on ${humanify(command.name)} %1`,\n                args0: [roleVariable(service, false)],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: command.description,\n                helpUrl: serviceHelp(service),\n                service,\n                events: [command],\n                template: \"event\",\n            })\n        )\n\n        this._serviceBlocks = [\n            ...eventServerBlocks,\n            ...registerSimpleGetServerBlocks,\n            ...registerEnumGetServerBlocks,\n            ...registerNumericsGetServerBlocks,\n            ...registerSetServerBlocks,\n            ...commandServerBlocks,\n            ...registerSetRequestBlocks,\n            ...registerGetRequestBlocks,\n        ]\n\n        this._eventFieldBlocks = this.makeFieldBlocks(\n            commands.map(p => ({ service: p.service, packets: [p.command] })),\n            false\n        )\n\n        return [...this._serviceBlocks, ...this._eventFieldBlocks]\n    }\n\n    createCategory(options: CreateCategoryOptions) {\n        const makeServicesCategories = this.createCategoryHelper(options)\n\n        const serverServicesCategories = makeServicesCategories(\n            this._serviceBlocks,\n            this._eventFieldBlocks,\n            false\n        )\n\n        if (!serverServicesCategories?.length) return []\n\n        return [\n            <SeparatorDefinition>{\n                kind: \"sep\",\n            },\n            {\n                kind: \"category\",\n                name: \"Servers\",\n                contents: serverServicesCategories,\n            } as CategoryDefinition,\n        ]\n    }\n}\nconst serverServicesDSL = new ServerServicesBlockDomainSpecificLanguage()\nexport default serverServicesDSL\n","import jsep from \"jsep\"\nimport { toIdentifier } from \"../../../../jacdac-ts/src/vm/compile\"\nimport { CmdWithErrors, makeVMBase } from \"../../vm/VMgenerator\"\nimport LogViewField from \"../fields/LogViewField\"\nimport VariablesField from \"../fields/VariablesFields\"\nimport WatchValueField from \"../fields/WatchValueField\"\nimport {\n    BlockReference,\n    CODE_STATEMENT_TYPE,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n    InputDefinition,\n    LabelDefinition,\n    toolsColour,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst WATCH_BLOCK = \"tools_watch\"\nconst LOG_BLOCK = \"tools_log\"\nconst VIEW_LOG_BLOCK = \"tools_log_view\"\nconst VARIABLES_BLOCK = \"tools_variables_view\"\n\nconst colour = toolsColour\n\nconst toolsDSL: BlockDomainSpecificLanguage = {\n    id: \"tools\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: VARIABLES_BLOCK,\n            message0: `variables %1 %2`,\n            args0: [\n                {\n                    type: \"input_dummy\",\n                },\n                {\n                    type: VariablesField.KEY,\n                    name: \"variables\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `Watch variables values`,\n            helpUrl: \"\",\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: WATCH_BLOCK,\n            message0: `watch %1 %2`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                },\n                <InputDefinition>{\n                    type: WatchValueField.KEY,\n                    name: \"watch\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            tooltip: `Watch a value in the editor`,\n            helpUrl: \"\",\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            transformData: identityTransformData,\n        },\n        {\n            kind: \"block\",\n            type: LOG_BLOCK,\n            message0: `log %1`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            previousStatement: CODE_STATEMENT_TYPE,\n            nextStatement: CODE_STATEMENT_TYPE,\n            tooltip: `Log an entry to the console`,\n            helpUrl: \"\",\n        },\n        {\n            kind: \"block\",\n            type: VIEW_LOG_BLOCK,\n            message0: `console %1 %2`,\n            args0: [\n                {\n                    type: \"input_dummy\",\n                },\n                <InputDefinition>{\n                    type: LogViewField.KEY,\n                    name: \"watch\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `View console content`,\n            template: \"meta\",\n        },\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Debugger\",\n            colour: colour,\n            contents: [\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Variables\",\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: VARIABLES_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: WATCH_BLOCK,\n                },\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Logging\",\n                },\n                {\n                    kind: \"block\",\n                    type: LOG_BLOCK,\n                    values: {\n                        value: { kind: \"block\", type: \"text\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: VIEW_LOG_BLOCK,\n                },\n            ],\n        },\n        {\n            kind: \"sep\",\n        },\n    ],\n\n    compileCommandToVM: ({ block, blockToExpression }): CmdWithErrors => {\n        const { type } = block\n        if (type === LOG_BLOCK) {\n            const { inputs } = block\n            const { expr, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                cmd: makeVMBase(block, {\n                    type: \"CallExpression\",\n                    arguments: [expr],\n                    callee: toIdentifier(\"log\"),\n                }),\n                errors,\n            }\n        }\n        return undefined\n    },\n    compileEventToVM: ({ block, blockToExpression }) => {\n        const { type } = block\n        if (type === WATCH_BLOCK) {\n            const { inputs } = block\n            const { expr, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                expression: <jsep.CallExpression>{\n                    type: \"CallExpression\",\n                    arguments: [expr],\n                    callee: toIdentifier(\"watch\"),\n                },\n                errors,\n                meta: true,\n            }\n        }\n        return undefined\n    },\n}\n\nexport default toolsDSL\n","import { toIdentifier } from \"../../../../jacdac-ts/src/vm/compile\"\nimport { VMCommand } from \"../../../../jacdac-ts/src/vm/ir\"\nimport {\n    BlockReference,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    InputDefinition,\n    SeparatorDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport { makeVMBase, processErrors } from \"../../vm/VMgenerator\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { paletteColorByIndex } from \"./palette\"\n\nconst WAIT_BLOCK = \"jacdac_wait\"\nconst ON_START_BLOCK = \"jacdac_start\"\nconst REPEAT_EVERY_BLOCK = \"jacdac_repeat_every\"\n\nconst colour = paletteColorByIndex(0)\nconst loopsDsl: BlockDomainSpecificLanguage = {\n    id: \"loops\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: WAIT_BLOCK,\n            message0: \"wait %1 s\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"time\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            previousStatement: CODE_STATEMENT_TYPE,\n            nextStatement: CODE_STATEMENT_TYPE,\n            colour,\n            tooltip: \"Wait the desired time\",\n            helpUrl: \"\",\n        },\n        {\n            kind: \"block\",\n            type: ON_START_BLOCK,\n            message0: `on start`,\n            args0: [],\n            colour,\n            inputsInline: true,\n            tooltip: `Runs code when the device starts`,\n            helpUrl: \"\",\n            nextStatement: CODE_STATEMENT_TYPE,\n        },\n        {\n            kind: \"block\",\n            type: REPEAT_EVERY_BLOCK,\n            message0: `repeat every %1s`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"interval\",\n                    check: \"Number\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            tooltip: `Repeats code at a given interval in seconds`,\n            helpUrl: \"\",\n            nextStatement: CODE_STATEMENT_TYPE,\n        },\n    ],\n\n    createCategory: () => [\n        <SeparatorDefinition>{\n            kind: \"sep\",\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Events\",\n            colour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: REPEAT_EVERY_BLOCK,\n                    values: {\n                        interval: { kind: \"block\", type: \"jacdac_time_picker\" },\n                    },\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ON_START_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: WAIT_BLOCK,\n                    values: {\n                        time: { kind: \"block\", type: \"jacdac_time_picker\" },\n                    },\n                },\n            ].filter(b => !!b),\n        },\n    ],\n    compileEventToVM: ({ block, blockToExpression }) => {\n        const { type } = block\n        if (type === ON_START_BLOCK) {\n            return {\n                expression: (\n                    makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [],\n                        callee: toIdentifier(\"start\"),\n                    }) as VMCommand\n                ).command,\n                errors: processErrors(block, []),\n            }\n        } else if (type === REPEAT_EVERY_BLOCK) {\n            const { inputs } = block\n            const { expr: time, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                expression: (\n                    makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [time],\n                        callee: toIdentifier(\"wait\"),\n                    }) as VMCommand\n                ).command,\n                errors: processErrors(block, errors),\n            }\n        }\n        return undefined\n    },\n    compileCommandToVM: ({ event, block, blockToExpression }) => {\n        const { type } = block\n        if (type === WAIT_BLOCK) {\n            const { inputs } = block\n            {\n                const { expr: time, errors } = blockToExpression(\n                    event,\n                    inputs[0].child\n                )\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [time],\n                        callee: toIdentifier(\"wait\"),\n                    }),\n                    errors: processErrors(block, errors),\n                }\n            }\n        }\n        return undefined\n    },\n}\nexport default loopsDsl\n","import jsep from \"jsep\"\nimport { ExpressionWithErrors } from \"../../vm/VMgenerator\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst ops = {\n    AND: \"&&\",\n    OR: \"||\",\n    EQ: \"===\",\n    NEQ: \"!==\",\n    LT: \"<\",\n    GT: \">\",\n    LTE: \"<=\",\n    GTE: \">=\",\n    NEG: \"-\",\n}\n\nconst logicDsl: BlockDomainSpecificLanguage = {\n    id: \"logic\",\n    types: [\n        \"variable_if\",\n        \"logic_compare\",\n        \"logic_operation\",\n        \"logic_negate\",\n        \"logic_boolean\",\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Logic\",\n            colour: \"%{BKY_LOGIC_HUE}\",\n            contents: [\n                {\n                    kind: \"block\",\n                    type: \"dynamic_if\",\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_compare\",\n                    values: {\n                        A: { kind: \"block\", type: \"math_number\" },\n                        B: { kind: \"block\", type: \"math_number\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_operation\",\n                    values: {\n                        A: { kind: \"block\", type: \"logic_boolean\" },\n                        B: { kind: \"block\", type: \"logic_boolean\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_negate\",\n                    values: {\n                        BOOL: { kind: \"block\", type: \"logic_boolean\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_boolean\",\n                },\n            ],\n        },\n    ],\n    compileExpressionToVM: ({\n        event,\n        block,\n        blockToExpressionInner,\n    }): ExpressionWithErrors => {\n        const { type, inputs } = block\n        switch (type) {\n            case \"logic_operation\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n            case \"logic_negate\": {\n                const argument = blockToExpressionInner(event, inputs[0].child)\n                return {\n                    expr: <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: \"!\",\n                        argument,\n                        prefix: false, // TODO: handle logic_negate\n                    },\n                    errors: [],\n                }\n            }\n            case \"logic_compare\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n        }\n        return undefined\n    },\n}\nexport default logicDsl\n","import jsep from \"jsep\"\nimport { ExpressionWithErrors } from \"../../vm/VMgenerator\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    OptionsInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst ops = {\n    NEG: \"-\",\n    ADD: \"+\",\n    MULTIPLY: \"*\",\n    DIVIDE: \"/\",\n    MINUS: \"-\",\n}\n\nconst mathDsl: BlockDomainSpecificLanguage = {\n    id: \"jacdacmath\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: \"jacdac_math_arithmetic\",\n            message0: \"%1 %2 %3\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"A\",\n                    check: \"Number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"%{BKY_MATH_ADDITION_SYMBOL}\", \"ADD\"],\n                        [\"%{BKY_MATH_SUBTRACTION_SYMBOL}\", \"MINUS\"],\n                        [\"%{BKY_MATH_MULTIPLICATION_SYMBOL}\", \"MULTIPLY\"],\n                        [\"%{BKY_MATH_DIVISION_SYMBOL}\", \"DIVIDE\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"B\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_ARITHMETIC_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_single\",\n            message0: \"%1 %2\",\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"-\", \"NEG\"],\n                        [\"%{BKY_MATH_SINGLE_OP_ABSOLUTE}\", \"ABS\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"NUM\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_SINGLE_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_random\",\n            message0: \"random\",\n            args0: [],\n            output: \"Number\",\n            style: \"math_blocks\",\n            vm: function () {\n                return Math.random()\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: \"jacdac_math_clamp\",\n            message0: \"clamp %1 in [%2, %3]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"minInclusive\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"maxInclusive\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            vm: function (\n                value: number,\n                minInclusive: number,\n                maxInclusive: number\n            ) {\n                return value < minInclusive\n                    ? minInclusive\n                    : value > maxInclusive\n                    ? maxInclusive\n                    : value\n            },\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_map\",\n            message0: \"map %1 from [%2, %3] to [%4, %5]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMax\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMax\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Math\",\n            colour: \"%{BKY_MATH_HUE}\",\n            contents: [\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_arithmetic\",\n                    values: {\n                        A: { kind: \"block\", type: \"math_number\" },\n                        B: { kind: \"block\", type: \"math_number\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_single\",\n                    values: {\n                        NUM: {\n                            kind: \"block\",\n                            type: \"math_number\",\n                        },\n                    },\n                },\n                <BlockReference>{ kind: \"block\", type: \"jacdac_math_random\" },\n                { kind: \"block\", type: \"jacdac_math_map\" },\n                { kind: \"block\", type: \"math_number\" },\n            ],\n        },\n    ],\n    compileExpressionToVM: ({\n        event,\n        block,\n        blockToExpressionInner,\n    }): ExpressionWithErrors => {\n        const { type, inputs } = block\n        switch (type) {\n            case \"math_single\": // built-in blockly\n            case \"jacdac_math_single\": {\n                const argument = blockToExpressionInner(event, inputs[0].child)\n                const op = inputs[0].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: ops[op] || op,\n                        argument,\n                        prefix: false, // TODO: handle math-negate\n                    },\n                    errors: [],\n                }\n            }\n            case \"math_arithmetic\": // built-in blockly\n            case \"jacdac_math_arithmetic\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n        }\n        return undefined\n    },\n}\n\nexport default mathDsl\n","import jsep from \"jsep\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport { makeVMBase } from \"../../vm/VMgenerator\"\n\nconst variablesDsl: BlockDomainSpecificLanguage = {\n    id: \"variables\",\n    types: [\"variables_get\", \"variables_set\", \"math_change\"],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Variables\",\n            colour: \"%{BKY_VARIABLES_HUE}\",\n            custom: \"VARIABLE\",\n        },\n    ],\n    compileExpressionToVM: ({ block /*definition*/ }) => {\n        const { type, inputs } = block\n        if (type === \"variables_get\") {\n            const { value: variable } = inputs[0].fields.var\n            const ret = {\n                expr: toMemberExpression(\"$var\", variable.toString()),\n                errors: [],\n            }\n            return ret\n        }\n        return undefined\n    },\n    compileCommandToVM: ({\n        event,\n        block,\n        /*definition,*/ blockToExpression,\n    }) => {\n        const { type, inputs } = block\n        if (type === \"math_change\" || type === \"variables_set\") {\n            const { expr, errors } = blockToExpression(event, inputs[0].child)\n            const { value: variable } = inputs[0].fields.var\n            return {\n                cmd: makeVMBase(block, {\n                    type: \"CallExpression\",\n                    arguments: [\n                        toMemberExpression(\"$var\", variable.toString()),\n                        type === \"variables_set\"\n                            ? expr\n                            : ({\n                                  type: \"BinaryExpression\",\n                                  operator: \"+\",\n                                  left: toMemberExpression(\n                                      \"$var\",\n                                      variable.toString()\n                                  ),\n                                  right: expr,\n                              } as jsep.BinaryExpression),\n                    ],\n                    callee: toIdentifier(\"writeLocal\"),\n                }),\n                errors,\n            }\n        }\n        return undefined\n    },\n}\nexport default variablesDsl\n","import {\n    BlockDefinition,\n    BlockReference,\n    BOOLEAN_TYPE,\n    DummyInputDefinition,\n    JSON_TYPE,\n    LabelDefinition,\n    PRIMITIVE_TYPES,\n    StatementInputDefinition,\n    TextInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CompileExpressionToVMOptions,\n} from \"./dsl\"\nimport { paletteColorByIndex } from \"./palette\"\n\nconst colour = paletteColorByIndex(-2)\nconst JSON_FIELD_TYPE = \"JSONField\"\nconst JSON_OBJECT_BLOCK = \"json_object\"\nconst JSON_FIELD_SET_BLOCK = \"json_field_set\"\nconst JSON_FIELD_GET_TEMPLATE = \"jsonFieldGet\"\nconst JSON_FIELD_VALUE_TYPE = [...PRIMITIVE_TYPES, JSON_TYPE]\nconst JSON_FIELD_HAS_BLOCK = \"json_field_has\"\n\nconst jsonDSL: BlockDomainSpecificLanguage = {\n    id: \"json\",\n    createBlocks: () => [\n        <BlockDefinition>{\n            kind: \"block\",\n            type: JSON_OBJECT_BLOCK,\n            message0: \"{ %1 %2 }\",\n            args0: [\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                <StatementInputDefinition>{\n                    type: \"input_statement\",\n                    name: \"fields\",\n                    check: JSON_FIELD_TYPE,\n                },\n            ],\n            output: JSON_TYPE,\n            colour,\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: JSON_FIELD_SET_BLOCK,\n            message0: \"%1: %2\",\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"name\",\n                    spellcheck: false,\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: JSON_FIELD_VALUE_TYPE,\n                },\n            ],\n            previousStatement: JSON_FIELD_TYPE,\n            nextStatement: JSON_FIELD_TYPE,\n            colour,\n        },\n        ...PRIMITIVE_TYPES.map(\n            output =>\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: `json_field_get_as_${output.toLowerCase()}`,\n                    message0: `%1 [ %2 ] as ${output.toLowerCase()}`,\n                    args0: [\n                        <ValueInputDefinition>{\n                            type: \"input_value\",\n                            name: \"value\",\n                            check: JSON_TYPE,\n                        },\n                        <TextInputDefinition>{\n                            type: \"field_input\",\n                            name: \"name\",\n                            spellcheck: false,\n                        },\n                    ],\n                    output,\n                    colour,\n                    template: JSON_FIELD_GET_TEMPLATE,\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    vm: (value: any, name: string) => value?.[name],\n                }\n        ),\n        {\n            kind: \"block\",\n            type: JSON_FIELD_HAS_BLOCK,\n            message0: `has %1 [ %2 ]`,\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: JSON_TYPE,\n                },\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"name\",\n                    spellcheck: false,\n                },\n            ],\n            output: BOOLEAN_TYPE,\n            colour,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            vm: (value: any, name: string) => !!value?.[name],\n        },\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"JSON\",\n            colour,\n            contents: [\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Create\",\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: JSON_OBJECT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: JSON_FIELD_SET_BLOCK,\n                    values: {\n                        value: {\n                            kind: \"block\",\n                            type: \"math_number\",\n                        },\n                    },\n                },\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Read\",\n                },\n                ...PRIMITIVE_TYPES.map(output => ({\n                    kind: \"block\",\n                    type: `json_field_get_as_${output.toLowerCase()}`,\n                    values: {\n                        value: <BlockReference>{\n                            kind: \"block\",\n                            type: \"variables_get\",\n                            check: JSON_TYPE,\n                        },\n                    },\n                })),\n                {\n                    kind: \"block\",\n                    type: JSON_FIELD_HAS_BLOCK,\n                },\n            ],\n        },\n    ],\n\n    compileExpressionToVM(options: CompileExpressionToVMOptions) {\n        const { event, block, definition, blockToExpressionInner } = options\n        const { type } = block\n        const { template } = definition\n        if (type === JSON_OBJECT_BLOCK) {\n            // TODO: handle json field set block\n        } else if (type === JSON_FIELD_SET_BLOCK) {\n            // TODO: handle json field get block\n        } else if (template === JSON_FIELD_GET_TEMPLATE) {\n            // TODO: generate json expression\n            console.log(\"json expr\", {\n                event,\n                block,\n                definition,\n                blockToExpressionInner,\n            })\n            return undefined\n        }\n        // don't know\n        return undefined\n    },\n}\n\nexport default jsonDSL\n","import {\n    BlockReference,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    DummyInputDefinition,\n    identityTransformData,\n    NumberInputDefinition,\n    toolsColour,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport DataColumnChooserField from \"../fields/DataColumnChooserField\"\nimport GaugeWidgetField from \"../fields/GaugeWidgetField\"\n\nconst DASHBOARD_GAUGE_BLOCK = \"jacdac_widget_gauge\"\n\nconst colour = toolsColour\nconst widgetDSL: BlockDomainSpecificLanguage = {\n    id: \"widget\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: DASHBOARD_GAUGE_BLOCK,\n            message0: \"gauge min %1 max %2 %3 %4 %5\",\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"min\",\n                },\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"max\",\n                    value: 100,\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"field\",\n                    dataType: \"number\",\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: GaugeWidgetField.KEY,\n                    name: \"widget\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour,\n            template: \"meta\",\n            inputsInline: false,\n            transformData: identityTransformData,\n        },\n    ],\n\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Widgets\",\n            contents: [\n                <BlockReference>{ kind: \"block\", type: DASHBOARD_GAUGE_BLOCK },\n            ],\n            colour,\n        },\n    ],\n}\n\nexport default widgetDSL\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Block, Events, Workspace, alert } from \"blockly\"\nimport {\n    BlockReference,\n    ButtonDefinition,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    SeparatorDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { predictRequest } from \"../../blockly/dsl/workers/tf.proxy\"\nimport type {\n    TFModelPredictRequest,\n    TFModelPredictResponse,\n} from \"../../../workers/tf/dist/node_modules/tf.worker\"\nimport { resolveWorkspaceServices } from \"../WorkspaceContext\"\nimport UseModelField from \"../fields/UseModelField\"\nimport palette from \"./palette\"\n\nimport { importModelJSONIntoWorkspace } from \"../../fs/fs\"\n\nconst DATA_DATAVARIABLE_WRITE_BLOCK = \"data_dataset_write\"\nconst MODEL_ADD_CLASSIFIER_CALLBACK = \"model_add_variable\"\n\nexport const MODEL_BLOCKS = \"model_block_\"\nexport const MB_CLASSIFIER_VAR_TYPE = \"ModelBlockClassifier\"\n\nconst mlBlocksColour = palette()[3]\n\nconst mlBlocksDsl: BlockDomainSpecificLanguage = {\n    id: \"mlBlocks\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: MODEL_BLOCKS + \"classifier\",\n            message0: \"predict with %1\",\n            args0: [\n                {\n                    type: UseModelField.KEY,\n                    name: \"modelFile\",\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: mlBlocksColour,\n            template: \"meta\",\n            dataPreviewField: true,\n            passthroughData: false,\n            transformData: async (b: Block, data: object[]) => {\n                const modelField = b.getField(\"modelFile\") as UseModelField\n                const model = await modelField.getModel()\n\n                if (data) data = data.slice(data.length - model.inputShape[0])\n\n                if (data && data.length >= model.inputShape[0]) {\n                    const inputData = [\n                        data.map(row =>\n                            model.inputTypes.map(inputType => row[inputType])\n                        ),\n                    ]\n                    const predictMsg = {\n                        worker: \"tf\",\n                        type: \"predict\",\n                        data: {\n                            zData: inputData,\n                            model: model,\n                        },\n                    } as TFModelPredictRequest\n                    const predResult = (await predictRequest(\n                        predictMsg\n                    )) as TFModelPredictResponse\n\n                    const transposedResult = []\n                    for (const label in predResult.data.predictAll[0]) {\n                        transposedResult.push({\n                            label: label,\n                            confidence: predResult.data.predictAll[0][label],\n                        })\n                    }\n\n                    return transposedResult\n                }\n                return Promise.resolve([])\n            },\n            tooltip: \"Use this block to run inference on vm sensor data.\",\n            helpUrl: \"\",\n        },\n    ],\n    createCategory: () => [\n        <SeparatorDefinition>{\n            kind: \"sep\",\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"ML classifiers\",\n            colour: mlBlocksColour,\n            contents: [\n                <ButtonDefinition>{\n                    kind: \"button\",\n                    text: \"Import ML model\",\n                    callbackKey: MODEL_ADD_CLASSIFIER_CALLBACK,\n                    callback: (workspace: Workspace) => {\n                        const services = resolveWorkspaceServices(workspace)\n                        const directory = services?.workingDirectory\n                        if (!directory)\n                            alert(\n                                \"You need to open a directory to import a model classifier.\"\n                            )\n                        else {\n                            importModelJSONIntoWorkspace(directory.handle)\n                                .then(() => directory.sync())\n                                .then(() => alert(\"Files imported!\"))\n                        }\n                    },\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: MODEL_BLOCKS + \"classifier\",\n                },\n            ],\n        },\n    ],\n    createWorkspaceChangeListener: () => (event: Events.Abstract) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const { type, blockId } = event as any\n        const isBlockChange =\n            type === Events.BLOCK_CHANGE || type === Events.BLOCK_MOVE\n\n        if (isBlockChange) {\n            const workspace = event.getEventWorkspace_()\n            const block = workspace.getBlockById(blockId)\n            if (block?.type !== DATA_DATAVARIABLE_WRITE_BLOCK) return // nothing so see here\n        }\n    },\n}\nexport default mlBlocksDsl\n","import servicesDSL from \"../blockly/dsl/servicesdsl\"\nimport serverServicesDSL from \"../blockly/dsl/serverservicesdsl\"\nimport toolsDsl from \"../blockly/dsl/toolsdsl\"\nimport loopsDsl from \"../blockly/dsl/loopsdsl\"\nimport logicDsl from \"../blockly/dsl/logicdsl\"\nimport mathDsl from \"../blockly/dsl/mathdsl\"\nimport variablesDsl from \"../blockly/dsl/variablesdsl\"\nimport shadowDsl from \"../blockly/dsl/shadowdsl\"\nimport fieldsDsl from \"../blockly/dsl/fieldsdsl\"\nimport jsonDsl from \"../blockly/dsl/jsondsl\"\nimport chartDsl from \"../blockly/dsl/chartdsl\"\nimport dataDsl from \"../blockly/dsl/datadsl\"\nimport widgetDSL from \"../blockly/dsl/widgetdsl\"\nimport mlBlocksDsl from \"../blockly/dsl/mlblocksdsl\"\n\nconst vmDsls = [\n    servicesDSL,\n    serverServicesDSL,\n    loopsDsl,\n    logicDsl,\n    mathDsl,\n    jsonDsl,\n    variablesDsl,\n    toolsDsl,\n    widgetDSL,\n    dataDsl,\n    chartDsl,\n    shadowDsl,\n    fieldsDsl,\n    mlBlocksDsl,\n]\nexport default vmDsls\n","import { Grid, NoSsr } from \"@material-ui/core\"\nimport React, {\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport useVMRunner from \"./useVMRunner\"\nimport VMDiagnostics from \"./VMDiagnostics\"\nimport VMToolbar from \"./VMToolbar\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport BlockContext, { BlockProvider } from \"../blockly/BlockContext\"\nimport BlockDiagnostics from \"../blockly/BlockDiagnostics\"\nimport workspaceJSONToVMProgram from \"./VMgenerator\"\nimport BlockEditor from \"../blockly/BlockEditor\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport vmDsls from \"./vmdsls\"\nimport { VMStatus } from \"../../../jacdac-ts/src/vm/runner\"\nimport { VM_WARNINGS_CATEGORY, WORKSPACE_FILENAME } from \"../blockly/toolbox\"\nimport FileTabs from \"../fs/FileTabs\"\nimport { WorkspaceFile } from \"../blockly/dsl/workspacejson\"\nimport FileSystemContext from \"../FileSystemContext\"\nimport { resolveWorkspaceServices } from \"../blockly/WorkspaceContext\"\n\nconst VM_EDITOR_ID = \"vm\"\nconst VM_SOURCE_STORAGE_KEY = \"tools:vmeditor\"\nconst VM_NEW_FILE_CONTENT = JSON.stringify({\n    editor: VM_EDITOR_ID,\n    xml: \"\",\n} as WorkspaceFile)\n\nfunction VMEditorWithContext() {\n    const {\n        dsls,\n        workspace,\n        workspaceJSON,\n        roleManager,\n        setWarnings,\n        dragging,\n    } = useContext(BlockContext)\n    const { fileSystem } = useContext(FileSystemContext)\n    const [program, setProgram] = useState<VMProgram>()\n    const autoStart = true\n    const { runner, run, cancel } = useVMRunner(roleManager, program, autoStart)\n\n    // don't run the VM while dragging as it glitches the Ui\n    useEffect(() => {\n        if (runner?.status === VMStatus.Running) cancel()\n    }, [runner, dragging])\n    useEffect(() => {\n        try {\n            const newProgram = workspaceJSONToVMProgram(workspaceJSON, dsls)\n            if (JSON.stringify(newProgram) !== JSON.stringify(program))\n                setProgram(newProgram)\n        } catch (e) {\n            console.error(e)\n            setProgram(undefined)\n        }\n    }, [dsls, workspaceJSON])\n    useEffect(\n        () =>\n            program &&\n            roleManager?.updateRoles([\n                ...program.roles,\n                ...program.serverRoles.map(r => ({\n                    role: r.role,\n                    serviceClass: r.serviceClass,\n                    preferredDeviceId: \"TBD\",\n                })),\n            ]),\n        [roleManager, program]\n    )\n    useEffect(\n        () =>\n            setWarnings(\n                VM_WARNINGS_CATEGORY,\n                arrayConcatMany(program?.handlers.map(h => h.errors))\n            ),\n        [program]\n    )\n\n    useEffect(() => {\n        const services = resolveWorkspaceServices(workspace)\n        if (services) {\n            services.runner = runner\n        }\n    }, [workspace, runner])\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            {!!fileSystem && (\n                <Grid item xs={12}>\n                    <FileTabs\n                        newFileName={WORKSPACE_FILENAME}\n                        newFileContent={VM_NEW_FILE_CONTENT}\n                        hideFiles={true}\n                    />\n                </Grid>\n            )}\n            <Grid item xs={12}>\n                <VMToolbar runner={runner} run={run} cancel={cancel} />\n            </Grid>\n            <Grid item xs={12}>\n                <BlockEditor editorId={VM_EDITOR_ID} />\n            </Grid>\n            {Flags.diagnostics && (\n                <>\n                    <VMDiagnostics program={program} />\n                    <BlockDiagnostics />\n                </>\n            )}\n        </Grid>\n    )\n}\n\nexport default function VMEditor() {\n    const dsls = useMemo(() => {\n        return vmDsls\n    }, [])\n    const handleOnBeforeSaveWorkspaceFile = useCallback(\n        (file: WorkspaceFile) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const f = file as any\n            f.vm = workspaceJSONToVMProgram(file.json, dsls)\n        },\n        []\n    )\n\n    return (\n        <NoSsr>\n            <BlockProvider\n                storageKey={VM_SOURCE_STORAGE_KEY}\n                dsls={dsls}\n                onBeforeSaveWorkspaceFile={\n                    Flags.diagnostics\n                        ? handleOnBeforeSaveWorkspaceFile\n                        : undefined\n                }\n            >\n                <VMEditorWithContext />\n            </BlockProvider>\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport VMEditor from \"../../components/vm/VMEditor\"\n\nexport default function Page() {\n    return <VMEditor />\n}\n"],"names":["DataColumnChooserField","DATA_SCIENCE_STATEMENT_TYPE","identityTransformData","postTransformData","palette","tidyResolveFieldColumn","tidyResolveFieldColumns","tidySlice","DataTableField","DataPreviewField","ScatterPlotField","DATA_ARRANGE_BLOCK","DATA_SELECT_BLOCK","DATA_DROP_BLOCK","DATA_FILTER_COLUMNS_BLOCK","DATA_FILTER_STRING_BLOCK","DATA_MUTATE_COLUMNS_BLOCK","DATA_MUTATE_NUMBER_BLOCK","DATA_SLICE_BLOCK","DATA_SUMMARIZE_BLOCK","DATA_SUMMARIZE_BY_GROUP_BLOCK","DATA_COUNT_BLOCK","DATA_BIN_BLOCK","DATA_CORRELATION_BLOCK","DATA_LINEAR_REGRESSION_BLOCK","DATA_COMMENT_BLOCK","operatorsColour","computeColour","statisticsColour","calcOptions","map","n","dataDsl","id","createBlocks","kind","type","message0","colour","args0","KEY","name","options","previousStatement","nextStatement","dataPreviewField","transformData","b","data","column","order","getFieldValue","descending","Promise","resolve","template","columns","filter","c","length","logic","spellcheck","text","rhs","dataType","newcolumn","lhs","calc","by","min","precision","value","count","operator","sliceHead","undefined","sliceTail","sliceSample","inputsInline","compare","transformed","small","passthroughData","column1","column2","linearRegression","createCategory","contents","builtins","jacdac_on_off","block","jacdac_yes_no","jacdac_time_picker","Number","jacdac_angle","jacdac_percent","jacdac_ratio","shadowDsl","style","output","max","colourOptions","blockToValue","isHighLevelRegister","isHighLevelEvent","isCommand","jdpack","CHANGE","JDRegisterServer","SensorServer","VM_EXTERNAL_REQUEST","VMRegisterServer","serviceServer","reg","defaultValue","identifier","sendGetAsync","raiseGetRegisterEvent","theRealSendGetAsync","VMServiceServer","role","spec","classIdentifier","readingValues","streamingInterval","eventNameToId","regNameToId","regFieldToId","commandPackets","cmdFieldToId","packets","regServer","addExistingRegister","fields","forEach","pkt","index","subscribe","emit","tgt","cmd","addCommand","decoded","regName","respondToGetRegisterEvent","register","sendEventNameAsync","eventName","values","find","p","sendEvent","packFormat","lookupRegister","root","fld","writeRegister","ev","setValues","isEvent","isRegister","isIntensity","JDServiceClient","EVENT","REPORT_UPDATE","SystemReg","VMServiceClient","service","_registers","_reportUpdate","_events","registerRegister","handler","specification","mount","registerEvent","event","sendCommandAsync","commandName","sendCmdAsync","writeRegisterAsync","code","Value","setEnabled","writeRegAsync","jdreg","sendSetPackedAsync","Intensity","lookupRegisterAsync","reportUpdate","refresh","unpackedValue","field","f","assert","JDEventSource","serviceSpecificationFromClassIdentifier","GLOBAL_CHANGE","REGISTER_CHANGE","EXTERNAL_REQUEST","VMExceptionCode","VMException","Error","VMEnvironment","registers","events","serverRoles","_currentRequest","_clientEnvs","_serverEnvs","_globals","_rolesBound","_rolesUnbound","setupServers","serviceClass","globals","servers","Object","keys","k","server","serviceChanged","unmount","push","r","e","roleBound","serviceEnv","getService","getRootName","object","s","getServer","property","lookupAsync","roleName","startsWith","me","local","ep","writeGlobal","firstType","TypeMismatch","toString","clearExternalStimulii","rolesReset","hasRequest","op","completeRequest","request","initRoles","slice","roleTransition","unsubscribe","vs","unparse","ae","elements","join","caller","callee","arguments","computed","be","left","right","ue","argument","raw","VMExprEvaluator","env","callEval","exprStack","tos","pop","evalAsync","visitExpressionAsync","ret","top","Math","abs","val","lit","VMFunctions","args","prompt","context","parseIntFloat","exprVisitor","parent","current","structVisit","Array","isArray","key","SpecSymbolResolver","role2spec","error","reset","roles","check","specResolve","shortName","client","rest","obj","indexOf","destructAccessPath","expectIdentifier","lookupEvent","_","lookupRegisterRaw","getRegister","isBoolOrNumericFormat","lookupReplace","child","replace","lookup","i","VMChecker","resolver","supportedExpression","checkCommand","funs","cmdIndex","findIndex","theCommand","command","commands","processSpecCommandFunction","processTestFunction","arg","visitReplace","minArgs","argsRequiredOptional","maxArgs","newExpressions","def","concat","processTestArguments","optional","a","eventSymTable","argType","message","member","fmt","test","lookupField","serviceSpecificationFromName","toIdentifier","toMemberExpression","handlerVisitor","visitITE","visitCommand","visitBase","base","ite","else","then","compileProgram","handlers","newProgram","startBlock","h","removeIfThenElse","errors","checkCall","cid","shift","newSequence","labels","labelId","time","end","expr","getServiceFromRole","info","roleFound","pair","checkProgram","prog","allErrors","goodHandlers","errorFun","sourceId","symbolResolver","checker","errorCount","split","Mutex","promises","acquire","reject","v","ROLE_BOUND","ROLE_UNBOUND","SERVICE_PROVIDER_REMOVED","TRACE","VM_GLOBAL_CHANGE","VM_COMMAND_FAILED","VM_WATCH_CHANGE","VM_BREAKPOINT","VM_INTERNAL_ERROR","VM_LOG_ENTRY","VM_ROLE_MISSING","JDClient","JDServerServiceProvider","VMInternalStatus","VM_WAKE_SLEEPER","VMJumpException","label","VMTimerException","ms","VMRequestException","VMCommandEvaluator","_regSaved","_changeSaved","_started","trace","msg","ee","namespace","funName","InternalError","newEval","evalExpressionAsync","checkExpressionAsync","startAsync","inst","evaluate","neededStart","Running","Completed","regValue","watch","evString","writeLog","Stopped","VMCommandRunner","handlerId","_status","_eval","stepAsync","status","VMHandlerRunner","_commandIndex","_currentCommand","stopped","_labelToIndex","gotoTop","Ready","commandIndex","wake","next","runToCompletionAsync","singleStep","singleStepCheckBreakAsync","getCommand","sid","breakpointOnAsync","singleStepAsync","Sleeping","sleepAsync","handlerWokeOnRequest","isEveryHandler","isRegisterChangeHandler","VMStatus","MAX_LOG","VMProgramRunner","roleManager","program","_handlerRunners","_roles","_serverRoles","_waitQueue","_everyQueue","_runQueue","_sleepQueue","_watch","_log","_breaks","_onCompletionOfExternalRequest","_in_run","compiled","console","debug","_env","_waitRunMutex","_breaksMutex","_sleepMutex","waitingToRunning","bus","provider","_provider","wakeSleeper","initializeRoleManagement","g","setStatus","last","lookupWatch","setBreakpointsAsync","breaks","clearBreakpointsAsync","setTimeout","handlerRunner","device","stopSleepers","startProvider","_device","cancel","resumeAsync","Paused","runAsync","getCurrentRunner","runHandlerAsync","postProcessHandler","newHead","emitBreakpoint","atTop","oneStep","brkCommand","ex","RoleNoService","done","moveToWait","unshift","q","del","splice","handlersStarted","newRunners","sleepingRunners","hs","clearTimeout","addRoleService","addServiceProvider","updateRole","deviceId","statusCode","log","removeServiceProvider","useContext","useEffect","useState","AppContext","ERROR","Flags","useVMRunner","autoRun","setError","runner","setRunner","_autoStart","_setAutoStart","run","newTestRunner","handleTrace","diagnostics","Grid","Typography","React","CodeBlock","VMDiagnostics","props","JSON","stringify","BlockContext","JacdacContext","DeviceAvatar","serviceProviderDefinitionFromServiceClass","useServiceServer","CancelIcon","Chip","Tooltip","TWIN_BLOCK","RoleChip","workspace","preferredDeviceId","handleRoleClick","twinBlock","getTopBlocks","inputList","fieldRow","getVariable","newBlock","variable","setValue","getId","m","getMetrics","moveBy","viewWidth","viewHeight","initSvg","render","centerOnBlock","handleDelete","useChange","BlockClientRoles","useMemo","PlayArrowIcon","StopIcon","IconButtonWithTooltip","PauseIcon","arrayConcatMany","PlayForWorkIcon","useMounted","IconButtonWithProgress","BugReportIcon","useWorkspaceBreakpoints","breakpoints","meta","setBreakpointHighlight","highlightBlock","VMRunnerButtons","t","indeterminate","setIndeterminate","breakpoint","setBreakpoint","pausing","paused","mounted","disabled","handleRun","handleCancel","handleResume","handlePause","handleStep","AddIcon","VMStartSimulatorButton","toggleShowDeviceHostsDialog","VMToolbar","withPrefix","humanify","isNumericType","BuzzerCmd","JoystickReg","ServoReg","SRV_BOOTLOADER","SRV_BUZZER","SRV_CONTROL","SRV_JOYSTICK","SRV_LOGGER","SRV_PROTO_TEST","SRV_ROLE_MANAGER","SRV_SERVO","isSensor","serviceSpecifications","splitFilter","toMap","uniqueMap","NoteField","ServoAngleField","BOOLEAN_TYPE","CODE_STATEMENT_TYPE","JSON_TYPE","NUMBER_TYPE","resolveBlockDefinition","STRING_TYPE","makeVMBase","Variables","paletteColorByIndex","SET_STATUS_LIGHT_BLOCK","ROLE_BOUND_EVENT_BLOCK","ROLE_BOUND_BLOCK","isBooleanField","isStringField","toBlocklyType","encoding","enumInfo","srv","enums","ignoredServices","customMessages","Direction","get","customShadows","Angle","shadow","SHADOW","PlayNote","lookupCustomShadow","cs","fieldsSupported","every","fieldName","fieldToShadow","unit","typicalMin","absoluteMin","typicalMax","absoluteMax","variableName","camelName","toLowerCase","isEnabledRegister","customMessage","eventFieldGroups","toRoleType","parseRoleType","parseInt","fieldsToFieldInputs","fieldsToValues","fieldsToMessage","serviceHelp","shortId","sensorColor","otherColor","createServiceColor","theme","serviceColor","roleVariable","variableTypes","defaultType","getServiceInfo","allServices","supportedServices","registerSimples","registerComposites","registerSimpleTypes","registerSimpleOthers","registerSimpleEnumTypes","einfo","registerCompositeEnumTypes","kv","lowLevel","ServicesBaseDSL","_serviceBlocks","_eventFieldBlocks","makeRegisterSimpleGetBlocks","tooltip","description","helpUrl","makeRegisterSetBlocks","makeRegisterChangeByEventBlocks","some","makeRegisterNumericsGetBlocks","re","makeRegisterEnumGetBlocks","members","makeFieldBlocks","sps","worker","sp","createCategoryHelper","source","liveServices","blockServices","variables","vt","usedEvents","Set","blocks","definition","inputs","jdBlocks","services","toolboxServices","sort","l","localeCompare","getFieldBlocks","fieldBlocks","has","makeCategory","isClient","serviceBlocks","eventFieldBLocks","callbackKey","callback","createVariableButtonHandler","eventFieldBlocks","serviceClient","sc","compileEventToVM","makeAwaitEvent","expression","blockToExpression","compileExpressionToVM","eventInfo","compileCommandToVM","exprsErrors","flatMap","serviceCommand","BUILTIN_TYPES","Blockly","resolveDsl","processErrors","workspaceJSONToVMProgram","dsls","EmptyExpression","blockIn","blockToExpressionInner","dsl","warn","d","Blocks","res","blockToCommand","thenHandler","elseHandler","addCommands","children","exprErrors","ifThenElse","dslRes","nop","topEvent","topErrors","topMeta","SRV_HID_KEYBOARD","SRV_LED","SRV_DOT_MATRIX","SRV_SEVEN_SEGMENT_DISPLAY","KeyboardKeyField","LEDColorField","LEDMatrixField","toolsColour","JDomTreeField","TwinField","RECORD_WINDOW_BLOCK","INSPECT_BLOCK","commandColor","ServicesBlockDomainSpecificLanguage","resolveService","cls","customClientBlockDefinitions","color","speed","digits","eventClientBlocks","registerChangeByEventClientBlocks","registerSimpleGetClientBlocks","registerEnumGetClientBlocks","registerNumericsGetClientBlocks","registerSetClientBlocks","commandClientBlocks","_roleBlocks","toolsBlocks","previousData","horizon","makeServicesCategories","clientServicesCategories","commonCategory","toolsCategory","servicesDSL","ServerServicesBlockDomainSpecificLanguage","makeRegisterGetSetRequestBlocks","isGet","eventServerBlocks","eventsNoArgs","retNoArgs","eventsArgs","retArgs","registerSimpleGetServerBlocks","registerEnumGetServerBlocks","registerNumericsGetServerBlocks","registerSetServerBlocks","registerSetRequestBlocks","registerGetRequestBlocks","commandServerBlocks","serverServicesCategories","serverServicesDSL","LogViewField","VariablesField","WatchValueField","WATCH_BLOCK","LOG_BLOCK","VIEW_LOG_BLOCK","VARIABLES_BLOCK","toolsDSL","WAIT_BLOCK","ON_START_BLOCK","REPEAT_EVERY_BLOCK","loopsDsl","interval","ops","AND","OR","EQ","NEQ","LT","GT","LTE","GTE","NEG","logicDsl","types","A","B","BOOL","prefix","ADD","MULTIPLY","DIVIDE","MINUS","mathDsl","extensions","vm","random","minInclusive","maxInclusive","NUM","variablesDsl","custom","var","PRIMITIVE_TYPES","JSON_FIELD_TYPE","JSON_OBJECT_BLOCK","JSON_FIELD_SET_BLOCK","JSON_FIELD_GET_TEMPLATE","JSON_FIELD_VALUE_TYPE","JSON_FIELD_HAS_BLOCK","jsonDSL","GaugeWidgetField","DASHBOARD_GAUGE_BLOCK","widgetDSL","Events","alert","predictRequest","resolveWorkspaceServices","UseModelField","importModelJSONIntoWorkspace","DATA_DATAVARIABLE_WRITE_BLOCK","MODEL_ADD_CLASSIFIER_CALLBACK","MODEL_BLOCKS","MB_CLASSIFIER_VAR_TYPE","mlBlocksColour","mlBlocksDsl","modelField","getField","model","getModel","inputShape","inputData","row","inputTypes","inputType","predictMsg","zData","predResult","transposedResult","predictAll","confidence","directory","workingDirectory","handle","sync","createWorkspaceChangeListener","blockId","isBlockChange","BLOCK_CHANGE","BLOCK_MOVE","getEventWorkspace_","getBlockById","toolsDsl","fieldsDsl","jsonDsl","chartDsl","vmDsls","NoSsr","useCallback","BlockProvider","BlockDiagnostics","BlockEditor","VM_WARNINGS_CATEGORY","WORKSPACE_FILENAME","FileTabs","FileSystemContext","VM_EDITOR_ID","VM_SOURCE_STORAGE_KEY","VM_NEW_FILE_CONTENT","editor","xml","VMEditorWithContext","workspaceJSON","setWarnings","dragging","fileSystem","setProgram","autoStart","updateRoles","VMEditor","handleOnBeforeSaveWorkspaceFile","file","json","Page"],"sourceRoot":""}