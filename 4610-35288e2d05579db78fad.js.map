{"version":3,"file":"4610-35288e2d05579db78fad.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dialogs/StartSimulatorDialog.tsx","webpack://jacdac-docs/./src/components/ui/SelectWithLabel.tsx"],"sourcesContent":["import {\n    Button,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    MenuItem,\n} from \"@material-ui/core\"\nimport AppContext from \"../AppContext\"\nimport React, { useContext, useMemo, useState } from \"react\"\nimport { useId } from \"react-use-id-hook\"\nimport servers, {\n    addServiceProvider,\n} from \"../../../jacdac-ts/src/servers/servers\"\nimport { VIRTUAL_DEVICE_NODE_NAME } from \"../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport { delay, uniqueMap } from \"../../../jacdac-ts/src/jdom/utils\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport KindIcon from \"../KindIcon\"\nimport SelectWithLabel from \"../ui/SelectWithLabel\"\nimport useMediaQueries from \"../hooks/useMediaQueries\"\nimport HostedSimulatorsContext, {\n    hostedSimulatorDefinitions,\n} from \"../HostedSimulatorsContext\"\n\nexport default function StartSimulatorDialog(props: {\n    open: boolean\n    onClose: () => void\n}) {\n    const { open, onClose } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { enqueueSnackbar } = useContext(AppContext)\n    const { addHostedSimulator } = useContext(HostedSimulatorsContext)\n    const deviceHostDialogId = useId()\n    const deviceHostLabelId = useId()\n\n    const [selected, setSelected] = useState(\"button\")\n    const providerDefinitions = useMemo(() => servers(), [])\n    const simulatorDefinitions = useMemo(() => hostedSimulatorDefinitions(), [])\n    const { mobile } = useMediaQueries()\n\n    const handleChange = (ev: React.ChangeEvent<{ value: unknown }>) => {\n        setSelected(ev.target.value as string)\n    }\n    const handleCancel = () => {\n        onClose()\n    }\n    const handleStart = () => {\n        const provider = providerDefinitions.find(h => h.name === selected)\n        if (provider) addServiceProvider(bus, provider)\n        const simulator = simulatorDefinitions.find(h => h.name === selected)\n        if (simulator) addHostedSimulator(simulator)\n        onClose()\n    }\n    const handleAddAll = async () => {\n        const allProviderDefinitions = uniqueMap(\n            providerDefinitions.filter(hd => hd.serviceClasses.length === 1),\n            hd => hd.serviceClasses[0].toString(),\n            h => h\n        )\n        enqueueSnackbar(\n            `starting ${allProviderDefinitions.length} simulators...`,\n            `info`\n        )\n        onClose()\n        for (const provider of allProviderDefinitions) {\n            await delay(100)\n            addServiceProvider(bus, provider)\n        }\n    }\n\n    return (\n        <Dialog\n            id={deviceHostDialogId}\n            aria-labelledby={deviceHostLabelId}\n            open={open}\n            onClose={onClose}\n            fullScreen={mobile}\n        >\n            <DialogTitle id={deviceHostLabelId}>Start a simulator</DialogTitle>\n            <DialogContent>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <SelectWithLabel\n                            fullWidth={true}\n                            helperText={\"Select the device to simulate\"}\n                            label={\"Simulator\"}\n                            value={selected}\n                            onChange={handleChange}\n                        >\n                            {providerDefinitions.map(host => (\n                                <MenuItem key={host.name} value={host.name}>\n                                    {host.name}\n                                </MenuItem>\n                            ))}\n                            {simulatorDefinitions.map(host => (\n                                <MenuItem key={host.name} value={host.name}>\n                                    {host.name}\n                                </MenuItem>\n                            ))}\n                        </SelectWithLabel>\n                    </Grid>\n                    <Grid item>\n                        <Grid container spacing={1}>\n                            {mobile && (\n                                <Grid item>\n                                    <Button\n                                        aria-label={`cancel`}\n                                        variant=\"contained\"\n                                        title=\"Cancel\"\n                                        onClick={handleCancel}\n                                    >\n                                        cancel\n                                    </Button>\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <Button\n                                    aria-label={`start ${selected}`}\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    title=\"Start new simulator\"\n                                    onClick={handleStart}\n                                    startIcon={\n                                        <KindIcon\n                                            kind={VIRTUAL_DEVICE_NODE_NAME}\n                                        />\n                                    }\n                                >\n                                    start\n                                </Button>\n                            </Grid>\n                            {Flags.diagnostics && (\n                                <Grid item>\n                                    <Button\n                                        variant=\"outlined\"\n                                        onClick={handleAddAll}\n                                    >\n                                        start all simulators\n                                    </Button>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    )\n}\n","import {\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    MenuItem,\n    Select,\n} from \"@material-ui/core\"\nimport React, { ChangeEvent, ReactNode } from \"react\"\nimport { useId } from \"react-use-id-hook\"\n\nexport default function SelectWithLabel(props: {\n    required?: boolean\n    label?: string\n    disabled?: boolean\n    error?: string\n    value?: string\n    placeholder?: string\n    type?: string\n    fullWidth?: boolean\n    onChange?: (ev: ChangeEvent<{ name?: string; value: unknown }>) => void\n    onClose?: (ev: ChangeEvent<unknown>) => void\n    helperText?: string\n    children?: ReactNode\n    none?: ReactNode\n}) {\n    const {\n        label,\n        fullWidth,\n        required,\n        disabled,\n        value,\n        error,\n        placeholder,\n        onChange,\n        onClose,\n        children,\n        helperText,\n        type,\n        none,\n    } = props\n    const labelId = useId()\n    const descrId = useId()\n    const id = useId()\n    const hasDescr = !!helperText || !!error\n\n    return (\n        <FormControl fullWidth={fullWidth} variant=\"outlined\">\n            <InputLabel id={labelId} key=\"label\">\n                {required ? `${label} *` : label}\n            </InputLabel>\n            <Select\n                id={id}\n                disabled={disabled}\n                label={label}\n                value={value}\n                error={!!error}\n                fullWidth={true}\n                placeholder={placeholder}\n                type={type}\n                labelId={labelId}\n                aria-describedby={hasDescr ? descrId : undefined}\n                onChange={onChange}\n                onClose={onClose}\n            >\n                {none !== undefined && (\n                    <MenuItem key={\"none\"} value={\"\"}>\n                        {none}\n                    </MenuItem>\n                )}\n                {children}\n            </Select>\n            {hasDescr && (\n                <FormHelperText id={descrId}>\n                    {error || helperText}\n                </FormHelperText>\n            )}\n        </FormControl>\n    )\n}\n"],"names":["Button","Dialog","DialogContent","DialogTitle","Grid","MenuItem","AppContext","React","useContext","useMemo","useState","useId","servers","addServiceProvider","VIRTUAL_DEVICE_NODE_NAME","Flags","delay","uniqueMap","JacdacContext","KindIcon","SelectWithLabel","useMediaQueries","HostedSimulatorsContext","hostedSimulatorDefinitions","StartSimulatorDialog","props","open","onClose","bus","enqueueSnackbar","addHostedSimulator","deviceHostDialogId","deviceHostLabelId","selected","setSelected","providerDefinitions","simulatorDefinitions","mobile","handleChange","ev","target","value","handleCancel","handleStart","provider","find","h","name","simulator","handleAddAll","allProviderDefinitions","filter","hd","serviceClasses","length","toString","map","host","diagnostics","FormControl","FormHelperText","InputLabel","Select","label","fullWidth","required","disabled","error","placeholder","onChange","children","helperText","type","none","labelId","descrId","id","hasDescr","undefined"],"sourceRoot":""}