{"version":3,"file":"4556-f7414ec4137212b61615.js","mappings":"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","sources":["webpack://jacdac-docs/./src/workers/csv/workerloader.js","webpack://jacdac-docs/./src/workers/data/workerloader.js","webpack://jacdac-docs/./src/workers/tf/workerloader.js","webpack://jacdac-docs/./src/workers/vm/workerloader.js","webpack://jacdac-docs/./src/workers/cad/workerloader.js","webpack://jacdac-docs/./src/components/blockly/dsl/workers/proxy.ts","webpack://jacdac-docs/./src/components/blockly/dsl/workers/cad.proxy.ts","webpack://jacdac-docs/./src/components/tools/EnclosureGenerator.tsx"],"sourcesContent":["export default function createCsvWorker() {\n    return (\n        typeof Window !== \"undefined\" &&\n        new Worker(\n            new URL(\n                \"./dist/node_modules/csv-worker.js\",\n                import.meta.url // syntax not supported in typescript\n            )\n        )\n    )\n}","export default function createDataWorker() {\n    return (\n        typeof Window !== \"undefined\" &&\n        new Worker(\n            new URL(\n                \"./dist/node_modules/data-worker.js\",\n                import.meta.url // syntax not supported in typescript\n            )\n        )\n    )\n}\n","export default function createTFWorker() {\n    return (\n        typeof Window !== \"undefined\" &&\n        new Worker(\n            new URL(\n                \"./dist/node_modules/tf-worker.js\",\n                import.meta.url // syntax not supported in typescript\n            )\n        )\n    )\n}\n","export default function createVMWorker() {\n    return (\n        typeof Window !== \"undefined\" &&\n        new Worker(\n            new URL(\n                // gatsby fast-refresh ignores files with node_modules in path\n                \"./dist/node_modules/vm-worker.js\",\n                import.meta.url // syntax not supported in typescript\n            )\n        )\n    )\n}\n","export default function createCadWorker() {\n    return (\n        typeof Window !== \"undefined\" &&\n        new Worker(\n            new URL(\n                \"./dist/node_modules/cad-worker.js\",\n                import.meta.url // syntax not supported in typescript\n            )\n        )\n    )\n}","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { MESSAGE } from \"../../../../../jacdac-ts/src/jdom/constants\"\nimport JDEventSource from \"../../../../../jacdac-ts/src/jdom/eventsource\"\nimport { assert, SMap } from \"../../../../../jacdac-ts/src/jdom/utils\"\nimport createCsvWorker from \"../../../../workers/csv/workerloader\"\nimport createDataWorker from \"../../../../workers/data/workerloader\"\nimport createTFWorker from \"../../../../workers/tf/workerloader\"\nimport createVMWorker from \"../../../../workers/vm/workerloader\"\nimport createCadWorker from \"../../../../workers/cad/workerloader\"\n\nexport type VMType = \"data\" | \"csv\" | \"tf\" | \"vm\" | \"cad\"\n\nexport interface WorkerMessage {\n    worker: VMType\n    id?: string\n}\n\nexport interface WorkerResponse {\n    error?: string\n}\n\nexport class WorkerProxy extends JDEventSource {\n    readonly pendings: SMap<{\n        resolve: (res: any) => void\n        reject: (err: any) => void\n    }> = {}\n    constructor(readonly worker: Worker, readonly workerid: VMType) {\n        super()\n        this.worker.addEventListener(\"message\", this.handleMessage.bind(this))\n    }\n\n    private handleMessage(event: MessageEvent) {\n        const { data: message } = event\n        const { id, worker } = message\n        const pending = this.pendings[id]\n        if (pending) {\n            assert(worker === message.worker)\n            pending.resolve(message)\n        } else {\n            this.emit(MESSAGE, event.data)\n        }\n    }\n\n    postMessage<T, R>(message: WorkerMessage & T): Promise<WorkerResponse & R> {\n        message.id = message.id || Math.random() + \"\"\n        message.worker = this.workerid\n        return new Promise<R>((resolve, reject) => {\n            this.pendings[message.id] = { resolve, reject }\n            this.worker.postMessage(message)\n        })\n    }\n}\n\nconst _workers: SMap<WorkerProxy> = {}\nconst loaders = {\n    data: createDataWorker,\n    csv: createCsvWorker,\n    tf: createTFWorker,\n    vm: createVMWorker,\n    cad: createCadWorker,\n}\nexport default function workerProxy(workerid: VMType) {\n    const worker =\n        _workers[workerid] ||\n        (_workers[workerid] = new WorkerProxy(loaders[workerid](), workerid))\n    return worker\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport workerProxy from \"./proxy\"\nimport type {\n    CadConvertRequest,\n    CadConvertResponse,\n} from \"../../../../workers/cad/dist/node_modules/cad.worker\"\nimport type {\n    EnclosureModel,\n    EnclosureOptions,\n} from \"../../../../workers/cad/dist/node_modules/enclosurecad\"\n\nexport async function convertToSTL(\n    model: EnclosureModel,\n    options?: EnclosureOptions\n): Promise<Blob> {\n    const worker = workerProxy(\"cad\")\n    const res = await worker.postMessage<CadConvertRequest, CadConvertResponse>(\n        {\n            worker: \"cad\",\n            type: \"convert\",\n            model,\n            options,\n        }\n    )\n    return res?.stl\n}\n","import React, { lazy, useEffect, useState } from \"react\"\n\nimport { Button, Grid } from \"@material-ui/core\"\nimport Suspense from \"../ui/Suspense\"\nimport { convertToSTL } from \"../blockly/dsl/workers/cad.proxy\"\nimport type {\n    EnclosureModel,\n    EnclosureOptions,\n} from \"../../workers/cad/dist/node_modules/enclosurecad\"\n\nconst ModelViewer = lazy(() => import(\"../home/models/ModelViewer\"))\nconst STLModel = lazy(() => import(\"../home/models/STLModel\"))\n\nexport default function EnclosureGenerator(props: {\n    module: EnclosureModel\n    options?: EnclosureOptions\n    color?: string\n}) {\n    const { color, module, options } = props\n    const [working, setWorking] = useState(false)\n    const [url, setUrl] = useState<string>(\"\")\n\n    const updateUrl = async () => {\n        try {\n            setWorking(true)\n            const blob = await convertToSTL(module, options)\n            const newUrl = blob ? URL.createObjectURL(blob) : undefined\n            setUrl(newUrl)\n        } finally {\n            setWorking(false)\n        }\n    }\n    useEffect(() => () => URL.revokeObjectURL(url), [url])\n    const handleClick = () => updateUrl()\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item>\n                <Grid container spacing={1} direction=\"row\">\n                    <Grid item>\n                        <Button\n                            onClick={handleClick}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={working}\n                        >\n                            Refresh STL\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            href={url}\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            download=\"enclosure.stl\"\n                            disabled={!url}\n                        >\n                            Download STL\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Grid>\n            {url && (\n                <Grid item xs={12}>\n                    <Suspense>\n                        <ModelViewer responsive={true}>\n                            <STLModel url={url} color={color} />\n                        </ModelViewer>\n                    </Suspense>\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"names":["import","MESSAGE","JDEventSource","assert","createCsvWorker","createDataWorker","createTFWorker","createVMWorker","createCadWorker","WorkerProxy","worker","workerid","pendings","addEventListener","handleMessage","bind","event","data","message","id","pending","resolve","emit","postMessage","Math","random","Promise","reject","_workers","loaders","csv","tf","vm","cad","workerProxy","convertToSTL","model","options","res","type","stl","React","lazy","useEffect","useState","Button","Grid","Suspense","ModelViewer","STLModel","EnclosureGenerator","props","color","module","working","setWorking","url","setUrl","updateUrl","blob","newUrl","URL","createObjectURL","undefined","revokeObjectURL","handleClick"],"sourceRoot":""}