{"version":3,"file":"component---src-pages-tools-device-qr-code-tsx-0fbae079ce1bc0926e8d.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,IAAMS,UAAU,gBAAGJ,2CAAI,CAAC,MAAM,gJAAP,CAAvB;AAEe,SAASK,qBAAT,GAAiC;AAC5C,MAAM;AAAA,OAACC,GAAD;AAAA,OAAMC;AAAN,MAAgBN,+CAAQ,IAA9B;AACA,MAAM;AAAA,OAACO,MAAD;AAAA,OAASC;AAAT,MAAsBR,+CAAQ,CAAC,KAAD,CAApC;AACA,MAAM;AAAA,OAACS,IAAD;AAAA,OAAOC;AAAP,MAAkBV,+CAAQ,CAAC,GAAD,CAAhC;;AACA,MAAMW,eAAe,GAAIC,EAAD,IAAuC;AAAA;;AAC3D,QAAMC,MAAM,uBAAGD,EAAE,CAACE,MAAH,CAAUC,KAAb,qDAAG,iBAAiBC,WAAjB,EAAf;AACAV,IAAAA,MAAM,CAACO,MAAD,CAAN;AACH,GAHD;;AAIA,MAAMI,gBAAgB,GAAIL,EAAD,IAAuC;AAC5D,QAAMM,CAAC,GAAGC,MAAM,CAACP,EAAE,CAACE,MAAH,CAAUC,KAAX,CAAhB;AACA,QAAI,CAACK,KAAK,CAACF,CAAD,CAAV,EAAeR,OAAO,CAACQ,CAAD,CAAP;AAClB,GAHD;;AAIA,MAAMG,YAAY,GAAIT,EAAD,IAAuC;AACxDJ,IAAAA,SAAS,CAAC,CAAC,CAACI,EAAE,CAACE,MAAH,CAAUQ,OAAb,CAAT;AACH,GAFD;;AAGA,MAAMC,QAAQ,GAAGtB,kEAAK,EAAtB;AACA,MAAMuB,QAAQ,GAAGvB,kEAAK,EAAtB;AACA,sBACI,iHACI,6FADJ,eAEI,4HAFJ,eAGI,iDAAC,8DAAD;AAAO,YAAQ,EAAC,MAAhB;AAAuB,MAAE,EAAE;AAAEwB,MAAAA,EAAE,EAAE;AAAN;AAA3B,8FAHJ,eAOI,iDAAC,+DAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE;AAAzB,kBACI,iDAAC,+DAAD;AAAM,QAAI,MAAV;AAAW,MAAE;AAAb,kBACI,iDAAC,8DAAD;AACI,aAAS,EAAE,IADf;AAEI,SAAK,EAAC,KAFV;AAGI,SAAK,EAAEpB,GAHX;AAII,eAAW,EAAC,EAJhB;AAKI,YAAQ,EAAEM,eALd;AAMI,cAAU,EAAE;AANhB,IADJ,CADJ,eAWI,iDAAC,+DAAD;AAAM,QAAI;AAAV,kBACI,iDAAC,8DAAD;AACI,SAAK,EAAC,iBADV;AAEI,QAAI,EAAC,QAFT;AAGI,SAAK,EAAEF,IAHX;AAII,YAAQ,EAAEQ;AAJd,IADJ,CAXJ,eAmBI,iDAAC,+DAAD;AAAM,QAAI;AAAV,kBACI,iDAAC,8DAAD;AAAQ,WAAO,EAAEV,MAAjB;AAAyB,YAAQ,EAAEc;AAAnC,IADJ,eAEI;AAAO,MAAE,EAAEE,QAAX;AAAqB,WAAO,EAAEC;AAA9B,cAFJ,CAnBJ,CAPJ,EAiCKnB,GAAG,iBACA,iHACI,mEADJ,eAEI,2EACI;AAAG,QAAI,EAAEA;AAAT,KAAeA,GAAf,CADJ,CAFJ,eAKI,wEALJ,eAMI,iDAAC,wEAAD,qBACI,iDAAC,UAAD;AAAY,OAAG,EAAEA,GAAjB;AAAsB,UAAM,EAAEE,MAA9B;AAAsC,QAAI,EAAEE;AAA5C,IADJ,CANJ,CAlCR,CADJ;AAgDH","sources":["webpack://jacdac-docs/./src/pages/tools/device-qr-code.tsx"],"sourcesContent":["import { Alert, Grid, Switch, TextField } from \"@mui/material\"\nimport React, { ChangeEvent, lazy, useState } from \"react\"\nimport { useId } from \"react-use-id-hook\"\nimport Suspense from \"../../components/ui/Suspense\"\nconst SilkQRCode = lazy(() => import(\"../../components/widgets/SilkQrCode\"))\n\nexport default function DeviceQRCodeGenerator() {\n    const [url, setURL] = useState(``)\n    const [mirror, setMirror] = useState(false)\n    const [size, setSize] = useState(0.3)\n    const handleUrlChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const vanity = ev.target.value?.toUpperCase()\n        setURL(vanity)\n    }\n    const handleSizeChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const s = Number(ev.target.value)\n        if (!isNaN(s)) setSize(s)\n    }\n    const handleMirror = (ev: ChangeEvent<HTMLInputElement>) => {\n        setMirror(!!ev.target.checked)\n    }\n    const mirrorid = useId()\n    const switchid = useId()\n    return (\n        <>\n            <h1>Device Silk QR Code generator</h1>\n            <p>Enter a short URL to be encoded as a silk compatible QR code.</p>\n            <Alert severity=\"info\" sx={{ mb: 1 }}>\n                Keep the url as short as possible and use capital letters to get\n                the smallest QR code.\n            </Alert>\n            <Grid container spacing={1}>\n                <Grid item xs>\n                    <TextField\n                        fullWidth={true}\n                        label=\"url\"\n                        value={url}\n                        placeholder=\"\"\n                        onChange={handleUrlChange}\n                        helperText={\"Short URL, capital letters best\"}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        label=\"block size (mm)\"\n                        type=\"number\"\n                        value={size}\n                        onChange={handleSizeChange}\n                    />\n                </Grid>\n                <Grid item>\n                    <Switch checked={mirror} onChange={handleMirror} />\n                    <label id={mirrorid} htmlFor={switchid}>\n                        mirror\n                    </label>\n                </Grid>\n            </Grid>\n            {url && (\n                <>\n                    <h2>URL</h2>\n                    <pre>\n                        <a href={url}>{url}</a>\n                    </pre>\n                    <h2>QR codes</h2>\n                    <Suspense>\n                        <SilkQRCode url={url} mirror={mirror} size={size} />\n                    </Suspense>\n                </>\n            )}\n        </>\n    )\n}\n"],"names":["Alert","Grid","Switch","TextField","React","lazy","useState","useId","Suspense","SilkQRCode","DeviceQRCodeGenerator","url","setURL","mirror","setMirror","size","setSize","handleUrlChange","ev","vanity","target","value","toUpperCase","handleSizeChange","s","Number","isNaN","handleMirror","checked","mirrorid","switchid","mb"],"sourceRoot":""}