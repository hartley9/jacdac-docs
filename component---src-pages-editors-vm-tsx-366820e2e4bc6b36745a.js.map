{"version":3,"file":"component---src-pages-editors-vm-tsx-366820e2e4bc6b36745a.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/BugReport.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Cancel.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Pause.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/PlayArrow.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/PlayForWork.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Stop.js","webpack://jacdac-docs/./src/components/blockly/dsl/shadowdsl.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/server.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/client.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/environment.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/expr.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/utils.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/runner.ts","webpack://jacdac-docs/./src/components/vm/useVMRunner.ts","webpack://jacdac-docs/./src/components/vm/VMDiagnostics.tsx","webpack://jacdac-docs/./src/components/blockly/RoleChip.tsx","webpack://jacdac-docs/./src/components/blockly/BlockRoles.tsx","webpack://jacdac-docs/./src/components/vm/VMRunnerButtons.tsx","webpack://jacdac-docs/./src/components/vm/VMStartSimulatorButton.tsx","webpack://jacdac-docs/./src/components/vm/VMToolbar.tsx","webpack://jacdac-docs/./src/components/blockly/dsl/servicesdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/serverservicesdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/toolsdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/loopsdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/logicdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/mathdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/variablesdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/jsondsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/widgetdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/mlblocksdsl.ts","webpack://jacdac-docs/./src/components/vm/vmdsls.ts","webpack://jacdac-docs/./src/components/vm/VMEditor.tsx","webpack://jacdac-docs/./src/pages/editors/vm.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49 0-.96.06-1.41.17L8.41 3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6 8h-4v-2h4v2zm0-4h-4v-2h4v2z\"\n}), 'BugReport');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"\n}), 'Cancel');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"\n}), 'Pause');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M8 5v14l11-7z\"\n}), 'PlayArrow');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z\"\n}), 'PlayForWork');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 6h12v12H6z\"\n}), 'Stop');\n\nexports.default = _default;","import { Block } from \"blockly\"\nimport { SMap } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    ColorInputDefnition,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst builtins: SMap<(block: Block) => string | number | boolean> = {\n    jacdac_on_off: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_yes_no: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_time_picker: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_angle: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_percent: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_ratio: block => Number(block.getFieldValue(\"value\") || \"0\"),\n}\n\nconst shadowDsl: BlockDomainSpecificLanguage = {\n    id: \"shadow\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: `jacdac_on_off`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"enabled\", \"on\"],\n                        [\"disabled\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_yes_no`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"yes\", \"on\"],\n                        [\"no\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_time_picker`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"0.1\", \"0.1\"],\n                        [\"1\", \"1\"],\n                        [\"5\", \"5\"],\n                        [\"30\", \"30\"],\n                        [\"60\", \"60\"],\n                    ],\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_angle`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_angle\",\n                    name: \"value\",\n                    min: 0,\n                    max: 360,\n                    precision: 10,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_percent`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 100,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_byte`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 255,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_ratio`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 1,\n                    precision: 0.1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_color`,\n            message0: `%1`,\n            args0: [\n                <ColorInputDefnition>{\n                    type: \"field_colour\",\n                    name: \"col\",\n                    colour: \"#ff0000\",\n                    colourOptions: [\n                        \"#ff0000\",\n                        \"#ff8000\",\n                        \"#ffff00\",\n                        \"#ff9da5\",\n                        \"#00ff00\",\n                        \"#b09eff\",\n                        \"#00ffff\",\n                        \"#007fff\",\n                        \"#65471f\",\n                        \"#0000ff\",\n                        \"#7f00ff\",\n                        \"#ff0080\",\n                        \"#ff00ff\",\n                        \"#ffffff\",\n                        \"#999999\",\n                        \"#000000\",\n                    ],\n                    columns: 4,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Color\",\n        },\n    ],\n\n    blockToValue: block => builtins[block.type]?.(block),\n}\nexport default shadowDsl\n","import {\n    isHighLevelRegister,\n    isHighLevelEvent,\n    isCommand,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport { SMap } from \"../jdom/utils\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\nimport { atomic } from \"./utils\"\nimport { CHANGE } from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport { DecodedPacket } from \"../jdom/pretty\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport { ExternalRequest } from \"./environment\"\nimport SensorServer from \"../servers/sensorserver\"\n\nexport const VM_EXTERNAL_REQUEST = \"vmExternalRequest\"\n\nclass VMRegisterServer extends JDRegisterServer<PackedValues> {\n    constructor(\n        private serviceServer: VMServiceServer,\n        private reg: jdspec.PacketInfo,\n        defaultValue?: PackedValues\n    ) {\n        super(serviceServer, reg.identifier, defaultValue)\n    }\n\n    async sendGetAsync() {\n        this.serviceServer.raiseGetRegisterEvent(this.reg.name)\n    }\n\n    async theRealSendGetAsync() {\n        await super.sendGetAsync()\n    }\n}\n\n// TODO: need to take specification into account and\n// TOOD: implement the proper base class (SensorServer)\nexport class VMServiceServer extends SensorServer<any[]> {\n    private eventNameToId: SMap<number> = {}\n    private regNameToId: SMap<number> = {}\n    private regFieldToId: SMap<number> = {}\n    private commandPackets: SMap<DecodedPacket> = {}\n    private cmdFieldToId: SMap<number> = {}\n\n    constructor(public role: string, private spec: jdspec.ServiceSpec) {\n        super(spec.classIdentifier, {\n            readingValues: [false],\n            streamingInterval: 50,\n        })\n        spec.packets.filter(isHighLevelRegister).map(reg => {\n            const regServer = this.addExistingRegister(\n                new VMRegisterServer(this, reg)\n            )\n            this.regNameToId[reg.name] = reg.identifier\n            reg.fields?.forEach((pkt, index) => {\n                this.regFieldToId[`${reg.name}:${pkt.name}`] = index\n            })\n            regServer.subscribe(CHANGE, () => {\n                this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n                    kind: \"set\",\n                    role: this.role,\n                    tgt: reg.name,\n                })\n            })\n        })\n\n        spec.packets.filter(isCommand).map(cmd => {\n            this.addCommand(cmd.identifier, (pkt: Packet) => {\n                this.commandPackets[cmd.identifier] = pkt.decoded\n                this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n                    kind: \"cmd\",\n                    role: this.role,\n                    tgt: cmd.name,\n                })\n            })\n            cmd.fields?.forEach((pkt, index) => {\n                this.regFieldToId[`${cmd.name}:${pkt.name}`] = index\n            })\n        })\n\n        spec.packets.filter(isHighLevelEvent).forEach(pkt => {\n            this.eventNameToId[pkt.name] = pkt.identifier\n        })\n    }\n\n    raiseGetRegisterEvent(regName: string) {\n        this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n            kind: \"get\",\n            role: this.role,\n            tgt: regName,\n        })\n    }\n\n    async respondToGetRegisterEvent(regName: string) {\n        const reg = this.register(this.regNameToId[regName]) as VMRegisterServer\n        await reg.theRealSendGetAsync()\n    }\n\n    async sendEventNameAsync(eventName: string, values?: PackedValues) {\n        const pkt = this.spec.packets.find(\n            p => isHighLevelEvent(p) && p.name === eventName\n        )\n        if (pkt) {\n            await this.sendEvent(\n                this.eventNameToId[eventName],\n                jdpack(pkt.packFormat, values)\n            )\n        }\n    }\n\n    lookupRegister(root: string, fld: string) {\n        if (this.regNameToId[root]) {\n            const reg = this.register(this.regNameToId[root])\n            if (!fld) return reg.values()?.[0]\n            else {\n                return reg.values()?.[this.regFieldToId[`${root}:${fld}`]]\n            }\n        } else if (this.commandPackets[root]) {\n            const cmd = this.commandPackets[root]\n            return cmd.decoded?.[this.cmdFieldToId[`${root}:${fld}`]]?.value\n        }\n        return undefined\n    }\n\n    public writeRegister(root: string, ev: atomic[]) {\n        const reg = this.register(this.regNameToId[root])\n        reg.setValues(ev)\n    }\n}\n","import { isEvent, isRegister, isCommand, isIntensity } from \"../jdom/spec\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport JDService from \"../jdom/service\"\nimport JDRegister from \"../jdom/register\"\nimport JDEvent from \"../jdom/event\"\nimport { CHANGE, EVENT, REPORT_UPDATE, SystemReg } from \"../jdom/constants\"\nimport { SMap } from \"../jdom/utils\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\nimport { atomic } from \"./utils\"\n\nexport class VMServiceClient extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _reportUpdate: SMap<boolean> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    public async sendCommandAsync(commandName: string, values: PackedValues) {\n        const pkt = this.service.specification.packets.find(\n            p => isCommand(p) && p.name === commandName\n        )\n        if (pkt) {\n            await this.service.sendCmdAsync(\n                pkt.identifier,\n                jdpack(pkt.packFormat, values),\n                true\n            )\n        }\n    }\n\n    public async writeRegisterAsync(regName: string, values: atomic[]) {\n        const register = this._registers[regName]\n        if (register.code === SystemReg.Value) await this.setEnabled()\n        await this.writeRegAsync(this._registers[regName], values)\n    }\n\n    private async writeRegAsync(jdreg: JDRegister, values: atomic[]) {\n        await jdreg?.sendSetPackedAsync(values, true)\n    }\n\n    private async setEnabled() {\n        const pkt = this.service.specification.packets.find(isIntensity)\n        if (pkt && pkt.fields[0].type === \"bool\") {\n            const jdreg = this.service.register(SystemReg.Intensity)\n            await this.writeRegAsync(jdreg, [true])\n        }\n    }\n\n    public async lookupRegisterAsync(\n        root: string,\n        fld: string,\n        reportUpdate = false\n    ) {\n        if (root in this._registers) {\n            const register = this._registers[root]\n            if (reportUpdate && !this._reportUpdate[root]) {\n                this._reportUpdate[root] = true\n                this.mount(register.subscribe(REPORT_UPDATE, () => {}))\n            }\n            await register.refresh()\n            if (!fld) return register.unpackedValue?.[0]\n            else {\n                const field = register.fields.find(f => f.name === fld)\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n}\n","import jsep from \"jsep\"\nimport { assert, SMap } from \"../jdom/utils\"\nimport JDService from \"../jdom/service\"\nimport JDEventSource from \"../jdom/eventsource\"\nimport { PackedValues } from \"../jdom/pack\"\nimport { serviceSpecificationFromClassIdentifier } from \"../jdom/spec\"\nimport { RoleRegister, RoleEvent } from \"./compile\"\nimport { VMEnvironmentInterface } from \"./runner\"\nimport { VMRole } from \"./ir\"\nimport { VMServiceServer, VM_EXTERNAL_REQUEST } from \"./server\"\nimport { VMServiceClient } from \"./client\"\nimport { atomic } from \"./utils\"\n\nexport const GLOBAL_CHANGE = \"vmEnvGlobalChange\"\nexport const REGISTER_CHANGE = \"vmEnvRegisterChange\"\nexport const EXTERNAL_REQUEST = \"vmEnvEventChange\"\n\nexport interface ExternalRequest {\n    kind: \"event\" | \"get\" | \"set\" | \"cmd\"\n    role: string\n    tgt: string\n}\n\nexport enum VMExceptionCode {\n    RoleNoService = \"vmEnvRoleNoService\",\n    TypeMismatch = \"vmEnvTypeMismatch\",\n    InternalError = \"vmInternalError\",\n}\n\nexport class VMException extends Error {\n    constructor(readonly code: VMExceptionCode, readonly data: string) {\n        super()\n    }\n}\n\nexport interface GlobalVariable {\n    type: \"number\" | \"boolean\" | \"string\"\n    value: atomic\n}\n\nexport class VMEnvironment\n    extends JDEventSource\n    implements VMEnvironmentInterface\n{\n    private _currentRequest: ExternalRequest = undefined\n    private _clientEnvs: SMap<VMServiceClient> = {}\n    private _serverEnvs: SMap<VMServiceServer> = {}\n    private _globals: SMap<GlobalVariable> = {}\n\n    constructor(\n        private registers: RoleRegister[],\n        private events: RoleEvent[],\n        private serverRoles: VMRole[]\n    ) {\n        super()\n        this.setupServers()\n    }\n\n    private setupServers() {\n        this.serverRoles.forEach(p => {\n            // get the service\n            const service = serviceSpecificationFromClassIdentifier(\n                p.serviceClass\n            )\n            if (service) {\n                // spin up JDServiceServer\n                const serviceServer = new VMServiceServer(p.role, service)\n                this._serverEnvs[p.role] = serviceServer\n                serviceServer.subscribe(\n                    VM_EXTERNAL_REQUEST,\n                    (p: ExternalRequest) => {\n                        this._currentRequest = p\n                        this.emit(EXTERNAL_REQUEST, p)\n                    }\n                )\n            }\n        })\n    }\n\n    public globals() {\n        return this._globals\n    }\n\n    public servers() {\n        return Object.keys(this._serverEnvs).map(k => {\n            return {\n                role: k,\n                serviceClass: this._serverEnvs[k].serviceClass,\n                server: this._serverEnvs[k],\n            }\n        })\n    }\n\n    public serviceChanged(role: string, service: JDService) {\n        if (this._clientEnvs[role]) {\n            this._clientEnvs[role].unmount()\n            this._clientEnvs[role] = undefined\n        }\n        if (!service) this._rolesUnbound.push(role)\n        else {\n            this._rolesBound.push(role)\n            this._clientEnvs[role] = new VMServiceClient(service)\n            this.registers.forEach(r => {\n                if (r.role === role) {\n                    this.registerRegister(role, r.register)\n                }\n            })\n            this.events.forEach(e => {\n                if (e.role === role) {\n                    this.registerEvent(role, e.event)\n                }\n            })\n        }\n    }\n\n    public roleBound(role: string) {\n        return !!this._clientEnvs[role]\n    }\n\n    public registerRegister(role: string, reg: string) {\n        const serviceEnv = this.getService(role)\n        serviceEnv.registerRegister(reg, () => {\n            this.emit(REGISTER_CHANGE, reg)\n        })\n    }\n\n    public registerEvent(role: string, tgt: string) {\n        const serviceEnv = this.getService(role)\n        serviceEnv.registerEvent(tgt, () => {\n            this._currentRequest = { kind: \"event\", role, tgt }\n            this.emit(EXTERNAL_REQUEST, this._currentRequest)\n        })\n    }\n\n    private getRootName(e: jsep.MemberExpression | string) {\n        if (!e) return undefined\n        if (typeof e === \"string\") return e\n        if (e.type === \"MemberExpression\")\n            return (e.object as jsep.Identifier).name\n        return undefined\n    }\n\n    private getService(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        const s = this._clientEnvs[root]\n        return s\n    }\n\n    private getServer(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        const s = this._serverEnvs[root]\n        return s\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public async sendCommandAsync(\n        e: jsep.MemberExpression,\n        values: PackedValues\n    ) {\n        const serviceEnv = this.getService(e)\n        if (serviceEnv) {\n            await serviceEnv?.sendCommandAsync(\n                (e.property as jsep.Identifier).name,\n                values\n            )\n        } else {\n            const server = this.getServer(e)\n            await server?.sendEventNameAsync(\n                (e.property as jsep.Identifier).name,\n                values\n            )\n        }\n    }\n\n    public async lookupAsync(\n        e: jsep.MemberExpression | string,\n        reportUpdate = false\n    ) {\n        const roleName = this.getRootName(e)\n        if (roleName.startsWith(\"$var\")) {\n            const me = e as jsep.MemberExpression\n            if (me.property.type === \"Identifier\") {\n                const local = (me.property as jsep.Identifier).name\n                return this._globals[local]?.value\n            }\n            return undefined\n        }\n        const ep = (e as jsep.MemberExpression).property as\n            | jsep.Identifier\n            | jsep.MemberExpression\n        const root =\n            typeof ep === \"string\"\n                ? ep\n                : ep.type === \"Identifier\"\n                ? ep.name\n                : (ep.object as jsep.Identifier).name\n        const fld =\n            typeof ep === \"string\"\n                ? undefined\n                : ep.type === \"Identifier\"\n                ? undefined\n                : (ep.property as jsep.Identifier).name\n        const serviceEnv = this.getService(e)\n        if (serviceEnv) {\n            return await serviceEnv.lookupRegisterAsync(root, fld, reportUpdate)\n        } else {\n            const server = this.getServer(e)\n            return server.lookupRegister(root, fld)\n        }\n    }\n\n    public async writeRegisterAsync(\n        e: jsep.MemberExpression | string,\n        values: atomic[]\n    ) {\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            if (serviceEnv) await serviceEnv.writeRegisterAsync(reg, values)\n            else {\n                const server = this.getServer(e)\n                return server.writeRegister(reg, values)\n            }\n        }\n    }\n\n    public writeGlobal(\n        e: jsep.MemberExpression | string,\n        value: string | boolean | number\n    ) {\n        const roleName = this.getRootName(e)\n        if (!roleName || !roleName.startsWith(\"$var\")) return undefined\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const local = (me.property as jsep.Identifier).name\n            if (this._globals[local]) {\n                const firstType = this._globals[local].type\n                if (firstType !== typeof value) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `variable ${local} has first type ${firstType}; trying to assign ${value.toString()}`\n                    )\n                }\n                if (value !== this._globals[local].value) {\n                    this._globals[local].value = value\n                    this.emit(GLOBAL_CHANGE)\n                }\n            } else {\n                const firstType = typeof value\n                if (\n                    firstType !== \"string\" &&\n                    firstType !== \"boolean\" &&\n                    firstType !== \"number\"\n                ) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `Value of type ${firstType} not supported`\n                    )\n                }\n                this._globals[local] = { type: firstType, value }\n                this.emit(GLOBAL_CHANGE)\n            }\n            return true\n        }\n        return false\n    }\n\n    public clearExternalStimulii() {\n        this._currentRequest = undefined\n        this.rolesReset()\n    }\n\n    public hasRequest(e: jsep.MemberExpression | string): ExternalRequest {\n        const roleName = this.getRootName(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const op = (me.property as jsep.Identifier).name\n            if (\n                this._currentRequest?.role === roleName &&\n                this._currentRequest?.tgt === op\n            )\n                return this._currentRequest\n        }\n        return undefined\n    }\n\n    public async completeRequest(request: ExternalRequest) {\n        assert(request.kind === \"get\")\n        const server = this.getServer(request.role)\n        await server.respondToGetRegisterEvent(request.tgt)\n    }\n\n    // role events\n    private _rolesBound: string[] = []\n    private _rolesUnbound: string[] = []\n    private rolesReset() {\n        this._rolesBound = []\n        this._rolesUnbound = []\n    }\n    public initRoles() {\n        this._rolesBound = Object.keys(this._clientEnvs).slice(0)\n    }\n    public roleTransition(role: string, event: string): boolean {\n        if (event === \"bound\") {\n            return !!this._rolesBound.find(r => role === \"any\" || r === role)\n        } else {\n            return !!this._rolesUnbound.find(r => role === \"any\" || r === role)\n        }\n    }\n\n    public unsubscribe() {\n        for (const vs of Object.values(this._clientEnvs)) {\n            vs.unmount()\n        }\n    }\n}\n","import jsep from \"jsep\"\n\nexport type GetValue = (\n    e: jsep.MemberExpression | string,\n    reportUpdate: boolean\n) => any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StartMap = { e: jsep.Expression; v: any }[]\n\nexport type CallEvaluator = (\n    ce: jsep.CallExpression,\n    ee: VMExprEvaluator\n) => any\n\nexport function unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements.map(unparse).join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"MemberExpression\": {\n            const root = e as jsep.MemberExpression\n            return root.computed\n                ? `${unparse(root.object)}[${unparse(root.property)}]`\n                : `${unparse(root.object)}.${unparse(root.property)}`\n        }\n        case \"BinaryExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\nexport class VMExprEvaluator {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private exprStack: any[] = []\n    private reportUpdate = false\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private env: GetValue, private callEval: CallEvaluator) {}\n\n    public tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public pop() {\n        return this.exprStack.pop()\n    }\n\n    public async evalAsync(e: jsep.Expression, reportUpdate = false) {\n        this.exprStack = []\n        this.reportUpdate = reportUpdate\n        await this.visitExpressionAsync(e)\n        return this.exprStack.pop()\n    }\n\n    public async visitExpressionAsync(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                if (this.callEval) {\n                    const ret = this.callEval(<jsep.CallExpression>e, this)\n                    this.exprStack.push(ret)\n                } else this.exprStack.push(undefined)\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                if (be.operator === \"&&\" || be.operator === \"||\") {\n                    await this.visitExpressionAsync(be.left)\n                    switch (be.operator) {\n                        case \"||\":\n                            if (this.tos()) return\n                            else await this.visitExpressionAsync(be.right)\n                            return\n                        case \"&&\":\n                            if (!this.tos()) return\n                            else await this.visitExpressionAsync(be.right)\n                            return\n                    }\n                }\n                await this.visitExpressionAsync(be.left)\n                await this.visitExpressionAsync(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\": {\n                const ue = <jsep.UnaryExpression>e\n                await this.visitExpressionAsync(ue.argument)\n                const top = this.exprStack.pop()\n                switch (ue.operator) {\n                    case \"ABS\":\n                        this.exprStack.push(Math.abs(top))\n                        return\n                    case \"!\":\n                        this.exprStack.push(!top)\n                        return\n                    case \"~\":\n                        this.exprStack.push(~top)\n                        return\n                    case \"-\":\n                        this.exprStack.push(-top)\n                        return\n                    case \"+\":\n                        this.exprStack.push(+top)\n                        return\n                }\n                break\n            }\n\n            case \"MemberExpression\": {\n                // for now, we don't support evaluation of obj or prop\n                // of obj.prop\n                const val = await this.env(\n                    e as jsep.MemberExpression,\n                    this.reportUpdate\n                )\n                //if (val === undefined) {\n                //    throw new VMError(VMCode.InternalError, `lookup of ${unparse(e)} failed`)\n                //}\n                this.exprStack.push(val)\n                return\n            }\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                const val = await this.env(id.name, this.reportUpdate)\n                // if (val === undefined)\n                //    throw new VMError(VMCode.InternalError, `lookup of ${id.name} failed`)\n                this.exprStack.push(val)\n                return\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                return\n            }\n            default:\n        }\n    }\n}\n","export type atomic = string | boolean | number\n\nexport class Mutex {\n    private promises: (() => Promise<any>)[] = []\n    private shift() {\n        this.promises.shift()\n        if (this.promises[0]) this.promises[0]()\n    }\n    acquire<T>(f: () => Promise<T>): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            this.promises.push(() =>\n                f().then(\n                    v => {\n                        this.shift()\n                        resolve(v)\n                    },\n                    e => {\n                        this.shift()\n                        reject(e)\n                    }\n                )\n            )\n            if (this.promises.length == 1) this.promises[0]()\n        })\n    }\n}\n","import jsep from \"jsep\"\nimport { VMProgram, VMHandler, VMCommand, VMRole } from \"./ir\"\nimport RoleManager from \"../jdom/rolemanager\"\nimport {\n    VMEnvironment,\n    VMException,\n    VMExceptionCode,\n    GLOBAL_CHANGE,\n    REGISTER_CHANGE,\n    EXTERNAL_REQUEST,\n    ExternalRequest,\n} from \"./environment\"\nimport { VMExprEvaluator, unparse, CallEvaluator } from \"./expr\"\nimport JDEventSource from \"../jdom/eventsource\"\nimport {\n    CHANGE,\n    ROLE_BOUND,\n    ROLE_UNBOUND,\n    SERVICE_PROVIDER_REMOVED,\n    TRACE,\n} from \"../jdom/constants\"\nimport { checkProgram, compileProgram } from \"./compile\"\nimport {\n    VM_GLOBAL_CHANGE,\n    VM_COMMAND_FAILED,\n    VM_WATCH_CHANGE,\n    VM_BREAKPOINT,\n    VM_INTERNAL_ERROR,\n    VM_LOG_ENTRY,\n    VM_ROLE_MISSING,\n} from \"./events\"\nimport { Mutex, atomic } from \"./utils\"\nimport { assert, SMap } from \"../jdom/utils\"\nimport { JDClient } from \"../jdom/client\"\nimport JDServerServiceProvider from \"../jdom/servers/serverserviceprovider\"\nimport JDDevice from \"../jdom/device\"\nimport JDServiceProvider from \"../jdom/servers/serviceprovider\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type VMTraceContext = any\n\nenum VMInternalStatus {\n    Ready = \"ready\", // the pc is at this instruction, but pre-condition not met\n    Enabled = \"enabled\", // the instruction pre-conditions are met (is this needed?)\n    Running = \"running\", // the instruction has started running (may need retries)\n    Sleeping = \"sleep\", // waiting to be woken by timer\n    Completed = \"completed\", // the instruction completed successfully\n    Stopped = \"stopped\", // halt instruction encountered, handler stopped\n}\n\nconst VM_WAKE_SLEEPER = \"vmWakeSleeper\"\n\nexport interface VMEnvironmentInterface {\n    writeRegisterAsync: (\n        e: jsep.MemberExpression | string,\n        v: atomic[]\n    ) => Promise<void>\n    sendCommandAsync: (\n        command: jsep.MemberExpression,\n        values: atomic[]\n    ) => Promise<void>\n    lookupAsync: (\n        e: jsep.MemberExpression | string,\n        reportUpdate: boolean\n    ) => Promise<atomic>\n    writeGlobal: (e: jsep.MemberExpression | string, v: atomic) => boolean\n    hasRequest: (e: jsep.MemberExpression | string) => ExternalRequest\n    roleTransition: (role: string, direction: string) => boolean\n    roleBound: (role: string) => boolean\n}\n\nclass VMJumpException extends Error {\n    constructor(public label: string) {\n        super()\n    }\n}\n\nclass VMTimerException extends Error {\n    constructor(public ms: number) {\n        super()\n    }\n}\n\nclass VMRequestException extends Error {\n    constructor(public request: ExternalRequest) {\n        super()\n    }\n}\n\nclass VMCommandEvaluator {\n    private _regSaved: number = undefined\n    private _changeSaved: number = undefined\n    private _started = false\n    constructor(\n        public parent: VMCommandRunner,\n        private readonly env: VMEnvironmentInterface,\n        private readonly cmd: VMCommand\n    ) {}\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { command: this.cmd.command.type, ...context })\n    }\n\n    private get inst() {\n        return (this.cmd.command.callee as jsep.Identifier)?.name\n    }\n\n    private callEval(): CallEvaluator {\n        return (caller: jsep.CallExpression, ee: VMExprEvaluator) => {\n            const callee = <jsep.MemberExpression>caller.callee\n            const namespace = (callee.object as jsep.Identifier).name\n            const funName = (callee.property as jsep.Identifier).name\n            const args = caller.arguments\n            if (namespace === \"$fun\") {\n                switch (funName) {\n                    case \"roleBoundExpression\": {\n                        const role = (args[0] as jsep.Identifier).name\n                        return this.env.roleBound(role)\n                    }\n                    default: // ERROR\n                }\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `unknown function ${namespace}.${funName}`\n                )\n            } else\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `unknown namespace ${namespace}`\n                )\n        }\n    }\n\n    private newEval() {\n        return new VMExprEvaluator(\n            async (e, reportUpdate) =>\n                await this.env.lookupAsync(e, reportUpdate),\n            this.callEval()\n        )\n    }\n\n    private async evalExpressionAsync(\n        e: jsep.Expression,\n        reportUpdate = false\n    ) {\n        const expr = this.newEval()\n        return await expr.evalAsync(e, reportUpdate)\n    }\n\n    private async checkExpressionAsync(\n        e: jsep.Expression,\n        reportUpdate = false\n    ) {\n        return (await this.evalExpressionAsync(e, reportUpdate)) ? true : false\n    }\n\n    private async startAsync() {\n        if (\n            this.cmd.command.callee.type !== \"MemberExpression\" &&\n            (this.inst === \"awaitRegister\" || this.inst === \"awaitChange\")\n        ) {\n            // need to capture register value for awaitChange/awaitRegister\n            const args = this.cmd.command.arguments\n            this._regSaved = await this.evalExpressionAsync(args[0], true)\n            if (this.inst === \"awaitChange\")\n                this._changeSaved = await this.evalExpressionAsync(args[1])\n            return true\n        }\n        return false\n    }\n\n    public async evaluate(): Promise<VMInternalStatus> {\n        if (!this._started) {\n            const neededStart = await this.startAsync()\n            this._started = true\n            if (neededStart) return VMInternalStatus.Running\n        }\n        const args = this.cmd.command.arguments\n        if (this.cmd.command.callee.type === \"MemberExpression\") {\n            // interpret as a service command (role.comand)\n            const expr = this.newEval()\n            const values: atomic[] = []\n            for (const a of this.cmd.command.arguments) {\n                values.push(await expr.evalAsync(a))\n            }\n            await this.env.sendCommandAsync(\n                this.cmd.command.callee as jsep.MemberExpression,\n                values\n            )\n            return VMInternalStatus.Completed\n        }\n        switch (this.inst) {\n            case \"branchOnCondition\": {\n                const expr = await this.checkExpressionAsync(args[0])\n                if (expr) {\n                    throw new VMJumpException((args[1] as jsep.Identifier).name)\n                }\n                return VMInternalStatus.Completed\n            }\n            case \"jump\": {\n                throw new VMJumpException((args[0] as jsep.Identifier).name)\n            }\n            case \"label\": {\n                return VMInternalStatus.Completed\n            }\n            case \"awaitEvent\": {\n                const event = args[0] as jsep.MemberExpression\n                const request = this.env.hasRequest(event)\n                if (request) {\n                    if (await this.checkExpressionAsync(args[1])) {\n                        throw new VMRequestException(request)\n                    }\n                }\n                return VMInternalStatus.Running\n            }\n            case \"roleBound\": {\n                const role = (args[0] as jsep.Identifier).name\n                const event = (args[1] as jsep.Identifier).name\n                return this.env.roleTransition(role, event)\n                    ? VMInternalStatus.Completed\n                    : VMInternalStatus.Running\n            }\n            case \"awaitCondition\": {\n                return (await this.checkExpressionAsync(args[0]))\n                    ? VMInternalStatus.Completed\n                    : VMInternalStatus.Running\n            }\n            case \"awaitChange\":\n            case \"awaitRegister\": {\n                const regValue = await this.evalExpressionAsync(args[0])\n                if (\n                    (this.inst === \"awaitRegister\" &&\n                        regValue !== this._regSaved) ||\n                    (this.inst === \"awaitChange\" &&\n                        Math.abs(regValue - this._regSaved) >=\n                            Math.abs(this._changeSaved))\n                ) {\n                    return VMInternalStatus.Completed\n                }\n                return VMInternalStatus.Running\n            }\n            case \"writeRegister\":\n            case \"writeLocal\": {\n                const expr = this.newEval()\n                const values: atomic[] = []\n                for (const a of this.cmd.command.arguments.slice(1)) {\n                    values.push(await expr.evalAsync(a))\n                }\n                this.trace(\"eval-end\", { expr: unparse(args[1]) })\n                const reg = args[0] as jsep.MemberExpression\n                if (this.inst === \"writeRegister\") {\n                    await this.env.writeRegisterAsync(reg, values)\n                    this.trace(\"write-after-wait\", {\n                        reg: unparse(reg),\n                        expr: values[0],\n                    })\n                } else this.env.writeGlobal(reg, values[0])\n                return VMInternalStatus.Completed\n            }\n            case \"watch\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                this.parent.watch(this.cmd?.sourceId, ev)\n                return VMInternalStatus.Completed\n            }\n            case \"log\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                const evString = ev + \"\"\n                this.parent.writeLog(this.cmd?.sourceId, evString)\n                return VMInternalStatus.Completed\n            }\n            case \"halt\": {\n                return VMInternalStatus.Stopped\n            }\n            case \"nop\": {\n                return VMInternalStatus.Completed\n            }\n            case \"wait\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                throw new VMTimerException(ev * 1000)\n            }\n            default:\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `Unknown instruction ${this.inst}`\n                )\n        }\n    }\n}\n\nclass VMCommandRunner {\n    private _eval: VMCommandEvaluator\n    private _status: VMInternalStatus = VMInternalStatus.Running\n    constructor(\n        public readonly parent: VMHandlerRunner,\n        private handlerId: number,\n        env: VMEnvironment,\n        public cmd: VMCommand\n    ) {\n        this._eval = new VMCommandEvaluator(this, env, cmd)\n    }\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { handler: this.handlerId, ...context })\n    }\n\n    watch(id: string, val: any) {\n        this.parent.watch(id, val)\n    }\n\n    writeLog(id: string, val: any) {\n        this.parent.writeLog(id, val)\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: VMInternalStatus) {\n        this._status = s\n    }\n\n    async stepAsync() {\n        if (this.status === VMInternalStatus.Running) {\n            this.trace(unparse(this.cmd.command))\n            this.status = await this._eval.evaluate()\n        }\n    }\n}\n\nclass VMHandlerRunner extends JDEventSource {\n    private _commandIndex: number = undefined\n    private _currentCommand: VMCommandRunner = undefined\n    private stopped = false\n    private _labelToIndex: SMap<number> = {}\n\n    constructor(\n        public readonly parent: VMProgramRunner,\n        public readonly id: number,\n        public readonly env: VMEnvironment,\n        public readonly handler: VMHandler\n    ) {\n        super()\n        // find the label commands (targets of jumps)\n        this.handler.commands.forEach((c, index) => {\n            const cmd = c as VMCommand\n            const id = cmd.command?.callee as jsep.Identifier\n            if (id?.name === \"label\") {\n                const label = cmd.command.arguments[0] as jsep.Identifier\n                this._labelToIndex[label.name] = index\n            }\n        })\n        this.reset()\n    }\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { id: this.id, ...context })\n    }\n\n    watch(id: string, val: any) {\n        this.parent.watch(id, val)\n    }\n\n    writeLog(id: string, val: any) {\n        this.parent.writeLog(id, val)\n    }\n\n    get status() {\n        return this.stopped\n            ? VMInternalStatus.Stopped\n            : this._commandIndex === undefined\n            ? VMInternalStatus.Ready\n            : this._currentCommand.status === VMInternalStatus.Completed &&\n              this._commandIndex < this.handler.commands.length - 1\n            ? VMInternalStatus.Running\n            : this._currentCommand.status\n    }\n\n    get command() {\n        return this._currentCommand\n    }\n\n    get atTop() {\n        return (\n            this.status === VMInternalStatus.Running && this._commandIndex === 0\n        )\n    }\n\n    gotoTop() {\n        if (\n            this.status === VMInternalStatus.Ready &&\n            this.handler.commands.length\n        )\n            this.commandIndex = 0\n    }\n\n    reset() {\n        this.commandIndex = undefined\n        this.stopped = false\n    }\n\n    wake() {\n        if (this._currentCommand) {\n            this._currentCommand.status = VMInternalStatus.Completed\n            this.next()\n        }\n    }\n\n    // run-to-completion semantics\n    // returns command if breakpoint encountered when not single stepping\n    async runToCompletionAsync(singleStep = false) {\n        if (this.stopped || !this.handler.commands.length) return undefined\n        if (this.commandIndex === undefined) {\n            this.commandIndex = 0\n        }\n        if ((await this.singleStepCheckBreakAsync(singleStep)) && !singleStep)\n            return this._currentCommand\n        while (this.next()) {\n            if (singleStep || (await this.singleStepCheckBreakAsync()))\n                return this._currentCommand\n        }\n        return undefined\n    }\n\n    private next() {\n        if (\n            this._currentCommand.status === VMInternalStatus.Completed &&\n            this.commandIndex < this.handler.commands.length - 1\n        ) {\n            this.commandIndex++\n            return true\n        }\n        return false\n    }\n\n    private getCommand() {\n        const cmd = this.handler.commands[this._commandIndex]\n        if (cmd.type === \"ite\") {\n            throw new VMException(\n                VMExceptionCode.InternalError,\n                \"ite not compiled away\"\n            )\n        }\n        return cmd as VMCommand\n    }\n\n    private async singleStepCheckBreakAsync(singleStep = false) {\n        this.trace(\"step begin\")\n        const sid = this._currentCommand.cmd?.sourceId\n        if (!singleStep && (await this.parent.breakpointOnAsync(sid))) {\n            return true\n        }\n        await this.singleStepAsync()\n        this.trace(\"step end\")\n        return false\n    }\n\n    private async singleStepAsync() {\n        try {\n            await this._currentCommand.stepAsync()\n        } catch (e) {\n            if (e instanceof VMJumpException) {\n                const { label } = e as VMJumpException\n                const index = this._labelToIndex[label]\n                this.commandIndex = index\n                this._currentCommand.status = VMInternalStatus.Completed\n            } else if (e instanceof VMTimerException) {\n                const { ms } = e as VMTimerException\n                this._currentCommand.status = VMInternalStatus.Sleeping\n                await this.parent.sleepAsync(this, ms)\n            } else if (e instanceof VMRequestException) {\n                const { request } = e as VMRequestException\n                this._currentCommand.status = VMInternalStatus.Completed\n                this.parent.handlerWokeOnRequest(this, request)\n            } else {\n                this.emit(VM_COMMAND_FAILED, this._currentCommand.cmd.sourceId)\n                throw e\n            }\n        }\n        if (this._currentCommand.status === VMInternalStatus.Stopped)\n            this.stopped = true\n    }\n\n    private set commandIndex(index: number) {\n        if (index === undefined) {\n            this._commandIndex = undefined\n            this._currentCommand = undefined\n        } else if (index !== this._commandIndex) {\n            this._commandIndex = index\n            this._currentCommand = new VMCommandRunner(\n                this,\n                this.id,\n                this.env,\n                this.getCommand()\n            )\n        }\n    }\n\n    private get commandIndex() {\n        return this._commandIndex\n    }\n}\n\nexport type WatchValueType = boolean | string | number\n\ninterface SleepingHandler {\n    ms: number\n    handlerRunner: VMHandlerRunner\n    handler?: VMHandler\n    id: NodeJS.Timeout\n}\n\nfunction isEveryHandler(h: VMHandler) {\n    assert(!!h)\n    if (h.commands.length) {\n        const cmd = (h.commands[0] as VMCommand).command\n            .callee as jsep.Identifier\n        return cmd.name === \"wait\"\n    }\n    return false\n}\n\nfunction isRegisterChangeHandler(h: VMHandler) {\n    assert(!!h)\n    if (h.commands.length) {\n        const cmd = (h.commands[0] as VMCommand).command\n            .callee as jsep.Identifier\n        return cmd.name === \"awaitChange\" || cmd.name === \"awaitRegister\"\n    }\n    return false\n}\n\nexport enum VMStatus {\n    Stopped = \"stopped\",\n    Running = \"running\",\n    Paused = \"paused\",\n}\n\nconst MAX_LOG = 100\n\nexport class VMProgramRunner extends JDClient {\n    // program, environment\n    private _handlerRunners: VMHandlerRunner[] = []\n    private _env: VMEnvironment\n    private _roles: VMRole[] = []\n    private _serverRoles: VMRole[] = []\n    // running\n    private _status: VMStatus\n    private _waitQueue: VMHandlerRunner[] = []\n    private _everyQueue: VMHandlerRunner[] = []\n    private _runQueue: VMHandlerRunner[] = []\n    private _waitRunMutex: Mutex\n    private _sleepQueue: SleepingHandler[] = []\n    private _sleepMutex: Mutex\n    // debugging\n    private _watch: SMap<any> = {}\n    private _log: { text: string; count: number }[] = []\n    private _breaks: SMap<boolean> = {}\n    private _breaksMutex: Mutex\n    // providing new services\n    private _provider: JDServerServiceProvider\n    private _device: JDDevice\n    private _onCompletionOfExternalRequest: {\n        handler: VMHandlerRunner\n        request: ExternalRequest\n    }[] = []\n\n    constructor(\n        readonly roleManager: RoleManager,\n        readonly program: VMProgram\n    ) {\n        super()\n\n        const compiled = compileProgram(program)\n        const { registers, events, errors } = checkProgram(compiled)\n        this._roles = compiled.roles\n        this._serverRoles = compiled.serverRoles\n        if (errors?.length) console.debug(\"ERRORS\", errors)\n\n        // data structures for running program\n        this._status = VMStatus.Stopped\n        this._env = new VMEnvironment(registers, events, compiled.serverRoles)\n        this._handlerRunners = compiled.handlers.map(\n            (h, index) => new VMHandlerRunner(this, index, this._env, h)\n        )\n\n        // TODO: can't add multiple handlers until we have deduplicate CHANGE on Event\n        /*\n        const len = this._handlerRunners.length\n        compiled.handlers.forEach((h, index) =>\n            this._handlerRunners.push(\n                new VMHandlerRunner(this, len + index, this._env, h)\n            )\n        )*/\n\n        this._waitRunMutex = new Mutex()\n        this._breaksMutex = new Mutex()\n        this._sleepMutex = new Mutex()\n        // TODO: only try to wake handlers that are waiting on change to reg or event\n        this.mount(\n            this._env.subscribe(REGISTER_CHANGE, () => {\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.roleManager.bus.subscribe(\n                SERVICE_PROVIDER_REMOVED,\n                (provider: JDServiceProvider) => {\n                    if (provider === this._provider) {\n                        this._provider = undefined\n                    }\n                }\n            )\n        )\n        // control requests (client:{event}, server:{set, get, cmd})\n        this.mount(\n            this._env.subscribe(\n                EXTERNAL_REQUEST,\n                (request: ExternalRequest) => {\n                    switch (request.kind) {\n                        case \"get\": {\n                            // TODO: in this case, if there is a handler\n                            // waiting on this Request then the function\n                            // handlerWokeOnRequest will be invoked. If\n                            // it is not then we should just return the\n                            // current value of register\n                            break\n                        }\n                        // these handler invocations are \"fire and forget\"\n                        case \"set\":\n                        case \"cmd\":\n                        case \"event\":\n                            break\n                    }\n                    this.waitingToRunning()\n                }\n            )\n        )\n        this.mount(\n            this._env.subscribe(GLOBAL_CHANGE, name => {\n                this.emit(VM_GLOBAL_CHANGE, name)\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.subscribe(\n                VM_WAKE_SLEEPER,\n                async (h: VMHandlerRunner | VMHandler) => {\n                    await this.wakeSleeper(h)\n                }\n            )\n        )\n        this.initializeRoleManagement()\n    }\n\n    public handlerWokeOnRequest(\n        handler: VMHandlerRunner,\n        request: ExternalRequest\n    ) {\n        if (request.kind === \"get\") {\n            this._onCompletionOfExternalRequest.push({ handler, request })\n        }\n    }\n\n    // control of VM\n    get status() {\n        return this._status\n    }\n\n    get logData() {\n        return this._log.slice(0)\n    }\n\n    globals(): { name: string; value: atomic }[] {\n        const g = this._env.globals()\n        return Object.keys(g).map(k => {\n            return { name: k, value: g[k].value }\n        })\n    }\n\n    private setStatus(s: VMStatus) {\n        if (s !== this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    // debugging\n    trace(message: string, context: VMTraceContext = {}) {\n        this.emit(TRACE, { message, context })\n    }\n\n    watch(sourceId: string, value: WatchValueType) {\n        this._watch[sourceId] = value\n        this.emit(VM_WATCH_CHANGE, sourceId)\n    }\n\n    writeLog(sourceId: string, value: WatchValueType) {\n        const s = value + \"\"\n        const last = this._log[this._log.length - 1]\n        if (last?.text === s) last.count++\n        else this._log.push({ text: value + \"\", count: 1 })\n        while (this._log.length > MAX_LOG) this._log.shift()\n        this.emit(VM_LOG_ENTRY, sourceId)\n    }\n\n    lookupWatch(sourceId: string) {\n        return this._watch[sourceId]\n    }\n\n    async setBreakpointsAsync(breaks: string[]) {\n        await this._breaksMutex.acquire(async () => {\n            this._breaks = {}\n            breaks.forEach(b => {\n                this._breaks[b] = true\n            })\n        })\n    }\n\n    async clearBreakpointsAsync() {\n        await this._breaksMutex.acquire(async () => {\n            this._breaks = {}\n        })\n    }\n\n    async breakpointOnAsync(id: string) {\n        let ret = false\n        await this._breaksMutex.acquire(async () => {\n            ret = !!this._breaks?.[id]\n        })\n        return ret\n    }\n\n    // utility called by handlerRunner\n    async sleepAsync(\n        h: VMHandlerRunner,\n        ms: number,\n        handler: VMHandler = undefined\n    ) {\n        assert(h.status === VMInternalStatus.Sleeping)\n        await this._sleepMutex.acquire(async () => {\n            const id = setTimeout(() => {\n                this.emit(VM_WAKE_SLEEPER, h ? h : handler)\n            }, ms)\n            this._sleepQueue.push({ ms, handlerRunner: h, id, handler })\n        })\n    }\n\n    async startAsync() {\n        if (this.status !== VMStatus.Stopped) return // already running\n        this.trace(\"start\")\n        try {\n            await this._waitRunMutex.acquire(async () => {\n                await this.device()\n                this._waitQueue = this._handlerRunners.slice(0)\n                this._waitQueue.forEach(h => h.reset())\n                this._runQueue = []\n                this._everyQueue = []\n                this._onCompletionOfExternalRequest = []\n                this._env.clearExternalStimulii()\n                this._env.initRoles()\n                this.stopSleepers()\n                // make sure to have another handler for every\n                /*\n                for (const h of this._waitQueue) {\n                    if (isEveryHandler(h.handler)) {\n                        const dup = new VMHandlerRunner(\n                            this,\n                            undefined,\n                            this._env,\n                            h.handler\n                        )\n                        dup.reset()\n                        this._everyQueue.push(dup)\n                    }\n                }*/\n            })\n            await this.clearBreakpointsAsync()\n            this.setStatus(VMStatus.Running)\n            await this.waitingToRunning()\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n    }\n\n    async device() {\n        if (!this._provider) {\n            await this.startProvider()\n        }\n        return this._device\n    }\n\n    cancel() {\n        if (this.status === VMStatus.Stopped) return // nothing to cancel\n        this.setStatus(VMStatus.Stopped)\n        this.trace(\"cancelled\")\n    }\n\n    async resumeAsync() {\n        if (this.status !== VMStatus.Paused) return\n        this.trace(\"resume\")\n        this.setStatus(VMStatus.Running)\n        await this.runAsync()\n    }\n\n    private async getCurrentRunner() {\n        return await this._waitRunMutex.acquire(async () => {\n            if (this._runQueue.length) return this._runQueue[0]\n            return undefined\n        })\n    }\n\n    async stepAsync() {\n        if (this.status !== VMStatus.Paused) return\n        this.trace(\"step\")\n        const h = await this.getCurrentRunner()\n        if (h) {\n            await this.runHandlerAsync(h, true)\n            await this.postProcessHandler(h)\n            const newHead = await this.getCurrentRunner()\n            if (newHead && newHead !== h) {\n                this.emitBreakpoint(newHead)\n            }\n        }\n    }\n\n    private _in_run = false\n    private async runAsync() {\n        if (this.status === VMStatus.Stopped) return\n        if (this._in_run) return\n        this.trace(\"run\")\n        this._in_run = true\n        try {\n            let h: VMHandlerRunner = undefined\n            while (\n                this.status === VMStatus.Running &&\n                (h = await this.getCurrentRunner())\n            ) {\n                assert(!h.atTop)\n                await this.runHandlerAsync(h)\n                await this.postProcessHandler(h)\n            }\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n        this._in_run = false\n        this.trace(\"run end\")\n    }\n\n    private emitBreakpoint(h: VMHandlerRunner) {\n        this.emit(\n            VM_BREAKPOINT,\n            h,\n            h.status === VMInternalStatus.Completed\n                ? \"\"\n                : h.command.cmd?.sourceId\n        )\n    }\n\n    private async runHandlerAsync(h: VMHandlerRunner, oneStep = false) {\n        try {\n            const brkCommand = await h.runToCompletionAsync(oneStep)\n            if ((brkCommand && !oneStep) || this.status === VMStatus.Paused) {\n                this.setStatus(VMStatus.Paused)\n                this.emitBreakpoint(h)\n            }\n            if (h.status === VMInternalStatus.Completed) {\n                h.reset()\n            }\n        } catch (e) {\n            if (e instanceof VMException) {\n                const ex = e as VMException\n                if (ex.code === VMExceptionCode.RoleNoService)\n                    this.emit(VM_ROLE_MISSING, (e as VMException).data)\n            } else {\n                console.debug(e)\n                this.emit(VM_INTERNAL_ERROR, e)\n            }\n            // on handler error, reset the handler\n            h.reset()\n        }\n    }\n\n    private async postProcessHandler(h: VMHandlerRunner) {\n        if (\n            h.status === VMInternalStatus.Ready ||\n            h.status === VMInternalStatus.Sleeping ||\n            h.status === VMInternalStatus.Stopped\n        ) {\n            let done: VMHandlerRunner = undefined\n            await this._waitRunMutex.acquire(async () => {\n                assert(!!this._runQueue.length)\n                assert(h === this._runQueue[0])\n                done = this._runQueue.shift()\n                const moveToWait = h.status === VMInternalStatus.Ready\n                if (moveToWait && !isEveryHandler(h.handler)) {\n                    this._waitQueue.push(done)\n                    done = undefined\n                }\n            })\n            if (\n                (done &&\n                    h.status === VMInternalStatus.Ready &&\n                    isEveryHandler(h.handler)) ||\n                isRegisterChangeHandler(h.handler)\n            ) {\n                if (this.status === VMStatus.Running)\n                    await this.runHandlerAsync(h)\n                else if (this.status === VMStatus.Paused) {\n                    await this._waitRunMutex.acquire(async () => {\n                        this._runQueue.unshift(h)\n                        // this.emitBreakpoint(h)\n                    })\n                }\n            }\n        } else if (h.status === VMInternalStatus.Completed) {\n            const q = this._onCompletionOfExternalRequest\n            const index = q.findIndex(p => p.handler === h)\n            if (index > -1) {\n                const [del] = q.splice(index, 1)\n                await this._env.completeRequest(del.request)\n            }\n        }\n    }\n\n    // call this whenever some event/change arises\n    private async waitingToRunning() {\n        if (this.status !== VMStatus.Stopped) {\n            this.trace(\"waiting to running - try\")\n            await this._waitRunMutex.acquire(async () => {\n                if (this.status === VMStatus.Paused && this._runQueue.length)\n                    return\n                this.trace(\"waiting to running - start\")\n                const handlersStarted: VMHandler[] = []\n                const newRunners: VMHandlerRunner[] = []\n                const sleepingRunners: VMHandlerRunner[] = []\n                for (const h of this._waitQueue) {\n                    await this.runHandlerAsync(h, true)\n                    if (h.status === VMInternalStatus.Sleeping) {\n                        sleepingRunners.push(h)\n                    } else if (\n                        !h.atTop &&\n                        handlersStarted.findIndex(hs => hs === h.handler) === -1\n                    ) {\n                        newRunners.push(h)\n                        handlersStarted.push(h.handler)\n                    }\n                }\n                newRunners.forEach(h => {\n                    this._runQueue.push(h)\n                    const index = this._waitQueue.indexOf(h)\n                    if (index >= 0) this._waitQueue.splice(index, 1)\n                })\n                sleepingRunners.forEach(h => {\n                    const index = this._waitQueue.indexOf(h)\n                    if (index >= 0) this._waitQueue.splice(index, 1)\n                })\n            })\n            await this.runAsync()\n            this._env.clearExternalStimulii()\n        }\n    }\n\n    private async stopSleepers() {\n        await this._sleepMutex.acquire(async () => {\n            for (const s of this._sleepQueue) {\n                clearTimeout(s.id)\n            }\n            this._sleepQueue = []\n        })\n    }\n\n    private async wakeSleeper(h: VMHandlerRunner | VMHandler) {\n        try {\n            // let handlerMs: number = undefined\n            let handlerRunner: VMHandlerRunner = undefined\n            // let handler: VMHandler = undefined\n            await this._sleepMutex.acquire(async () => {\n                const index = this._sleepQueue.findIndex(\n                    p => p?.handlerRunner === h // || p?.handler === h\n                )\n                assert(index >= 0)\n                if (index >= 0) {\n                    const p = this._sleepQueue[index]\n                    //  handlerMs = p.ms\n                    handlerRunner = p.handlerRunner\n                    // handler = p?.handler\n                    this._sleepQueue.splice(index, 1)\n                    // clearTimeout(p.id)\n                }\n            })\n            if (this.status === VMStatus.Stopped) return\n            // this logic is to deal with starting a handler rather than a runner\n            await this._waitRunMutex.acquire(async () => {\n                /*\n                if (!handlerRunner && isEveryHandler(handler)) {\n                    const index = this._everyQueue.findIndex(\n                        h => h.handler === handler\n                    )\n                    if (index >= 0) {\n                        handlerRunner = this._everyQueue[index]\n                        this._everyQueue.splice(index, 1)\n                        handlerRunner.gotoTop()\n                    }\n                }*/\n                if (handlerRunner) {\n                    // transition to the run queue\n                    handlerRunner.wake()\n                    this._runQueue.push(handlerRunner)\n                }\n            })\n            /*\n            const theHandler = handlerRunner?.handler || handler\n            if (isEveryHandler(theHandler)) {\n                // setup next\n                this.sleepAsync(undefined, handlerMs, theHandler)\n            }*/\n            if (handlerRunner) {\n                if (this.status === VMStatus.Running) {\n                    this.trace(\"wake sleeper run\")\n                    this.runAsync()\n                } else if (this.status === VMStatus.Paused) {\n                    this.emitBreakpoint(await this.getCurrentRunner())\n                }\n            }\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n    }\n\n    private initializeRoleManagement() {\n        // adding a (role,service) binding\n        const addRoleService = (role: string) => {\n            const service = this.roleManager.service(role)\n            if (service) {\n                this._env.serviceChanged(role, service)\n            }\n        }\n        // initialize client\n        this._roles.forEach(r => {\n            addRoleService(r.role)\n        })\n        this.mount(\n            this.roleManager.subscribe(ROLE_BOUND, async (role: string) => {\n                if (this._serverRoles.find(r => r.role === role)) return\n                addRoleService(role)\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.roleManager.subscribe(ROLE_UNBOUND, (role: string) => {\n                if (this._serverRoles.find(r => r.role === role)) return\n                this._env.serviceChanged(role, undefined)\n                this.waitingToRunning()\n            })\n        )\n    }\n\n    // spin up provider\n    private async startProvider() {\n        const servers = this._env.servers()\n        if (servers.length) {\n            this._provider = new JDServerServiceProvider(\n                \"vm\",\n                servers.map(s => s.server)\n                // if we create a deviceId, then trouble ensues\n                // as a second device gets spun up later\n                //{\n                //    deviceId: \"VMServiceProvider\",\n                //}\n            )\n            this._device = this.roleManager.bus.addServiceProvider(\n                this._provider\n            )\n            servers.forEach((s, index) => {\n                this.roleManager.updateRole(\n                    this._serverRoles[index].role,\n                    s.serviceClass,\n                    this._device.deviceId\n                )\n            })\n            // make sure it gets known (HACK)\n            for (const s of servers) {\n                await s.server.statusCode.sendGetAsync()\n            }\n        }\n    }\n\n    public unmount() {\n        //console.log(\"VMProgram (unmount)\")\n        super.unmount()\n        if (this._provider) {\n            this.roleManager.bus.removeServiceProvider(this._provider)\n        }\n    }\n}\n","import { useContext, useEffect, useState } from \"react\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport {\n    VMProgramRunner,\n    VMTraceContext,\n} from \"../../../jacdac-ts/src/vm/runner\"\nimport AppContext from \"../AppContext\"\nimport { ERROR, TRACE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport RoleManager from \"../../../jacdac-ts/src/jdom/rolemanager\"\n\nexport default function useVMRunner(\n    roleManager: RoleManager,\n    program: VMProgram,\n    autoRun: boolean\n) {\n    const { setError } = useContext(AppContext)\n    const [runner, setRunner] = useState<VMProgramRunner>()\n    const [_autoStart, _setAutoStart] = useState<boolean>(!!autoRun)\n\n    const run = async () => {\n        _setAutoStart(!!autoRun)\n        await runner.startAsync()\n    }\n    const cancel = async () => {\n        _setAutoStart(false)\n        runner.cancel()\n    }\n\n    // auto start\n    useEffect(() => {\n        if (_autoStart && runner) runner.startAsync()\n        return () => runner?.cancel()\n    }, [runner, _autoStart])\n\n    // create runner\n    useEffect(() => {\n        try {\n            const newTestRunner =\n                program && new VMProgramRunner(roleManager, program)\n            setRunner(newTestRunner)\n\n            return () => newTestRunner?.unmount()\n        } catch (e) {\n            console.debug(e)\n            setRunner(undefined)\n        }\n    }, [roleManager, program])\n\n    // errors\n    useEffect(() => runner?.subscribe(ERROR, e => setError(e)), [runner])\n    // traces\n    const handleTrace = (value: {\n        message: string\n        context: VMTraceContext\n    }) => {\n        const { message, context } = value\n        if (Flags.diagnostics) console.debug(`vm> ${message}`, context)\n    }\n    useEffect(\n        () =>\n            runner?.subscribe<{ message: string; context: VMTraceContext }>(\n                TRACE,\n                handleTrace\n            ),\n        [runner]\n    )\n\n    return { runner, run, cancel }\n}\n","import { Grid, Typography } from \"@mui/material\"\nimport React from \"react\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport CodeBlock from \"../CodeBlock\"\n\nexport default function VMDiagnostics(props: { program: VMProgram }) {\n    const { program } = props\n    return (\n        <Grid item xs={12}>\n            <Typography variant=\"subtitle1\">VM</Typography>\n            <CodeBlock\n                className=\"json\"\n                downloadName={\"test.json.vm\"}\n                downloadText={JSON.stringify(program, null, 2)}\n            >\n                {JSON.stringify(program, null, 2)}\n            </CodeBlock>\n        </Grid>\n    )\n}\n","import React, { useContext } from \"react\"\nimport BlockContext from \"./BlockContext\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport DeviceAvatar from \"../devices/DeviceAvatar\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    addServiceProvider,\n    serviceProviderDefinitionFromServiceClass,\n} from \"../../../jacdac-ts/src/servers/servers\"\n\nimport { BlockSvg, FieldVariable } from \"blockly\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport CancelIcon from \"@mui/icons-material/Cancel\"\nimport { Chip, Tooltip } from \"@mui/material\"\nimport { TWIN_BLOCK } from \"./toolbox\"\nimport { toRoleType } from \"./dsl/servicesbase\"\n\nexport default function RoleChip(props: {\n    role: string\n    serviceClass: number\n    service: JDService\n    preferredDeviceId: string\n}) {\n    const { workspace } = useContext(BlockContext)\n    const { role, service, serviceClass, preferredDeviceId } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const serviceServer = useServiceServer(service)\n    const handleRoleClick = () => {\n        // spin off simulator\n        if (!service && !preferredDeviceId) {\n            const specification =\n                serviceSpecificationFromClassIdentifier(serviceClass)\n            if (specification) {\n                addServiceProvider(\n                    bus,\n                    serviceProviderDefinitionFromServiceClass(\n                        specification.classIdentifier\n                    )\n                )\n            }\n        }\n        // add twin block\n        if (workspace) {\n            // try to find existing twin block\n            let twinBlock = workspace\n                .getTopBlocks(false)\n                .find(\n                    b =>\n                        b.type === TWIN_BLOCK &&\n                        (\n                            b.inputList[0].fieldRow.find(\n                                f => f.name === \"role\"\n                            ) as FieldVariable\n                        )?.getVariable()?.name === role\n                ) as BlockSvg\n            if (!twinBlock) {\n                twinBlock = workspace.newBlock(TWIN_BLOCK) as BlockSvg\n                let variable = workspace.getVariable(\n                    role,\n                    toRoleType(service.specification, true)\n                )\n                if (!variable)\n                    variable = workspace.getVariable(\n                        role,\n                        toRoleType(service.specification, false)\n                    )\n                console.debug(`new twin`, { twinBlock, variable })\n                const field = twinBlock.inputList[0].fieldRow.find(\n                    f => f.name === \"role\"\n                ) as FieldVariable\n                field.setValue(variable.getId())\n                const m = workspace.getMetrics()\n                twinBlock.moveBy(m.viewWidth / 2, m.viewHeight / 3)\n                twinBlock.initSvg()\n                twinBlock.render(false)\n            }\n            workspace.centerOnBlock(twinBlock.id)\n        }\n    }\n\n    const handleDelete = () => bus.removeServiceProvider(serviceServer.device)\n    return (\n        <Chip\n            label={role}\n            variant={service ? undefined : \"outlined\"}\n            avatar={service && <DeviceAvatar device={service.device} />}\n            onClick={handleRoleClick}\n            onDelete={serviceServer ? handleDelete : undefined}\n            deleteIcon={\n                <Tooltip title=\"stop simulator\">\n                    <CancelIcon />\n                </Tooltip>\n            }\n        />\n    )\n}\n","import React, { useContext } from \"react\"\nimport useChange from \"../../jacdac/useChange\"\nimport BlockContext from \"./BlockContext\"\nimport { Grid } from \"@mui/material\"\nimport RoleChip from \"./RoleChip\"\n\nexport default function BlockClientRoles() {\n    const { roleManager } = useContext(BlockContext)\n    const roles = useChange(roleManager, _ => _?.roles())\n\n    return (\n        <>\n            {roles?.map(\n                ({ role, service, serviceClass, preferredDeviceId }) => (\n                    <Grid item key={role}>\n                        <RoleChip\n                            role={role}\n                            service={service}\n                            serviceClass={serviceClass}\n                            preferredDeviceId={preferredDeviceId}\n                        />\n                    </Grid>\n                )\n            )}\n        </>\n    )\n}\n","import React, { useContext, useEffect, useMemo, useState } from \"react\"\nimport useChange from \"../../jacdac/useChange\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport { VMProgramRunner, VMStatus } from \"../../../jacdac-ts/src/vm/runner\"\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\"\nimport StopIcon from \"@mui/icons-material/Stop\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport { Chip, Grid } from \"@mui/material\"\nimport PauseIcon from \"@mui/icons-material/Pause\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { VM_BREAKPOINT } from \"../../../jacdac-ts/src/vm/events\"\nimport { VMHandler, VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport PlayForWorkIcon from \"@mui/icons-material/PlayForWork\"\nimport useMounted from \"../hooks/useMounted\"\nimport IconButtonWithProgress from \"../ui/IconButtonWithProgress\"\nimport BugReportIcon from \"@mui/icons-material/BugReport\"\nimport BlockContext from \"../blockly/BlockContext\"\n\nfunction useWorkspaceBreakpoints(program: VMProgram) {\n    const { workspace } = useContext(BlockContext)\n    const breakpoints = useMemo(\n        () =>\n            arrayConcatMany(\n                program?.handlers\n                    ?.filter(h => !h.meta) // don't debug watch statements\n                    .map(h => h.commands.map(cmd => cmd.sourceId))\n            )?.filter(id => !!id) || [],\n        [program]\n    )\n    const setBreakpointHighlight = (sourceId: string) => {\n        workspace?.highlightBlock(sourceId)\n    }\n\n    return {\n        breakpoints,\n        setBreakpointHighlight,\n    }\n}\n\nexport default function VMRunnerButtons(props: {\n    runner: VMProgramRunner\n    run: () => Promise<void>\n    cancel: () => Promise<void>\n}) {\n    const { runner, run, cancel } = props\n    const status = useChange(runner, t => t?.status)\n    const stopped = !status || status === VMStatus.Stopped\n    const program = runner?.program\n    const [indeterminate, setIndeterminate] = useState(false)\n    const [breakpoint, setBreakpoint] = useState<string>(undefined)\n    const pausing = breakpoint === \"\"\n    const paused = !!breakpoint?.length\n    const mounted = useMounted()\n    const disabled = indeterminate || !runner\n    const { breakpoints, setBreakpointHighlight } =\n        useWorkspaceBreakpoints(program)\n\n    //console.log(\"runner status\", status)\n\n    const handleRun = async () => {\n        try {\n            setIndeterminate(true)\n            setBreakpoint(undefined)\n            await run()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleCancel = async () => {\n        try {\n            setIndeterminate(true)\n            await runner.clearBreakpointsAsync()\n            setBreakpoint(undefined)\n            await cancel()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleResume = async () => {\n        try {\n            setIndeterminate(true)\n            setBreakpoint(undefined)\n            await runner.clearBreakpointsAsync()\n            await runner.resumeAsync()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handlePause = async () => {\n        try {\n            setIndeterminate(true)\n            await runner.setBreakpointsAsync(breakpoints)\n            await runner.resumeAsync()\n            setBreakpoint(\"\")\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleStep = () => runner.stepAsync()\n\n    // register breakpoint handler\n    useEffect(\n        () =>\n            runner?.subscribe(\n                VM_BREAKPOINT,\n                (_: VMHandler, sourceId?: string) => {\n                    if (mounted()) setBreakpoint(sourceId)\n                }\n            ),\n        [runner]\n    )\n\n    // setting blockly breakpoint\n    useEffect(() => {\n        setBreakpointHighlight(breakpoint)\n        return () => setBreakpointHighlight(undefined)\n    }, [breakpoint])\n\n    // reset breakpoint in ui when runner, paused mode changes\n    useEffect(() => setBreakpoint(undefined), [runner])\n\n    return (\n        <>\n            <Grid item>\n                <IconButtonWithTooltip\n                    title={paused ? \"resume\" : stopped ? \"start\" : \"stop\"}\n                    disabled={disabled}\n                    color={stopped ? \"primary\" : \"default\"}\n                    onClick={\n                        paused\n                            ? handleResume\n                            : stopped\n                            ? handleRun\n                            : handleCancel\n                    }\n                >\n                    {paused || stopped ? <PlayArrowIcon /> : <StopIcon />}\n                </IconButtonWithTooltip>{\" \"}\n            </Grid>\n            <Grid item>\n                <IconButtonWithProgress\n                    title={pausing ? \"cancel pause\" : paused ? \"step\" : \"pause\"}\n                    disabled={disabled}\n                    indeterminate={pausing}\n                    onClick={\n                        pausing\n                            ? handleResume\n                            : paused\n                            ? handleStep\n                            : handlePause\n                    }\n                >\n                    {paused ? <PlayForWorkIcon /> : <PauseIcon />}\n                </IconButtonWithProgress>\n            </Grid>\n            {(pausing || paused) && (\n                <Grid item>\n                    <Chip\n                        icon={<BugReportIcon />}\n                        label={pausing ? \"pausing\" : \"paused\"}\n                        color={\"secondary\"}\n                    />\n                </Grid>\n            )}\n        </>\n    )\n}\n","import React from \"react\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport AddIcon from \"@mui/icons-material/Add\"\nimport { useContext } from \"react\"\nimport AppContext from \"../AppContext\"\n\nexport default function VMStartSimulatorButton() {\n    const { toggleShowDeviceHostsDialog } = useContext(AppContext)\n    const handleShowStartSimulator = () => toggleShowDeviceHostsDialog()\n    return (\n        <IconButtonWithTooltip\n            title=\"start simulator\"\n            onClick={handleShowStartSimulator}\n        >\n            <AddIcon />\n        </IconButtonWithTooltip>\n    )\n}\n","import { Grid } from \"@mui/material\"\nimport React from \"react\"\nimport { VMProgramRunner } from \"../../../jacdac-ts/src/vm/runner\"\nimport BlockClientRoles from \"../blockly/BlockRoles\"\nimport VMRunnerButtons from \"./VMRunnerButtons\"\nimport VMStartSimulatorButton from \"./VMStartSimulatorButton\"\n\nexport default function VMToolbar(props: {\n    runner: VMProgramRunner\n    run: () => Promise<void>\n    cancel: () => Promise<void>\n}) {\n    const { runner, run, cancel } = props\n    return (\n        <Grid\n            container\n            direction=\"row\"\n            spacing={1}\n            alignItems=\"center\"\n            alignContent=\"center\"\n        >\n            <VMRunnerButtons runner={runner} run={run} cancel={cancel} />\n            <Grid item>\n                <VMStartSimulatorButton />\n            </Grid>\n            <BlockClientRoles />\n        </Grid>\n    )\n}\n","import {\n    SRV_HID_KEYBOARD,\n    SRV_LED,\n    SRV_DOT_MATRIX,\n    SRV_SEVEN_SEGMENT_DISPLAY,\n} from \"../../../../jacdac-ts/src/jdom/constants\"\n\nimport KeyboardKeyField from \"../fields/KeyboardKeyField\"\nimport LEDColorField from \"../fields/LEDColorField\"\nimport LEDMatrixField from \"../fields/LEDMatrixField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    CustomBlockDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    EventBlockDefinition,\n    identityTransformData,\n    InputDefinition,\n    OptionsInputDefinition,\n    toolsColour,\n    TWIN_BLOCK,\n    ValueInputDefinition,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport JDomTreeField from \"../fields/JDomTreeField\"\nimport TwinField from \"../fields/TwinField\"\nimport {\n    createServiceColor,\n    fieldsToFieldInputs,\n    fieldsToMessage,\n    fieldsToValues,\n    getServiceInfo,\n    roleVariable,\n    serviceHelp,\n    ServicesBaseDSL,\n    toRoleType,\n} from \"./servicesbase\"\nimport { humanify } from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\n\nconst SET_STATUS_LIGHT_BLOCK = \"jacdac_set_status_light\"\nconst ROLE_BOUND_EVENT_BLOCK = \"jacdac_role_bound_event\"\nconst ROLE_BOUND_BLOCK = \"jacdac_role_bound\"\nconst INSPECT_BLOCK = \"jacdac_tools_inspect\"\nconst commandColor = \"#8c6a1d\"\n\nexport class ServicesBlockDomainSpecificLanguage\n    extends ServicesBaseDSL\n    implements BlockDomainSpecificLanguage\n{\n    id = \"jacdacServices\"\n    // generic role blocks\n    private _roleBlocks: BlockDefinition[]\n\n    createBlocks(options: CreateBlocksOptions) {\n        const { theme } = options\n        this.serviceColor = createServiceColor(theme)\n\n        // pure service information here\n        const {\n            allServices,\n            supportedServices,\n            registers,\n            events,\n            commands,\n            registerSimpleTypes,\n            registerComposites,\n            registerSimpleEnumTypes,\n            registerCompositeEnumTypes,\n        } = getServiceInfo()\n\n        const resolveService = (cls: number): jdspec.ServiceSpec[] =>\n            allServices.filter(srv => srv.classIdentifier === cls)\n\n        const customClientBlockDefinitions: CustomBlockDefinition[] = [\n            ...resolveService(SRV_HID_KEYBOARD).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `key`,\n                        message0: `%1 %2 key %3`,\n                        args0: [\n                            roleVariable(service),\n                            <OptionsInputDefinition>{\n                                type: \"field_dropdown\",\n                                name: \"action\",\n                                options: [\n                                    [\"press\", \"press\"],\n                                    [\"down\", \"down\"],\n                                    [\"up\", \"up\"],\n                                ],\n                            },\n                            {\n                                type: KeyboardKeyField.KEY,\n                                name: \"combo\",\n                            },\n                        ],\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Send a keyboard key combo`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.key(combo.selectors, combo.modifiers, action)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_LED).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `fade`,\n                        message0: `fade %1 to %2 at speed %3`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"color\",\n                                check: \"Number\",\n                            },\n                            {\n                                type: \"input_value\",\n                                name: \"speed\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            color: {\n                                kind: \"block\",\n                                type: LEDColorField.SHADOW.type,\n                            },\n                            speed: {\n                                kind: \"block\",\n                                type: \"jacdac_ratio\",\n                            },\n                        },\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Fade LED color`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.animate((color >> 16) & 0xff, (color >> 8) & 0xff, (color >> 0) & 0xff, speed * 0xff)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_SEVEN_SEGMENT_DISPLAY).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `set_digits`,\n                        message0: `set %1 digits to %2`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"digits\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            digits: {\n                                kind: \"block\",\n                                type: \"math_number\",\n                            },\n                        },\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display a number of the screen`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_DOT_MATRIX).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `show_dots`,\n                        message0: `show %1 dots %2`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: LEDMatrixField.KEY,\n                                name: \"dots\",\n                            },\n                        ],\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display dots on the dot matrix`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        // encode digits\n                        template: \"custom\",\n                    }\n            ),\n        ].map(def => {\n            def.type = `jacdac_custom_${def.service.shortId.toLowerCase()}_${\n                def.type\n            }`\n            return def\n        })\n\n        const eventClientBlocks = events.map<EventBlockDefinition>(\n            ({ service, events }) => ({\n                kind: \"block\",\n                type: `jacdac_events_${service.shortId}`,\n                message0: `on %1 %2`,\n                args0: [\n                    roleVariable(service),\n                    <InputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: events.map(event => [\n                            humanify(event.name),\n                            event.name,\n                        ]),\n                    },\n                ],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: `Events for the ${service.name} service`,\n                helpUrl: serviceHelp(service),\n                service,\n                events,\n                template: \"event\",\n            })\n        )\n\n        const registerChangeByEventClientBlocks =\n            this.makeRegisterChangeByEventBlocks(registers)\n        const registerSimpleGetClientBlocks =\n            this.makeRegisterSimpleGetBlocks(registerSimpleTypes)\n        const registerEnumGetClientBlocks = this.makeRegisterEnumGetBlocks([\n            ...registerSimpleEnumTypes,\n            ...registerCompositeEnumTypes,\n        ])\n        const registerNumericsGetClientBlocks =\n            this.makeRegisterNumericsGetBlocks(registerComposites)\n        const registerSetClientBlocks = this.makeRegisterSetBlocks(registers)\n\n        const commandClientBlocks = commands.map<CommandBlockDefinition>(\n            ({ service, command }) => ({\n                kind: \"block\",\n                type: `jacdac_command_${service.shortId}_${command.name}`,\n                message0: !command.fields.length\n                    ? `${humanify(command.name)} %1`\n                    : `${humanify(command.name)} %1 with ${fieldsToMessage(\n                          command\n                      )}`,\n                args0: [roleVariable(service), ...fieldsToFieldInputs(command)],\n                values: fieldsToValues(service, command),\n                inputsInline: true,\n                colour: this.serviceColor(service),\n                tooltip: command.description,\n                helpUrl: serviceHelp(service),\n                service,\n                command,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"command\",\n            })\n        )\n\n        this._serviceBlocks = [\n            ...eventClientBlocks,\n            ...registerSimpleGetClientBlocks,\n            ...registerEnumGetClientBlocks,\n            ...registerNumericsGetClientBlocks,\n            ...registerSetClientBlocks,\n            ...commandClientBlocks,\n            ...customClientBlockDefinitions,\n            ...registerChangeByEventClientBlocks,\n        ]\n\n        this._eventFieldBlocks = this.makeFieldBlocks(\n            events.map(p => ({ service: p.service, packets: p.events }))\n        )\n\n        // client only\n        this._roleBlocks = [\n            {\n                kind: \"block\",\n                type: ROLE_BOUND_EVENT_BLOCK,\n                message0: \"on %1 %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: [\n                            [\"bound\", \"bound\"],\n                            [\"unbound\", \"unbound\"],\n                        ],\n                    },\n                ],\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"role_binding_event\",\n            },\n            {\n                kind: \"block\",\n                type: ROLE_BOUND_BLOCK,\n                message0: \"%1 bound\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                ],\n                output: \"Boolean\",\n                inputsInline: true,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"role_bound\",\n            },\n            {\n                kind: \"block\",\n                type: SET_STATUS_LIGHT_BLOCK,\n                message0: \"set %1 status light to %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"all\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <ValueInputDefinition>{\n                        type: \"input_value\",\n                        name: \"color\",\n                        check: \"Number\",\n                    },\n                ],\n                values: {\n                    color: {\n                        kind: \"block\",\n                        type: LEDColorField.SHADOW.type,\n                    },\n                },\n                inputsInline: true,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Sets the color on the status light\",\n                helpUrl: \"\",\n            },\n        ]\n\n        const toolsBlocks: BlockDefinition[] = [\n            {\n                kind: \"block\",\n                type: TWIN_BLOCK,\n                message0: `view %1 %2 %3`,\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"none\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                            ...supportedServices.map(srv =>\n                                toRoleType(srv, false)\n                            ),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    {\n                        type: \"input_dummy\",\n                    },\n                    <InputDefinition>{\n                        type: TwinField.KEY,\n                        name: \"twin\",\n                    },\n                ],\n                colour: toolsColour,\n                inputsInline: false,\n                tooltip: `Twin of the selected role`,\n                nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                helpUrl: \"\",\n                template: \"meta\",\n                transformData: identityTransformData,\n            },\n            {\n                kind: \"block\",\n                type: INSPECT_BLOCK,\n                message0: `inspect %1 %2 %3`,\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"none\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    {\n                        type: \"input_dummy\",\n                    },\n                    <InputDefinition>{\n                        type: JDomTreeField.KEY,\n                        name: \"twin\",\n                    },\n                ],\n                colour: toolsColour,\n                inputsInline: false,\n                tooltip: `Inspect a service`,\n                helpUrl: \"\",\n                template: \"meta\",\n            },\n        ]\n\n        return [\n            ...this._serviceBlocks,\n            ...this._eventFieldBlocks,\n            ...this._roleBlocks,\n            ...toolsBlocks,\n        ]\n    }\n\n    createCategory(options: CreateCategoryOptions) {\n        const makeServicesCategories = this.createCategoryHelper(options)\n\n        const clientServicesCategories = makeServicesCategories(\n            this._serviceBlocks,\n            this._eventFieldBlocks\n        )\n\n        const commonCategory: CategoryDefinition = {\n            kind: \"category\",\n            name: \"Roles\",\n            colour: commandColor,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ROLE_BOUND_EVENT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ROLE_BOUND_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: SET_STATUS_LIGHT_BLOCK,\n                    values: {\n                        color: {\n                            kind: \"block\",\n                            type: LEDColorField.SHADOW.type,\n                        },\n                    },\n                },\n            ],\n        }\n\n        const toolsCategory: CategoryDefinition = {\n            kind: \"category\",\n            name: \"Tools\",\n            colour: toolsColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: TWIN_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: INSPECT_BLOCK,\n                },\n            ],\n        }\n\n        return [...clientServicesCategories, commonCategory, toolsCategory]\n    }\n}\nconst servicesDSL = new ServicesBlockDomainSpecificLanguage()\nexport default servicesDSL\n","import { humanify } from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    ContentDefinition,\n    EventBlockDefinition,\n    InputDefinition,\n    LabelDefinition,\n    SeparatorDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport {\n    createServiceColor,\n    fieldsToFieldInputs,\n    fieldsToMessage,\n    fieldsToValues,\n    getServiceInfo,\n    roleVariable,\n    serviceHelp,\n    ServiceRegister,\n    ServicesBaseDSL,\n} from \"./servicesbase\"\n\nexport class ServerServicesBlockDomainSpecificLanguage\n    extends ServicesBaseDSL\n    implements BlockDomainSpecificLanguage\n{\n    id = \"jacdacServerServices\"\n    supportedServices: jdspec.ServiceSpec[] = []\n\n    makeRegisterGetSetRequestBlocks(\n        registers: ServiceRegister[],\n        isGet: boolean\n    ) {\n        return registers\n            .filter(\n                r =>\n                    (isGet &&\n                        (r.register.kind === \"ro\" ||\n                            r.register.kind === \"rw\")) ||\n                    (!isGet && r.register.kind == \"rw\")\n            )\n            .map<EventBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_register_${isGet ? \"get\" : \"set\"}_request_${\n                    service.shortId\n                }_${register.name}`,\n                message0: `on register ${isGet ? \"get\" : \"set\"} %1 ${humanify(\n                    register.name\n                )}`,\n                args0: [roleVariable(service, false)],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                events: [register],\n                template: \"event\",\n            }))\n    }\n\n    createBlocks(options: CreateBlocksOptions) {\n        const { theme } = options\n        this.serviceColor = createServiceColor(theme)\n\n        // pure service information here\n        const {\n            registers,\n            events,\n            commands,\n            registerSimpleTypes,\n            registerComposites,\n            registerSimpleEnumTypes,\n            registerCompositeEnumTypes,\n        } = getServiceInfo()\n\n        const eventServerBlocks = events.flatMap<CommandBlockDefinition>(\n            ({ service, events }) => {\n                const eventsNoArgs = events.filter(ev => ev.fields.length === 0)\n                const retNoArgs: CommandBlockDefinition = {\n                    kind: \"block\",\n                    type: `jacdac_raise_event_${service.shortId}`,\n                    message0: `raise %1 %2`,\n                    args0: [\n                        roleVariable(service, false),\n                        <InputDefinition>{\n                            type: \"field_dropdown\",\n                            name: \"event\",\n                            options: eventsNoArgs.map(event => [\n                                humanify(event.name),\n                                event.name,\n                            ]),\n                        },\n                    ],\n                    inputsInline: true,\n                    colour: this.serviceColor(service),\n                    tooltip: `Events for the ${service.name} service`,\n                    helpUrl: serviceHelp(service),\n                    service,\n                    command: undefined,\n                    previousStatement: CODE_STATEMENT_TYPE,\n                    nextStatement: CODE_STATEMENT_TYPE,\n\n                    template: \"raiseNo\",\n                }\n                const eventsArgs = events.filter(ev => ev.fields.length)\n                const retArgs = eventsArgs.map<CommandBlockDefinition>(ev => {\n                    return {\n                        kind: \"block\",\n                        type: `jacdac_raise_event_${service.shortId}_${ev.name}`,\n                        message0: !ev.fields.length\n                            ? `raise %1 ${humanify(ev.name)}`\n                            : `raise %1 ${humanify(\n                                  ev.name\n                              )} with ${fieldsToMessage(ev)}`,\n                        args0: [\n                            roleVariable(service, false),\n                            ...fieldsToFieldInputs(ev),\n                        ],\n                        values: fieldsToValues(service, ev),\n                        inputsInline: true,\n                        colour: this.serviceColor(service),\n                        tooltip: ev.description,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        command: ev,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n\n                        template: \"raiseArgs\",\n                    }\n                })\n                return [retNoArgs, ...retArgs]\n            }\n        )\n\n        const registerSimpleGetServerBlocks = this.makeRegisterSimpleGetBlocks(\n            registerSimpleTypes,\n            false\n        )\n        const registerEnumGetServerBlocks = this.makeRegisterEnumGetBlocks(\n            [...registerSimpleEnumTypes, ...registerCompositeEnumTypes],\n            false\n        )\n        const registerNumericsGetServerBlocks =\n            this.makeRegisterNumericsGetBlocks(registerComposites, false)\n        const registerSetServerBlocks = this.makeRegisterSetBlocks(\n            registers,\n            false\n        )\n        const registerSetRequestBlocks = this.makeRegisterGetSetRequestBlocks(\n            registers,\n            false\n        )\n        const registerGetRequestBlocks = this.makeRegisterGetSetRequestBlocks(\n            registers,\n            true\n        )\n\n        const commandServerBlocks = commands.map<EventBlockDefinition>(\n            ({ service, command }) => ({\n                kind: \"block\",\n                type: `jacdac_command_server_${service.shortId}_${command.name}`,\n                message0: `on ${humanify(command.name)} %1`,\n                args0: [roleVariable(service, false)],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: command.description,\n                helpUrl: serviceHelp(service),\n                service,\n                events: [command],\n                template: \"event\",\n            })\n        )\n\n        this._serviceBlocks = [\n            ...eventServerBlocks,\n            ...registerSimpleGetServerBlocks,\n            ...registerEnumGetServerBlocks,\n            ...registerNumericsGetServerBlocks,\n            ...registerSetServerBlocks,\n            ...commandServerBlocks,\n            ...registerSetRequestBlocks,\n            ...registerGetRequestBlocks,\n        ]\n\n        this._eventFieldBlocks = this.makeFieldBlocks(\n            commands.map(p => ({ service: p.service, packets: [p.command] })),\n            false\n        )\n\n        return [...this._serviceBlocks, ...this._eventFieldBlocks]\n    }\n\n    createCategory(options: CreateCategoryOptions) {\n        const makeServicesCategories = this.createCategoryHelper(options)\n\n        const serverServicesCategories = makeServicesCategories(\n            this._serviceBlocks,\n            this._eventFieldBlocks,\n            false\n        )\n\n        if (!serverServicesCategories?.length) return []\n\n        return [\n            <SeparatorDefinition>{\n                kind: \"sep\",\n            },\n            {\n                kind: \"category\",\n                name: \"Servers\",\n                contents: serverServicesCategories,\n            } as CategoryDefinition,\n        ]\n    }\n}\nconst serverServicesDSL = new ServerServicesBlockDomainSpecificLanguage()\nexport default serverServicesDSL\n","import jsep from \"jsep\"\nimport { toIdentifier } from \"../../../../jacdac-ts/src/vm/compile\"\nimport { CmdWithErrors, makeVMBase } from \"../../vm/VMgenerator\"\nimport LogViewField from \"../fields/LogViewField\"\nimport VariablesField from \"../fields/VariablesFields\"\nimport WatchValueField from \"../fields/WatchValueField\"\nimport {\n    BlockReference,\n    CODE_STATEMENT_TYPE,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n    InputDefinition,\n    LabelDefinition,\n    toolsColour,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst WATCH_BLOCK = \"tools_watch\"\nconst LOG_BLOCK = \"tools_log\"\nconst VIEW_LOG_BLOCK = \"tools_log_view\"\nconst VARIABLES_BLOCK = \"tools_variables_view\"\n\nconst colour = toolsColour\n\nconst toolsDSL: BlockDomainSpecificLanguage = {\n    id: \"tools\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: VARIABLES_BLOCK,\n            message0: `variables %1 %2`,\n            args0: [\n                {\n                    type: \"input_dummy\",\n                },\n                {\n                    type: VariablesField.KEY,\n                    name: \"variables\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `Watch variables values`,\n            helpUrl: \"\",\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: WATCH_BLOCK,\n            message0: `watch %1 %2`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                },\n                <InputDefinition>{\n                    type: WatchValueField.KEY,\n                    name: \"watch\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            tooltip: `Watch a value in the editor`,\n            helpUrl: \"\",\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            transformData: identityTransformData,\n        },\n        {\n            kind: \"block\",\n            type: LOG_BLOCK,\n            message0: `log %1`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            previousStatement: CODE_STATEMENT_TYPE,\n            nextStatement: CODE_STATEMENT_TYPE,\n            tooltip: `Log an entry to the console`,\n            helpUrl: \"\",\n        },\n        {\n            kind: \"block\",\n            type: VIEW_LOG_BLOCK,\n            message0: `console %1 %2`,\n            args0: [\n                {\n                    type: \"input_dummy\",\n                },\n                <InputDefinition>{\n                    type: LogViewField.KEY,\n                    name: \"watch\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `View console content`,\n            template: \"meta\",\n        },\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Debugger\",\n            colour: colour,\n            contents: [\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Variables\",\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: VARIABLES_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: WATCH_BLOCK,\n                },\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Logging\",\n                },\n                {\n                    kind: \"block\",\n                    type: LOG_BLOCK,\n                    values: {\n                        value: { kind: \"block\", type: \"text\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: VIEW_LOG_BLOCK,\n                },\n            ],\n        },\n        {\n            kind: \"sep\",\n        },\n    ],\n\n    compileCommandToVM: ({ block, blockToExpression }): CmdWithErrors => {\n        const { type } = block\n        if (type === LOG_BLOCK) {\n            const { inputs } = block\n            const { expr, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                cmd: makeVMBase(block, {\n                    type: \"CallExpression\",\n                    arguments: [expr],\n                    callee: toIdentifier(\"log\"),\n                }),\n                errors,\n            }\n        }\n        return undefined\n    },\n    compileEventToVM: ({ block, blockToExpression }) => {\n        const { type } = block\n        if (type === WATCH_BLOCK) {\n            const { inputs } = block\n            const { expr, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                expression: <jsep.CallExpression>{\n                    type: \"CallExpression\",\n                    arguments: [expr],\n                    callee: toIdentifier(\"watch\"),\n                },\n                errors,\n                meta: true,\n            }\n        }\n        return undefined\n    },\n}\n\nexport default toolsDSL\n","import { toIdentifier } from \"../../../../jacdac-ts/src/vm/compile\"\nimport { VMCommand } from \"../../../../jacdac-ts/src/vm/ir\"\nimport {\n    BlockReference,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    InputDefinition,\n    SeparatorDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport { makeVMBase, processErrors } from \"../../vm/VMgenerator\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { paletteColorByIndex } from \"./palette\"\n\nconst WAIT_BLOCK = \"jacdac_wait\"\nconst ON_START_BLOCK = \"jacdac_start\"\nconst REPEAT_EVERY_BLOCK = \"jacdac_repeat_every\"\n\nconst colour = paletteColorByIndex(0)\nconst loopsDsl: BlockDomainSpecificLanguage = {\n    id: \"loops\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: WAIT_BLOCK,\n            message0: \"wait %1 s\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"time\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            previousStatement: CODE_STATEMENT_TYPE,\n            nextStatement: CODE_STATEMENT_TYPE,\n            colour,\n            tooltip: \"Wait the desired time\",\n            helpUrl: \"\",\n        },\n        {\n            kind: \"block\",\n            type: ON_START_BLOCK,\n            message0: `on start`,\n            args0: [],\n            colour,\n            inputsInline: true,\n            tooltip: `Runs code when the device starts`,\n            helpUrl: \"\",\n            nextStatement: CODE_STATEMENT_TYPE,\n        },\n        {\n            kind: \"block\",\n            type: REPEAT_EVERY_BLOCK,\n            message0: `repeat every %1s`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"interval\",\n                    check: \"Number\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            tooltip: `Repeats code at a given interval in seconds`,\n            helpUrl: \"\",\n            nextStatement: CODE_STATEMENT_TYPE,\n        },\n    ],\n\n    createCategory: () => [\n        <SeparatorDefinition>{\n            kind: \"sep\",\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Events\",\n            colour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: REPEAT_EVERY_BLOCK,\n                    values: {\n                        interval: { kind: \"block\", type: \"jacdac_time_picker\" },\n                    },\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ON_START_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: WAIT_BLOCK,\n                    values: {\n                        time: { kind: \"block\", type: \"jacdac_time_picker\" },\n                    },\n                },\n            ].filter(b => !!b),\n        },\n    ],\n    compileEventToVM: ({ block, blockToExpression }) => {\n        const { type } = block\n        if (type === ON_START_BLOCK) {\n            return {\n                expression: (\n                    makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [],\n                        callee: toIdentifier(\"start\"),\n                    }) as VMCommand\n                ).command,\n                errors: processErrors(block, []),\n            }\n        } else if (type === REPEAT_EVERY_BLOCK) {\n            const { inputs } = block\n            const { expr: time, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                expression: (\n                    makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [time],\n                        callee: toIdentifier(\"wait\"),\n                    }) as VMCommand\n                ).command,\n                errors: processErrors(block, errors),\n            }\n        }\n        return undefined\n    },\n    compileCommandToVM: ({ event, block, blockToExpression }) => {\n        const { type } = block\n        if (type === WAIT_BLOCK) {\n            const { inputs } = block\n            {\n                const { expr: time, errors } = blockToExpression(\n                    event,\n                    inputs[0].child\n                )\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [time],\n                        callee: toIdentifier(\"wait\"),\n                    }),\n                    errors: processErrors(block, errors),\n                }\n            }\n        }\n        return undefined\n    },\n}\nexport default loopsDsl\n","import jsep from \"jsep\"\nimport { ExpressionWithErrors } from \"../../vm/VMgenerator\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst ops = {\n    AND: \"&&\",\n    OR: \"||\",\n    EQ: \"===\",\n    NEQ: \"!==\",\n    LT: \"<\",\n    GT: \">\",\n    LTE: \"<=\",\n    GTE: \">=\",\n    NEG: \"-\",\n}\n\nconst logicDsl: BlockDomainSpecificLanguage = {\n    id: \"logic\",\n    types: [\n        \"variable_if\",\n        \"logic_compare\",\n        \"logic_operation\",\n        \"logic_negate\",\n        \"logic_boolean\",\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Logic\",\n            colour: \"%{BKY_LOGIC_HUE}\",\n            contents: [\n                {\n                    kind: \"block\",\n                    type: \"dynamic_if\",\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_compare\",\n                    values: {\n                        A: { kind: \"block\", type: \"math_number\" },\n                        B: { kind: \"block\", type: \"math_number\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_operation\",\n                    values: {\n                        A: { kind: \"block\", type: \"logic_boolean\" },\n                        B: { kind: \"block\", type: \"logic_boolean\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_negate\",\n                    values: {\n                        BOOL: { kind: \"block\", type: \"logic_boolean\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_boolean\",\n                },\n            ],\n        },\n    ],\n    compileExpressionToVM: ({\n        event,\n        block,\n        blockToExpressionInner,\n    }): ExpressionWithErrors => {\n        const { type, inputs } = block\n        switch (type) {\n            case \"logic_operation\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n            case \"logic_negate\": {\n                const argument = blockToExpressionInner(event, inputs[0].child)\n                return {\n                    expr: <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: \"!\",\n                        argument,\n                        prefix: false, // TODO: handle logic_negate\n                    },\n                    errors: [],\n                }\n            }\n            case \"logic_compare\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n        }\n        return undefined\n    },\n}\nexport default logicDsl\n","import jsep from \"jsep\"\nimport { ExpressionWithErrors } from \"../../vm/VMgenerator\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    OptionsInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst ops = {\n    NEG: \"-\",\n    ADD: \"+\",\n    MULTIPLY: \"*\",\n    DIVIDE: \"/\",\n    MINUS: \"-\",\n}\n\nconst mathDsl: BlockDomainSpecificLanguage = {\n    id: \"jacdacmath\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: \"jacdac_math_arithmetic\",\n            message0: \"%1 %2 %3\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"A\",\n                    check: \"Number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"%{BKY_MATH_ADDITION_SYMBOL}\", \"ADD\"],\n                        [\"%{BKY_MATH_SUBTRACTION_SYMBOL}\", \"MINUS\"],\n                        [\"%{BKY_MATH_MULTIPLICATION_SYMBOL}\", \"MULTIPLY\"],\n                        [\"%{BKY_MATH_DIVISION_SYMBOL}\", \"DIVIDE\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"B\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_ARITHMETIC_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_single\",\n            message0: \"%1 %2\",\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"-\", \"NEG\"],\n                        [\"%{BKY_MATH_SINGLE_OP_ABSOLUTE}\", \"ABS\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"NUM\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_SINGLE_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_random\",\n            message0: \"random\",\n            args0: [],\n            output: \"Number\",\n            style: \"math_blocks\",\n            vm: function () {\n                return Math.random()\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: \"jacdac_math_clamp\",\n            message0: \"clamp %1 in [%2, %3]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"minInclusive\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"maxInclusive\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            vm: function (\n                value: number,\n                minInclusive: number,\n                maxInclusive: number\n            ) {\n                return value < minInclusive\n                    ? minInclusive\n                    : value > maxInclusive\n                    ? maxInclusive\n                    : value\n            },\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_map\",\n            message0: \"map %1 from [%2, %3] to [%4, %5]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMax\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMax\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Math\",\n            colour: \"%{BKY_MATH_HUE}\",\n            contents: [\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_arithmetic\",\n                    values: {\n                        A: { kind: \"block\", type: \"math_number\" },\n                        B: { kind: \"block\", type: \"math_number\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_single\",\n                    values: {\n                        NUM: {\n                            kind: \"block\",\n                            type: \"math_number\",\n                        },\n                    },\n                },\n                <BlockReference>{ kind: \"block\", type: \"jacdac_math_random\" },\n                { kind: \"block\", type: \"jacdac_math_map\" },\n                { kind: \"block\", type: \"math_number\" },\n            ],\n        },\n    ],\n    compileExpressionToVM: ({\n        event,\n        block,\n        blockToExpressionInner,\n    }): ExpressionWithErrors => {\n        const { type, inputs } = block\n        switch (type) {\n            case \"math_single\": // built-in blockly\n            case \"jacdac_math_single\": {\n                const argument = blockToExpressionInner(event, inputs[0].child)\n                const op = inputs[0].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: ops[op] || op,\n                        argument,\n                        prefix: false, // TODO: handle math-negate\n                    },\n                    errors: [],\n                }\n            }\n            case \"math_arithmetic\": // built-in blockly\n            case \"jacdac_math_arithmetic\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n        }\n        return undefined\n    },\n}\n\nexport default mathDsl\n","import jsep from \"jsep\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport { makeVMBase } from \"../../vm/VMgenerator\"\n\nconst variablesDsl: BlockDomainSpecificLanguage = {\n    id: \"variables\",\n    types: [\"variables_get\", \"variables_set\", \"math_change\"],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Variables\",\n            colour: \"%{BKY_VARIABLES_HUE}\",\n            custom: \"VARIABLE\",\n        },\n    ],\n    compileExpressionToVM: ({ block /*definition*/ }) => {\n        const { type, inputs } = block\n        if (type === \"variables_get\") {\n            const { value: variable } = inputs[0].fields.var\n            const ret = {\n                expr: toMemberExpression(\"$var\", variable.toString()),\n                errors: [],\n            }\n            return ret\n        }\n        return undefined\n    },\n    compileCommandToVM: ({\n        event,\n        block,\n        /*definition,*/ blockToExpression,\n    }) => {\n        const { type, inputs } = block\n        if (type === \"math_change\" || type === \"variables_set\") {\n            const { expr, errors } = blockToExpression(event, inputs[0].child)\n            const { value: variable } = inputs[0].fields.var\n            return {\n                cmd: makeVMBase(block, {\n                    type: \"CallExpression\",\n                    arguments: [\n                        toMemberExpression(\"$var\", variable.toString()),\n                        type === \"variables_set\"\n                            ? expr\n                            : ({\n                                  type: \"BinaryExpression\",\n                                  operator: \"+\",\n                                  left: toMemberExpression(\n                                      \"$var\",\n                                      variable.toString()\n                                  ),\n                                  right: expr,\n                              } as jsep.BinaryExpression),\n                    ],\n                    callee: toIdentifier(\"writeLocal\"),\n                }),\n                errors,\n            }\n        }\n        return undefined\n    },\n}\nexport default variablesDsl\n","import {\n    BlockDefinition,\n    BlockReference,\n    BOOLEAN_TYPE,\n    DummyInputDefinition,\n    JSON_TYPE,\n    LabelDefinition,\n    PRIMITIVE_TYPES,\n    StatementInputDefinition,\n    TextInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CompileExpressionToVMOptions,\n} from \"./dsl\"\nimport { paletteColorByIndex } from \"./palette\"\n\nconst colour = paletteColorByIndex(-2)\nconst JSON_FIELD_TYPE = \"JSONField\"\nconst JSON_OBJECT_BLOCK = \"json_object\"\nconst JSON_FIELD_SET_BLOCK = \"json_field_set\"\nconst JSON_FIELD_GET_TEMPLATE = \"jsonFieldGet\"\nconst JSON_FIELD_VALUE_TYPE = [...PRIMITIVE_TYPES, JSON_TYPE]\nconst JSON_FIELD_HAS_BLOCK = \"json_field_has\"\n\nconst jsonDSL: BlockDomainSpecificLanguage = {\n    id: \"json\",\n    createBlocks: () => [\n        <BlockDefinition>{\n            kind: \"block\",\n            type: JSON_OBJECT_BLOCK,\n            message0: \"{ %1 %2 }\",\n            args0: [\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                <StatementInputDefinition>{\n                    type: \"input_statement\",\n                    name: \"fields\",\n                    check: JSON_FIELD_TYPE,\n                },\n            ],\n            output: JSON_TYPE,\n            colour,\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: JSON_FIELD_SET_BLOCK,\n            message0: \"%1: %2\",\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"name\",\n                    spellcheck: false,\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: JSON_FIELD_VALUE_TYPE,\n                },\n            ],\n            previousStatement: JSON_FIELD_TYPE,\n            nextStatement: JSON_FIELD_TYPE,\n            colour,\n        },\n        ...PRIMITIVE_TYPES.map(\n            output =>\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: `json_field_get_as_${output.toLowerCase()}`,\n                    message0: `%1 [ %2 ] as ${output.toLowerCase()}`,\n                    args0: [\n                        <ValueInputDefinition>{\n                            type: \"input_value\",\n                            name: \"value\",\n                            check: JSON_TYPE,\n                        },\n                        <TextInputDefinition>{\n                            type: \"field_input\",\n                            name: \"name\",\n                            spellcheck: false,\n                        },\n                    ],\n                    output,\n                    colour,\n                    template: JSON_FIELD_GET_TEMPLATE,\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    vm: (value: any, name: string) => value?.[name],\n                }\n        ),\n        {\n            kind: \"block\",\n            type: JSON_FIELD_HAS_BLOCK,\n            message0: `has %1 [ %2 ]`,\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: JSON_TYPE,\n                },\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"name\",\n                    spellcheck: false,\n                },\n            ],\n            output: BOOLEAN_TYPE,\n            colour,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            vm: (value: any, name: string) => !!value?.[name],\n        },\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"JSON\",\n            colour,\n            contents: [\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Create\",\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: JSON_OBJECT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: JSON_FIELD_SET_BLOCK,\n                    values: {\n                        value: {\n                            kind: \"block\",\n                            type: \"math_number\",\n                        },\n                    },\n                },\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Read\",\n                },\n                ...PRIMITIVE_TYPES.map(output => ({\n                    kind: \"block\",\n                    type: `json_field_get_as_${output.toLowerCase()}`,\n                    values: {\n                        value: <BlockReference>{\n                            kind: \"block\",\n                            type: \"variables_get\",\n                            check: JSON_TYPE,\n                        },\n                    },\n                })),\n                {\n                    kind: \"block\",\n                    type: JSON_FIELD_HAS_BLOCK,\n                },\n            ],\n        },\n    ],\n\n    compileExpressionToVM(options: CompileExpressionToVMOptions) {\n        const { event, block, definition, blockToExpressionInner } = options\n        const { type } = block\n        const { template } = definition\n        if (type === JSON_OBJECT_BLOCK) {\n            // TODO: handle json field set block\n        } else if (type === JSON_FIELD_SET_BLOCK) {\n            // TODO: handle json field get block\n        } else if (template === JSON_FIELD_GET_TEMPLATE) {\n            // TODO: generate json expression\n            console.log(\"json expr\", {\n                event,\n                block,\n                definition,\n                blockToExpressionInner,\n            })\n            return undefined\n        }\n        // don't know\n        return undefined\n    },\n}\n\nexport default jsonDSL\n","import {\n    BlockReference,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    DummyInputDefinition,\n    identityTransformData,\n    NumberInputDefinition,\n    toolsColour,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport DataColumnChooserField from \"../fields/DataColumnChooserField\"\nimport GaugeWidgetField from \"../fields/GaugeWidgetField\"\n\nconst DASHBOARD_GAUGE_BLOCK = \"jacdac_widget_gauge\"\n\nconst colour = toolsColour\nconst widgetDSL: BlockDomainSpecificLanguage = {\n    id: \"widget\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: DASHBOARD_GAUGE_BLOCK,\n            message0: \"gauge min %1 max %2 %3 %4 %5\",\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"min\",\n                },\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"max\",\n                    value: 100,\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"field\",\n                    dataType: \"number\",\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: GaugeWidgetField.KEY,\n                    name: \"widget\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour,\n            template: \"meta\",\n            inputsInline: false,\n            transformData: identityTransformData,\n        },\n    ],\n\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Widgets\",\n            contents: [\n                <BlockReference>{ kind: \"block\", type: DASHBOARD_GAUGE_BLOCK },\n            ],\n            colour,\n        },\n    ],\n}\n\nexport default widgetDSL\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Block, Events, Workspace, alert } from \"blockly\"\nimport {\n    BlockReference,\n    ButtonDefinition,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    SeparatorDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { predictRequest } from \"../../blockly/dsl/workers/tf.proxy\"\nimport type {\n    TFModelPredictRequest,\n    TFModelPredictResponse,\n} from \"../../../workers/tf/dist/node_modules/tf.worker\"\nimport { resolveWorkspaceServices } from \"../WorkspaceContext\"\nimport UseModelField from \"../fields/UseModelField\"\nimport palette from \"./palette\"\n\nimport { importModelJSONIntoWorkspace } from \"../../fs/fs\"\n\nconst DATA_DATAVARIABLE_WRITE_BLOCK = \"data_dataset_write\"\nconst MODEL_ADD_CLASSIFIER_CALLBACK = \"model_add_variable\"\n\nexport const MODEL_BLOCKS = \"model_block_\"\nexport const MB_CLASSIFIER_VAR_TYPE = \"ModelBlockClassifier\"\n\nconst mlBlocksColour = palette()[3]\n\nconst mlBlocksDsl: BlockDomainSpecificLanguage = {\n    id: \"mlBlocks\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: MODEL_BLOCKS + \"classifier\",\n            message0: \"predict with %1\",\n            args0: [\n                {\n                    type: UseModelField.KEY,\n                    name: \"modelFile\",\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: mlBlocksColour,\n            template: \"meta\",\n            dataPreviewField: true,\n            passthroughData: false,\n            transformData: async (b: Block, data: object[]) => {\n                const modelField = b.getField(\"modelFile\") as UseModelField\n                const model = await modelField.getModel()\n\n                if (data) data = data.slice(data.length - model.inputShape[0])\n\n                if (data && data.length >= model.inputShape[0]) {\n                    const inputData = [\n                        data.map(row =>\n                            model.inputTypes.map(inputType => row[inputType])\n                        ),\n                    ]\n                    const predictMsg = {\n                        worker: \"tf\",\n                        type: \"predict\",\n                        data: {\n                            zData: inputData,\n                            model: model,\n                        },\n                    } as TFModelPredictRequest\n                    const predResult = (await predictRequest(\n                        predictMsg\n                    )) as TFModelPredictResponse\n\n                    const transposedResult = []\n                    for (const label in predResult.data.predictAll[0]) {\n                        transposedResult.push({\n                            label: label,\n                            confidence: predResult.data.predictAll[0][label],\n                        })\n                    }\n\n                    return transposedResult\n                }\n                return Promise.resolve([])\n            },\n            tooltip: \"Use this block to run inference on vm sensor data.\",\n            helpUrl: \"\",\n        },\n    ],\n    createCategory: () => [\n        <SeparatorDefinition>{\n            kind: \"sep\",\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"ML classifiers\",\n            colour: mlBlocksColour,\n            contents: [\n                <ButtonDefinition>{\n                    kind: \"button\",\n                    text: \"Import ML model\",\n                    callbackKey: MODEL_ADD_CLASSIFIER_CALLBACK,\n                    callback: (workspace: Workspace) => {\n                        const services = resolveWorkspaceServices(workspace)\n                        const directory = services?.workingDirectory\n                        if (!directory)\n                            alert(\n                                \"You need to open a directory to import a model classifier.\"\n                            )\n                        else {\n                            importModelJSONIntoWorkspace(directory.handle)\n                                .then(() => directory.sync())\n                                .then(() => alert(\"Files imported!\"))\n                        }\n                    },\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: MODEL_BLOCKS + \"classifier\",\n                },\n            ],\n        },\n    ],\n    createWorkspaceChangeListener: () => (event: Events.Abstract) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const { type, blockId } = event as any\n        const isBlockChange =\n            type === Events.BLOCK_CHANGE || type === Events.BLOCK_MOVE\n\n        if (isBlockChange) {\n            const workspace = event.getEventWorkspace_()\n            const block = workspace.getBlockById(blockId)\n            if (block?.type !== DATA_DATAVARIABLE_WRITE_BLOCK) return // nothing so see here\n        }\n    },\n}\nexport default mlBlocksDsl\n","import servicesDSL from \"../blockly/dsl/servicesdsl\"\nimport serverServicesDSL from \"../blockly/dsl/serverservicesdsl\"\nimport toolsDsl from \"../blockly/dsl/toolsdsl\"\nimport loopsDsl from \"../blockly/dsl/loopsdsl\"\nimport logicDsl from \"../blockly/dsl/logicdsl\"\nimport mathDsl from \"../blockly/dsl/mathdsl\"\nimport variablesDsl from \"../blockly/dsl/variablesdsl\"\nimport shadowDsl from \"../blockly/dsl/shadowdsl\"\nimport fieldsDsl from \"../blockly/dsl/fieldsdsl\"\nimport jsonDsl from \"../blockly/dsl/jsondsl\"\nimport chartDsl from \"../blockly/dsl/chartdsl\"\nimport dataDsl from \"../blockly/dsl/datadsl\"\nimport widgetDSL from \"../blockly/dsl/widgetdsl\"\nimport mlBlocksDsl from \"../blockly/dsl/mlblocksdsl\"\nimport { createIFrameDSL } from \"../blockly/dsl/iframedsl\"\n\nconst vmDsls = [\n    servicesDSL,\n    serverServicesDSL,\n    loopsDsl,\n    logicDsl,\n    mathDsl,\n    jsonDsl,\n    variablesDsl,\n    toolsDsl,\n    widgetDSL,\n    dataDsl,\n    chartDsl,\n    shadowDsl,\n    fieldsDsl,\n    mlBlocksDsl,\n    createIFrameDSL(\"hostvm\", \"*\"),\n]\nexport default vmDsls\n","import { Grid, NoSsr } from \"@mui/material\"\nimport React, {\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport useVMRunner from \"./useVMRunner\"\nimport VMDiagnostics from \"./VMDiagnostics\"\nimport VMToolbar from \"./VMToolbar\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport BlockContext, { BlockProvider } from \"../blockly/BlockContext\"\nimport BlockDiagnostics from \"../blockly/BlockDiagnostics\"\nimport workspaceJSONToVMProgram from \"./VMgenerator\"\nimport BlockEditor from \"../blockly/BlockEditor\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport vmDsls from \"./vmdsls\"\nimport { VMStatus } from \"../../../jacdac-ts/src/vm/runner\"\nimport { VM_WARNINGS_CATEGORY, WORKSPACE_FILENAME } from \"../blockly/toolbox\"\nimport FileTabs from \"../fs/FileTabs\"\nimport { WorkspaceFile } from \"../blockly/dsl/workspacejson\"\nimport FileSystemContext from \"../FileSystemContext\"\nimport { resolveWorkspaceServices } from \"../blockly/WorkspaceContext\"\n\nconst VM_EDITOR_ID = \"vm\"\nconst VM_SOURCE_STORAGE_KEY = \"tools:vmeditor\"\nconst VM_NEW_FILE_CONTENT = JSON.stringify({\n    editor: VM_EDITOR_ID,\n    xml: \"\",\n} as WorkspaceFile)\n\nfunction VMEditorWithContext() {\n    const {\n        dsls,\n        workspace,\n        workspaceJSON,\n        roleManager,\n        setWarnings,\n        dragging,\n    } = useContext(BlockContext)\n    const { fileSystem } = useContext(FileSystemContext)\n    const [program, setProgram] = useState<VMProgram>()\n    const autoStart = true\n    const { runner, run, cancel } = useVMRunner(roleManager, program, autoStart)\n\n    // don't run the VM while dragging as it glitches the Ui\n    useEffect(() => {\n        if (runner?.status === VMStatus.Running) cancel()\n    }, [runner, dragging])\n    useEffect(() => {\n        try {\n            const newProgram = workspaceJSONToVMProgram(workspaceJSON, dsls)\n            if (JSON.stringify(newProgram) !== JSON.stringify(program))\n                setProgram(newProgram)\n        } catch (e) {\n            console.error(e)\n            setProgram(undefined)\n        }\n    }, [dsls, workspaceJSON])\n    useEffect(\n        () =>\n            program &&\n            roleManager?.updateRoles([\n                ...program.roles,\n                ...program.serverRoles.map(r => ({\n                    role: r.role,\n                    serviceClass: r.serviceClass,\n                    preferredDeviceId: \"TBD\",\n                })),\n            ]),\n        [roleManager, program]\n    )\n    useEffect(\n        () =>\n            setWarnings(\n                VM_WARNINGS_CATEGORY,\n                arrayConcatMany(program?.handlers.map(h => h.errors))\n            ),\n        [program]\n    )\n\n    useEffect(() => {\n        const services = resolveWorkspaceServices(workspace)\n        if (services) {\n            services.runner = runner\n        }\n    }, [workspace, runner])\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            {!!fileSystem && (\n                <Grid item xs={12}>\n                    <FileTabs\n                        newFileName={WORKSPACE_FILENAME}\n                        newFileContent={VM_NEW_FILE_CONTENT}\n                        hideFiles={true}\n                    />\n                </Grid>\n            )}\n            <Grid item xs={12}>\n                <VMToolbar runner={runner} run={run} cancel={cancel} />\n            </Grid>\n            <Grid item xs={12}>\n                <BlockEditor editorId={VM_EDITOR_ID} />\n            </Grid>\n            {Flags.diagnostics && (\n                <>\n                    <VMDiagnostics program={program} />\n                    <BlockDiagnostics />\n                </>\n            )}\n        </Grid>\n    )\n}\n\nexport default function VMEditor() {\n    const dsls = useMemo(() => {\n        return vmDsls\n    }, [])\n    const handleOnBeforeSaveWorkspaceFile = useCallback(\n        (file: WorkspaceFile) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const f = file as any\n            f.vm = workspaceJSONToVMProgram(file.json, dsls)\n        },\n        []\n    )\n\n    return (\n        <NoSsr>\n            <BlockProvider\n                storageKey={VM_SOURCE_STORAGE_KEY}\n                dsls={dsls}\n                onBeforeSaveWorkspaceFile={\n                    Flags.diagnostics\n                        ? handleOnBeforeSaveWorkspaceFile\n                        : undefined\n                }\n            >\n                <VMEditorWithContext />\n            </BlockProvider>\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport VMEditor from \"../../components/vm/VMEditor\"\n\nexport default function Page() {\n    return <VMEditor />\n}\n"],"names":["builtins","jacdac_on_off","block","getFieldValue","jacdac_yes_no","jacdac_time_picker","Number","jacdac_angle","jacdac_percent","jacdac_ratio","shadowDsl","id","createBlocks","kind","type","message0","args0","name","options","style","output","min","max","precision","colour","colourOptions","columns","blockToValue","isHighLevelRegister","isHighLevelEvent","isCommand","jdpack","CHANGE","JDRegisterServer","SensorServer","VM_EXTERNAL_REQUEST","VMRegisterServer","serviceServer","reg","defaultValue","identifier","sendGetAsync","raiseGetRegisterEvent","theRealSendGetAsync","VMServiceServer","role","spec","classIdentifier","readingValues","streamingInterval","eventNameToId","regNameToId","regFieldToId","commandPackets","cmdFieldToId","packets","filter","map","regServer","addExistingRegister","fields","forEach","pkt","index","subscribe","emit","tgt","cmd","addCommand","decoded","regName","respondToGetRegisterEvent","register","sendEventNameAsync","eventName","values","find","p","sendEvent","packFormat","lookupRegister","root","fld","value","undefined","writeRegister","ev","setValues","isEvent","isRegister","isIntensity","JDServiceClient","EVENT","REPORT_UPDATE","SystemReg","VMServiceClient","service","_registers","_reportUpdate","_events","registerRegister","handler","specification","mount","registerEvent","event","sendCommandAsync","commandName","sendCmdAsync","writeRegisterAsync","code","Value","setEnabled","writeRegAsync","jdreg","sendSetPackedAsync","Intensity","lookupRegisterAsync","reportUpdate","refresh","unpackedValue","field","f","assert","JDEventSource","serviceSpecificationFromClassIdentifier","GLOBAL_CHANGE","REGISTER_CHANGE","EXTERNAL_REQUEST","VMExceptionCode","VMException","data","Error","VMEnvironment","registers","events","serverRoles","_currentRequest","_clientEnvs","_serverEnvs","_globals","_rolesBound","_rolesUnbound","setupServers","serviceClass","globals","servers","Object","keys","k","server","serviceChanged","unmount","push","r","e","roleBound","serviceEnv","getService","getRootName","object","s","getServer","property","lookupAsync","roleName","startsWith","me","local","ep","writeGlobal","firstType","TypeMismatch","toString","clearExternalStimulii","rolesReset","hasRequest","op","completeRequest","request","initRoles","slice","roleTransition","unsubscribe","vs","unparse","ae","elements","join","caller","callee","arguments","computed","be","left","operator","right","ue","argument","raw","VMExprEvaluator","env","callEval","exprStack","tos","length","pop","evalAsync","visitExpressionAsync","ret","top","Math","abs","val","lit","Mutex","promises","shift","acquire","Promise","resolve","reject","then","v","ROLE_BOUND","ROLE_UNBOUND","SERVICE_PROVIDER_REMOVED","TRACE","checkProgram","compileProgram","VM_GLOBAL_CHANGE","VM_COMMAND_FAILED","VM_WATCH_CHANGE","VM_BREAKPOINT","VM_INTERNAL_ERROR","VM_LOG_ENTRY","VM_ROLE_MISSING","JDClient","JDServerServiceProvider","VMInternalStatus","VM_WAKE_SLEEPER","VMJumpException","label","VMTimerException","ms","VMRequestException","VMCommandEvaluator","parent","_regSaved","_changeSaved","_started","trace","msg","context","command","ee","namespace","funName","args","InternalError","newEval","evalExpressionAsync","expr","checkExpressionAsync","startAsync","inst","evaluate","neededStart","Running","a","Completed","regValue","watch","sourceId","evString","writeLog","Stopped","VMCommandRunner","handlerId","_status","_eval","stepAsync","status","VMHandlerRunner","_commandIndex","_currentCommand","stopped","_labelToIndex","commands","c","reset","gotoTop","Ready","commandIndex","wake","next","runToCompletionAsync","singleStep","singleStepCheckBreakAsync","getCommand","sid","breakpointOnAsync","singleStepAsync","Sleeping","sleepAsync","handlerWokeOnRequest","isEveryHandler","h","isRegisterChangeHandler","VMStatus","MAX_LOG","VMProgramRunner","roleManager","program","_handlerRunners","_roles","_serverRoles","_waitQueue","_everyQueue","_runQueue","_sleepQueue","_watch","_log","_breaks","_onCompletionOfExternalRequest","_in_run","compiled","errors","roles","console","debug","_env","handlers","_waitRunMutex","_breaksMutex","_sleepMutex","waitingToRunning","bus","provider","_provider","wakeSleeper","initializeRoleManagement","g","setStatus","message","last","text","count","lookupWatch","setBreakpointsAsync","breaks","b","clearBreakpointsAsync","setTimeout","handlerRunner","device","stopSleepers","startProvider","_device","cancel","resumeAsync","Paused","runAsync","getCurrentRunner","runHandlerAsync","postProcessHandler","newHead","emitBreakpoint","atTop","oneStep","brkCommand","ex","RoleNoService","done","moveToWait","unshift","q","findIndex","del","splice","handlersStarted","newRunners","sleepingRunners","hs","indexOf","clearTimeout","addRoleService","addServiceProvider","updateRole","deviceId","statusCode","removeServiceProvider","useContext","useEffect","useState","AppContext","ERROR","Flags","useVMRunner","autoRun","setError","runner","setRunner","_autoStart","_setAutoStart","run","newTestRunner","handleTrace","diagnostics","Grid","Typography","React","CodeBlock","VMDiagnostics","props","JSON","stringify","BlockContext","JacdacContext","DeviceAvatar","serviceProviderDefinitionFromServiceClass","useServiceServer","CancelIcon","Chip","Tooltip","TWIN_BLOCK","toRoleType","RoleChip","workspace","preferredDeviceId","handleRoleClick","twinBlock","getTopBlocks","inputList","fieldRow","getVariable","newBlock","variable","setValue","getId","m","getMetrics","moveBy","viewWidth","viewHeight","initSvg","render","centerOnBlock","handleDelete","useChange","BlockClientRoles","_","useMemo","PlayArrowIcon","StopIcon","IconButtonWithTooltip","PauseIcon","arrayConcatMany","PlayForWorkIcon","useMounted","IconButtonWithProgress","BugReportIcon","useWorkspaceBreakpoints","breakpoints","meta","setBreakpointHighlight","highlightBlock","VMRunnerButtons","t","indeterminate","setIndeterminate","breakpoint","setBreakpoint","pausing","paused","mounted","disabled","handleRun","handleCancel","handleResume","handlePause","handleStep","AddIcon","VMStartSimulatorButton","toggleShowDeviceHostsDialog","handleShowStartSimulator","VMToolbar","SRV_HID_KEYBOARD","SRV_LED","SRV_DOT_MATRIX","SRV_SEVEN_SEGMENT_DISPLAY","KeyboardKeyField","LEDColorField","LEDMatrixField","CODE_STATEMENT_TYPE","DATA_SCIENCE_STATEMENT_TYPE","identityTransformData","toolsColour","JDomTreeField","TwinField","createServiceColor","fieldsToFieldInputs","fieldsToMessage","fieldsToValues","getServiceInfo","roleVariable","serviceHelp","ServicesBaseDSL","humanify","SET_STATUS_LIGHT_BLOCK","ROLE_BOUND_EVENT_BLOCK","ROLE_BOUND_BLOCK","INSPECT_BLOCK","commandColor","ServicesBlockDomainSpecificLanguage","theme","serviceColor","allServices","supportedServices","registerSimpleTypes","registerComposites","registerSimpleEnumTypes","registerCompositeEnumTypes","resolveService","cls","srv","customClientBlockDefinitions","KEY","inputsInline","previousStatement","nextStatement","tooltip","helpUrl","expression","template","check","color","SHADOW","speed","digits","def","shortId","toLowerCase","eventClientBlocks","registerChangeByEventClientBlocks","makeRegisterChangeByEventBlocks","registerSimpleGetClientBlocks","makeRegisterSimpleGetBlocks","registerEnumGetClientBlocks","makeRegisterEnumGetBlocks","registerNumericsGetClientBlocks","makeRegisterNumericsGetBlocks","registerSetClientBlocks","makeRegisterSetBlocks","commandClientBlocks","description","_serviceBlocks","_eventFieldBlocks","makeFieldBlocks","_roleBlocks","variableTypes","defaultType","toolsBlocks","transformData","createCategory","makeServicesCategories","createCategoryHelper","clientServicesCategories","commonCategory","contents","toolsCategory","servicesDSL","ServerServicesBlockDomainSpecificLanguage","makeRegisterGetSetRequestBlocks","isGet","eventServerBlocks","flatMap","eventsNoArgs","retNoArgs","eventsArgs","retArgs","registerSimpleGetServerBlocks","registerEnumGetServerBlocks","registerNumericsGetServerBlocks","registerSetServerBlocks","registerSetRequestBlocks","registerGetRequestBlocks","commandServerBlocks","serverServicesCategories","serverServicesDSL","toIdentifier","makeVMBase","LogViewField","VariablesField","WatchValueField","WATCH_BLOCK","LOG_BLOCK","VIEW_LOG_BLOCK","VARIABLES_BLOCK","toolsDSL","compileCommandToVM","blockToExpression","inputs","child","compileEventToVM","processErrors","paletteColorByIndex","WAIT_BLOCK","ON_START_BLOCK","REPEAT_EVERY_BLOCK","loopsDsl","interval","time","ops","AND","OR","EQ","NEQ","LT","GT","LTE","GTE","NEG","logicDsl","types","A","B","BOOL","compileExpressionToVM","blockToExpressionInner","prefix","ADD","MULTIPLY","DIVIDE","MINUS","mathDsl","extensions","vm","random","minInclusive","maxInclusive","NUM","toMemberExpression","variablesDsl","custom","var","BOOLEAN_TYPE","JSON_TYPE","PRIMITIVE_TYPES","JSON_FIELD_TYPE","JSON_OBJECT_BLOCK","JSON_FIELD_SET_BLOCK","JSON_FIELD_GET_TEMPLATE","JSON_FIELD_VALUE_TYPE","JSON_FIELD_HAS_BLOCK","jsonDSL","spellcheck","definition","log","DataColumnChooserField","GaugeWidgetField","DASHBOARD_GAUGE_BLOCK","widgetDSL","dataType","Events","alert","predictRequest","resolveWorkspaceServices","UseModelField","palette","importModelJSONIntoWorkspace","DATA_DATAVARIABLE_WRITE_BLOCK","MODEL_ADD_CLASSIFIER_CALLBACK","MODEL_BLOCKS","MB_CLASSIFIER_VAR_TYPE","mlBlocksColour","mlBlocksDsl","dataPreviewField","passthroughData","modelField","getField","model","getModel","inputShape","inputData","row","inputTypes","inputType","predictMsg","worker","zData","predResult","transposedResult","predictAll","confidence","callbackKey","callback","services","directory","workingDirectory","handle","sync","createWorkspaceChangeListener","blockId","isBlockChange","BLOCK_CHANGE","BLOCK_MOVE","getEventWorkspace_","getBlockById","toolsDsl","fieldsDsl","jsonDsl","chartDsl","dataDsl","createIFrameDSL","vmDsls","NoSsr","useCallback","BlockProvider","BlockDiagnostics","workspaceJSONToVMProgram","BlockEditor","VM_WARNINGS_CATEGORY","WORKSPACE_FILENAME","FileTabs","FileSystemContext","VM_EDITOR_ID","VM_SOURCE_STORAGE_KEY","VM_NEW_FILE_CONTENT","editor","xml","VMEditorWithContext","dsls","workspaceJSON","setWarnings","dragging","fileSystem","setProgram","autoStart","newProgram","error","updateRoles","VMEditor","handleOnBeforeSaveWorkspaceFile","file","json","Page"],"sourceRoot":""}