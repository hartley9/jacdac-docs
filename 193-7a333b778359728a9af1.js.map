{"version":3,"file":"193-7a333b778359728a9af1.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEe,SAASU,mBAAT,CAA6BC,KAA7B,EAA2D;AACtE,MAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA;AAArB,MAAiCH,KAAvC;AAEA,MAAMI,aAAa,GAAGN,uEAAW,CAACG,OAAD,EAAUX,+FAAV,CAAjC;AACA,MAAM,CAACgB,KAAD,IAAUX,4FAAwB,CAAWS,aAAX,EAA0BJ,KAA1B,CAAxC;AACA,MAAMO,MAAM,GAAGd,4EAAgB,CAAyBQ,OAAzB,CAA/B;AACA,MAAMO,KAAK,GAAGD,MAAM,GAAG,WAAH,GAAiB,SAArC;AACA,MAAM;AAAEE,IAAAA,UAAF;AAAcC,IAAAA,iBAAd;AAAiCC,IAAAA,MAAjC;AAAyCC,IAAAA;AAAzC,MACFpB,4EAAc,CAACgB,KAAD,CADlB;AAEA,MAAMK,QAAQ,GAAG,CAACC,KAAK,CAACR,KAAD,CAAvB;AACA,MAAMS,UAAU,GAAGrB,2EAAa,CAACS,OAAD,EAAUD,QAAV,aAAUA,QAAV,uBAAUA,QAAQ,CAAEc,MAApB,CAAhC;AACA,MAAMC,MAAM,GAAGJ,QAAQ,GAAMK,IAAI,CAACC,KAAL,CAAWb,KAAK,GAAG,GAAnB,CAAN,aAAvB;AAEA,MAAMc,EAAE,GAAG,CAAX;AACA,MAAMC,EAAE,GAAG,CAAX;AACA,MAAMC,CAAC,GAAG,CAAV;AACA,MAAMC,CAAC,GAAG,CAACF,EAAE,GAAGD,EAAN,IAAYE,CAAZ,GAAgB,IAAIF,EAA9B;AACA,MAAMI,GAAG,GAAG,EAAZ;AACA,MAAMC,GAAG,GAAGL,EAAZ;AACA,MAAMM,EAAE,GAAGH,CAAC,GAAG,CAAf;AACA,MAAMI,CAAC,GAAGD,EAAE,GAAGF,GAAL,GAAWC,GAArB;AACA,MAAMG,CAAC,GAAG,CAAV;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAiBC,QAAjB,KAAuD;AACpE,QAAMC,MAAM,GAAGD,QAAf;AACAxB,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAE0B,OAAR,CAAgBC,SAAhB,CAA0B,CAACF,MAAD,CAA1B;AACA5B,IAAAA,aAAa,CAAC+B,OAAd;AACH,GAJD;;AAMA,sBACI,iDAAC,+DAAD;AAAM,aAAS,MAAf;AAAgB,WAAO,EAAE;AAAzB,kBACI,iDAAC,+DAAD;AAAM,QAAI,MAAV;AAAW,MAAE,EAAE;AAAf,kBACI,iDAAC,mEAAD;AAAW,SAAK,EAAEZ,CAAlB;AAAqB,UAAM,EAAEI,CAA7B;AAAgC,QAAI,EAAEZ;AAAtC,kBACI;AACI,QAAI,EAAEN,UADV;AAEI,KAAC,EAAE,CAFP;AAGI,KAAC,EAAE,CAHP;AAII,SAAK,EAAEc,CAJX;AAKI,UAAM,EAAEI,CALZ;AAMI,KAAC,EAAEC;AANP,IADJ,EASKQ,KAAK,CAACd,CAAD,CAAL,CACIe,IADJ,CACS,CADT,EAEIC,GAFJ,CAEQ,CAACC,CAAD,EAAIC,CAAJ,kBACD;AACI,OAAG,WAASA,CADhB;AAEI,UAAM,EAAE9B,iBAFZ;AAGI,KAAC,UAAO,IAAIU,EAAJ,GAASoB,CAAC,IAAInB,EAAE,GAAGD,EAAT,CAAjB,WACGO,CAAC,GAAGF,GADP,YAEK,CAACC,EALX;AAMI,eAAW,EAAEL,EANjB;AAOI,iBAAa,EAAEmB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAc,OAAd,GAAwB;AAP3C,IAHP,CATL,EAsBK3B,QAAQ,IACLuB,KAAK,CAACd,CAAD,CAAL,CACKe,IADL,CACU,CADV,EAEKC,GAFL,CAES,CAACC,CAAD,EAAIC,CAAJ,kBACD;AACI,OAAG,YAAUA,CADjB;AAEI,UAAM,EAAE7B,MAFZ;AAGI,KAAC,UAAO,IAAIS,EAAJ,GAASoB,CAAC,IAAInB,EAAE,GAAGD,EAAT,CAAjB,WACGO,CAAC,GAAGF,GAAJ,GAAU,CADb,YAEK,CAACC,EAAD,GAAMpB,KALhB;AAMI,eAAW,EAAEe,EAAE,GAAG,CANtB;AAOI,iBAAa,EAAE;AAPnB,IAHR,CAvBR,EAoCKJ,MAAM,iBACH;AACI,OAAG,EAAC,MADR;AAEI,KAAC,EAAEM,CAAC,IAAI,CAFZ;AAGI,KAAC,EAAEC,GAAG,IAAI;AAHd,KAIQZ,SAJR;AAKI,QAAI,EAAE;AALV,MAOKK,MAPL,CArCR,CADJ,CADJ,EAmDKV,MAAM,IAAIM,QAAV,iBACG,iDAAC,+DAAD;AAAM,QAAI,MAAV;AAAW,MAAE;AAAb,kBACI,iDAAC,+DAAD;AACI,qBAAiB,EAAC,KADtB;AAEI,OAAG,EAAE,CAFT;AAGI,OAAG,EAAE,CAHT;AAII,QAAI,EAAE,IAJV;AAKI,SAAK,EAAEP,KALX;AAMI,YAAQ,EAAEuB,QANd;AAOI,SAAK,EAAErB;AAPX,IADJ,CApDR,CADJ;AAmEH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardWaterLevel.tsx"],"sourcesContent":["import React from \"react\"\nimport { WaterLevelReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useWidgetSize from \"../widgets/useWidgetSize\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport { Grid, Slider } from \"@mui/material\"\nimport SensorServer from \"../../../jacdac-ts/src/servers/sensorserver\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashbaordWaterLevel(props: DashboardServiceProps) {\n    const { service, services, variant } = props\n\n    const levelRegister = useRegister(service, WaterLevelReg.Level)\n    const [value] = useRegisterUnpackedValue<[number]>(levelRegister, props)\n    const server = useServiceServer<SensorServer<[number]>>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active, textProps } =\n        useWidgetTheme(color)\n    const hasValue = !isNaN(value)\n    const widgetSize = useWidgetSize(variant, services?.length)\n    const tvalue = hasValue ? `${Math.round(value * 100)}%` : `--`\n\n    const mx = 5\n    const wx = 6\n    const n = 8\n    const w = (wx + mx) * n + 2 * mx\n    const mty = 42\n    const mby = mx\n    const hy = w * 2\n    const h = hy + mty + mby\n    const r = 1\n\n    const onChange = (event: unknown, newValue: number | number[]): void => {\n        const svalue = newValue as number\n        server?.reading.setValues([svalue])\n        levelRegister.refresh()\n    }\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={12}>\n                <SvgWidget width={w} height={h} size={widgetSize}>\n                    <rect\n                        fill={background}\n                        x={0}\n                        y={0}\n                        width={w}\n                        height={h}\n                        r={r}\n                    />\n                    {Array(n)\n                        .fill(0)\n                        .map((_, i) => (\n                            <path\n                                key={`back${i}`}\n                                stroke={controlBackground}\n                                d={`M ${2 * mx + i * (wx + mx)} ${\n                                    h - mby\n                                } v ${-hy}`}\n                                strokeWidth={wx}\n                                strokeLinecap={i % 2 === 0 ? \"round\" : \"square\"}\n                            />\n                        ))}\n                    {hasValue &&\n                        Array(n)\n                            .fill(0)\n                            .map((_, i) => (\n                                <path\n                                    key={`water${i}`}\n                                    stroke={active}\n                                    d={`M ${2 * mx + i * (wx + mx)} ${\n                                        h - mby - 2\n                                    } v ${-hy * value}`}\n                                    strokeWidth={wx + 2}\n                                    strokeLinecap={\"square\"}\n                                />\n                            ))}\n                    {tvalue && (\n                        <text\n                            key=\"text\"\n                            x={w >> 1}\n                            y={mty >> 1}\n                            {...textProps}\n                            fill={\"#fff\"}\n                        >\n                            {tvalue}\n                        </text>\n                    )}\n                </SvgWidget>\n            </Grid>\n            {server && hasValue && (\n                <Grid item xs>\n                    <Slider\n                        valueLabelDisplay=\"off\"\n                        min={0}\n                        max={1}\n                        step={0.05}\n                        value={value}\n                        onChange={onChange}\n                        color={color}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n"],"names":["React","WaterLevelReg","SvgWidget","useWidgetTheme","useServiceServer","useWidgetSize","useRegisterUnpackedValue","Grid","Slider","useRegister","DashbaordWaterLevel","props","service","services","variant","levelRegister","Level","value","server","color","background","controlBackground","active","textProps","hasValue","isNaN","widgetSize","length","tvalue","Math","round","mx","wx","n","w","mty","mby","hy","h","r","onChange","event","newValue","svalue","reading","setValues","refresh","Array","fill","map","_","i"],"sourceRoot":""}