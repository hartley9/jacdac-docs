{"version":3,"file":"7787-6ae0c06934fcae355928.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardCharacterScreen.tsx"],"sourcesContent":["import React, { ChangeEvent, useEffect, useState } from \"react\"\nimport {\n    CharacterScreenCmd,\n    CharacterScreenReg,\n    CharacterScreenTextDirection,\n    CharacterScreenVariant,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport { Grid, TextField } from \"@material-ui/core\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useRegister from \"../hooks/useRegister\"\nimport CmdButton from \"../CmdButton\"\nimport ClearIcon from \"@material-ui/icons/Clear\"\nimport EditIcon from \"@material-ui/icons/Edit\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport CharacterScreenWidget from \"../widgets/CharacterScreenWidget\"\n\n// https://en.wikipedia.org/wiki/Braille_ASCII\nconst BRAILE_CHARACTERS = {\n    \" \": \"⠀\", // space bar to dot-0\n    \"-\": \"⠤\",\n    \",\": \"⠠\",\n    \";\": \"⠰\",\n    \":\": \"⠱\",\n    \"!\": \"⠮\",\n    \"?\": \"⠹\",\n    \".\": \"⠨\",\n    \"(\": \"⠷\",\n    \"[\": \"⠪\",\n    \"@\": \"⠈\",\n    \"*\": \"⠡\",\n    \"/\": \"⠌\",\n    \"'\": \"⠄\",\n    '\"': \"⠐\",\n    \"\\\\\": \"⠳\",\n    \"&\": \"⠯\",\n    \"%\": \"⠩\",\n    \"^\": \"⠘\",\n    \"+\": \"⠬\",\n    \"<\": \"⠣\",\n    \">\": \"⠜\",\n    $: \"⠫\",\n    \"0\": \"⠴\",\n    \"1\": \"⠂\",\n    \"2\": \"⠆\",\n    \"3\": \"⠒\",\n    \"4\": \"⠲\",\n    \"5\": \"⠢\",\n    \"6\": \"⠖\",\n    \"7\": \"⠶\",\n    \"8\": \"⠦\",\n    \"9\": \"⠔\",\n    A: \"⠁\",\n    B: \"⠃\",\n    C: \"⠉\",\n    D: \"⠙\",\n    E: \"⠑\",\n    F: \"⠋\",\n    G: \"⠛\",\n    H: \"⠓\",\n    I: \"⠊\",\n    J: \"⠚\",\n    K: \"⠅\",\n    L: \"⠇\",\n    M: \"⠍\",\n    N: \"⠝\",\n    O: \"⠕\",\n    P: \"⠏\",\n    Q: \"⠟\",\n    R: \"⠗\",\n    S: \"⠎\",\n    T: \"⠞\",\n    U: \"⠥\",\n    V: \"⠧\",\n    W: \"⠺\",\n    X: \"⠭\",\n    Z: \"⠵\",\n    \"]\": \"⠻\",\n    \"#\": \"⠼\",\n    Y: \"⠽\",\n    \")\": \"⠾\",\n    \"=\": \"⠿\",\n    _: \"⠸\",\n}\nfunction brailify(s: string) {\n    if (!s) return s\n    let r = \"\"\n    const su = s.toLocaleUpperCase()\n    for (let i = 0; i < su.length; ++i) {\n        r += BRAILE_CHARACTERS[su.charAt(i)] || \"?\"\n    }\n    return r\n}\n\nexport default function DashboardCharacterScreen(props: DashboardServiceProps) {\n    const { service } = props\n\n    const messageRegister = useRegister(service, CharacterScreenReg.Message)\n    const rowsRegister = useRegister(service, CharacterScreenReg.Rows)\n    const columnsRegister = useRegister(service, CharacterScreenReg.Columns)\n    const textDirectionRegister = useRegister(\n        service,\n        CharacterScreenReg.TextDirection\n    )\n    const variantRegister = useRegister(service, CharacterScreenReg.Variant)\n    const brightnessRegister = useRegister(\n        service,\n        CharacterScreenReg.Brightness\n    )\n\n    const [edit, setEdit] = useState(false)\n    const [message] = useRegisterUnpackedValue<[string]>(messageRegister, props)\n    const [rows] = useRegisterUnpackedValue<[number]>(rowsRegister, props)\n    const [columns] = useRegisterUnpackedValue<[number]>(columnsRegister, props)\n    const [textDirection] = useRegisterUnpackedValue<[number]>(\n        textDirectionRegister,\n        props\n    )\n    const [variant] = useRegisterUnpackedValue<[CharacterScreenVariant]>(\n        variantRegister,\n        props\n    )\n    const [brightness] = useRegisterUnpackedValue<[number]>(brightnessRegister)\n\n    const [fieldMessage, setFieldMessage] = useState(message)\n\n    const handleClear = async () => {\n        setFieldMessage(\"\")\n        await service.sendCmdAsync(CharacterScreenCmd.Clear, undefined, true)\n    }\n    const handleFieldMessageChange = async (\n        ev: ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        setFieldMessage(ev.target.value)\n        await messageRegister.sendSetStringAsync(ev.target.value, true)\n    }\n    const handleEdit = () => setEdit(e => !e)\n\n    // set first value of message\n    useEffect(() => {\n        if (!fieldMessage && message) setFieldMessage(message)\n    }, [message])\n\n    if (rows === undefined || columns === undefined) return <LoadingProgress /> // size unknown\n\n    const converter: (s: string) => string =\n        variant === CharacterScreenVariant.Braille ? brailify : s => s\n    const cmessage = message.split(\"\").map(converter).join(\"\")\n    const rtl = textDirection === CharacterScreenTextDirection.RightToLeft\n\n    return (\n        <Grid container spacing={1}>\n            {edit && (\n                <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                        <Grid item xs>\n                            <TextField\n                                label=\"text\"\n                                value={fieldMessage}\n                                onChange={handleFieldMessageChange}\n                                multiline={true}\n                                rows={rows || 2}\n                                fullWidth={true}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <CmdButton\n                                title=\"clear the entire display\"\n                                onClick={handleClear}\n                                icon={<ClearIcon />}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            )}\n            <Grid item xs>\n                <CharacterScreenWidget\n                    rows={rows}\n                    columns={columns}\n                    rtl={rtl}\n                    message={cmessage}\n                    disabled={brightness === 0}\n                />\n            </Grid>\n            <Grid item>\n                <IconButtonWithTooltip\n                    title={!edit ? \"show editor\" : \"hide editor\"}\n                    onClick={handleEdit}\n                >\n                    <EditIcon />\n                </IconButtonWithTooltip>\n            </Grid>\n        </Grid>\n    )\n}\n"],"names":["React","useEffect","useState","CharacterScreenCmd","CharacterScreenReg","CharacterScreenTextDirection","CharacterScreenVariant","useRegisterUnpackedValue","Grid","TextField","LoadingProgress","useRegister","CmdButton","ClearIcon","EditIcon","IconButtonWithTooltip","CharacterScreenWidget","BRAILE_CHARACTERS","$","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Z","Y","_","brailify","s","r","su","toLocaleUpperCase","i","length","charAt","DashboardCharacterScreen","props","service","messageRegister","Message","rowsRegister","Rows","columnsRegister","Columns","textDirectionRegister","TextDirection","variantRegister","Variant","brightnessRegister","Brightness","edit","setEdit","message","rows","columns","textDirection","variant","brightness","fieldMessage","setFieldMessage","handleClear","sendCmdAsync","Clear","undefined","handleFieldMessageChange","ev","target","value","sendSetStringAsync","handleEdit","e","converter","Braille","cmessage","split","map","join","rtl","RightToLeft"],"sourceRoot":""}