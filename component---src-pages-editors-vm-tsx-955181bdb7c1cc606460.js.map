{"version":3,"file":"component---src-pages-editors-vm-tsx-955181bdb7c1cc606460.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/BugReport.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Cancel.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Pause.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/PlayArrow.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/PlayForWork.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Stop.js","webpack://jacdac-docs/./src/components/blockly/dsl/shadowdsl.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/server.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/client.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/environment.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/expr.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/ir.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/symutils.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/compile.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/utils.ts","webpack://jacdac-docs/./jacdac-ts/src/vm/runner.ts","webpack://jacdac-docs/./src/components/vm/useVMRunner.ts","webpack://jacdac-docs/./src/components/vm/VMDiagnostics.tsx","webpack://jacdac-docs/./src/components/blockly/RoleChip.tsx","webpack://jacdac-docs/./src/components/blockly/BlockRoles.tsx","webpack://jacdac-docs/./src/components/vm/VMRunnerButtons.tsx","webpack://jacdac-docs/./src/components/vm/VMStartSimulatorButton.tsx","webpack://jacdac-docs/./src/components/vm/VMToolbar.tsx","webpack://jacdac-docs/./src/components/blockly/dsl/servicesbase.ts","webpack://jacdac-docs/./src/components/vm/VMgenerator.ts","webpack://jacdac-docs/./src/components/blockly/dsl/servicesdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/serverservicesdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/toolsdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/loopsdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/logicdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/mathdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/variablesdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/jsondsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/widgetdsl.ts","webpack://jacdac-docs/./src/components/blockly/dsl/mlblocksdsl.ts","webpack://jacdac-docs/./src/components/vm/vmdsls.ts","webpack://jacdac-docs/./src/components/vm/VMEditor.tsx","webpack://jacdac-docs/./src/pages/editors/vm.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49 0-.96.06-1.41.17L8.41 3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6 8h-4v-2h4v2zm0-4h-4v-2h4v2z\"\n}), 'BugReport');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"\n}), 'Cancel');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"\n}), 'Pause');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M8 5v14l11-7z\"\n}), 'PlayArrow');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z\"\n}), 'PlayForWork');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 6h12v12H6z\"\n}), 'Stop');\n\nexports.default = _default;","import { Block } from \"blockly\"\nimport { SMap } from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    ColorInputDefnition,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst builtins: SMap<(block: Block) => string | number | boolean> = {\n    jacdac_on_off: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_yes_no: block => block.getFieldValue(\"value\") === \"on\",\n    jacdac_time_picker: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_angle: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_percent: block => Number(block.getFieldValue(\"value\") || \"0\"),\n    jacdac_ratio: block => Number(block.getFieldValue(\"value\") || \"0\"),\n}\n\nconst shadowDsl: BlockDomainSpecificLanguage = {\n    id: \"shadow\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: `jacdac_on_off`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"enabled\", \"on\"],\n                        [\"disabled\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_yes_no`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"yes\", \"on\"],\n                        [\"no\", \"off\"],\n                    ],\n                },\n            ],\n            style: \"logic_blocks\",\n            output: \"Boolean\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_time_picker`,\n            message0: `%1`,\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"value\",\n                    options: [\n                        [\"0.1\", \"0.1\"],\n                        [\"1\", \"1\"],\n                        [\"5\", \"5\"],\n                        [\"30\", \"30\"],\n                        [\"60\", \"60\"],\n                    ],\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_angle`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_angle\",\n                    name: \"value\",\n                    min: 0,\n                    max: 360,\n                    precision: 10,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_percent`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 100,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_byte`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 255,\n                    precision: 1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_ratio`,\n            message0: `%1`,\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_slider\",\n                    name: \"value\",\n                    min: 0,\n                    max: 1,\n                    precision: 0.1,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Number\",\n        },\n        {\n            kind: \"block\",\n            type: `jacdac_color`,\n            message0: `%1`,\n            args0: [\n                <ColorInputDefnition>{\n                    type: \"field_colour\",\n                    name: \"col\",\n                    colour: \"#ff0000\",\n                    colourOptions: [\n                        \"#ff0000\",\n                        \"#ff8000\",\n                        \"#ffff00\",\n                        \"#ff9da5\",\n                        \"#00ff00\",\n                        \"#b09eff\",\n                        \"#00ffff\",\n                        \"#007fff\",\n                        \"#65471f\",\n                        \"#0000ff\",\n                        \"#7f00ff\",\n                        \"#ff0080\",\n                        \"#ff00ff\",\n                        \"#ffffff\",\n                        \"#999999\",\n                        \"#000000\",\n                    ],\n                    columns: 4,\n                },\n            ],\n            style: \"math_blocks\",\n            output: \"Color\",\n        },\n    ],\n\n    blockToValue: block => builtins[block.type]?.(block),\n}\nexport default shadowDsl\n","import {\n    isHighLevelRegister,\n    isHighLevelEvent,\n    isCommand,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport { SMap } from \"../jdom/utils\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\nimport { atomic } from \"./utils\"\nimport { CHANGE } from \"../jdom/constants\"\nimport Packet from \"../jdom/packet\"\nimport { DecodedPacket } from \"../jdom/pretty\"\nimport JDRegisterServer from \"../jdom/servers/registerserver\"\nimport { ExternalRequest } from \"./environment\"\nimport SensorServer from \"../servers/sensorserver\"\n\nexport const VM_EXTERNAL_REQUEST = \"vmExternalRequest\"\n\nclass VMRegisterServer extends JDRegisterServer<PackedValues> {\n    constructor(\n        private serviceServer: VMServiceServer,\n        private reg: jdspec.PacketInfo,\n        defaultValue?: PackedValues\n    ) {\n        super(serviceServer, reg.identifier, defaultValue)\n    }\n\n    async sendGetAsync() {\n        this.serviceServer.raiseGetRegisterEvent(this.reg.name)\n    }\n\n    async theRealSendGetAsync() {\n        await super.sendGetAsync()\n    }\n}\n\n// TODO: need to take specification into account and\n// TOOD: implement the proper base class (SensorServer)\nexport class VMServiceServer extends SensorServer<any[]> {\n    private eventNameToId: SMap<number> = {}\n    private regNameToId: SMap<number> = {}\n    private regFieldToId: SMap<number> = {}\n    private commandPackets: SMap<DecodedPacket> = {}\n    private cmdFieldToId: SMap<number> = {}\n\n    constructor(public role: string, private spec: jdspec.ServiceSpec) {\n        super(spec.classIdentifier, {\n            readingValues: [false],\n            streamingInterval: 50,\n        })\n        spec.packets.filter(isHighLevelRegister).map(reg => {\n            const regServer = this.addExistingRegister(\n                new VMRegisterServer(this, reg)\n            )\n            this.regNameToId[reg.name] = reg.identifier\n            reg.fields?.forEach((pkt, index) => {\n                this.regFieldToId[`${reg.name}:${pkt.name}`] = index\n            })\n            regServer.subscribe(CHANGE, () => {\n                this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n                    kind: \"set\",\n                    role: this.role,\n                    tgt: reg.name,\n                })\n            })\n        })\n\n        spec.packets.filter(isCommand).map(cmd => {\n            this.addCommand(cmd.identifier, (pkt: Packet) => {\n                this.commandPackets[cmd.identifier] = pkt.decoded\n                this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n                    kind: \"cmd\",\n                    role: this.role,\n                    tgt: cmd.name,\n                })\n            })\n            cmd.fields?.forEach((pkt, index) => {\n                this.regFieldToId[`${cmd.name}:${pkt.name}`] = index\n            })\n        })\n\n        spec.packets.filter(isHighLevelEvent).forEach(pkt => {\n            this.eventNameToId[pkt.name] = pkt.identifier\n        })\n    }\n\n    raiseGetRegisterEvent(regName: string) {\n        this.emit(VM_EXTERNAL_REQUEST, <ExternalRequest>{\n            kind: \"get\",\n            role: this.role,\n            tgt: regName,\n        })\n    }\n\n    async respondToGetRegisterEvent(regName: string) {\n        const reg = this.register(this.regNameToId[regName]) as VMRegisterServer\n        await reg.theRealSendGetAsync()\n    }\n\n    async sendEventNameAsync(eventName: string, values?: PackedValues) {\n        const pkt = this.spec.packets.find(\n            p => isHighLevelEvent(p) && p.name === eventName\n        )\n        if (pkt) {\n            await this.sendEvent(\n                this.eventNameToId[eventName],\n                jdpack(pkt.packFormat, values)\n            )\n        }\n    }\n\n    lookupRegister(root: string, fld: string) {\n        if (this.regNameToId[root]) {\n            const reg = this.register(this.regNameToId[root])\n            if (!fld) return reg.values()?.[0]\n            else {\n                return reg.values()?.[this.regFieldToId[`${root}:${fld}`]]\n            }\n        } else if (this.commandPackets[root]) {\n            const cmd = this.commandPackets[root]\n            return cmd.decoded?.[this.cmdFieldToId[`${root}:${fld}`]]?.value\n        }\n        return undefined\n    }\n\n    public writeRegister(root: string, ev: atomic[]) {\n        const reg = this.register(this.regNameToId[root])\n        reg.setValues(ev)\n    }\n}\n","import { isEvent, isRegister, isCommand, isIntensity } from \"../jdom/spec\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport JDService from \"../jdom/service\"\nimport JDRegister from \"../jdom/register\"\nimport JDEvent from \"../jdom/event\"\nimport { CHANGE, EVENT, REPORT_UPDATE, SystemReg } from \"../jdom/constants\"\nimport { SMap } from \"../jdom/utils\"\nimport { jdpack, PackedValues } from \"../jdom/pack\"\nimport { atomic } from \"./utils\"\n\nexport class VMServiceClient extends JDServiceClient {\n    private _registers: SMap<JDRegister> = {}\n    private _reportUpdate: SMap<boolean> = {}\n    private _events: SMap<JDEvent> = {}\n\n    constructor(service: JDService) {\n        super(service)\n    }\n\n    public registerRegister(regName: string, handler: () => void) {\n        if (!this._registers[regName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isRegister(pkt) && pkt.name === regName\n            )\n            if (pkt) {\n                const register = this.service.register(pkt.identifier)\n                this._registers[regName] = register\n                this.mount(register.subscribe(CHANGE, handler))\n            }\n        }\n    }\n\n    public registerEvent(eventName: string, handler: () => void) {\n        if (!this._events[eventName]) {\n            const pkt = this.service.specification.packets.find(\n                pkt => isEvent(pkt) && pkt.name === eventName\n            )\n            if (pkt) {\n                const event = this.service.event(pkt.identifier)\n                this._events[eventName] = event\n                this.mount(event.subscribe(EVENT, handler))\n            }\n        }\n    }\n\n    public async sendCommandAsync(commandName: string, values: PackedValues) {\n        const pkt = this.service.specification.packets.find(\n            p => isCommand(p) && p.name === commandName\n        )\n        if (pkt) {\n            await this.service.sendCmdAsync(\n                pkt.identifier,\n                jdpack(pkt.packFormat, values),\n                true\n            )\n        }\n    }\n\n    public async writeRegisterAsync(regName: string, values: atomic[]) {\n        const register = this._registers[regName]\n        if (register.code === SystemReg.Value) await this.setEnabled()\n        await this.writeRegAsync(this._registers[regName], values)\n    }\n\n    private async writeRegAsync(jdreg: JDRegister, values: atomic[]) {\n        await jdreg?.sendSetPackedAsync(values, true)\n    }\n\n    private async setEnabled() {\n        const pkt = this.service.specification.packets.find(isIntensity)\n        if (pkt && pkt.fields[0].type === \"bool\") {\n            const jdreg = this.service.register(SystemReg.Intensity)\n            await this.writeRegAsync(jdreg, [true])\n        }\n    }\n\n    public async lookupRegisterAsync(\n        root: string,\n        fld: string,\n        reportUpdate = false\n    ) {\n        if (root in this._registers) {\n            const register = this._registers[root]\n            if (reportUpdate && !this._reportUpdate[root]) {\n                this._reportUpdate[root] = true\n                this.mount(register.subscribe(REPORT_UPDATE, () => {}))\n            }\n            await register.refresh()\n            if (!fld) return register.unpackedValue?.[0]\n            else {\n                const field = register.fields.find(f => f.name === fld)\n                return field?.value\n            }\n        } else if (root in this._events) {\n            const field = this._events[root].fields?.find(f => f.name === fld)\n            return field?.value\n        }\n        return undefined\n    }\n}\n","import jsep from \"jsep\"\nimport { assert, SMap } from \"../jdom/utils\"\nimport JDService from \"../jdom/service\"\nimport JDEventSource from \"../jdom/eventsource\"\nimport { PackedValues } from \"../jdom/pack\"\nimport { serviceSpecificationFromClassIdentifier } from \"../jdom/spec\"\nimport { RoleRegister, RoleEvent } from \"./compile\"\nimport { VMEnvironmentInterface } from \"./runner\"\nimport { VMRole } from \"./ir\"\nimport { VMServiceServer, VM_EXTERNAL_REQUEST } from \"./server\"\nimport { VMServiceClient } from \"./client\"\nimport { atomic } from \"./utils\"\n\nexport const GLOBAL_CHANGE = \"vmEnvGlobalChange\"\nexport const REGISTER_CHANGE = \"vmEnvRegisterChange\"\nexport const EXTERNAL_REQUEST = \"vmEnvEventChange\"\n\nexport interface ExternalRequest {\n    kind: \"event\" | \"get\" | \"set\" | \"cmd\"\n    role: string\n    tgt: string\n}\n\nexport enum VMExceptionCode {\n    RoleNoService = \"vmEnvRoleNoService\",\n    TypeMismatch = \"vmEnvTypeMismatch\",\n    InternalError = \"vmInternalError\",\n}\n\nexport class VMException extends Error {\n    constructor(readonly code: VMExceptionCode, readonly data: string) {\n        super()\n    }\n}\n\nexport interface GlobalVariable {\n    type: \"number\" | \"boolean\" | \"string\"\n    value: atomic\n}\n\nexport class VMEnvironment\n    extends JDEventSource\n    implements VMEnvironmentInterface\n{\n    private _currentRequest: ExternalRequest = undefined\n    private _clientEnvs: SMap<VMServiceClient> = {}\n    private _serverEnvs: SMap<VMServiceServer> = {}\n    private _globals: SMap<GlobalVariable> = {}\n\n    constructor(\n        private registers: RoleRegister[],\n        private events: RoleEvent[],\n        private serverRoles: VMRole[]\n    ) {\n        super()\n        this.setupServers()\n    }\n\n    private setupServers() {\n        this.serverRoles.forEach(p => {\n            // get the service\n            const service = serviceSpecificationFromClassIdentifier(\n                p.serviceClass\n            )\n            if (service) {\n                // spin up JDServiceServer\n                const serviceServer = new VMServiceServer(p.role, service)\n                this._serverEnvs[p.role] = serviceServer\n                serviceServer.subscribe(\n                    VM_EXTERNAL_REQUEST,\n                    (p: ExternalRequest) => {\n                        this._currentRequest = p\n                        this.emit(EXTERNAL_REQUEST, p)\n                    }\n                )\n            }\n        })\n    }\n\n    public globals() {\n        return this._globals\n    }\n\n    public servers() {\n        return Object.keys(this._serverEnvs).map(k => {\n            return {\n                role: k,\n                serviceClass: this._serverEnvs[k].serviceClass,\n                server: this._serverEnvs[k],\n            }\n        })\n    }\n\n    public serviceChanged(role: string, service: JDService) {\n        if (this._clientEnvs[role]) {\n            this._clientEnvs[role].unmount()\n            this._clientEnvs[role] = undefined\n        }\n        if (!service) this._rolesUnbound.push(role)\n        else {\n            this._rolesBound.push(role)\n            this._clientEnvs[role] = new VMServiceClient(service)\n            this.registers.forEach(r => {\n                if (r.role === role) {\n                    this.registerRegister(role, r.register)\n                }\n            })\n            this.events.forEach(e => {\n                if (e.role === role) {\n                    this.registerEvent(role, e.event)\n                }\n            })\n        }\n    }\n\n    public roleBound(role: string) {\n        return !!this._clientEnvs[role]\n    }\n\n    public registerRegister(role: string, reg: string) {\n        const serviceEnv = this.getService(role)\n        serviceEnv.registerRegister(reg, () => {\n            this.emit(REGISTER_CHANGE, reg)\n        })\n    }\n\n    public registerEvent(role: string, tgt: string) {\n        const serviceEnv = this.getService(role)\n        serviceEnv.registerEvent(tgt, () => {\n            this._currentRequest = { kind: \"event\", role, tgt }\n            this.emit(EXTERNAL_REQUEST, this._currentRequest)\n        })\n    }\n\n    private getRootName(e: jsep.MemberExpression | string) {\n        if (!e) return undefined\n        if (typeof e === \"string\") return e\n        if (e.type === \"MemberExpression\")\n            return (e.object as jsep.Identifier).name\n        return undefined\n    }\n\n    private getService(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        const s = this._clientEnvs[root]\n        return s\n    }\n\n    private getServer(e: jsep.MemberExpression | string) {\n        const root = this.getRootName(e)\n        if (!root) return undefined\n        const s = this._serverEnvs[root]\n        return s\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public async sendCommandAsync(\n        e: jsep.MemberExpression,\n        values: PackedValues\n    ) {\n        const serviceEnv = this.getService(e)\n        if (serviceEnv) {\n            await serviceEnv?.sendCommandAsync(\n                (e.property as jsep.Identifier).name,\n                values\n            )\n        } else {\n            const server = this.getServer(e)\n            await server?.sendEventNameAsync(\n                (e.property as jsep.Identifier).name,\n                values\n            )\n        }\n    }\n\n    public async lookupAsync(\n        e: jsep.MemberExpression | string,\n        reportUpdate = false\n    ) {\n        const roleName = this.getRootName(e)\n        if (roleName.startsWith(\"$var\")) {\n            const me = e as jsep.MemberExpression\n            if (me.property.type === \"Identifier\") {\n                const local = (me.property as jsep.Identifier).name\n                return this._globals[local]?.value\n            }\n            return undefined\n        }\n        const ep = (e as jsep.MemberExpression).property as\n            | jsep.Identifier\n            | jsep.MemberExpression\n        const root =\n            typeof ep === \"string\"\n                ? ep\n                : ep.type === \"Identifier\"\n                ? ep.name\n                : (ep.object as jsep.Identifier).name\n        const fld =\n            typeof ep === \"string\"\n                ? undefined\n                : ep.type === \"Identifier\"\n                ? undefined\n                : (ep.property as jsep.Identifier).name\n        const serviceEnv = this.getService(e)\n        if (serviceEnv) {\n            return await serviceEnv.lookupRegisterAsync(root, fld, reportUpdate)\n        } else {\n            const server = this.getServer(e)\n            return server.lookupRegister(root, fld)\n        }\n    }\n\n    public async writeRegisterAsync(\n        e: jsep.MemberExpression | string,\n        values: atomic[]\n    ) {\n        const serviceEnv = this.getService(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const reg = (me.property as jsep.Identifier).name\n            if (serviceEnv) await serviceEnv.writeRegisterAsync(reg, values)\n            else {\n                const server = this.getServer(e)\n                return server.writeRegister(reg, values)\n            }\n        }\n    }\n\n    public writeGlobal(\n        e: jsep.MemberExpression | string,\n        value: string | boolean | number\n    ) {\n        const roleName = this.getRootName(e)\n        if (!roleName || !roleName.startsWith(\"$var\")) return undefined\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const local = (me.property as jsep.Identifier).name\n            if (this._globals[local]) {\n                const firstType = this._globals[local].type\n                if (firstType !== typeof value) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `variable ${local} has first type ${firstType}; trying to assign ${value.toString()}`\n                    )\n                }\n                if (value !== this._globals[local].value) {\n                    this._globals[local].value = value\n                    this.emit(GLOBAL_CHANGE)\n                }\n            } else {\n                const firstType = typeof value\n                if (\n                    firstType !== \"string\" &&\n                    firstType !== \"boolean\" &&\n                    firstType !== \"number\"\n                ) {\n                    throw new VMException(\n                        VMExceptionCode.TypeMismatch,\n                        `Value of type ${firstType} not supported`\n                    )\n                }\n                this._globals[local] = { type: firstType, value }\n                this.emit(GLOBAL_CHANGE)\n            }\n            return true\n        }\n        return false\n    }\n\n    public clearExternalStimulii() {\n        this._currentRequest = undefined\n        this.rolesReset()\n    }\n\n    public hasRequest(e: jsep.MemberExpression | string): ExternalRequest {\n        const roleName = this.getRootName(e)\n        const me = e as jsep.MemberExpression\n        if (me.property.type === \"Identifier\") {\n            const op = (me.property as jsep.Identifier).name\n            if (\n                this._currentRequest?.role === roleName &&\n                this._currentRequest?.tgt === op\n            )\n                return this._currentRequest\n        }\n        return undefined\n    }\n\n    public async completeRequest(request: ExternalRequest) {\n        assert(request.kind === \"get\")\n        const server = this.getServer(request.role)\n        await server.respondToGetRegisterEvent(request.tgt)\n    }\n\n    // role events\n    private _rolesBound: string[] = []\n    private _rolesUnbound: string[] = []\n    private rolesReset() {\n        this._rolesBound = []\n        this._rolesUnbound = []\n    }\n    public initRoles() {\n        this._rolesBound = Object.keys(this._clientEnvs).slice(0)\n    }\n    public roleTransition(role: string, event: string): boolean {\n        if (event === \"bound\") {\n            return !!this._rolesBound.find(r => role === \"any\" || r === role)\n        } else {\n            return !!this._rolesUnbound.find(r => role === \"any\" || r === role)\n        }\n    }\n\n    public unsubscribe() {\n        for (const vs of Object.values(this._clientEnvs)) {\n            vs.unmount()\n        }\n    }\n}\n","import jsep from \"jsep\"\n\nexport type GetValue = (\n    e: jsep.MemberExpression | string,\n    reportUpdate: boolean\n) => any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StartMap = { e: jsep.Expression; v: any }[]\n\nexport type CallEvaluator = (\n    ce: jsep.CallExpression,\n    ee: VMExprEvaluator\n) => any\n\nexport function unparse(e: jsep.Expression): string {\n    switch (e.type) {\n        case \"ArrayExpression\": {\n            const ae = e as jsep.ArrayExpression\n            return `[${ae.elements.map(unparse).join(\", \")}]`\n        }\n        case \"CallExpression\": {\n            const caller = e as jsep.CallExpression\n            return `${unparse(caller.callee)}(${caller.arguments\n                .map(unparse)\n                .join(\", \")})`\n        }\n        case \"MemberExpression\": {\n            const root = e as jsep.MemberExpression\n            return root.computed\n                ? `${unparse(root.object)}[${unparse(root.property)}]`\n                : `${unparse(root.object)}.${unparse(root.property)}`\n        }\n        case \"BinaryExpression\": {\n            const be = e as any\n            return `(${unparse(be.left)} ${be.operator} ${unparse(be.right)})`\n        }\n        case \"UnaryExpression\": {\n            const ue = e as jsep.UnaryExpression\n            return `${ue.operator}${unparse(ue.argument)}`\n        }\n        case \"Identifier\": {\n            return (e as jsep.Identifier).name\n        }\n        case \"Literal\": {\n            return (e as jsep.Literal).raw\n        }\n        default:\n            return \"TODO\"\n    }\n}\n\nexport class VMExprEvaluator {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private exprStack: any[] = []\n    private reportUpdate = false\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(private env: GetValue, private callEval: CallEvaluator) {}\n\n    public tos() {\n        return this.exprStack[this.exprStack.length - 1]\n    }\n\n    public pop() {\n        return this.exprStack.pop()\n    }\n\n    public async evalAsync(e: jsep.Expression, reportUpdate = false) {\n        this.exprStack = []\n        this.reportUpdate = reportUpdate\n        await this.visitExpressionAsync(e)\n        return this.exprStack.pop()\n    }\n\n    public async visitExpressionAsync(e: jsep.Expression) {\n        switch (e.type) {\n            case \"ArrayExpression\": {\n                // nothing to do here yet (only used for event function)\n                break\n            }\n\n            case \"CallExpression\": {\n                if (this.callEval) {\n                    const ret = this.callEval(<jsep.CallExpression>e, this)\n                    this.exprStack.push(ret)\n                } else this.exprStack.push(undefined)\n                break\n            }\n\n            case \"BinaryExpression\": {\n                const be = <jsep.BinaryExpression>e\n                if (be.operator === \"&&\" || be.operator === \"||\") {\n                    await this.visitExpressionAsync(be.left)\n                    switch (be.operator) {\n                        case \"||\":\n                            if (this.tos()) return\n                            else await this.visitExpressionAsync(be.right)\n                            return\n                        case \"&&\":\n                            if (!this.tos()) return\n                            else await this.visitExpressionAsync(be.right)\n                            return\n                    }\n                }\n                await this.visitExpressionAsync(be.left)\n                await this.visitExpressionAsync(be.right)\n                const right = this.exprStack.pop()\n                const left = this.exprStack.pop()\n                switch (be.operator) {\n                    case \"+\":\n                        this.exprStack.push(left + right)\n                        return\n                    case \"-\":\n                        this.exprStack.push(left - right)\n                        return\n                    case \"/\":\n                        this.exprStack.push(left / right)\n                        return\n                    case \"*\":\n                        this.exprStack.push(left * right)\n                        return\n                    case \"%\":\n                        this.exprStack.push(left % right)\n                        return\n                    case \">>\":\n                        this.exprStack.push(left >> right)\n                        return\n                    case \">>>\":\n                        this.exprStack.push(left >>> right)\n                        return\n                    case \"<<\":\n                        this.exprStack.push(left << right)\n                        return\n                    case \"|\":\n                        this.exprStack.push(left | right)\n                        return\n                    case \"&\":\n                        this.exprStack.push(left & right)\n                        return\n                    case \"^\":\n                        this.exprStack.push(left ^ right)\n                        return\n                    case \"==\":\n                        this.exprStack.push(left == right)\n                        return\n                    case \"!=\":\n                        this.exprStack.push(left != right)\n                        return\n                    case \"===\":\n                        this.exprStack.push(left === right)\n                        return\n                    case \"!==\":\n                        this.exprStack.push(left !== right)\n                        return\n                    case \"<\":\n                        this.exprStack.push(left < right)\n                        return\n                    case \">\":\n                        this.exprStack.push(left > right)\n                        return\n                    case \"<=\":\n                        this.exprStack.push(left <= right)\n                        return\n                    case \">=\":\n                        this.exprStack.push(left >= right)\n                        return\n                }\n                break\n            }\n\n            case \"UnaryExpression\": {\n                const ue = <jsep.UnaryExpression>e\n                await this.visitExpressionAsync(ue.argument)\n                const top = this.exprStack.pop()\n                switch (ue.operator) {\n                    case \"ABS\":\n                        this.exprStack.push(Math.abs(top))\n                        return\n                    case \"!\":\n                        this.exprStack.push(!top)\n                        return\n                    case \"~\":\n                        this.exprStack.push(~top)\n                        return\n                    case \"-\":\n                        this.exprStack.push(-top)\n                        return\n                    case \"+\":\n                        this.exprStack.push(+top)\n                        return\n                }\n                break\n            }\n\n            case \"MemberExpression\": {\n                // for now, we don't support evaluation of obj or prop\n                // of obj.prop\n                const val = await this.env(\n                    e as jsep.MemberExpression,\n                    this.reportUpdate\n                )\n                //if (val === undefined) {\n                //    throw new VMError(VMCode.InternalError, `lookup of ${unparse(e)} failed`)\n                //}\n                this.exprStack.push(val)\n                return\n            }\n            case \"Identifier\": {\n                const id = <jsep.Identifier>e\n                const val = await this.env(id.name, this.reportUpdate)\n                // if (val === undefined)\n                //    throw new VMError(VMCode.InternalError, `lookup of ${id.name} failed`)\n                this.exprStack.push(val)\n                return\n            }\n            case \"Literal\": {\n                const lit = <jsep.Literal>e\n                this.exprStack.push(lit.value)\n                return\n            }\n            default:\n        }\n    }\n}\n","import jsep from \"jsep\"\n\nexport interface VMError {\n    sourceId?: string\n    code?: number\n    message: string\n}\n\nexport interface VMBase {\n    type: \"ite\" | \"cmd\"\n    sourceId?: string\n}\n\nexport interface VMIfThenElse extends VMBase {\n    type: \"ite\"\n    expr: jsep.Expression\n    then?: VMBase[]\n    else?: VMBase[]\n}\n\nexport interface VMCommand extends VMBase {\n    type: \"cmd\"\n    command: jsep.CallExpression\n}\n\nexport interface VMHandler {\n    commands: VMBase[]\n    roles?: string[]\n    errors?: VMError[]\n    // this handler support the editing experience but\n    // should not be compiled down or debugged\n    meta?: boolean\n}\n\nexport interface VMRole {\n    role: string\n    serviceClass: number\n}\n\nexport interface VMProgram {\n    roles: VMRole[]\n    serverRoles: VMRole[]\n    handlers: VMHandler[]\n}\n\nexport type VMFunctionNames =\n    | \"start\"\n    | \"halt\"\n    | \"nop\"\n    | \"label\"\n    | \"jump\"\n    | \"branchOnCondition\"\n    | \"wait\"\n    | \"awaitRegister\"\n    | \"awaitChange\"\n    | \"awaitEvent\"\n    | \"awaitCondition\"\n    | \"writeRegister\"\n    | \"writeLocal\"\n    | \"watch\"\n    | \"log\"\n    | \"roleBound\"\n    | \"roleBoundExpression\"\n    | \"onRoleConnected\"\n    | \"onRoleDisconnected\"\n    | \"raiseEvent\"\n\ntype Context = \"command\" | \"expression\" | \"either\"\n\nexport interface VMFunctionDescription {\n    id: string\n    args: (string | [string, any])[]\n    prompt: string\n    context: Context\n}\n\nexport const VMFunctions: VMFunctionDescription[] = [\n    {\n        id: \"start\",\n        args: [],\n        prompt: `start block`,\n        context: \"command\",\n    },\n    {\n        id: \"halt\",\n        args: [],\n        prompt: `terminates the current handler`,\n        context: \"command\",\n    },\n    {\n        id: \"nop\",\n        args: [],\n        prompt: `no operation`,\n        context: \"command\",\n    },\n    {\n        id: \"label\",\n        args: [\"Identifier\"],\n        prompt: `label target {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"jump\",\n        args: [\"Identifier\"],\n        prompt: `jump to label {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"branchOnCondition\",\n        args: [\"boolean\", \"Identifier\"],\n        prompt: `if {1} then jump to label {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"wait\",\n        args: [\"number\"],\n        prompt: `wait for {1} milliseconds`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitRegister\",\n        args: [\"register\"],\n        prompt: `wait on register {1} to change value`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitChange\",\n        args: [\"register\", \"number\"],\n        prompt: `wait for register {1} to change by {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitEvent\",\n        args: [\"event\", [\"boolean\", true]],\n        prompt: `wait for event {1} and then check {2} (other events ignored)`,\n        context: \"command\",\n    },\n    {\n        id: \"awaitCondition\",\n        args: [\"boolean\"],\n        prompt: `wait for condition {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeRegister\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"writeLocal\",\n        args: [\"register\", \"number\"],\n        prompt: `write value {2:val} to {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"watch\",\n        args: [\"number\"],\n        prompt: `watch expression {1}`,\n        context: \"command\",\n    },\n    {\n        id: \"log\",\n        args: [\"number\"],\n        prompt: `not used`,\n        context: \"command\",\n    },\n    {\n        id: \"roleBound\",\n        args: [\"Identifier\", \"Identifier\"],\n        prompt: `role {1} {2}`,\n        context: \"command\",\n    },\n    {\n        id: \"roleBoundExpression\",\n        args: [\"Identifier\"],\n        prompt: `is role {1} bound?`,\n        context: \"expression\",\n    },\n    {\n        id: \"onRoleConnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is connected`,\n        context: \"command\",\n    },\n    {\n        id: \"onRoleDisconnected\",\n        args: [\"Identifier\"],\n        prompt: `fires when a role is disconnected`,\n        context: \"command\",\n    },\n]\n","import jsep from \"jsep\"\nimport { VMFunctionDescription } from \"./ir\"\nimport { parseIntFloat } from \"../../jacdac-spec/spectool/jdutils\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function exprVisitor(\n    parent: any,\n    current: any,\n    structVisit: (par: jsep.Expression, curr: jsep.Expression) => void\n) {\n    if (Array.isArray(current)) {\n        ;(current as any[]).forEach(c => exprVisitor(current, c, structVisit))\n    } else if (typeof current === \"object\") {\n        if (parent && current) structVisit(parent, current)\n        Object.keys(current).forEach((key: string) => {\n            exprVisitor(current, current[key], structVisit)\n        })\n    }\n}\n\ninterface Resolve {\n    role: string\n    client: boolean\n    spec: jdspec.ServiceSpec\n    rest: jsep.Expression\n}\n\nexport class SpecSymbolResolver {\n    registers: string[]\n    events: string[]\n    roles: string[]\n\n    constructor(\n        private readonly spec: jdspec.ServiceSpec,\n        private readonly role2spec: (role: string) => {\n            spec: jdspec.ServiceSpec\n            client: boolean\n        },\n        private readonly error: (m: string) => void\n    ) {\n        this.reset()\n    }\n\n    reset() {\n        this.registers = []\n        this.events = []\n        this.roles = []\n    }\n\n    public check(e: jsep.Expression, type: string) {\n        if (!e) {\n            this.error(`expression is undefined`)\n            return false\n        } else if (e.type !== type) {\n            this.error(`expected ${type}; got ${e.type}`)\n            return false\n        }\n        return true\n    }\n\n    public specResolve(e: jsep.Expression): Resolve {\n        let ret: Resolve = undefined\n        if (this.spec) {\n            ret = {\n                role: this.spec.shortName,\n                spec: this.spec,\n                client: true,\n                rest: e,\n            }\n        } else if (e.type === \"Identifier\") {\n            return undefined\n        } else if (\n            this.check(e, \"MemberExpression\") &&\n            this.check((e as jsep.MemberExpression).object, \"Identifier\") &&\n            this.role2spec\n        ) {\n            const obj = (e as jsep.MemberExpression).object as jsep.Identifier\n            if (obj.name.startsWith(\"$\")) return undefined\n            if (!this.role2spec(obj.name)) {\n                this.error(`no specification found for ${obj.name}`)\n            }\n            const { spec, client } = this.role2spec(obj.name)\n            ret = {\n                role: obj.name,\n                spec,\n                client,\n                rest: (e as jsep.MemberExpression).property,\n            }\n        }\n        if (ret && this.roles.indexOf(ret.role) < 0) this.roles.push(ret.role)\n        return ret\n    }\n\n    public destructAccessPath(e: jsep.Expression, expectIdentifier = false) {\n        if (e.type === \"Identifier\") {\n            return [(e as jsep.Identifier).name, \"\"]\n        } else if (!expectIdentifier && e.type === \"MemberExpression\") {\n            const object = (e as jsep.MemberExpression)\n                .object as jsep.Identifier\n            const property = (e as jsep.MemberExpression)\n                .property as jsep.Identifier\n            if (\n                this.check(object, \"Identifier\") &&\n                this.check(property, \"Identifier\")\n            )\n                return [object.name, property.name]\n            return undefined\n        } else {\n            if (!expectIdentifier)\n                this.error(\n                    `expected Identifier or MemberExpression; got ${e.type}`\n                )\n            else this.error(`expected Identifier; got ${e.type}`)\n            return undefined\n        }\n    }\n\n    public lookupEvent(e: jsep.Expression) {\n        const resolve = this.specResolve(e)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [id, _] = this.destructAccessPath(rest, true)\n        const events = spec.packets?.filter(pkt => pkt.kind === \"event\")\n        const pkt = events.find(p => p.name === id)\n        if (!pkt) {\n            this.error(`no event ${id} in specification`)\n            return undefined\n        } else {\n            const ev = `${role}.${id}`\n            if (this.events.indexOf(ev) < 0) this.events.push(ev)\n            return pkt\n        }\n    }\n\n    public lookupRegister(e: jsep.Expression) {\n        const resolve = this.specResolve(e)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [root, fld] = this.destructAccessPath(rest)\n        this.lookupRegisterRaw(spec, root, fld)\n        const reg = `${role}.${root}`\n        if (this.registers.indexOf(reg) < 0) this.registers.push(reg)\n    }\n\n    private lookupRegisterRaw(\n        spec: jdspec.ServiceSpec,\n        root: string,\n        fld: string\n    ) {\n        const reg = getRegister(spec, root, fld)\n        if (\n            reg.pkt &&\n            ((!reg.fld && !isBoolOrNumericFormat(reg.pkt.packFormat)) ||\n                (reg.fld &&\n                    reg.fld.type &&\n                    !isBoolOrNumericFormat(reg.fld.type)))\n        )\n            this.error(\"only bool/numeric registers allowed\")\n        // if (!fld && regField.pkt.fields.length > 0)\n        //    error(`register ${root} has fields, but no field specified`)\n    }\n\n    public lookupReplace(\n        events: jdspec.PacketInfo[],\n        parent: jsep.Expression,\n        child: jsep.Identifier | jsep.MemberExpression\n    ) {\n        if (Array.isArray(parent)) {\n            const replace = this.lookup(events, parent, child)\n            parent.forEach(i => {\n                if (parent[i] === child) parent[i] = replace\n            })\n        } else {\n            // don't process identifiers that are callees of CallExpression\n            if (\n                parent?.type === \"CallExpression\" &&\n                child === (<jsep.CallExpression>parent).callee\n            )\n                return\n            const replace = this.lookup(events, parent, child)\n            if (replace) {\n                Object.keys(parent).forEach(k => {\n                    if ((parent as any)[k] === child)\n                        (parent as any)[k] = replace\n                })\n            }\n        }\n    }\n\n    private lookup(\n        events: jdspec.PacketInfo[],\n        parent: jsep.Expression,\n        child: jsep.Identifier | jsep.MemberExpression\n    ) {\n        const resolve = this.specResolve(child)\n        if (!resolve) return\n        const { role, spec, rest } = resolve\n        const [root, fld] = this.destructAccessPath(rest)\n        try {\n            try {\n                const val = parseIntFloat(spec, fld ? `${root}.${fld}` : root)\n                const lit: jsep.Literal = {\n                    type: \"Literal\",\n                    value: val,\n                    raw: val.toString(),\n                }\n                return lit\n            } catch (e) {\n                this.lookupRegisterRaw(spec, root, fld)\n                const reg = `${role}.${root}`\n                if (this.registers.indexOf(reg) < 0) this.registers.push(reg)\n            }\n        } catch (e) {\n            let pkt: jdspec.PacketInfo = undefined\n            if (events.length) pkt = events.find(pkt => pkt.name === root)\n            else {\n                // we need a fully qualified name\n                pkt = spec.packets?.find(\n                    p => p.kind === \"event\" && p.name === root\n                )\n            }\n            if (!pkt) this.error(`event ${root} not bound correctly`)\n            else if (!fld && pkt.fields.length > 0)\n                this.error(`event ${root} has fields, but no field specified`)\n            else if (fld && !pkt.fields.find(f => f.name === fld))\n                this.error(\n                    `Field ${fld} of event ${root} not found in specification`\n                )\n        }\n    }\n}\n\nexport class VMChecker {\n    constructor(\n        private readonly resolver: SpecSymbolResolver,\n        private readonly supportedExpression: (\n            type: jsep.ExpressionType\n        ) => boolean,\n        private readonly error: (m: string) => void\n    ) {}\n\n    checkCommand(\n        root: jsep.CallExpression,\n        funs: VMFunctionDescription[]\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        if (!root || !root.type || root.type != \"CallExpression\") {\n            this.error(\n                `a command must be a call expression in JavaScript syntax`\n            )\n            return\n        }\n        // check for unsupported expression types\n        exprVisitor(null, root, (p, c) => {\n            if (!this.supportedExpression(c.type as jsep.ExpressionType))\n                this.error(\n                    `Expression of type ${c.type} not currently supported`\n                )\n        })\n        // first lookup in known functions\n        const callee = (root.callee as jsep.Identifier)?.name\n        const cmdIndex = funs.findIndex(r => callee === r.id)\n        let theCommand: jdspec.PacketInfo = undefined\n        if (cmdIndex < 0) {\n            if (root.callee.type === \"MemberExpression\") {\n                const { role, spec, rest, client } = this.resolver.specResolve(\n                    root.callee as jsep.MemberExpression\n                )\n                const [command, _] = this.resolver.destructAccessPath(rest)\n                if (!role) {\n                    this.error(\n                        `command does not conform to expected call expression`\n                    )\n                    return undefined\n                } else {\n                    // we have a spec, now look for command\n                    const commands = spec.packets?.filter(\n                        pkt =>\n                            (client && pkt.kind === \"command\") ||\n                            (!client && pkt.kind === \"event\")\n                    )\n                    theCommand = commands.find(c => c?.name === command)\n                    if (!theCommand) {\n                        this.error(\n                            `cannot find command named ${command} in spec ${spec.shortName}`\n                        )\n                    } else\n                        return this.processSpecCommandFunction(root, theCommand)\n                }\n            } else {\n                if (callee)\n                    this.error(`${callee} is not a registered function.`)\n                else\n                    this.error(\n                        `command does not conform to expected call expression`\n                    )\n                return undefined\n            }\n        } else return this.processTestFunction(funs, root, cmdIndex)\n        return undefined\n    }\n\n    private processSpecCommandFunction(\n        root: jsep.CallExpression,\n        command: jdspec.PacketInfo\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        if (root.arguments.length !== command?.fields?.length) {\n            this.error(\n                `Command ${command.name} expects ${command.fields.length} arguments: got ${root.arguments.length}`\n            )\n        } else {\n            const args = root.arguments\n            args.forEach(arg => {\n                this.visitReplace(root, arg, [])\n            })\n        }\n        return [undefined, root]\n    }\n\n    private processTestFunction(\n        funs: VMFunctionDescription[],\n        root: jsep.CallExpression,\n        cmdIndex: number\n    ): [VMFunctionDescription, jsep.CallExpression] {\n        const callee = (root.callee as jsep.Identifier)?.name\n        // check arguments\n        const command = funs[cmdIndex]\n        const minArgs = argsRequiredOptional(command.args).length\n        const maxArgs = command.args.length\n        if (root.arguments.length < minArgs) {\n            this.error(\n                `${callee} expects at least ${minArgs} arguments; got ${root.arguments.length}`\n            )\n            return undefined\n        } else if (root.arguments.length > maxArgs) {\n            this.error(\n                `${callee} expects at most ${maxArgs} arguments; got ${root.arguments.length}`\n            )\n            return undefined\n        }\n        // deal with optional arguments\n        const newExpressions: jsep.Expression[] = []\n        for (let i = root.arguments.length; i < command.args.length; i++) {\n            const [name, def] = command.args[i] as [string, any]\n            const lit: jsep.Literal = {\n                type: \"Literal\",\n                value: def,\n                raw: def.toString(),\n            }\n            newExpressions.push(lit)\n        }\n        root.arguments = root.arguments.concat(newExpressions)\n        // type checking of arguments.\n        this.processTestArguments(command, root)\n        return [command, root]\n        function argsRequiredOptional(args: any[], optional = false) {\n            return args.filter(\n                a =>\n                    (!optional && typeof a === \"string\") ||\n                    (optional && typeof a === \"object\")\n            )\n        }\n    }\n\n    private processTestArguments(\n        command: VMFunctionDescription,\n        root: jsep.CallExpression\n    ) {\n        const args = root.arguments\n        const eventSymTable: jdspec.PacketInfo[] = []\n        args.forEach((arg, a) => {\n            let argType = command.args[a]\n\n            if (typeof argType === \"object\") argType = command.args[a][0]\n\n            if (\n                argType === \"register\" ||\n                argType === \"event\" ||\n                argType === \"Identifier\"\n            ) {\n                if (argType === \"Identifier\") {\n                    this.resolver.check(arg, \"Identifier\")\n                } else if (argType === \"event\" && a === 0) {\n                    const pkt = this.resolver.lookupEvent(arg)\n                    if (pkt && eventSymTable.indexOf(pkt) === -1)\n                        eventSymTable.push(pkt)\n                } else if (argType === \"register\") {\n                    try {\n                        this.resolver.lookupRegister(arg)\n                    } catch (e) {\n                        this.error(e.message)\n                    }\n                }\n            } else if (argType === \"events\") {\n                if (arg.type != \"ArrayExpression\")\n                    this.error(\n                        `events function expects a list of service events`\n                    )\n                else {\n                    ;(arg as jsep.ArrayExpression).elements.forEach(e =>\n                        this.resolver.lookupEvent(e)\n                    )\n                }\n            } else if (argType === \"number\" || argType === \"boolean\") {\n                this.visitReplace(root, arg, eventSymTable)\n            } else {\n                this.error(`unexpected argument type (${argType})`)\n            }\n        })\n    }\n\n    private visitReplace(\n        root: jsep.CallExpression,\n        arg: jsep.Expression,\n        eventSymTable: jdspec.PacketInfo[] = []\n    ) {\n        exprVisitor(root, arg, (p, c) => {\n            if (p.type !== \"MemberExpression\" && c.type === \"Identifier\") {\n                this.resolver.lookupReplace(\n                    eventSymTable,\n                    p,\n                    c as jsep.Identifier\n                )\n            } else if (c.type === \"ArrayExpression\") {\n                this.error(`array expression not allowed in this context`)\n            } else if (\n                p.type !== \"MemberExpression\" &&\n                c.type === \"MemberExpression\"\n            ) {\n                const member = c as jsep.MemberExpression\n                // A member expression must be of form <Identifier>.<memberExpression|Identifier>\n                if (member.object.type !== \"Identifier\" || member.computed) {\n                    this.error(\"property access must be of form id.property\")\n                } else {\n                    this.resolver.lookupReplace(\n                        eventSymTable,\n                        p,\n                        c as jsep.MemberExpression\n                    )\n                }\n            }\n        })\n    }\n}\n\n// private stuff\n\nfunction isBoolOrNumericFormat(fmt: string) {\n    return fmt === \"bool\" || /^[ui]\\d+/i.test(fmt)\n}\n\nfunction isRegister(pkt: jdspec.PacketInfo): boolean {\n    return (\n        pkt && (pkt.kind === \"const\" || pkt.kind === \"ro\" || pkt.kind === \"rw\")\n    )\n}\n\nfunction lookupRegister(\n    spec: jdspec.ServiceSpec,\n    id: string\n): jdspec.PacketInfo {\n    return spec.packets.find(pkt => isRegister(pkt) && pkt.name === id)\n}\n\nfunction lookupField(\n    pkt: jdspec.PacketInfo,\n    field: string\n): jdspec.PacketMember {\n    return pkt.fields.find(member => member.name === field)\n}\n\ninterface RegField {\n    pkt: jdspec.PacketInfo\n    fld: jdspec.PacketMember\n}\n\nfunction getRegister(\n    spec: jdspec.ServiceSpec,\n    root: string,\n    fld = \"\"\n): RegField {\n    const ret: RegField = { pkt: undefined, fld: undefined }\n    ret.pkt = lookupRegister(spec, root)\n    if (!ret.pkt) {\n        throw new Error(\n            `no register ${root} found in service ${spec.shortName}`\n        )\n    } else if (fld) {\n        ret.fld = lookupField(ret.pkt, fld)\n        if (!ret.fld)\n            throw new Error(\n                `no field ${fld} found in register ${root} of service ${spec.shortName}`\n            )\n    }\n    return ret\n}\n","import jsep from \"jsep\"\nimport {\n    serviceSpecificationFromClassIdentifier,\n    serviceSpecificationFromName,\n} from \"../jdom/spec\"\nimport {\n    VMBase,\n    VMCommand,\n    VMError,\n    VMHandler,\n    VMIfThenElse,\n    VMProgram,\n    VMFunctions,\n} from \"./ir\"\nimport { VMChecker, SpecSymbolResolver } from \"./symutils\"\nimport { assert } from \"../jdom/utils\"\n\nexport function toIdentifier(id: string) {\n    return {\n        type: \"Identifier\",\n        name: id,\n    } as jsep.Identifier\n}\n\nexport function toMemberExpression(\n    root: string,\n    field: string | jsep.Expression\n) {\n    return {\n        type: \"MemberExpression\",\n        object: toIdentifier(root),\n        property: typeof field === \"string\" ? toIdentifier(field) : field,\n        computed: false,\n    } as jsep.MemberExpression\n}\n\nfunction handlerVisitor(\n    handler: VMHandler,\n    visitITE: (ite: VMIfThenElse, time: number) => void,\n    visitCommand: (c: VMCommand) => void\n) {\n    handler.commands.forEach(visitBase)\n\n    function visitBase(base: VMBase) {\n        switch (base.type) {\n            case \"cmd\": {\n                if (visitCommand) visitCommand(base as VMCommand)\n                break\n            }\n            case \"ite\": {\n                const ite = base as VMIfThenElse\n                if (visitITE) visitITE(ite, 0)\n                ite?.else?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 1)\n                ite?.then?.forEach(visitBase)\n                if (visitITE) visitITE(ite, 2)\n            }\n        }\n    }\n}\n\nexport function compileProgram({ roles, serverRoles, handlers }: VMProgram) {\n    const newProgram: VMProgram = { roles, serverRoles, handlers: [] }\n    // process start blocks\n    handlers.forEach(startBlock)\n    // remove if-then-else\n    newProgram.handlers = handlers.map(h => {\n        return { commands: removeIfThenElse(h), errors: h?.errors }\n    })\n    return newProgram\n}\n\nfunction checkCall(cmd: VMBase, id: string) {\n    if (cmd.type === \"cmd\") {\n        const callee = (cmd as VMCommand).command.callee\n        if (callee.type === \"Identifier\") {\n            const cid = (callee as jsep.Identifier).name\n            return id === cid\n        }\n    }\n    return undefined\n}\n\nfunction startBlock(handler: VMHandler) {\n    if (handler.commands.length && checkCall(handler.commands[0], \"start\")) {\n        handler.commands.shift()\n        handler.commands.push({\n            type: \"cmd\",\n            command: {\n                type: \"CallExpression\",\n                callee: toIdentifier(\"halt\"),\n                arguments: [],\n            },\n        } as VMCommand)\n    }\n}\n\nfunction removeIfThenElse(handler: VMHandler): VMBase[] {\n    const newSequence: VMCommand[] = []\n    const labels: { then: string; end: string }[] = []\n    let labelId = 1\n    handlerVisitor(\n        handler,\n        (ite, time) => {\n            switch (time) {\n                case 0: {\n                    // create the labels and branch instruction\n                    const then = `then_${labelId}`\n                    const end = `end_${labelId}`\n                    labels.push({ then, end })\n                    labelId++\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"branchOnCondition\"),\n                            arguments: [ite.expr, toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 1: {\n                    // insert the jump and then label\n                    const { then, end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"jump\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(then)],\n                        },\n                    })\n                    break\n                }\n                case 2: {\n                    assert(labels.length > 0)\n                    const { end } = labels[labels.length - 1]\n                    newSequence.push({\n                        type: \"cmd\",\n                        command: {\n                            type: \"CallExpression\",\n                            callee: toIdentifier(\"label\"),\n                            arguments: [toIdentifier(end)],\n                        },\n                    })\n                    labels.pop()\n                }\n            }\n        },\n        cmd => {\n            newSequence.push(cmd)\n        }\n    )\n    return newSequence\n}\n\nexport interface RoleRegister {\n    role: string\n    register: string\n}\n\nexport interface RoleEvent {\n    role: string\n    event: string\n}\n\nexport const getServiceFromRole = (info: VMProgram) => (role: string) => {\n    // lookup in roles first\n    let roleFound = info.roles.find(pair => pair.role === role)\n    let client = true\n    if (!roleFound) {\n        roleFound = info.serverRoles.find(pair => pair.role === role)\n        client = false\n    }\n    if (roleFound) {\n        // must succeed\n        const spec = serviceSpecificationFromClassIdentifier(\n            roleFound.serviceClass\n        )\n        assert(!!spec, `service class ${roleFound.serviceClass} not resolved`)\n        return { spec, client }\n    } else {\n        const spec = serviceSpecificationFromName(role)\n        return { spec, client: true }\n    }\n}\n\nexport function checkProgram(prog: VMProgram): {\n    registers: RoleRegister[]\n    events: RoleEvent[]\n    errors: VMError[]\n} {\n    const allErrors: VMError[] = []\n    const goodHandlers: VMHandler[] = []\n    const errorFun = (e: string) => {\n        allErrors.push({ sourceId: undefined, message: e })\n    }\n    const symbolResolver = new SpecSymbolResolver(\n        undefined,\n        getServiceFromRole(prog),\n        errorFun\n    )\n    const checker = new VMChecker(symbolResolver, _ => true, errorFun)\n    prog.handlers.forEach(h => {\n        if (h?.errors.length) {\n            h?.errors.forEach(e => allErrors.push(e))\n            return\n        }\n        const errorCount = allErrors.length\n        symbolResolver.roles = []\n        handlerVisitor(h, undefined, c =>\n            checker.checkCommand(c.command, VMFunctions)\n        )\n        if (h?.errors.length === 0 && allErrors.length === errorCount) {\n            h.roles = symbolResolver.roles\n            goodHandlers.push(h)\n        } else {\n            h?.errors.forEach(e => allErrors.push(e))\n        }\n    })\n    prog.handlers = goodHandlers\n\n    return {\n        registers: symbolResolver.registers.map(s => {\n            const [root, fld] = s.split(\".\")\n            return { role: root, register: fld }\n        }),\n        events: symbolResolver.events.map(e => {\n            const [root, fld] = e.split(\".\")\n            return { role: root, event: fld }\n        }),\n        errors: allErrors,\n    }\n}\n","export type atomic = string | boolean | number\n\nexport class Mutex {\n    private promises: (() => Promise<any>)[] = []\n    private shift() {\n        this.promises.shift()\n        if (this.promises[0]) this.promises[0]()\n    }\n    acquire<T>(f: () => Promise<T>): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            this.promises.push(() =>\n                f().then(\n                    v => {\n                        this.shift()\n                        resolve(v)\n                    },\n                    e => {\n                        this.shift()\n                        reject(e)\n                    }\n                )\n            )\n            if (this.promises.length == 1) this.promises[0]()\n        })\n    }\n}\n","import jsep from \"jsep\"\nimport { VMProgram, VMHandler, VMCommand, VMRole } from \"./ir\"\nimport RoleManager from \"../jdom/rolemanager\"\nimport {\n    VMEnvironment,\n    VMException,\n    VMExceptionCode,\n    GLOBAL_CHANGE,\n    REGISTER_CHANGE,\n    EXTERNAL_REQUEST,\n    ExternalRequest,\n} from \"./environment\"\nimport { VMExprEvaluator, unparse, CallEvaluator } from \"./expr\"\nimport JDEventSource from \"../jdom/eventsource\"\nimport {\n    CHANGE,\n    ROLE_BOUND,\n    ROLE_UNBOUND,\n    SERVICE_PROVIDER_REMOVED,\n    TRACE,\n} from \"../jdom/constants\"\nimport { checkProgram, compileProgram } from \"./compile\"\nimport {\n    VM_GLOBAL_CHANGE,\n    VM_COMMAND_FAILED,\n    VM_WATCH_CHANGE,\n    VM_BREAKPOINT,\n    VM_INTERNAL_ERROR,\n    VM_LOG_ENTRY,\n    VM_ROLE_MISSING,\n} from \"./events\"\nimport { Mutex, atomic } from \"./utils\"\nimport { assert, SMap } from \"../jdom/utils\"\nimport { JDClient } from \"../jdom/client\"\nimport JDServerServiceProvider from \"../jdom/servers/serverserviceprovider\"\nimport JDDevice from \"../jdom/device\"\nimport JDServiceProvider from \"../jdom/servers/serviceprovider\"\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type VMTraceContext = any\n\nenum VMInternalStatus {\n    Ready = \"ready\", // the pc is at this instruction, but pre-condition not met\n    Enabled = \"enabled\", // the instruction pre-conditions are met (is this needed?)\n    Running = \"running\", // the instruction has started running (may need retries)\n    Sleeping = \"sleep\", // waiting to be woken by timer\n    Completed = \"completed\", // the instruction completed successfully\n    Stopped = \"stopped\", // halt instruction encountered, handler stopped\n}\n\nconst VM_WAKE_SLEEPER = \"vmWakeSleeper\"\n\nexport interface VMEnvironmentInterface {\n    writeRegisterAsync: (\n        e: jsep.MemberExpression | string,\n        v: atomic[]\n    ) => Promise<void>\n    sendCommandAsync: (\n        command: jsep.MemberExpression,\n        values: atomic[]\n    ) => Promise<void>\n    lookupAsync: (\n        e: jsep.MemberExpression | string,\n        reportUpdate: boolean\n    ) => Promise<atomic>\n    writeGlobal: (e: jsep.MemberExpression | string, v: atomic) => boolean\n    hasRequest: (e: jsep.MemberExpression | string) => ExternalRequest\n    roleTransition: (role: string, direction: string) => boolean\n    roleBound: (role: string) => boolean\n}\n\nclass VMJumpException extends Error {\n    constructor(public label: string) {\n        super()\n    }\n}\n\nclass VMTimerException extends Error {\n    constructor(public ms: number) {\n        super()\n    }\n}\n\nclass VMRequestException extends Error {\n    constructor(public request: ExternalRequest) {\n        super()\n    }\n}\n\nclass VMCommandEvaluator {\n    private _regSaved: number = undefined\n    private _changeSaved: number = undefined\n    private _started = false\n    constructor(\n        public parent: VMCommandRunner,\n        private readonly env: VMEnvironmentInterface,\n        private readonly cmd: VMCommand\n    ) {}\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { command: this.cmd.command.type, ...context })\n    }\n\n    private get inst() {\n        return (this.cmd.command.callee as jsep.Identifier)?.name\n    }\n\n    private callEval(): CallEvaluator {\n        return (caller: jsep.CallExpression, ee: VMExprEvaluator) => {\n            const callee = <jsep.MemberExpression>caller.callee\n            const namespace = (callee.object as jsep.Identifier).name\n            const funName = (callee.property as jsep.Identifier).name\n            const args = caller.arguments\n            if (namespace === \"$fun\") {\n                switch (funName) {\n                    case \"roleBoundExpression\": {\n                        const role = (args[0] as jsep.Identifier).name\n                        return this.env.roleBound(role)\n                    }\n                    default: // ERROR\n                }\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `unknown function ${namespace}.${funName}`\n                )\n            } else\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `unknown namespace ${namespace}`\n                )\n        }\n    }\n\n    private newEval() {\n        return new VMExprEvaluator(\n            async (e, reportUpdate) =>\n                await this.env.lookupAsync(e, reportUpdate),\n            this.callEval()\n        )\n    }\n\n    private async evalExpressionAsync(\n        e: jsep.Expression,\n        reportUpdate = false\n    ) {\n        const expr = this.newEval()\n        return await expr.evalAsync(e, reportUpdate)\n    }\n\n    private async checkExpressionAsync(\n        e: jsep.Expression,\n        reportUpdate = false\n    ) {\n        return (await this.evalExpressionAsync(e, reportUpdate)) ? true : false\n    }\n\n    private async startAsync() {\n        if (\n            this.cmd.command.callee.type !== \"MemberExpression\" &&\n            (this.inst === \"awaitRegister\" || this.inst === \"awaitChange\")\n        ) {\n            // need to capture register value for awaitChange/awaitRegister\n            const args = this.cmd.command.arguments\n            this._regSaved = await this.evalExpressionAsync(args[0], true)\n            if (this.inst === \"awaitChange\")\n                this._changeSaved = await this.evalExpressionAsync(args[1])\n            return true\n        }\n        return false\n    }\n\n    public async evaluate(): Promise<VMInternalStatus> {\n        if (!this._started) {\n            const neededStart = await this.startAsync()\n            this._started = true\n            if (neededStart) return VMInternalStatus.Running\n        }\n        const args = this.cmd.command.arguments\n        if (this.cmd.command.callee.type === \"MemberExpression\") {\n            // interpret as a service command (role.comand)\n            const expr = this.newEval()\n            const values: atomic[] = []\n            for (const a of this.cmd.command.arguments) {\n                values.push(await expr.evalAsync(a))\n            }\n            await this.env.sendCommandAsync(\n                this.cmd.command.callee as jsep.MemberExpression,\n                values\n            )\n            return VMInternalStatus.Completed\n        }\n        switch (this.inst) {\n            case \"branchOnCondition\": {\n                const expr = await this.checkExpressionAsync(args[0])\n                if (expr) {\n                    throw new VMJumpException((args[1] as jsep.Identifier).name)\n                }\n                return VMInternalStatus.Completed\n            }\n            case \"jump\": {\n                throw new VMJumpException((args[0] as jsep.Identifier).name)\n            }\n            case \"label\": {\n                return VMInternalStatus.Completed\n            }\n            case \"awaitEvent\": {\n                const event = args[0] as jsep.MemberExpression\n                const request = this.env.hasRequest(event)\n                if (request) {\n                    if (await this.checkExpressionAsync(args[1])) {\n                        throw new VMRequestException(request)\n                    }\n                }\n                return VMInternalStatus.Running\n            }\n            case \"roleBound\": {\n                const role = (args[0] as jsep.Identifier).name\n                const event = (args[1] as jsep.Identifier).name\n                return this.env.roleTransition(role, event)\n                    ? VMInternalStatus.Completed\n                    : VMInternalStatus.Running\n            }\n            case \"awaitCondition\": {\n                return (await this.checkExpressionAsync(args[0]))\n                    ? VMInternalStatus.Completed\n                    : VMInternalStatus.Running\n            }\n            case \"awaitChange\":\n            case \"awaitRegister\": {\n                const regValue = await this.evalExpressionAsync(args[0])\n                if (\n                    (this.inst === \"awaitRegister\" &&\n                        regValue !== this._regSaved) ||\n                    (this.inst === \"awaitChange\" &&\n                        Math.abs(regValue - this._regSaved) >=\n                            Math.abs(this._changeSaved))\n                ) {\n                    return VMInternalStatus.Completed\n                }\n                return VMInternalStatus.Running\n            }\n            case \"writeRegister\":\n            case \"writeLocal\": {\n                const expr = this.newEval()\n                const values: atomic[] = []\n                for (const a of this.cmd.command.arguments.slice(1)) {\n                    values.push(await expr.evalAsync(a))\n                }\n                this.trace(\"eval-end\", { expr: unparse(args[1]) })\n                const reg = args[0] as jsep.MemberExpression\n                if (this.inst === \"writeRegister\") {\n                    await this.env.writeRegisterAsync(reg, values)\n                    this.trace(\"write-after-wait\", {\n                        reg: unparse(reg),\n                        expr: values[0],\n                    })\n                } else this.env.writeGlobal(reg, values[0])\n                return VMInternalStatus.Completed\n            }\n            case \"watch\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                this.parent.watch(this.cmd?.sourceId, ev)\n                return VMInternalStatus.Completed\n            }\n            case \"log\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                const evString = ev + \"\"\n                this.parent.writeLog(this.cmd?.sourceId, evString)\n                return VMInternalStatus.Completed\n            }\n            case \"halt\": {\n                return VMInternalStatus.Stopped\n            }\n            case \"nop\": {\n                return VMInternalStatus.Completed\n            }\n            case \"wait\": {\n                const expr = this.newEval()\n                const ev = await expr.evalAsync(args[0])\n                throw new VMTimerException(ev * 1000)\n            }\n            default:\n                throw new VMException(\n                    VMExceptionCode.InternalError,\n                    `Unknown instruction ${this.inst}`\n                )\n        }\n    }\n}\n\nclass VMCommandRunner {\n    private _eval: VMCommandEvaluator\n    private _status: VMInternalStatus = VMInternalStatus.Running\n    constructor(\n        public readonly parent: VMHandlerRunner,\n        private handlerId: number,\n        env: VMEnvironment,\n        public cmd: VMCommand\n    ) {\n        this._eval = new VMCommandEvaluator(this, env, cmd)\n    }\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { handler: this.handlerId, ...context })\n    }\n\n    watch(id: string, val: any) {\n        this.parent.watch(id, val)\n    }\n\n    writeLog(id: string, val: any) {\n        this.parent.writeLog(id, val)\n    }\n\n    get status() {\n        return this._status\n    }\n\n    set status(s: VMInternalStatus) {\n        this._status = s\n    }\n\n    async stepAsync() {\n        if (this.status === VMInternalStatus.Running) {\n            this.trace(unparse(this.cmd.command))\n            this.status = await this._eval.evaluate()\n        }\n    }\n}\n\nclass VMHandlerRunner extends JDEventSource {\n    private _commandIndex: number = undefined\n    private _currentCommand: VMCommandRunner = undefined\n    private stopped = false\n    private _labelToIndex: SMap<number> = {}\n\n    constructor(\n        public readonly parent: VMProgramRunner,\n        public readonly id: number,\n        public readonly env: VMEnvironment,\n        public readonly handler: VMHandler\n    ) {\n        super()\n        // find the label commands (targets of jumps)\n        this.handler.commands.forEach((c, index) => {\n            const cmd = c as VMCommand\n            const id = cmd.command?.callee as jsep.Identifier\n            if (id?.name === \"label\") {\n                const label = cmd.command.arguments[0] as jsep.Identifier\n                this._labelToIndex[label.name] = index\n            }\n        })\n        this.reset()\n    }\n\n    trace(msg: string, context: VMTraceContext = {}) {\n        this.parent.trace(msg, { id: this.id, ...context })\n    }\n\n    watch(id: string, val: any) {\n        this.parent.watch(id, val)\n    }\n\n    writeLog(id: string, val: any) {\n        this.parent.writeLog(id, val)\n    }\n\n    get status() {\n        return this.stopped\n            ? VMInternalStatus.Stopped\n            : this._commandIndex === undefined\n            ? VMInternalStatus.Ready\n            : this._currentCommand.status === VMInternalStatus.Completed &&\n              this._commandIndex < this.handler.commands.length - 1\n            ? VMInternalStatus.Running\n            : this._currentCommand.status\n    }\n\n    get command() {\n        return this._currentCommand\n    }\n\n    get atTop() {\n        return (\n            this.status === VMInternalStatus.Running && this._commandIndex === 0\n        )\n    }\n\n    gotoTop() {\n        if (\n            this.status === VMInternalStatus.Ready &&\n            this.handler.commands.length\n        )\n            this.commandIndex = 0\n    }\n\n    reset() {\n        this.commandIndex = undefined\n        this.stopped = false\n    }\n\n    wake() {\n        if (this._currentCommand) {\n            this._currentCommand.status = VMInternalStatus.Completed\n            this.next()\n        }\n    }\n\n    // run-to-completion semantics\n    // returns command if breakpoint encountered when not single stepping\n    async runToCompletionAsync(singleStep = false) {\n        if (this.stopped || !this.handler.commands.length) return undefined\n        if (this.commandIndex === undefined) {\n            this.commandIndex = 0\n        }\n        if ((await this.singleStepCheckBreakAsync(singleStep)) && !singleStep)\n            return this._currentCommand\n        while (this.next()) {\n            if (singleStep || (await this.singleStepCheckBreakAsync()))\n                return this._currentCommand\n        }\n        return undefined\n    }\n\n    private next() {\n        if (\n            this._currentCommand.status === VMInternalStatus.Completed &&\n            this.commandIndex < this.handler.commands.length - 1\n        ) {\n            this.commandIndex++\n            return true\n        }\n        return false\n    }\n\n    private getCommand() {\n        const cmd = this.handler.commands[this._commandIndex]\n        if (cmd.type === \"ite\") {\n            throw new VMException(\n                VMExceptionCode.InternalError,\n                \"ite not compiled away\"\n            )\n        }\n        return cmd as VMCommand\n    }\n\n    private async singleStepCheckBreakAsync(singleStep = false) {\n        this.trace(\"step begin\")\n        const sid = this._currentCommand.cmd?.sourceId\n        if (!singleStep && (await this.parent.breakpointOnAsync(sid))) {\n            return true\n        }\n        await this.singleStepAsync()\n        this.trace(\"step end\")\n        return false\n    }\n\n    private async singleStepAsync() {\n        try {\n            await this._currentCommand.stepAsync()\n        } catch (e) {\n            if (e instanceof VMJumpException) {\n                const { label } = e as VMJumpException\n                const index = this._labelToIndex[label]\n                this.commandIndex = index\n                this._currentCommand.status = VMInternalStatus.Completed\n            } else if (e instanceof VMTimerException) {\n                const { ms } = e as VMTimerException\n                this._currentCommand.status = VMInternalStatus.Sleeping\n                await this.parent.sleepAsync(this, ms)\n            } else if (e instanceof VMRequestException) {\n                const { request } = e as VMRequestException\n                this._currentCommand.status = VMInternalStatus.Completed\n                this.parent.handlerWokeOnRequest(this, request)\n            } else {\n                this.emit(VM_COMMAND_FAILED, this._currentCommand.cmd.sourceId)\n                throw e\n            }\n        }\n        if (this._currentCommand.status === VMInternalStatus.Stopped)\n            this.stopped = true\n    }\n\n    private set commandIndex(index: number) {\n        if (index === undefined) {\n            this._commandIndex = undefined\n            this._currentCommand = undefined\n        } else if (index !== this._commandIndex) {\n            this._commandIndex = index\n            this._currentCommand = new VMCommandRunner(\n                this,\n                this.id,\n                this.env,\n                this.getCommand()\n            )\n        }\n    }\n\n    private get commandIndex() {\n        return this._commandIndex\n    }\n}\n\nexport type WatchValueType = boolean | string | number\n\ninterface SleepingHandler {\n    ms: number\n    handlerRunner: VMHandlerRunner\n    handler?: VMHandler\n    id: NodeJS.Timeout\n}\n\nfunction isEveryHandler(h: VMHandler) {\n    assert(!!h)\n    if (h.commands.length) {\n        const cmd = (h.commands[0] as VMCommand).command\n            .callee as jsep.Identifier\n        return cmd.name === \"wait\"\n    }\n    return false\n}\n\nfunction isRegisterChangeHandler(h: VMHandler) {\n    assert(!!h)\n    if (h.commands.length) {\n        const cmd = (h.commands[0] as VMCommand).command\n            .callee as jsep.Identifier\n        return cmd.name === \"awaitChange\" || cmd.name === \"awaitRegister\"\n    }\n    return false\n}\n\nexport enum VMStatus {\n    Stopped = \"stopped\",\n    Running = \"running\",\n    Paused = \"paused\",\n}\n\nconst MAX_LOG = 100\n\nexport class VMProgramRunner extends JDClient {\n    // program, environment\n    private _handlerRunners: VMHandlerRunner[] = []\n    private _env: VMEnvironment\n    private _roles: VMRole[] = []\n    private _serverRoles: VMRole[] = []\n    // running\n    private _status: VMStatus\n    private _waitQueue: VMHandlerRunner[] = []\n    private _everyQueue: VMHandlerRunner[] = []\n    private _runQueue: VMHandlerRunner[] = []\n    private _waitRunMutex: Mutex\n    private _sleepQueue: SleepingHandler[] = []\n    private _sleepMutex: Mutex\n    // debugging\n    private _watch: SMap<any> = {}\n    private _log: { text: string; count: number }[] = []\n    private _breaks: SMap<boolean> = {}\n    private _breaksMutex: Mutex\n    // providing new services\n    private _provider: JDServerServiceProvider\n    private _device: JDDevice\n    private _onCompletionOfExternalRequest: {\n        handler: VMHandlerRunner\n        request: ExternalRequest\n    }[] = []\n\n    constructor(\n        readonly roleManager: RoleManager,\n        readonly program: VMProgram\n    ) {\n        super()\n\n        const compiled = compileProgram(program)\n        const { registers, events, errors } = checkProgram(compiled)\n        this._roles = compiled.roles\n        this._serverRoles = compiled.serverRoles\n        if (errors?.length) console.debug(\"ERRORS\", errors)\n\n        // data structures for running program\n        this._status = VMStatus.Stopped\n        this._env = new VMEnvironment(registers, events, compiled.serverRoles)\n        this._handlerRunners = compiled.handlers.map(\n            (h, index) => new VMHandlerRunner(this, index, this._env, h)\n        )\n\n        // TODO: can't add multiple handlers until we have deduplicate CHANGE on Event\n        /*\n        const len = this._handlerRunners.length\n        compiled.handlers.forEach((h, index) =>\n            this._handlerRunners.push(\n                new VMHandlerRunner(this, len + index, this._env, h)\n            )\n        )*/\n\n        this._waitRunMutex = new Mutex()\n        this._breaksMutex = new Mutex()\n        this._sleepMutex = new Mutex()\n        // TODO: only try to wake handlers that are waiting on change to reg or event\n        this.mount(\n            this._env.subscribe(REGISTER_CHANGE, () => {\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.roleManager.bus.subscribe(\n                SERVICE_PROVIDER_REMOVED,\n                (provider: JDServiceProvider) => {\n                    if (provider === this._provider) {\n                        this._provider = undefined\n                    }\n                }\n            )\n        )\n        // control requests (client:{event}, server:{set, get, cmd})\n        this.mount(\n            this._env.subscribe(\n                EXTERNAL_REQUEST,\n                (request: ExternalRequest) => {\n                    switch (request.kind) {\n                        case \"get\": {\n                            // TODO: in this case, if there is a handler\n                            // waiting on this Request then the function\n                            // handlerWokeOnRequest will be invoked. If\n                            // it is not then we should just return the\n                            // current value of register\n                            break\n                        }\n                        // these handler invocations are \"fire and forget\"\n                        case \"set\":\n                        case \"cmd\":\n                        case \"event\":\n                            break\n                    }\n                    this.waitingToRunning()\n                }\n            )\n        )\n        this.mount(\n            this._env.subscribe(GLOBAL_CHANGE, name => {\n                this.emit(VM_GLOBAL_CHANGE, name)\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.subscribe(\n                VM_WAKE_SLEEPER,\n                async (h: VMHandlerRunner | VMHandler) => {\n                    await this.wakeSleeper(h)\n                }\n            )\n        )\n        this.initializeRoleManagement()\n    }\n\n    public handlerWokeOnRequest(\n        handler: VMHandlerRunner,\n        request: ExternalRequest\n    ) {\n        if (request.kind === \"get\") {\n            this._onCompletionOfExternalRequest.push({ handler, request })\n        }\n    }\n\n    // control of VM\n    get status() {\n        return this._status\n    }\n\n    get logData() {\n        return this._log.slice(0)\n    }\n\n    globals(): { name: string; value: atomic }[] {\n        const g = this._env.globals()\n        return Object.keys(g).map(k => {\n            return { name: k, value: g[k].value }\n        })\n    }\n\n    private setStatus(s: VMStatus) {\n        if (s !== this._status) {\n            this._status = s\n            this.emit(CHANGE)\n        }\n    }\n\n    // debugging\n    trace(message: string, context: VMTraceContext = {}) {\n        this.emit(TRACE, { message, context })\n    }\n\n    watch(sourceId: string, value: WatchValueType) {\n        this._watch[sourceId] = value\n        this.emit(VM_WATCH_CHANGE, sourceId)\n    }\n\n    writeLog(sourceId: string, value: WatchValueType) {\n        const s = value + \"\"\n        const last = this._log[this._log.length - 1]\n        if (last?.text === s) last.count++\n        else this._log.push({ text: value + \"\", count: 1 })\n        while (this._log.length > MAX_LOG) this._log.shift()\n        this.emit(VM_LOG_ENTRY, sourceId)\n    }\n\n    lookupWatch(sourceId: string) {\n        return this._watch[sourceId]\n    }\n\n    async setBreakpointsAsync(breaks: string[]) {\n        await this._breaksMutex.acquire(async () => {\n            this._breaks = {}\n            breaks.forEach(b => {\n                this._breaks[b] = true\n            })\n        })\n    }\n\n    async clearBreakpointsAsync() {\n        await this._breaksMutex.acquire(async () => {\n            this._breaks = {}\n        })\n    }\n\n    async breakpointOnAsync(id: string) {\n        let ret = false\n        await this._breaksMutex.acquire(async () => {\n            ret = !!this._breaks?.[id]\n        })\n        return ret\n    }\n\n    // utility called by handlerRunner\n    async sleepAsync(\n        h: VMHandlerRunner,\n        ms: number,\n        handler: VMHandler = undefined\n    ) {\n        assert(h.status === VMInternalStatus.Sleeping)\n        await this._sleepMutex.acquire(async () => {\n            const id = setTimeout(() => {\n                this.emit(VM_WAKE_SLEEPER, h ? h : handler)\n            }, ms)\n            this._sleepQueue.push({ ms, handlerRunner: h, id, handler })\n        })\n    }\n\n    async startAsync() {\n        if (this.status !== VMStatus.Stopped) return // already running\n        this.trace(\"start\")\n        try {\n            await this._waitRunMutex.acquire(async () => {\n                await this.device()\n                this._waitQueue = this._handlerRunners.slice(0)\n                this._waitQueue.forEach(h => h.reset())\n                this._runQueue = []\n                this._everyQueue = []\n                this._onCompletionOfExternalRequest = []\n                this._env.clearExternalStimulii()\n                this._env.initRoles()\n                this.stopSleepers()\n                // make sure to have another handler for every\n                /*\n                for (const h of this._waitQueue) {\n                    if (isEveryHandler(h.handler)) {\n                        const dup = new VMHandlerRunner(\n                            this,\n                            undefined,\n                            this._env,\n                            h.handler\n                        )\n                        dup.reset()\n                        this._everyQueue.push(dup)\n                    }\n                }*/\n            })\n            await this.clearBreakpointsAsync()\n            this.setStatus(VMStatus.Running)\n            await this.waitingToRunning()\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n    }\n\n    async device() {\n        if (!this._provider) {\n            await this.startProvider()\n        }\n        return this._device\n    }\n\n    cancel() {\n        if (this.status === VMStatus.Stopped) return // nothing to cancel\n        this.setStatus(VMStatus.Stopped)\n        this.trace(\"cancelled\")\n    }\n\n    async resumeAsync() {\n        if (this.status !== VMStatus.Paused) return\n        this.trace(\"resume\")\n        this.setStatus(VMStatus.Running)\n        await this.runAsync()\n    }\n\n    private async getCurrentRunner() {\n        return await this._waitRunMutex.acquire(async () => {\n            if (this._runQueue.length) return this._runQueue[0]\n            return undefined\n        })\n    }\n\n    async stepAsync() {\n        if (this.status !== VMStatus.Paused) return\n        this.trace(\"step\")\n        const h = await this.getCurrentRunner()\n        if (h) {\n            await this.runHandlerAsync(h, true)\n            await this.postProcessHandler(h)\n            const newHead = await this.getCurrentRunner()\n            if (newHead && newHead !== h) {\n                this.emitBreakpoint(newHead)\n            }\n        }\n    }\n\n    private _in_run = false\n    private async runAsync() {\n        if (this.status === VMStatus.Stopped) return\n        if (this._in_run) return\n        this.trace(\"run\")\n        this._in_run = true\n        try {\n            let h: VMHandlerRunner = undefined\n            while (\n                this.status === VMStatus.Running &&\n                (h = await this.getCurrentRunner())\n            ) {\n                assert(!h.atTop)\n                await this.runHandlerAsync(h)\n                await this.postProcessHandler(h)\n            }\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n        this._in_run = false\n        this.trace(\"run end\")\n    }\n\n    private emitBreakpoint(h: VMHandlerRunner) {\n        this.emit(\n            VM_BREAKPOINT,\n            h,\n            h.status === VMInternalStatus.Completed\n                ? \"\"\n                : h.command.cmd?.sourceId\n        )\n    }\n\n    private async runHandlerAsync(h: VMHandlerRunner, oneStep = false) {\n        try {\n            const brkCommand = await h.runToCompletionAsync(oneStep)\n            if ((brkCommand && !oneStep) || this.status === VMStatus.Paused) {\n                this.setStatus(VMStatus.Paused)\n                this.emitBreakpoint(h)\n            }\n            if (h.status === VMInternalStatus.Completed) {\n                h.reset()\n            }\n        } catch (e) {\n            if (e instanceof VMException) {\n                const ex = e as VMException\n                if (ex.code === VMExceptionCode.RoleNoService)\n                    this.emit(VM_ROLE_MISSING, (e as VMException).data)\n            } else {\n                console.debug(e)\n                this.emit(VM_INTERNAL_ERROR, e)\n            }\n            // on handler error, reset the handler\n            h.reset()\n        }\n    }\n\n    private async postProcessHandler(h: VMHandlerRunner) {\n        if (\n            h.status === VMInternalStatus.Ready ||\n            h.status === VMInternalStatus.Sleeping ||\n            h.status === VMInternalStatus.Stopped\n        ) {\n            let done: VMHandlerRunner = undefined\n            await this._waitRunMutex.acquire(async () => {\n                assert(!!this._runQueue.length)\n                assert(h === this._runQueue[0])\n                done = this._runQueue.shift()\n                const moveToWait = h.status === VMInternalStatus.Ready\n                if (moveToWait && !isEveryHandler(h.handler)) {\n                    this._waitQueue.push(done)\n                    done = undefined\n                }\n            })\n            if (\n                (done &&\n                    h.status === VMInternalStatus.Ready &&\n                    isEveryHandler(h.handler)) ||\n                isRegisterChangeHandler(h.handler)\n            ) {\n                if (this.status === VMStatus.Running)\n                    await this.runHandlerAsync(h)\n                else if (this.status === VMStatus.Paused) {\n                    await this._waitRunMutex.acquire(async () => {\n                        this._runQueue.unshift(h)\n                        // this.emitBreakpoint(h)\n                    })\n                }\n            }\n        } else if (h.status === VMInternalStatus.Completed) {\n            const q = this._onCompletionOfExternalRequest\n            const index = q.findIndex(p => p.handler === h)\n            if (index > -1) {\n                const [del] = q.splice(index, 1)\n                await this._env.completeRequest(del.request)\n            }\n        }\n    }\n\n    // call this whenever some event/change arises\n    private async waitingToRunning() {\n        if (this.status !== VMStatus.Stopped) {\n            this.trace(\"waiting to running - try\")\n            await this._waitRunMutex.acquire(async () => {\n                if (this.status === VMStatus.Paused && this._runQueue.length)\n                    return\n                this.trace(\"waiting to running - start\")\n                const handlersStarted: VMHandler[] = []\n                const newRunners: VMHandlerRunner[] = []\n                const sleepingRunners: VMHandlerRunner[] = []\n                for (const h of this._waitQueue) {\n                    await this.runHandlerAsync(h, true)\n                    if (h.status === VMInternalStatus.Sleeping) {\n                        sleepingRunners.push(h)\n                    } else if (\n                        !h.atTop &&\n                        handlersStarted.findIndex(hs => hs === h.handler) === -1\n                    ) {\n                        newRunners.push(h)\n                        handlersStarted.push(h.handler)\n                    }\n                }\n                newRunners.forEach(h => {\n                    this._runQueue.push(h)\n                    const index = this._waitQueue.indexOf(h)\n                    if (index >= 0) this._waitQueue.splice(index, 1)\n                })\n                sleepingRunners.forEach(h => {\n                    const index = this._waitQueue.indexOf(h)\n                    if (index >= 0) this._waitQueue.splice(index, 1)\n                })\n            })\n            await this.runAsync()\n            this._env.clearExternalStimulii()\n        }\n    }\n\n    private async stopSleepers() {\n        await this._sleepMutex.acquire(async () => {\n            for (const s of this._sleepQueue) {\n                clearTimeout(s.id)\n            }\n            this._sleepQueue = []\n        })\n    }\n\n    private async wakeSleeper(h: VMHandlerRunner | VMHandler) {\n        try {\n            // let handlerMs: number = undefined\n            let handlerRunner: VMHandlerRunner = undefined\n            // let handler: VMHandler = undefined\n            await this._sleepMutex.acquire(async () => {\n                const index = this._sleepQueue.findIndex(\n                    p => p?.handlerRunner === h // || p?.handler === h\n                )\n                assert(index >= 0)\n                if (index >= 0) {\n                    const p = this._sleepQueue[index]\n                    //  handlerMs = p.ms\n                    handlerRunner = p.handlerRunner\n                    // handler = p?.handler\n                    this._sleepQueue.splice(index, 1)\n                    // clearTimeout(p.id)\n                }\n            })\n            if (this.status === VMStatus.Stopped) return\n            // this logic is to deal with starting a handler rather than a runner\n            await this._waitRunMutex.acquire(async () => {\n                /*\n                if (!handlerRunner && isEveryHandler(handler)) {\n                    const index = this._everyQueue.findIndex(\n                        h => h.handler === handler\n                    )\n                    if (index >= 0) {\n                        handlerRunner = this._everyQueue[index]\n                        this._everyQueue.splice(index, 1)\n                        handlerRunner.gotoTop()\n                    }\n                }*/\n                if (handlerRunner) {\n                    // transition to the run queue\n                    handlerRunner.wake()\n                    this._runQueue.push(handlerRunner)\n                }\n            })\n            /*\n            const theHandler = handlerRunner?.handler || handler\n            if (isEveryHandler(theHandler)) {\n                // setup next\n                this.sleepAsync(undefined, handlerMs, theHandler)\n            }*/\n            if (handlerRunner) {\n                if (this.status === VMStatus.Running) {\n                    this.trace(\"wake sleeper run\")\n                    this.runAsync()\n                } else if (this.status === VMStatus.Paused) {\n                    this.emitBreakpoint(await this.getCurrentRunner())\n                }\n            }\n        } catch (e) {\n            console.debug(e)\n            this.emit(VM_INTERNAL_ERROR, e)\n        }\n    }\n\n    private initializeRoleManagement() {\n        // adding a (role,service) binding\n        const addRoleService = (role: string) => {\n            const service = this.roleManager.service(role)\n            if (service) {\n                this._env.serviceChanged(role, service)\n            }\n        }\n        // initialize client\n        this._roles.forEach(r => {\n            addRoleService(r.role)\n        })\n        this.mount(\n            this.roleManager.subscribe(ROLE_BOUND, async (role: string) => {\n                if (this._serverRoles.find(r => r.role === role)) return\n                addRoleService(role)\n                this.waitingToRunning()\n            })\n        )\n        this.mount(\n            this.roleManager.subscribe(ROLE_UNBOUND, (role: string) => {\n                if (this._serverRoles.find(r => r.role === role)) return\n                this._env.serviceChanged(role, undefined)\n                this.waitingToRunning()\n            })\n        )\n    }\n\n    // spin up provider\n    private async startProvider() {\n        const servers = this._env.servers()\n        if (servers.length) {\n            this._provider = new JDServerServiceProvider(\n                \"vm\",\n                servers.map(s => s.server)\n                // if we create a deviceId, then trouble ensues\n                // as a second device gets spun up later\n                //{\n                //    deviceId: \"VMServiceProvider\",\n                //}\n            )\n            this._device = this.roleManager.bus.addServiceProvider(\n                this._provider\n            )\n            servers.forEach((s, index) => {\n                this.roleManager.updateRole(\n                    this._serverRoles[index].role,\n                    s.serviceClass,\n                    this._device.deviceId\n                )\n            })\n            // make sure it gets known (HACK)\n            for (const s of servers) {\n                await s.server.statusCode.sendGetAsync()\n            }\n        }\n    }\n\n    public unmount() {\n        //console.log(\"VMProgram (unmount)\")\n        super.unmount()\n        if (this._provider) {\n            this.roleManager.bus.removeServiceProvider(this._provider)\n        }\n    }\n}\n","import { useContext, useEffect, useState } from \"react\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport {\n    VMProgramRunner,\n    VMTraceContext,\n} from \"../../../jacdac-ts/src/vm/runner\"\nimport AppContext from \"../AppContext\"\nimport { ERROR, TRACE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport RoleManager from \"../../../jacdac-ts/src/jdom/rolemanager\"\n\nexport default function useVMRunner(\n    roleManager: RoleManager,\n    program: VMProgram,\n    autoRun: boolean\n) {\n    const { setError } = useContext(AppContext)\n    const [runner, setRunner] = useState<VMProgramRunner>()\n    const [_autoStart, _setAutoStart] = useState<boolean>(!!autoRun)\n\n    const run = async () => {\n        _setAutoStart(!!autoRun)\n        await runner.startAsync()\n    }\n    const cancel = async () => {\n        _setAutoStart(false)\n        runner.cancel()\n    }\n\n    // auto start\n    useEffect(() => {\n        if (_autoStart && runner) runner.startAsync()\n        return () => runner?.cancel()\n    }, [runner, _autoStart])\n\n    // create runner\n    useEffect(() => {\n        try {\n            const newTestRunner =\n                program && new VMProgramRunner(roleManager, program)\n            setRunner(newTestRunner)\n\n            return () => newTestRunner?.unmount()\n        } catch (e) {\n            console.debug(e)\n            setRunner(undefined)\n        }\n    }, [roleManager, program])\n\n    // errors\n    useEffect(() => runner?.subscribe(ERROR, e => setError(e)), [runner])\n    // traces\n    const handleTrace = (value: {\n        message: string\n        context: VMTraceContext\n    }) => {\n        const { message, context } = value\n        if (Flags.diagnostics) console.debug(`vm> ${message}`, context)\n    }\n    useEffect(\n        () =>\n            runner?.subscribe<{ message: string; context: VMTraceContext }>(\n                TRACE,\n                handleTrace\n            ),\n        [runner]\n    )\n\n    return { runner, run, cancel }\n}\n","import { Grid, Typography } from \"@mui/material\"\nimport React from \"react\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport CodeBlock from \"../CodeBlock\"\n\nexport default function VMDiagnostics(props: { program: VMProgram }) {\n    const { program } = props\n    return (\n        <Grid item xs={12}>\n            <Typography variant=\"subtitle1\">VM</Typography>\n            <CodeBlock\n                className=\"json\"\n                downloadName={\"test.json.vm\"}\n                downloadText={JSON.stringify(program, null, 2)}\n            >\n                {JSON.stringify(program, null, 2)}\n            </CodeBlock>\n        </Grid>\n    )\n}\n","import React, { useContext } from \"react\"\nimport BlockContext from \"./BlockContext\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport DeviceAvatar from \"../devices/DeviceAvatar\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    addServiceProvider,\n    serviceProviderDefinitionFromServiceClass,\n} from \"../../../jacdac-ts/src/servers/servers\"\n\nimport { BlockSvg, FieldVariable } from \"blockly\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport CancelIcon from \"@mui/icons-material/Cancel\"\nimport { Chip, Tooltip } from \"@mui/material\"\nimport { TWIN_BLOCK } from \"./toolbox\"\n\nexport default function RoleChip(props: {\n    role: string\n    serviceClass: number\n    service: JDService\n    preferredDeviceId: string\n}) {\n    const { workspace } = useContext(BlockContext)\n    const { role, service, serviceClass, preferredDeviceId } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const serviceServer = useServiceServer(service)\n    const handleRoleClick = () => {\n        // spin off simulator\n        if (!service && !preferredDeviceId) {\n            const specification =\n                serviceSpecificationFromClassIdentifier(serviceClass)\n            if (specification) {\n                addServiceProvider(\n                    bus,\n                    serviceProviderDefinitionFromServiceClass(\n                        specification.classIdentifier\n                    )\n                )\n            }\n        }\n        // add twin block\n        if (workspace) {\n            // try to find existing twin block\n            let twinBlock = workspace\n                .getTopBlocks(false)\n                .find(\n                    b =>\n                        b.type === TWIN_BLOCK &&\n                        (\n                            b.inputList[0].fieldRow.find(\n                                f => f.name === \"role\"\n                            ) as FieldVariable\n                        )?.getVariable()?.name === role\n                ) as BlockSvg\n            if (!twinBlock) {\n                twinBlock = workspace.newBlock(TWIN_BLOCK) as BlockSvg\n                let variable = workspace.getVariable(\n                    role,\n                    `${serviceClass}:client`\n                )\n                if (!variable)\n                    variable = workspace.getVariable(\n                        role,\n                        `${serviceClass}:server`\n                    )\n                console.log(`new twin`, { twinBlock, variable })\n                const field = twinBlock.inputList[0].fieldRow.find(\n                    f => f.name === \"role\"\n                ) as FieldVariable\n                field.setValue(variable.getId())\n                const m = workspace.getMetrics()\n                twinBlock.moveBy(m.viewWidth / 2, m.viewHeight / 3)\n                twinBlock.initSvg()\n                twinBlock.render(false)\n            }\n            workspace.centerOnBlock(twinBlock.id)\n        }\n    }\n\n    const handleDelete = () => bus.removeServiceProvider(serviceServer.device)\n    return (\n        <Chip\n            label={role}\n            variant={service ? \"default\" : \"outlined\"}\n            avatar={service && <DeviceAvatar device={service.device} />}\n            onClick={handleRoleClick}\n            onDelete={serviceServer ? handleDelete : undefined}\n            deleteIcon={\n                <Tooltip title=\"stop simulator\">\n                    <CancelIcon />\n                </Tooltip>\n            }\n        />\n    )\n}\n","import React, { useContext } from \"react\"\nimport useChange from \"../../jacdac/useChange\"\nimport BlockContext from \"./BlockContext\"\nimport { Grid } from \"@mui/material\"\nimport RoleChip from \"./RoleChip\"\n\nexport default function BlockClientRoles() {\n    const { roleManager } = useContext(BlockContext)\n    const roles = useChange(roleManager, _ => _?.roles())\n\n    return (\n        <>\n            {roles?.map(\n                ({ role, service, serviceClass, preferredDeviceId }) => (\n                    <Grid item key={role}>\n                        <RoleChip\n                            role={role}\n                            service={service}\n                            serviceClass={serviceClass}\n                            preferredDeviceId={preferredDeviceId}\n                        />\n                    </Grid>\n                )\n            )}\n        </>\n    )\n}\n","import React, { useContext, useEffect, useMemo, useState } from \"react\"\nimport useChange from \"../../jacdac/useChange\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport { VMProgramRunner, VMStatus } from \"../../../jacdac-ts/src/vm/runner\"\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\"\nimport StopIcon from \"@mui/icons-material/Stop\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport { Chip, Grid } from \"@mui/material\"\nimport PauseIcon from \"@mui/icons-material/Pause\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { VM_BREAKPOINT } from \"../../../jacdac-ts/src/vm/events\"\nimport { VMHandler, VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport PlayForWorkIcon from \"@mui/icons-material/PlayForWork\"\nimport useMounted from \"../hooks/useMounted\"\nimport IconButtonWithProgress from \"../ui/IconButtonWithProgress\"\nimport BugReportIcon from \"@mui/icons-material/BugReport\"\nimport BlockContext from \"../blockly/BlockContext\"\n\nfunction useWorkspaceBreakpoints(program: VMProgram) {\n    const { workspace } = useContext(BlockContext)\n    const breakpoints = useMemo(\n        () =>\n            arrayConcatMany(\n                program?.handlers\n                    ?.filter(h => !h.meta) // don't debug watch statements\n                    .map(h => h.commands.map(cmd => cmd.sourceId))\n            )?.filter(id => !!id) || [],\n        [program]\n    )\n    const setBreakpointHighlight = (sourceId: string) => {\n        workspace?.highlightBlock(sourceId)\n    }\n\n    return {\n        breakpoints,\n        setBreakpointHighlight,\n    }\n}\n\nexport default function VMRunnerButtons(props: {\n    runner: VMProgramRunner\n    run: () => Promise<void>\n    cancel: () => Promise<void>\n}) {\n    const { runner, run, cancel } = props\n    const status = useChange(runner, t => t?.status)\n    const stopped = !status || status === VMStatus.Stopped\n    const program = runner?.program\n    const [indeterminate, setIndeterminate] = useState(false)\n    const [breakpoint, setBreakpoint] = useState<string>(undefined)\n    const pausing = breakpoint === \"\"\n    const paused = !!breakpoint?.length\n    const mounted = useMounted()\n    const disabled = indeterminate || !runner\n    const { breakpoints, setBreakpointHighlight } =\n        useWorkspaceBreakpoints(program)\n\n    //console.log(\"runner status\", status)\n\n    const handleRun = async () => {\n        try {\n            setIndeterminate(true)\n            setBreakpoint(undefined)\n            await run()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleCancel = async () => {\n        try {\n            setIndeterminate(true)\n            await runner.clearBreakpointsAsync()\n            setBreakpoint(undefined)\n            await cancel()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleResume = async () => {\n        try {\n            setIndeterminate(true)\n            setBreakpoint(undefined)\n            await runner.clearBreakpointsAsync()\n            await runner.resumeAsync()\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handlePause = async () => {\n        try {\n            setIndeterminate(true)\n            await runner.setBreakpointsAsync(breakpoints)\n            await runner.resumeAsync()\n            setBreakpoint(\"\")\n        } finally {\n            if (mounted()) setIndeterminate(false)\n        }\n    }\n    const handleStep = () => runner.stepAsync()\n\n    // register breakpoint handler\n    useEffect(\n        () =>\n            runner?.subscribe(\n                VM_BREAKPOINT,\n                (_: VMHandler, sourceId?: string) => {\n                    if (mounted()) setBreakpoint(sourceId)\n                }\n            ),\n        [runner]\n    )\n\n    // setting blockly breakpoint\n    useEffect(() => {\n        setBreakpointHighlight(breakpoint)\n        return () => setBreakpointHighlight(undefined)\n    }, [breakpoint])\n\n    // reset breakpoint in ui when runner, paused mode changes\n    useEffect(() => setBreakpoint(undefined), [runner])\n\n    return (\n        <>\n            <Grid item>\n                <IconButtonWithTooltip\n                    title={paused ? \"resume\" : stopped ? \"start\" : \"stop\"}\n                    disabled={disabled}\n                    color={stopped ? \"primary\" : \"default\"}\n                    onClick={\n                        paused\n                            ? handleResume\n                            : stopped\n                            ? handleRun\n                            : handleCancel\n                    }\n                >\n                    {paused || stopped ? <PlayArrowIcon /> : <StopIcon />}\n                </IconButtonWithTooltip>{\" \"}\n            </Grid>\n            <Grid item>\n                <IconButtonWithProgress\n                    title={pausing ? \"cancel pause\" : paused ? \"step\" : \"pause\"}\n                    disabled={disabled}\n                    indeterminate={pausing}\n                    onClick={\n                        pausing\n                            ? handleResume\n                            : paused\n                            ? handleStep\n                            : handlePause\n                    }\n                >\n                    {paused ? <PlayForWorkIcon /> : <PauseIcon />}\n                </IconButtonWithProgress>\n            </Grid>\n            {(pausing || paused) && (\n                <Grid item>\n                    <Chip\n                        icon={<BugReportIcon />}\n                        label={pausing ? \"pausing\" : \"paused\"}\n                        color={\"secondary\"}\n                    />\n                </Grid>\n            )}\n        </>\n    )\n}\n","import React from \"react\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport AddIcon from \"@mui/icons-material/Add\"\nimport { useContext } from \"react\"\nimport AppContext from \"../AppContext\"\n\nexport default function VMStartSimulatorButton() {\n    const { toggleShowDeviceHostsDialog } = useContext(AppContext)\n    return (\n        <IconButtonWithTooltip\n            title=\"start simulator\"\n            onClick={toggleShowDeviceHostsDialog}\n        >\n            <AddIcon />\n        </IconButtonWithTooltip>\n    )\n}\n","import { Grid } from \"@mui/material\"\nimport React from \"react\"\nimport { VMProgramRunner } from \"../../../jacdac-ts/src/vm/runner\"\nimport BlockClientRoles from \"../blockly/BlockRoles\"\nimport VMRunnerButtons from \"./VMRunnerButtons\"\nimport VMStartSimulatorButton from \"./VMStartSimulatorButton\"\n\nexport default function VMToolbar(props: {\n    runner: VMProgramRunner\n    run: () => Promise<void>\n    cancel: () => Promise<void>\n}) {\n    const { runner, run, cancel } = props\n    return (\n        <Grid\n            container\n            direction=\"row\"\n            spacing={1}\n            alignItems=\"center\"\n            alignContent=\"center\"\n        >\n            <VMRunnerButtons runner={runner} run={run} cancel={cancel} />\n            <Grid item>\n                <VMStartSimulatorButton />\n            </Grid>\n            <BlockClientRoles />\n        </Grid>\n    )\n}\n","import jsep from \"jsep\"\nimport { Theme } from \"@mui/material\"\nimport { withPrefix } from \"gatsby\"\nimport {\n    humanify,\n    isNumericType,\n} from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    BuzzerCmd,\n    JoystickReg,\n    ServoReg,\n    SRV_BOOTLOADER,\n    SRV_BUZZER,\n    SRV_CONTROL,\n    SRV_JOYSTICK,\n    SRV_LOGGER,\n    SRV_PROTO_TEST,\n    SRV_ROLE_MANAGER,\n    SRV_SERVO,\n    SystemReg,\n} from \"../../../../jacdac-ts/src/jdom/constants\"\nimport Flags from \"../../../../jacdac-ts/src/jdom/flags\"\nimport {\n    isHighLevelEvent,\n    isHighLevelRegister,\n    isCommand,\n    isSensor,\n    serviceSpecifications,\n    serviceSpecificationFromClassIdentifier,\n} from \"../../../../jacdac-ts/src/jdom/spec\"\nimport {\n    arrayConcatMany,\n    splitFilter,\n    toMap,\n    uniqueMap,\n} from \"../../../../jacdac-ts/src/jdom/utils\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport { VMError } from \"../../../../jacdac-ts/src/vm/ir\"\nimport NoteField from \"../fields/NoteField\"\nimport ServoAngleField from \"../fields/ServoAngleField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    BOOLEAN_TYPE,\n    ButtonDefinition,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    EventBlockDefinition,\n    EventFieldDefinition,\n    InputDefinition,\n    JSON_TYPE,\n    NUMBER_TYPE,\n    OptionsInputDefinition,\n    RegisterBlockDefinition,\n    resolveBlockDefinition,\n    ServiceBlockDefinition,\n    STRING_TYPE,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport { ExpressionWithErrors, makeVMBase } from \"../../vm/VMgenerator\"\nimport {\n    CompileCommandToVMOptions,\n    CompileEventToVMOptions,\n    CompileEventToVMResult,\n    CompileExpressionToVMOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport { Variables } from \"blockly\"\nimport { paletteColorByIndex } from \"./palette\"\nimport { VariableJSON } from \"./workspacejson\"\n\nconst SET_STATUS_LIGHT_BLOCK = \"jacdac_set_status_light\"\nconst ROLE_BOUND_EVENT_BLOCK = \"jacdac_role_bound_event\"\nconst ROLE_BOUND_BLOCK = \"jacdac_role_bound\"\n\nfunction isBooleanField(field: jdspec.PacketMember) {\n    return field.type === \"bool\"\n}\n\nfunction isStringField(field: jdspec.PacketMember) {\n    return field.type === \"string\"\n}\n\nfunction toBlocklyType(field: jdspec.PacketMember) {\n    return field.encoding === \"JSON\"\n        ? JSON_TYPE\n        : isBooleanField(field)\n        ? BOOLEAN_TYPE\n        : isStringField(field)\n        ? STRING_TYPE\n        : isNumericType(field)\n        ? NUMBER_TYPE\n        : undefined\n}\nfunction enumInfo(srv: jdspec.ServiceSpec, field: jdspec.PacketMember) {\n    const e = srv.enums?.[field.type]\n    return e\n}\n\nconst ignoredServices = [\n    SRV_CONTROL,\n    SRV_LOGGER,\n    SRV_ROLE_MANAGER,\n    SRV_PROTO_TEST,\n    SRV_BOOTLOADER,\n]\n\nconst customMessages = [\n    {\n        service: SRV_JOYSTICK,\n        register: JoystickReg.Direction,\n        field: \"buttons\",\n        get: \"is %1 %2 pressed\",\n    },\n]\n\n// internal helper functions\nconst customShadows = [\n    {\n        serviceClass: SRV_SERVO,\n        kind: \"rw\",\n        identifier: ServoReg.Angle,\n        field: \"_\",\n        shadow: <BlockDefinition>{\n            kind: \"block\",\n            type: ServoAngleField.SHADOW.type,\n        },\n    },\n    {\n        serviceClass: SRV_BUZZER,\n        kind: \"command\",\n        identifier: BuzzerCmd.PlayNote,\n        field: \"frequency\",\n        shadow: <BlockDefinition>{\n            kind: \"block\",\n            type: NoteField.SHADOW.type,\n        },\n    },\n]\n\nconst lookupCustomShadow = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n) =>\n    customShadows.find(\n        cs =>\n            cs.serviceClass === service.classIdentifier &&\n            cs.kind == info.kind &&\n            cs.identifier === info.identifier &&\n            cs.field == field.name\n    )?.shadow\n\nconst fieldsSupported = (pkt: jdspec.PacketInfo) =>\n    pkt.fields.every(toBlocklyType)\n\nconst fieldName = (reg: jdspec.PacketInfo, field: jdspec.PacketMember) =>\n    field.name === \"_\" ? reg.name : field.name\n\nconst fieldToShadow = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n): BlockReference =>\n    lookupCustomShadow(service, info, field) ||\n    (isBooleanField(field)\n        ? { kind: \"block\", type: \"jacdac_on_off\" }\n        : isStringField(field)\n        ? { kind: \"block\", type: \"text\" }\n        : field.unit === \"°\"\n        ? {\n              kind: \"block\",\n              type: \"jacdac_angle\",\n          }\n        : field.unit === \"/\"\n        ? { kind: \"block\", type: \"jacdac_ratio\" }\n        : /^%/.test(field.unit)\n        ? { kind: \"block\", type: \"jacdac_percent\" }\n        : field.type === \"u8\"\n        ? { kind: \"block\", type: \"jacdac_byte\" }\n        : {\n              kind: \"block\",\n              type: \"math_number\",\n              value: field.defaultValue || 0,\n              min: field.typicalMin || field.absoluteMin,\n              max: field.typicalMax || field.absoluteMax,\n          })\n\nconst variableName = (srv: jdspec.ServiceSpec, client: boolean) =>\n    `${humanify(srv.camelName).toLowerCase()}${client ? \"\" : \" server\"} 1`\n\nconst isEnabledRegister = (info: jdspec.PacketInfo) =>\n    info.fields.length === 1 &&\n    info.fields[0].type === \"bool\" &&\n    info.name === \"enabled\"\n\nconst customMessage = (\n    srv: jdspec.ServiceSpec,\n    reg: jdspec.PacketInfo,\n    field: jdspec.PacketMember\n) =>\n    customMessages.find(\n        m =>\n            m.service === srv.classIdentifier &&\n            m.register === reg.identifier &&\n            m.field === field.name\n    )\n\nconst eventFieldGroups = [\n    {\n        output: NUMBER_TYPE,\n        filter: isNumericType,\n    },\n    {\n        output: BOOLEAN_TYPE,\n        filter: isBooleanField,\n    },\n    {\n        output: STRING_TYPE,\n        filter: (f: jdspec.PacketMember) =>\n            isStringField(f) && f.encoding !== \"JSON\",\n    },\n    {\n        output: JSON_TYPE,\n        filter: (f: jdspec.PacketMember) =>\n            isStringField(f) && f.encoding === \"JSON\",\n    },\n]\n\ntype ServicePackets = {\n    service: jdspec.ServiceSpec\n    packets: jdspec.PacketInfo[]\n}\n\n// exports\n\nexport function toRoleType(service: jdspec.ServiceSpec, client = true) {\n    return `${service.classIdentifier}:${client ? \"client\" : \"server\"}`\n}\n\nexport function parseRoleType(v: VariableJSON) {\n    const split = v.type.split(\":\")\n    return {\n        role: v.name,\n        serviceClass: parseInt(split[0]),\n        client: split.length === 2 ? split[1] === \"client\" : true,\n    }\n}\n\nexport const fieldsToFieldInputs = (info: jdspec.PacketInfo) =>\n    info.fields.map(field => ({\n        type: \"input_value\",\n        name: fieldName(info, field),\n        check: toBlocklyType(field),\n    }))\n\nexport const fieldsToValues = (\n    service: jdspec.ServiceSpec,\n    info: jdspec.PacketInfo\n) =>\n    toMap<jdspec.PacketMember, BlockReference | BlockDefinition>(\n        info.fields,\n        field => fieldName(info, field),\n        field => fieldToShadow(service, info, field)\n    )\n\nexport const fieldsToMessage = (info: jdspec.PacketInfo) =>\n    info.fields.map((field, i) => `${humanify(field.name)} %${2 + i}`).join(\" \")\n\nexport interface ServiceRegister {\n    service: jdspec.ServiceSpec\n    register: jdspec.PacketInfo\n}\n\ninterface ServiceRegisterField extends ServiceRegister {\n    field: jdspec.PacketMember\n    einfo: jdspec.EnumInfo\n}\n\nexport const serviceHelp = (service: jdspec.ServiceSpec) => {\n    return withPrefix(`/services/${service.shortId}`)\n}\n\nconst sensorColor = paletteColorByIndex(1)\nconst otherColor = paletteColorByIndex(3)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const createServiceColor = (theme: Theme) => {\n    const serviceColor = (srv: jdspec.ServiceSpec) =>\n        isSensor(srv) ? sensorColor : otherColor\n    return serviceColor\n}\n\nexport const roleVariable = (\n    service: jdspec.ServiceSpec,\n    client = true\n): VariableInputDefinition => {\n    return {\n        type: \"field_variable\",\n        name: \"role\",\n        variable: variableName(service, client),\n        variableTypes: [toRoleType(service, client)],\n        defaultType: toRoleType(service, client),\n    }\n}\n\nexport const getServiceInfo = () => {\n    const allServices = serviceSpecifications()\n    const supportedServices = allServices\n        .filter(\n            service =>\n                !/^_/.test(service.shortId) && service.status !== \"deprecated\"\n        )\n        .filter(service => ignoredServices.indexOf(service.classIdentifier) < 0)\n    const registers = arrayConcatMany(\n        supportedServices.map(service =>\n            service.packets.filter(isHighLevelRegister).map(register => ({\n                service,\n                register,\n            }))\n        )\n    )\n    const [registerSimples, registerComposites] = splitFilter(\n        registers,\n        reg => reg.register.fields.length == 1\n    )\n    const [registerSimpleTypes, registerSimpleOthers] = splitFilter(\n        registerSimples,\n        ({ register }) => !!toBlocklyType(register.fields[0])\n    )\n    const registerSimpleEnumTypes = registerSimpleOthers\n        .filter(\n            ({ service, register }) => !!enumInfo(service, register.fields[0])\n        )\n        .map(({ service, register }) => ({\n            service,\n            register,\n            field: register.fields[0],\n            einfo: enumInfo(service, register.fields[0]),\n        }))\n    const registerCompositeEnumTypes = arrayConcatMany(\n        registerComposites.map(({ service, register }) =>\n            register.fields\n                .map(field => ({\n                    service,\n                    register,\n                    field,\n                    einfo: enumInfo(service, field),\n                }))\n                .filter(({ einfo }) => !!einfo)\n        )\n    )\n\n    return {\n        allServices,\n        supportedServices,\n        registers,\n        registerSimpleTypes,\n        registerComposites,\n        registerSimpleEnumTypes,\n        registerCompositeEnumTypes,\n        events: supportedServices\n            .map(service => ({\n                service,\n                events: service.packets.filter(isHighLevelEvent),\n            }))\n            .filter(kv => !!kv.events.length),\n\n        commands: arrayConcatMany(\n            supportedServices.map(service =>\n                service.packets\n                    .filter(\n                        pkt =>\n                            isCommand(pkt) &&\n                            !pkt.lowLevel &&\n                            fieldsSupported(pkt)\n                    )\n                    .map(pkt => ({\n                        service,\n                        command: pkt,\n                    }))\n            )\n        ),\n    }\n}\n\nexport class ServicesBaseDSL {\n    // only state required across methods of class\n    protected _serviceBlocks: ServiceBlockDefinition[] = []\n    protected _eventFieldBlocks: EventFieldDefinition[] = []\n    protected serviceColor: (srv: jdspec.ServiceSpec) => string\n\n    protected makeRegisterSimpleGetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers.map<RegisterBlockDefinition>(\n            ({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_simple_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0:\n                    customMessage(service, register, register.fields[0])?.get ||\n                    `%1 ${humanify(register.name)}`,\n                args0: [roleVariable(service, client)],\n                inputsInline: true,\n                output: toBlocklyType(register.fields[0]),\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field: register.fields[0],\n\n                template: \"register_get\",\n            })\n        )\n    }\n\n    protected makeRegisterSetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(({ register }) => !client || register.kind === \"rw\")\n            .filter(({ register }) => fieldsSupported(register))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_set_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0: isEnabledRegister(register)\n                    ? `set %1 %2`\n                    : `set %1 ${register.name} to ${\n                          register.fields.length === 1\n                              ? \"%2\"\n                              : fieldsToMessage(register)\n                      }`,\n                args0: [\n                    roleVariable(service, client),\n                    ...fieldsToFieldInputs(register),\n                ],\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"register_set\",\n            }))\n    }\n\n    protected makeRegisterChangeByEventBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(({ service }) => !service.packets.some(isHighLevelEvent))\n            .filter(\n                ({ register }) =>\n                    register.fields.length === 1 &&\n                    isNumericType(register.fields[0]) &&\n                    register.identifier !== SystemReg.Intensity\n            )\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_change_by_events_${service.shortId}_${\n                    register.name\n                }${client ? \"\" : \"_server\"}`,\n                message0: `on %1 ${humanify(register.name)} change by %2`,\n                args0: [\n                    roleVariable(service, client),\n                    ...fieldsToFieldInputs(register),\n                ].filter(v => !!v),\n                values: fieldsToValues(service, register),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: this.serviceColor(service),\n                tooltip: `Event raised when ${register.name} changes`,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_change_event\",\n            }))\n    }\n\n    protected makeRegisterNumericsGetBlocks(\n        registers: ServiceRegister[],\n        client = true\n    ) {\n        return registers\n            .filter(re => re.register.fields.some(isNumericType))\n            .map<RegisterBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_get_numerics_${service.shortId}_${register.name}${\n                    client ? \"\" : \"_server\"\n                }`,\n                message0: `%1 ${humanify(register.name)}${\n                    register.fields.length > 1 ? ` %2` : \"\"\n                }`,\n                args0: [\n                    roleVariable(service, client),\n                    register.fields.length > 1\n                        ? <OptionsInputDefinition>{\n                              type: \"field_dropdown\",\n                              name: \"field\",\n                              options: register.fields\n                                  .filter(f => isNumericType(f))\n                                  .map(field => [\n                                      humanify(field.name),\n                                      fieldName(register, field),\n                                  ]),\n                          }\n                        : undefined,\n                ].filter(v => !!v),\n                inputsInline: true,\n                output: \"Number\",\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n\n                template: \"register_get\",\n            }))\n    }\n\n    protected makeRegisterEnumGetBlocks(\n        registers: ServiceRegisterField[],\n        client = true\n    ) {\n        return registers.map<RegisterBlockDefinition>(\n            ({ service, register, field, einfo }) => ({\n                kind: \"block\",\n                type: `jacdac_get_enum_${service.shortId}_${register.name}_${\n                    field.name\n                }${client ? \"\" : \"_server\"}`,\n                message0:\n                    customMessage(service, register, field)?.get ||\n                    `%1 ${humanify(register.name)}${\n                        field.name === \"_\" ? \"\" : ` ${field.name}`\n                    } %2`,\n                args0: [\n                    roleVariable(service, client),\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: field.name,\n                        options: Object.keys(einfo.members).map(member => [\n                            humanify(member),\n                            member,\n                        ]),\n                    },\n                ],\n                inputsInline: true,\n                output: \"Boolean\",\n                colour: this.serviceColor(service),\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                register,\n                field,\n\n                template: \"register_get\",\n            })\n        )\n    }\n\n    // generate accessor blocks for event/command data with numbers\n    protected makeFieldBlocks(sps: ServicePackets[], client = true) {\n        const worker = (\n            sp: ServicePackets,\n            output: string,\n            filter: (field: jdspec.PacketMember) => boolean\n        ) => {\n            const { service, packets } = sp\n            return packets\n                .filter(pkt => pkt.fields.filter(filter).length > 0)\n                .map(pkt => ({ service, pkt }))\n                .map(\n                    ({ service, pkt }) =>\n                        <EventFieldDefinition>{\n                            kind: \"block\",\n                            type: `jacdac_event_field_${output.toLowerCase()}_${\n                                service.shortId\n                            }_${pkt.name}${client ? \"\" : \"_server\"}`,\n                            message0: `${pkt.name} %1`,\n                            args0: [\n                                <InputDefinition>{\n                                    type: \"field_dropdown\",\n                                    name: \"field\",\n                                    options: pkt.fields.map(field => [\n                                        humanify(field.name),\n                                        field.name,\n                                    ]),\n                                },\n                            ],\n                            colour: this.serviceColor(service),\n                            inputsInline: true,\n                            tooltip: `Data fields of the ${pkt.name} ${\n                                client ? \"event\" : \"command\"\n                            }`,\n                            helpUrl: serviceHelp(service),\n                            service,\n                            event: pkt,\n                            output,\n                            template: \"event_field\",\n                        }\n                )\n        }\n\n        return arrayConcatMany(\n            arrayConcatMany(\n                eventFieldGroups.map(({ output, filter }) =>\n                    sps.map(sp => worker(sp, output, filter))\n                )\n            )\n        )\n    }\n\n    protected createCategoryHelper(options: CreateCategoryOptions) {\n        const { theme, source, liveServices } = options\n        this.serviceColor = createServiceColor(theme)\n\n        const blockServices: { serviceClass: number }[] =\n            source?.variables\n                .map(parseRoleType)\n                .filter(\n                    vt =>\n                        !!serviceSpecificationFromClassIdentifier(\n                            vt.serviceClass\n                        )\n                ) || []\n        const usedEvents: Set<jdspec.PacketInfo> = new Set(\n            source?.blocks\n                ?.map(block => ({\n                    block,\n                    definition: resolveBlockDefinition(block.type),\n                }))\n                .filter(({ definition }) => definition?.template === \"event\")\n                .map(({ block, definition }) => {\n                    const { events } = definition as EventBlockDefinition\n                    if (events.length === 1) return events[0]\n                    else {\n                        const eventName = block.inputs[0].fields[\"event\"]\n                            .value as string\n                        return events.find(ev => ev.name === eventName)\n                    }\n                })\n                .filter(ev => !!ev)\n        )\n        const jdBlocks = this._serviceBlocks.filter(block => !!block.service)\n        const services = uniqueMap(\n            jdBlocks,\n            block => block.service.shortId,\n            block => block.service\n        )\n\n        const toolboxServices: jdspec.ServiceSpec[] = uniqueMap(\n            Flags.diagnostics\n                ? services\n                : [\n                      ...blockServices\n                          .map(pair =>\n                              services.find(\n                                  service =>\n                                      service.classIdentifier ===\n                                      pair.serviceClass\n                              )\n                          )\n                          .filter(srv => !!srv),\n                      ...liveServices.map(s => s.specification),\n                  ],\n            srv => srv.shortId,\n            srv => srv\n        )\n            .filter(\n                srv => srv && ignoredServices.indexOf(srv.classIdentifier) < 0\n            )\n            .sort((l, r) => l.name.localeCompare(r.name))\n\n        const getFieldBlocks = (\n            service: jdspec.ServiceSpec,\n            fieldBlocks: EventFieldDefinition[]\n        ) =>\n            fieldBlocks\n                .filter(\n                    ev => ev.service === service && usedEvents.has(ev.event)\n                )\n                .map<BlockReference>(block => ({\n                    kind: \"block\",\n                    type: block.type,\n                    values: block.values,\n                }))\n\n        const makeCategory = (\n            service: jdspec.ServiceSpec,\n            isClient: boolean,\n            serviceBlocks: ServiceBlockDefinition[],\n            eventFieldBLocks: EventFieldDefinition[]\n        ) => {\n            return {\n                kind: \"category\",\n                name: service.name + (isClient ? \"\" : \" Server\"),\n                colour: this.serviceColor(service),\n                contents: [\n                    <ButtonDefinition>{\n                        kind: \"button\",\n                        text: `Add ${service.name} ${\n                            isClient ? \"role\" : \"server\"\n                        }`,\n                        callbackKey: `jacdac_add_role_callback_${toRoleType(\n                            service,\n                            isClient\n                        )}`,\n                        callback: workspace =>\n                            Variables.createVariableButtonHandler(\n                                workspace,\n                                null,\n                                toRoleType(service, isClient)\n                            ),\n                    },\n                    ...serviceBlocks.map<BlockReference>(block => ({\n                        kind: \"block\",\n                        type: block.type,\n                        values: block.values,\n                    })),\n                    ...getFieldBlocks(service, eventFieldBLocks),\n                ],\n            }\n        }\n\n        return (\n            serviceBlocks: ServiceBlockDefinition[],\n            eventFieldBlocks: EventFieldDefinition[],\n            client = true\n        ) =>\n            toolboxServices\n                .map(serviceClient => ({\n                    serviceClient,\n                    serviceBlocks: serviceBlocks.filter(\n                        block => block.service === serviceClient\n                    ),\n                }))\n                .map<CategoryDefinition>(\n                    sc =>\n                        makeCategory(\n                            sc.serviceClient,\n                            client,\n                            sc.serviceBlocks,\n                            eventFieldBlocks\n                        ) as CategoryDefinition\n                )\n    }\n\n    compileEventToVM(options: CompileEventToVMOptions): CompileEventToVMResult {\n        const makeAwaitEvent = (\n            cmd: string,\n            role: string,\n            eventName: string\n        ) => {\n            return <CompileEventToVMResult>{\n                expression: <jsep.CallExpression>{\n                    type: \"CallExpression\",\n                    arguments:\n                        cmd == \"awaitEvent\"\n                            ? [\n                                  toMemberExpression(\n                                      role.toString(),\n                                      eventName.toString()\n                                  ),\n                              ]\n                            : [\n                                  toIdentifier(role.toString()),\n                                  toIdentifier(eventName.toString()),\n                              ],\n                    callee: toIdentifier(cmd),\n                },\n                event: {\n                    role: role.toString(),\n                    event: eventName.toString(),\n                },\n            }\n        }\n\n        const { block, definition, blockToExpression } = options\n        const { inputs } = block\n        const { template } = definition\n\n        switch (template) {\n            case \"event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { value: eventName } = inputs[0].fields[\"event\"]\n                return makeAwaitEvent(\n                    \"awaitEvent\",\n                    role.toString(),\n                    eventName.toString()\n                )\n            }\n            case \"register_change_event\": {\n                const { value: role } = inputs[0].fields[\"role\"]\n                const { register } = definition as RegisterBlockDefinition\n                const { expr, errors } = blockToExpression(\n                    undefined,\n                    inputs[0].child\n                )\n                return <CompileEventToVMResult>{\n                    expression: <jsep.CallExpression>{\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role.toString(), register.name),\n                            expr,\n                        ],\n                        callee: toIdentifier(\"awaitChange\"),\n                    },\n                    errors,\n                }\n            }\n            default: {\n                const { type } = block\n                switch (type) {\n                    case ROLE_BOUND_EVENT_BLOCK: {\n                        const { value: role } = inputs[0].fields[\"role\"]\n                        const { value: eventName } = inputs[0].fields[\"event\"]\n                        return makeAwaitEvent(\n                            \"roleBound\",\n                            role.toString(),\n                            eventName.toString()\n                        )\n                    }\n                }\n            }\n        }\n        return undefined\n    }\n\n    compileExpressionToVM(\n        options: CompileExpressionToVMOptions\n    ): ExpressionWithErrors {\n        const { event, definition, block } = options\n        const { inputs, id } = block\n        const { template } = definition\n        switch (template) {\n            case \"register_get\": {\n                const { register } = definition as RegisterBlockDefinition\n                const { value: role } = inputs[0].fields[\"role\"]\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        role as string,\n                        field\n                            ? toMemberExpression(\n                                  register.name,\n                                  field.value as string\n                              )\n                            : register.name\n                    ),\n                    errors: [],\n                }\n            }\n            case \"event_field\": {\n                const { event: eventInfo } = definition as EventFieldDefinition\n                const errors: VMError[] = []\n                if (event.event !== eventInfo.name) {\n                    errors.push({\n                        sourceId: id,\n                        message: `Event ${eventInfo.name} is not available in this handler.`,\n                    })\n                }\n                const field = inputs[0].fields[\"field\"]\n                return {\n                    expr: toMemberExpression(\n                        event.role,\n                        toMemberExpression(event.event, field.value as string)\n                    ),\n                    errors,\n                }\n            }\n            default: {\n                const { type } = block\n                const errors: VMError[] = []\n                switch (type) {\n                    case ROLE_BOUND_BLOCK: {\n                        const { value: role } = inputs[0].fields[\"role\"]\n                        return {\n                            expr: {\n                                type: \"CallExpression\",\n                                arguments: [toIdentifier(role.toString())],\n                                callee: toMemberExpression(\n                                    \"$fun\",\n                                    \"roleBoundExpression\"\n                                ),\n                            } as jsep.Expression,\n                            errors,\n                        }\n                    }\n                }\n            }\n        }\n        return undefined\n    }\n\n    compileCommandToVM(options: CompileCommandToVMOptions) {\n        const { event, block, definition, blockToExpression } = options\n        const { template } = definition\n        const { inputs } = block\n        switch (template) {\n            case \"register_set\": {\n                // TODO: need to handle the case of writing a register with fields\n                const { register } = definition as RegisterBlockDefinition\n                const exprsErrors = inputs.map(a => {\n                    return blockToExpression(event, a.child)\n                })\n                const { value: role } = inputs[0].fields.role\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [\n                            toMemberExpression(role as string, register.name),\n                            ...exprsErrors.map(p => p.expr),\n                        ],\n                        callee: toIdentifier(\"writeRegister\"),\n                    }),\n                    errors: exprsErrors.flatMap(p => p.errors),\n                }\n            }\n            case \"raiseNo\":\n            case \"raiseArgs\":\n            case \"command\": {\n                const { command: serviceCommand } =\n                    definition as CommandBlockDefinition\n                const { value: role } = inputs[0].fields.role\n                const eventName =\n                    template === \"raiseNo\"\n                        ? inputs[0].fields[\"event\"].value.toString()\n                        : \"\"\n                const exprsErrors =\n                    template === \"raiseNo\"\n                        ? []\n                        : inputs.map(a => {\n                              return blockToExpression(event, a.child)\n                          })\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: exprsErrors.map(p => p.expr),\n                        callee: toMemberExpression(\n                            role as string,\n                            eventName ? eventName : serviceCommand.name\n                        ),\n                    }),\n                    errors: exprsErrors.flatMap(p => p.errors),\n                }\n            }\n            case \"server\": {\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [],\n                        callee: toIdentifier(\"nop\"),\n                    }),\n                    errors: [],\n                }\n            }\n            default: {\n                const { type } = block\n                switch (type) {\n                    case SET_STATUS_LIGHT_BLOCK: {\n                        console.log(\"SET_STATUS\")\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n}\n","import jsep from \"jsep\"\nimport {\n    VMBase,\n    VMHandler,\n    VMProgram,\n    VMRole,\n    VMIfThenElse,\n    VMError,\n} from \"../../../jacdac-ts/src/vm/ir\"\nimport { toIdentifier, RoleEvent } from \"../../../jacdac-ts/src/vm/compile\"\nimport {\n    BUILTIN_TYPES,\n    resolveBlockDefinition,\n    ServiceBlockDefinition,\n} from \"../blockly/toolbox\"\nimport Blockly from \"blockly\"\nimport BlockDomainSpecificLanguage, { resolveDsl } from \"../blockly/dsl/dsl\"\nimport { parseRoleType } from \"../blockly/dsl/servicesbase\"\nimport { splitFilter } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { BlockJSON, WorkspaceJSON } from \"../blockly/dsl/workspacejson\"\n\nexport interface ExpressionWithErrors {\n    expr: jsep.Expression\n    errors: VMError[]\n}\n\nexport interface CmdWithErrors {\n    cmd: VMBase\n    errors: VMError[]\n}\n\nexport const makeVMBase = (block: BlockJSON, command: jsep.CallExpression) => {\n    return {\n        sourceId: block.id,\n        type: \"cmd\",\n        command,\n    } as VMBase\n}\n\nexport const processErrors = (block: BlockJSON, errors: VMError[]) => {\n    return errors.map((e: VMError) => {\n        return {\n            sourceId: e.sourceId ? e.sourceId : block.id,\n            message: e.message,\n        }\n    })\n}\n\nexport default function workspaceJSONToVMProgram(\n    workspace: WorkspaceJSON,\n    dsls: BlockDomainSpecificLanguage[]\n): VMProgram {\n    //console.debug(`compile vm`, { workspace, dsls })\n\n    if (!workspace) return undefined\n\n    const [roles, serverRoles]: [VMRole[], VMRole[]] = splitFilter(\n        workspace.variables\n            .filter(v => BUILTIN_TYPES.indexOf(v.type) < 0)\n            .map(parseRoleType),\n        r => r.client\n    )\n\n    class EmptyExpression extends Error {}\n\n    const blockToExpression: (\n        ev: RoleEvent,\n        block: BlockJSON\n    ) => ExpressionWithErrors = (ev: RoleEvent, blockIn: BlockJSON) => {\n        const errors: VMError[] = []\n\n        const blockToExpressionInner = (ev: RoleEvent, block: BlockJSON) => {\n            if (!block) {\n                throw new EmptyExpression()\n            }\n            const { type, value, inputs } = block\n            console.log(`block2e`, { ev, block, type, value, inputs })\n\n            if (value !== undefined)\n                // literal\n                return <jsep.Literal>{\n                    type: \"Literal\",\n                    value: value,\n                    raw: value + \"\",\n                }\n\n            const dsl = resolveDsl(dsls, type)\n            if (!dsl) {\n                console.warn(`unknown block ${type}`, {\n                    type,\n                    ev,\n                    block,\n                    d: Blockly.Blocks[type],\n                })\n                errors.push({\n                    sourceId: block.id,\n                    message: `unknown block ${type}`,\n                })\n            } else {\n                const definition =\n                    resolveBlockDefinition<ServiceBlockDefinition>(type)\n                const res = dsl.compileExpressionToVM?.({\n                    event: ev,\n                    definition,\n                    block,\n                    blockToExpressionInner,\n                })\n                if (res) {\n                    if (res.errors) res.errors.forEach(e => errors.push(e))\n                    return res.expr\n                }\n\n                const { template } = definition\n                if (template === \"shadow\") {\n                    const field = inputs[0].fields[\"value\"]\n                    const v = field.value\n                    return <jsep.Literal>{\n                        type: \"Literal\",\n                        value: v,\n                        raw: v + \"\",\n                    }\n                }\n\n                errors.push({\n                    sourceId: block.id,\n                    message: `unknown block ${type}`,\n                })\n                console.warn(`unsupported expression block ${type}`, {\n                    ev,\n                    block,\n                    definition,\n                })\n            }\n            throw new EmptyExpression()\n        }\n        return {\n            expr: blockToExpressionInner(ev, blockIn),\n            errors,\n        }\n    }\n\n    const blockToCommand = (\n        event: RoleEvent,\n        block: BlockJSON\n    ): CmdWithErrors => {\n        const { type, inputs } = block\n        console.debug(`block2c`, { event, type, block, inputs })\n        switch (type) {\n            case \"dynamic_if\": {\n                const thenHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const elseHandler: VMHandler = {\n                    commands: [],\n                    errors: [],\n                }\n                const t = inputs[1]?.child\n                const e = inputs[2]?.child\n                if (t) {\n                    addCommands(\n                        event,\n                        [t, ...(t.children ? t.children : [])],\n                        thenHandler\n                    )\n                }\n                if (e) {\n                    addCommands(\n                        event,\n                        [e, ...(e.children ? e.children : [])],\n                        elseHandler\n                    )\n                }\n                let exprErrors: ExpressionWithErrors = undefined\n                try {\n                    exprErrors = blockToExpression(event, inputs[0]?.child)\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        exprErrors = {\n                            expr: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false \",\n                            } as jsep.Literal,\n                            errors: [],\n                        }\n                    } else {\n                        throw e\n                    }\n                }\n                const { expr, errors } = exprErrors\n\n                const ifThenElse: VMIfThenElse = {\n                    sourceId: block.id,\n                    type: \"ite\",\n                    expr,\n                    then: thenHandler.commands,\n                    else: elseHandler.commands,\n                }\n\n                console.log(\"dynamic if\")\n                return {\n                    cmd: ifThenElse,\n                    errors: processErrors(\n                        block,\n                        errors\n                            .concat(thenHandler.errors)\n                            .concat(elseHandler.errors)\n                    ),\n                }\n            }\n            // more builts\n            default: {\n                const dsl = resolveDsl(dsls, type)\n                if (dsl) {\n                    const definition =\n                        resolveBlockDefinition<ServiceBlockDefinition>(type)\n                    const template = definition?.template\n                    if (template === \"meta\") return undefined\n                    const dslRes = dsl.compileCommandToVM?.({\n                        event,\n                        block,\n                        definition,\n                        blockToExpression,\n                    })\n                    if (dslRes) {\n                        dslRes.errors = processErrors(block, dslRes.errors)\n                        return dslRes\n                    }\n                }\n                console.warn(`unsupported command block ${type}`, { block })\n                return {\n                    cmd: undefined,\n                    errors: [\n                        {\n                            sourceId: block.id,\n                            message: `unsupported command block ${type}`,\n                        },\n                    ],\n                }\n            }\n        }\n    }\n\n    const nop = {\n        type: \"CallExpression\",\n        arguments: [],\n        callee: toIdentifier(\"nop\"),\n    } as jsep.CallExpression\n\n    const addCommands = (\n        event: RoleEvent,\n        blocks: BlockJSON[],\n        handler: VMHandler\n    ) => {\n        blocks\n            ?.filter(child => !!child)\n            .forEach(child => {\n                try {\n                    const { cmd, errors } = blockToCommand(event, child) || {}\n                    if (cmd) handler.commands.push(cmd)\n                    errors?.forEach(e => handler.errors.push(e))\n                } catch (e) {\n                    if (e instanceof EmptyExpression) {\n                        handler.commands.push({\n                            sourceId: child.id,\n                            type: \"cmd\",\n                            command: nop,\n                        } as VMBase)\n                    } else {\n                        console.debug(e)\n                    }\n                }\n            })\n    }\n\n    const handlers: VMHandler[] = workspace.blocks\n        .map(top => {\n            const { type } = top\n            let command: jsep.CallExpression\n            let topEvent: RoleEvent\n            let topErrors: VMError[]\n            let topMeta = false\n\n            try {\n                const dsl = resolveDsl(dsls, type)\n                const definition =\n                    resolveBlockDefinition<ServiceBlockDefinition>(type)\n                const { expression, errors, event, meta } =\n                    dsl?.compileEventToVM?.({\n                        block: top,\n                        definition,\n                        blockToExpression,\n                    }) || {}\n                command = expression as jsep.CallExpression\n                topErrors = errors\n                topEvent = event\n                topMeta = meta\n\n                // if dsl didn't compile anything try again\n                const { template } = definition || {}\n                if (!command && !topErrors?.length) {\n                    switch (template) {\n                        case \"meta\": {\n                            break\n                        }\n                        default: {\n                            topErrors = [\n                                {\n                                    sourceId: top.id,\n                                    message: `unsupported handler block ${type}`,\n                                },\n                            ]\n                            console.debug(\n                                `unsupported handler template ${template} for ${type}`,\n                                { top }\n                            )\n                            break\n                        }\n                    }\n                }\n            } catch (e) {\n                console.debug(e)\n                if (e instanceof EmptyExpression) {\n                    return undefined\n                } else {\n                    throw e\n                }\n            }\n\n            // nothing to compile here\n            if (!command && !topErrors?.length) return undefined\n\n            const handler: VMHandler = {\n                commands: [\n                    {\n                        sourceId: top.id,\n                        type: \"cmd\",\n                        command,\n                    } as VMBase,\n                ],\n                errors: topErrors || [],\n                meta: !!topMeta,\n            }\n\n            addCommands(topEvent, top.children, handler)\n            return handler\n        })\n        .filter(handler => !!handler)\n\n    return {\n        roles,\n        serverRoles,\n        handlers,\n    }\n}\n","import {\n    SRV_HID_KEYBOARD,\n    SRV_LED,\n    SRV_DOT_MATRIX,\n    SRV_SEVEN_SEGMENT_DISPLAY,\n} from \"../../../../jacdac-ts/src/jdom/constants\"\nimport type { DataRecordWindowRequest } from \"../../../workers/data/dist/node_modules/data.worker\"\n\nimport KeyboardKeyField from \"../fields/KeyboardKeyField\"\nimport LEDColorField from \"../fields/LEDColorField\"\nimport LEDMatrixField from \"../fields/LEDMatrixField\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    CustomBlockDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    EventBlockDefinition,\n    identityTransformData,\n    InputDefinition,\n    NumberInputDefinition,\n    OptionsInputDefinition,\n    toolsColour,\n    TWIN_BLOCK,\n    ValueInputDefinition,\n    VariableInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport JDomTreeField from \"../fields/JDomTreeField\"\nimport TwinField from \"../fields/TwinField\"\nimport {\n    createServiceColor,\n    fieldsToFieldInputs,\n    fieldsToMessage,\n    fieldsToValues,\n    getServiceInfo,\n    roleVariable,\n    serviceHelp,\n    ServicesBaseDSL,\n    toRoleType,\n} from \"./servicesbase\"\nimport { humanify } from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport { Block } from \"blockly\"\nimport postTransformData from \"./workers/data.proxy\"\n\nconst SET_STATUS_LIGHT_BLOCK = \"jacdac_set_status_light\"\nconst ROLE_BOUND_EVENT_BLOCK = \"jacdac_role_bound_event\"\nconst ROLE_BOUND_BLOCK = \"jacdac_role_bound\"\nconst RECORD_WINDOW_BLOCK = \"jacdac_record_window\"\nconst INSPECT_BLOCK = \"jacdac_tools_inspect\"\nconst commandColor = \"#8c6a1d\"\n\nexport class ServicesBlockDomainSpecificLanguage\n    extends ServicesBaseDSL\n    implements BlockDomainSpecificLanguage\n{\n    id = \"jacdacServices\"\n    // generic role blocks\n    private _roleBlocks: BlockDefinition[]\n\n    createBlocks(options: CreateBlocksOptions) {\n        const { theme } = options\n        this.serviceColor = createServiceColor(theme)\n\n        // pure service information here\n        const {\n            allServices,\n            supportedServices,\n            registers,\n            events,\n            commands,\n            registerSimpleTypes,\n            registerComposites,\n            registerSimpleEnumTypes,\n            registerCompositeEnumTypes,\n        } = getServiceInfo()\n\n        const resolveService = (cls: number): jdspec.ServiceSpec[] =>\n            allServices.filter(srv => srv.classIdentifier === cls)\n\n        const customClientBlockDefinitions: CustomBlockDefinition[] = [\n            ...resolveService(SRV_HID_KEYBOARD).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `key`,\n                        message0: `%1 %2 key %3`,\n                        args0: [\n                            roleVariable(service),\n                            <OptionsInputDefinition>{\n                                type: \"field_dropdown\",\n                                name: \"action\",\n                                options: [\n                                    [\"press\", \"press\"],\n                                    [\"down\", \"down\"],\n                                    [\"up\", \"up\"],\n                                ],\n                            },\n                            {\n                                type: KeyboardKeyField.KEY,\n                                name: \"combo\",\n                            },\n                        ],\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Send a keyboard key combo`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.key(combo.selectors, combo.modifiers, action)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_LED).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `fade`,\n                        message0: `fade %1 to %2 at speed %3`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"color\",\n                                check: \"Number\",\n                            },\n                            {\n                                type: \"input_value\",\n                                name: \"speed\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            color: {\n                                kind: \"block\",\n                                type: LEDColorField.SHADOW.type,\n                            },\n                            speed: {\n                                kind: \"block\",\n                                type: \"jacdac_ratio\",\n                            },\n                        },\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Fade LED color`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        expression: `role.animate((color >> 16) & 0xff, (color >> 8) & 0xff, (color >> 0) & 0xff, speed * 0xff)`,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_SEVEN_SEGMENT_DISPLAY).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `set_digits`,\n                        message0: `set %1 digits to %2`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: \"input_value\",\n                                name: \"digits\",\n                                check: \"Number\",\n                            },\n                        ],\n                        values: {\n                            digits: {\n                                kind: \"block\",\n                                type: \"math_number\",\n                            },\n                        },\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display a number of the screen`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        template: \"custom\",\n                    }\n            ),\n            ...resolveService(SRV_DOT_MATRIX).map(\n                service =>\n                    <CustomBlockDefinition>{\n                        kind: \"block\",\n                        type: `show_dots`,\n                        message0: `show %1 dots %2`,\n                        args0: [\n                            roleVariable(service),\n                            {\n                                type: LEDMatrixField.KEY,\n                                name: \"dots\",\n                            },\n                        ],\n                        colour: this.serviceColor(service),\n                        inputsInline: true,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n                        tooltip: `Display dots on the dot matrix`,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        // encode digits\n                        template: \"custom\",\n                    }\n            ),\n        ].map(def => {\n            def.type = `jacdac_custom_${def.service.shortId.toLowerCase()}_${\n                def.type\n            }`\n            return def\n        })\n\n        const eventClientBlocks = events.map<EventBlockDefinition>(\n            ({ service, events }) => ({\n                kind: \"block\",\n                type: `jacdac_events_${service.shortId}`,\n                message0: `on %1 %2`,\n                args0: [\n                    roleVariable(service),\n                    <InputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: events.map(event => [\n                            humanify(event.name),\n                            event.name,\n                        ]),\n                    },\n                ],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: `Events for the ${service.name} service`,\n                helpUrl: serviceHelp(service),\n                service,\n                events,\n                template: \"event\",\n            })\n        )\n\n        const registerChangeByEventClientBlocks =\n            this.makeRegisterChangeByEventBlocks(registers)\n        const registerSimpleGetClientBlocks =\n            this.makeRegisterSimpleGetBlocks(registerSimpleTypes)\n        const registerEnumGetClientBlocks = this.makeRegisterEnumGetBlocks([\n            ...registerSimpleEnumTypes,\n            ...registerCompositeEnumTypes,\n        ])\n        const registerNumericsGetClientBlocks =\n            this.makeRegisterNumericsGetBlocks(registerComposites)\n        const registerSetClientBlocks = this.makeRegisterSetBlocks(registers)\n\n        const commandClientBlocks = commands.map<CommandBlockDefinition>(\n            ({ service, command }) => ({\n                kind: \"block\",\n                type: `jacdac_command_${service.shortId}_${command.name}`,\n                message0: !command.fields.length\n                    ? `${humanify(command.name)} %1`\n                    : `${humanify(command.name)} %1 with ${fieldsToMessage(\n                          command\n                      )}`,\n                args0: [roleVariable(service), ...fieldsToFieldInputs(command)],\n                values: fieldsToValues(service, command),\n                inputsInline: true,\n                colour: this.serviceColor(service),\n                tooltip: command.description,\n                helpUrl: serviceHelp(service),\n                service,\n                command,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n\n                template: \"command\",\n            })\n        )\n\n        this._serviceBlocks = [\n            ...eventClientBlocks,\n            ...registerSimpleGetClientBlocks,\n            ...registerEnumGetClientBlocks,\n            ...registerNumericsGetClientBlocks,\n            ...registerSetClientBlocks,\n            ...commandClientBlocks,\n            ...customClientBlockDefinitions,\n            ...registerChangeByEventClientBlocks,\n        ]\n\n        this._eventFieldBlocks = this.makeFieldBlocks(\n            events.map(p => ({ service: p.service, packets: p.events }))\n        )\n\n        // client only\n        this._roleBlocks = [\n            {\n                kind: \"block\",\n                type: ROLE_BOUND_EVENT_BLOCK,\n                message0: \"on %1 %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <OptionsInputDefinition>{\n                        type: \"field_dropdown\",\n                        name: \"event\",\n                        options: [\n                            [\"bound\", \"bound\"],\n                            [\"unbound\", \"unbound\"],\n                        ],\n                    },\n                ],\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"role_binding_event\",\n            },\n            {\n                kind: \"block\",\n                type: ROLE_BOUND_BLOCK,\n                message0: \"%1 bound\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"any\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                ],\n                output: \"Boolean\",\n                inputsInline: true,\n                colour: commandColor,\n                tooltip: \"Runs code when a role is connected or disconnected\",\n                helpUrl: \"\",\n                template: \"role_bound\",\n            },\n            {\n                kind: \"block\",\n                type: SET_STATUS_LIGHT_BLOCK,\n                message0: \"set %1 status light to %2\",\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"all\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    <ValueInputDefinition>{\n                        type: \"input_value\",\n                        name: \"color\",\n                        check: \"Number\",\n                    },\n                ],\n                values: {\n                    color: {\n                        kind: \"block\",\n                        type: LEDColorField.SHADOW.type,\n                    },\n                },\n                inputsInline: true,\n                previousStatement: CODE_STATEMENT_TYPE,\n                nextStatement: CODE_STATEMENT_TYPE,\n                colour: commandColor,\n                tooltip: \"Sets the color on the status light\",\n                helpUrl: \"\",\n            },\n        ]\n\n        const toolsBlocks: BlockDefinition[] = [\n            {\n                kind: \"block\",\n                type: TWIN_BLOCK,\n                message0: `view %1 %2 %3`,\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"none\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                            ...supportedServices.map(srv =>\n                                toRoleType(srv, false)\n                            ),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    {\n                        type: \"input_dummy\",\n                    },\n                    <InputDefinition>{\n                        type: TwinField.KEY,\n                        name: \"twin\",\n                    },\n                ],\n                colour: toolsColour,\n                inputsInline: false,\n                tooltip: `Twin of the selected service`,\n                nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                helpUrl: \"\",\n                template: \"meta\",\n                transformData: identityTransformData,\n            },\n            {\n                kind: \"block\",\n                type: INSPECT_BLOCK,\n                message0: `inspect %1 %2 %3`,\n                args0: [\n                    <VariableInputDefinition>{\n                        type: \"field_variable\",\n                        name: \"role\",\n                        variable: \"none\",\n                        variableTypes: [\n                            \"client\",\n                            ...supportedServices.map(srv => toRoleType(srv)),\n                        ],\n                        defaultType: \"client\",\n                    },\n                    {\n                        type: \"input_dummy\",\n                    },\n                    <InputDefinition>{\n                        type: JDomTreeField.KEY,\n                        name: \"twin\",\n                    },\n                ],\n                colour: toolsColour,\n                inputsInline: false,\n                tooltip: `Inspect a service`,\n                helpUrl: \"\",\n                template: \"meta\",\n            },\n            <BlockDefinition>{\n                kind: \"block\",\n                type: RECORD_WINDOW_BLOCK,\n                message0: \"record last %1 s\",\n                args0: [\n                    <NumberInputDefinition>{\n                        type: \"field_number\",\n                        name: \"horizon\",\n                        value: 10,\n                    },\n                ],\n                inputsInline: false,\n                previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n                colour: toolsColour,\n                template: \"meta\",\n                dataPreviewField: true,\n                transformData: async (\n                    block: Block,\n                    data: { time: number }[],\n                    previousData: { time: number }[]\n                ) => {\n                    const horizon = block.getFieldValue(\"horizon\") || 10\n                    return postTransformData(<DataRecordWindowRequest>{\n                        type: \"record_window\",\n                        data,\n                        previousData,\n                        horizon,\n                    })\n                },\n            },\n        ]\n\n        return [\n            ...this._serviceBlocks,\n            ...this._eventFieldBlocks,\n            ...this._roleBlocks,\n            ...toolsBlocks,\n        ]\n    }\n\n    createCategory(options: CreateCategoryOptions) {\n        const makeServicesCategories = this.createCategoryHelper(options)\n\n        const clientServicesCategories = makeServicesCategories(\n            this._serviceBlocks,\n            this._eventFieldBlocks\n        )\n\n        const commonCategory: CategoryDefinition = {\n            kind: \"category\",\n            name: \"Roles\",\n            colour: commandColor,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ROLE_BOUND_EVENT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ROLE_BOUND_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: SET_STATUS_LIGHT_BLOCK,\n                    values: {\n                        color: {\n                            kind: \"block\",\n                            type: LEDColorField.SHADOW.type,\n                        },\n                    },\n                },\n            ],\n        }\n\n        const toolsCategory: CategoryDefinition = {\n            kind: \"category\",\n            name: \"Tools\",\n            colour: toolsColour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: TWIN_BLOCK,\n                },\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: RECORD_WINDOW_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: INSPECT_BLOCK,\n                },\n            ],\n        }\n\n        return [...clientServicesCategories, commonCategory, toolsCategory]\n    }\n}\nconst servicesDSL = new ServicesBlockDomainSpecificLanguage()\nexport default servicesDSL\n","import { humanify } from \"../../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport {\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    CommandBlockDefinition,\n    ContentDefinition,\n    EventBlockDefinition,\n    InputDefinition,\n    LabelDefinition,\n    SeparatorDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CreateBlocksOptions,\n    CreateCategoryOptions,\n} from \"./dsl\"\nimport {\n    createServiceColor,\n    fieldsToFieldInputs,\n    fieldsToMessage,\n    fieldsToValues,\n    getServiceInfo,\n    roleVariable,\n    serviceHelp,\n    ServiceRegister,\n    ServicesBaseDSL,\n} from \"./servicesbase\"\n\nexport class ServerServicesBlockDomainSpecificLanguage\n    extends ServicesBaseDSL\n    implements BlockDomainSpecificLanguage\n{\n    id = \"jacdacServerServices\"\n    supportedServices: jdspec.ServiceSpec[] = []\n\n    makeRegisterGetSetRequestBlocks(\n        registers: ServiceRegister[],\n        isGet: boolean\n    ) {\n        return registers\n            .filter(\n                r =>\n                    (isGet &&\n                        (r.register.kind === \"ro\" ||\n                            r.register.kind === \"rw\")) ||\n                    (!isGet && r.register.kind == \"rw\")\n            )\n            .map<EventBlockDefinition>(({ service, register }) => ({\n                kind: \"block\",\n                type: `jacdac_register_${isGet ? \"get\" : \"set\"}_request_${\n                    service.shortId\n                }_${register.name}`,\n                message0: `on register ${isGet ? \"get\" : \"set\"} %1 ${humanify(\n                    register.name\n                )}`,\n                args0: [roleVariable(service, false)],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: register.description,\n                helpUrl: serviceHelp(service),\n                service,\n                events: [register],\n                template: \"event\",\n            }))\n    }\n\n    createBlocks(options: CreateBlocksOptions) {\n        const { theme } = options\n        this.serviceColor = createServiceColor(theme)\n\n        // pure service information here\n        const {\n            registers,\n            events,\n            commands,\n            registerSimpleTypes,\n            registerComposites,\n            registerSimpleEnumTypes,\n            registerCompositeEnumTypes,\n        } = getServiceInfo()\n\n        const eventServerBlocks = events.flatMap<CommandBlockDefinition>(\n            ({ service, events }) => {\n                const eventsNoArgs = events.filter(ev => ev.fields.length === 0)\n                const retNoArgs: CommandBlockDefinition = {\n                    kind: \"block\",\n                    type: `jacdac_raise_event_${service.shortId}`,\n                    message0: `raise %1 %2`,\n                    args0: [\n                        roleVariable(service, false),\n                        <InputDefinition>{\n                            type: \"field_dropdown\",\n                            name: \"event\",\n                            options: eventsNoArgs.map(event => [\n                                humanify(event.name),\n                                event.name,\n                            ]),\n                        },\n                    ],\n                    inputsInline: true,\n                    colour: this.serviceColor(service),\n                    tooltip: `Events for the ${service.name} service`,\n                    helpUrl: serviceHelp(service),\n                    service,\n                    command: undefined,\n                    previousStatement: CODE_STATEMENT_TYPE,\n                    nextStatement: CODE_STATEMENT_TYPE,\n\n                    template: \"raiseNo\",\n                }\n                const eventsArgs = events.filter(ev => ev.fields.length)\n                const retArgs = eventsArgs.map<CommandBlockDefinition>(ev => {\n                    return {\n                        kind: \"block\",\n                        type: `jacdac_raise_event_${service.shortId}_${ev.name}`,\n                        message0: !ev.fields.length\n                            ? `raise %1 ${humanify(ev.name)}`\n                            : `raise %1 ${humanify(\n                                  ev.name\n                              )} with ${fieldsToMessage(ev)}`,\n                        args0: [\n                            roleVariable(service, false),\n                            ...fieldsToFieldInputs(ev),\n                        ],\n                        values: fieldsToValues(service, ev),\n                        inputsInline: true,\n                        colour: this.serviceColor(service),\n                        tooltip: ev.description,\n                        helpUrl: serviceHelp(service),\n                        service,\n                        command: ev,\n                        previousStatement: CODE_STATEMENT_TYPE,\n                        nextStatement: CODE_STATEMENT_TYPE,\n\n                        template: \"raiseArgs\",\n                    }\n                })\n                return [retNoArgs, ...retArgs]\n            }\n        )\n\n        const registerSimpleGetServerBlocks = this.makeRegisterSimpleGetBlocks(\n            registerSimpleTypes,\n            false\n        )\n        const registerEnumGetServerBlocks = this.makeRegisterEnumGetBlocks(\n            [...registerSimpleEnumTypes, ...registerCompositeEnumTypes],\n            false\n        )\n        const registerNumericsGetServerBlocks =\n            this.makeRegisterNumericsGetBlocks(registerComposites, false)\n        const registerSetServerBlocks = this.makeRegisterSetBlocks(\n            registers,\n            false\n        )\n        const registerSetRequestBlocks = this.makeRegisterGetSetRequestBlocks(\n            registers,\n            false\n        )\n        const registerGetRequestBlocks = this.makeRegisterGetSetRequestBlocks(\n            registers,\n            true\n        )\n\n        const commandServerBlocks = commands.map<EventBlockDefinition>(\n            ({ service, command }) => ({\n                kind: \"block\",\n                type: `jacdac_command_server_${service.shortId}_${command.name}`,\n                message0: `on ${humanify(command.name)} %1`,\n                args0: [roleVariable(service, false)],\n                colour: this.serviceColor(service),\n                inputsInline: true,\n                nextStatement: CODE_STATEMENT_TYPE,\n                tooltip: command.description,\n                helpUrl: serviceHelp(service),\n                service,\n                events: [command],\n                template: \"event\",\n            })\n        )\n\n        this._serviceBlocks = [\n            ...eventServerBlocks,\n            ...registerSimpleGetServerBlocks,\n            ...registerEnumGetServerBlocks,\n            ...registerNumericsGetServerBlocks,\n            ...registerSetServerBlocks,\n            ...commandServerBlocks,\n            ...registerSetRequestBlocks,\n            ...registerGetRequestBlocks,\n        ]\n\n        this._eventFieldBlocks = this.makeFieldBlocks(\n            commands.map(p => ({ service: p.service, packets: [p.command] })),\n            false\n        )\n\n        return [...this._serviceBlocks, ...this._eventFieldBlocks]\n    }\n\n    createCategory(options: CreateCategoryOptions) {\n        const makeServicesCategories = this.createCategoryHelper(options)\n\n        const serverServicesCategories = makeServicesCategories(\n            this._serviceBlocks,\n            this._eventFieldBlocks,\n            false\n        )\n\n        if (!serverServicesCategories?.length) return []\n\n        return [\n            <SeparatorDefinition>{\n                kind: \"sep\",\n            },\n            {\n                kind: \"category\",\n                name: \"Servers\",\n                contents: serverServicesCategories,\n            } as CategoryDefinition,\n        ]\n    }\n}\nconst serverServicesDSL = new ServerServicesBlockDomainSpecificLanguage()\nexport default serverServicesDSL\n","import jsep from \"jsep\"\nimport { toIdentifier } from \"../../../../jacdac-ts/src/vm/compile\"\nimport { CmdWithErrors, makeVMBase } from \"../../vm/VMgenerator\"\nimport LogViewField from \"../fields/LogViewField\"\nimport VariablesField from \"../fields/VariablesFields\"\nimport WatchValueField from \"../fields/WatchValueField\"\nimport {\n    BlockReference,\n    CODE_STATEMENT_TYPE,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    identityTransformData,\n    InputDefinition,\n    LabelDefinition,\n    toolsColour,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst WATCH_BLOCK = \"tools_watch\"\nconst LOG_BLOCK = \"tools_log\"\nconst VIEW_LOG_BLOCK = \"tools_log_view\"\nconst VARIABLES_BLOCK = \"tools_variables_view\"\n\nconst colour = toolsColour\n\nconst toolsDSL: BlockDomainSpecificLanguage = {\n    id: \"tools\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: VARIABLES_BLOCK,\n            message0: `variables %1 %2`,\n            args0: [\n                {\n                    type: \"input_dummy\",\n                },\n                {\n                    type: VariablesField.KEY,\n                    name: \"variables\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `Watch variables values`,\n            helpUrl: \"\",\n            template: \"meta\",\n        },\n        {\n            kind: \"block\",\n            type: WATCH_BLOCK,\n            message0: `watch %1 %2`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                },\n                <InputDefinition>{\n                    type: WatchValueField.KEY,\n                    name: \"watch\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            tooltip: `Watch a value in the editor`,\n            helpUrl: \"\",\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            transformData: identityTransformData,\n        },\n        {\n            kind: \"block\",\n            type: LOG_BLOCK,\n            message0: `log %1`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            previousStatement: CODE_STATEMENT_TYPE,\n            nextStatement: CODE_STATEMENT_TYPE,\n            tooltip: `Log an entry to the console`,\n            helpUrl: \"\",\n        },\n        {\n            kind: \"block\",\n            type: VIEW_LOG_BLOCK,\n            message0: `console %1 %2`,\n            args0: [\n                {\n                    type: \"input_dummy\",\n                },\n                <InputDefinition>{\n                    type: LogViewField.KEY,\n                    name: \"watch\",\n                },\n            ],\n            colour,\n            inputsInline: false,\n            tooltip: `View console content`,\n            template: \"meta\",\n        },\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Debugger\",\n            colour: colour,\n            contents: [\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Variables\",\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: VARIABLES_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: WATCH_BLOCK,\n                },\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Logging\",\n                },\n                {\n                    kind: \"block\",\n                    type: LOG_BLOCK,\n                    values: {\n                        value: { kind: \"block\", type: \"text\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: VIEW_LOG_BLOCK,\n                },\n            ],\n        },\n        {\n            kind: \"sep\",\n        },\n    ],\n\n    compileCommandToVM: ({ block, blockToExpression }): CmdWithErrors => {\n        const { type } = block\n        if (type === LOG_BLOCK) {\n            const { inputs } = block\n            const { expr, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                cmd: makeVMBase(block, {\n                    type: \"CallExpression\",\n                    arguments: [expr],\n                    callee: toIdentifier(\"log\"),\n                }),\n                errors,\n            }\n        }\n        return undefined\n    },\n    compileEventToVM: ({ block, blockToExpression }) => {\n        const { type } = block\n        if (type === WATCH_BLOCK) {\n            const { inputs } = block\n            const { expr, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                expression: <jsep.CallExpression>{\n                    type: \"CallExpression\",\n                    arguments: [expr],\n                    callee: toIdentifier(\"watch\"),\n                },\n                errors,\n                meta: true,\n            }\n        }\n        return undefined\n    },\n}\n\nexport default toolsDSL\n","import { toIdentifier } from \"../../../../jacdac-ts/src/vm/compile\"\nimport { VMCommand } from \"../../../../jacdac-ts/src/vm/ir\"\nimport {\n    BlockReference,\n    CategoryDefinition,\n    CODE_STATEMENT_TYPE,\n    InputDefinition,\n    SeparatorDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport { makeVMBase, processErrors } from \"../../vm/VMgenerator\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { paletteColorByIndex } from \"./palette\"\n\nconst WAIT_BLOCK = \"jacdac_wait\"\nconst ON_START_BLOCK = \"jacdac_start\"\nconst REPEAT_EVERY_BLOCK = \"jacdac_repeat_every\"\n\nconst colour = paletteColorByIndex(0)\nconst loopsDsl: BlockDomainSpecificLanguage = {\n    id: \"loops\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: WAIT_BLOCK,\n            message0: \"wait %1 s\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"time\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            previousStatement: CODE_STATEMENT_TYPE,\n            nextStatement: CODE_STATEMENT_TYPE,\n            colour,\n            tooltip: \"Wait the desired time\",\n            helpUrl: \"\",\n        },\n        {\n            kind: \"block\",\n            type: ON_START_BLOCK,\n            message0: `on start`,\n            args0: [],\n            colour,\n            inputsInline: true,\n            tooltip: `Runs code when the device starts`,\n            helpUrl: \"\",\n            nextStatement: CODE_STATEMENT_TYPE,\n        },\n        {\n            kind: \"block\",\n            type: REPEAT_EVERY_BLOCK,\n            message0: `repeat every %1s`,\n            args0: [\n                <InputDefinition>{\n                    type: \"input_value\",\n                    name: \"interval\",\n                    check: \"Number\",\n                },\n            ],\n            colour,\n            inputsInline: true,\n            tooltip: `Repeats code at a given interval in seconds`,\n            helpUrl: \"\",\n            nextStatement: CODE_STATEMENT_TYPE,\n        },\n    ],\n\n    createCategory: () => [\n        <SeparatorDefinition>{\n            kind: \"sep\",\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Events\",\n            colour,\n            contents: [\n                <BlockReference>{\n                    kind: \"block\",\n                    type: REPEAT_EVERY_BLOCK,\n                    values: {\n                        interval: { kind: \"block\", type: \"jacdac_time_picker\" },\n                    },\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: ON_START_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: WAIT_BLOCK,\n                    values: {\n                        time: { kind: \"block\", type: \"jacdac_time_picker\" },\n                    },\n                },\n            ].filter(b => !!b),\n        },\n    ],\n    compileEventToVM: ({ block, blockToExpression }) => {\n        const { type } = block\n        if (type === ON_START_BLOCK) {\n            return {\n                expression: (\n                    makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [],\n                        callee: toIdentifier(\"start\"),\n                    }) as VMCommand\n                ).command,\n                errors: processErrors(block, []),\n            }\n        } else if (type === REPEAT_EVERY_BLOCK) {\n            const { inputs } = block\n            const { expr: time, errors } = blockToExpression(\n                undefined,\n                inputs[0].child\n            )\n            return {\n                expression: (\n                    makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [time],\n                        callee: toIdentifier(\"wait\"),\n                    }) as VMCommand\n                ).command,\n                errors: processErrors(block, errors),\n            }\n        }\n        return undefined\n    },\n    compileCommandToVM: ({ event, block, blockToExpression }) => {\n        const { type } = block\n        if (type === WAIT_BLOCK) {\n            const { inputs } = block\n            {\n                const { expr: time, errors } = blockToExpression(\n                    event,\n                    inputs[0].child\n                )\n                return {\n                    cmd: makeVMBase(block, {\n                        type: \"CallExpression\",\n                        arguments: [time],\n                        callee: toIdentifier(\"wait\"),\n                    }),\n                    errors: processErrors(block, errors),\n                }\n            }\n        }\n        return undefined\n    },\n}\nexport default loopsDsl\n","import jsep from \"jsep\"\nimport { ExpressionWithErrors } from \"../../vm/VMgenerator\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst ops = {\n    AND: \"&&\",\n    OR: \"||\",\n    EQ: \"===\",\n    NEQ: \"!==\",\n    LT: \"<\",\n    GT: \">\",\n    LTE: \"<=\",\n    GTE: \">=\",\n    NEG: \"-\",\n}\n\nconst logicDsl: BlockDomainSpecificLanguage = {\n    id: \"logic\",\n    types: [\n        \"variable_if\",\n        \"logic_compare\",\n        \"logic_operation\",\n        \"logic_negate\",\n        \"logic_boolean\",\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Logic\",\n            colour: \"%{BKY_LOGIC_HUE}\",\n            contents: [\n                {\n                    kind: \"block\",\n                    type: \"dynamic_if\",\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_compare\",\n                    values: {\n                        A: { kind: \"block\", type: \"math_number\" },\n                        B: { kind: \"block\", type: \"math_number\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_operation\",\n                    values: {\n                        A: { kind: \"block\", type: \"logic_boolean\" },\n                        B: { kind: \"block\", type: \"logic_boolean\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_negate\",\n                    values: {\n                        BOOL: { kind: \"block\", type: \"logic_boolean\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"logic_boolean\",\n                },\n            ],\n        },\n    ],\n    compileExpressionToVM: ({\n        event,\n        block,\n        blockToExpressionInner,\n    }): ExpressionWithErrors => {\n        const { type, inputs } = block\n        switch (type) {\n            case \"logic_operation\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n            case \"logic_negate\": {\n                const argument = blockToExpressionInner(event, inputs[0].child)\n                return {\n                    expr: <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: \"!\",\n                        argument,\n                        prefix: false, // TODO: handle logic_negate\n                    },\n                    errors: [],\n                }\n            }\n            case \"logic_compare\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n        }\n        return undefined\n    },\n}\nexport default logicDsl\n","import jsep from \"jsep\"\nimport { ExpressionWithErrors } from \"../../vm/VMgenerator\"\nimport {\n    BlockDefinition,\n    BlockReference,\n    CategoryDefinition,\n    OptionsInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\n\nconst ops = {\n    NEG: \"-\",\n    ADD: \"+\",\n    MULTIPLY: \"*\",\n    DIVIDE: \"/\",\n    MINUS: \"-\",\n}\n\nconst mathDsl: BlockDomainSpecificLanguage = {\n    id: \"jacdacmath\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: \"jacdac_math_arithmetic\",\n            message0: \"%1 %2 %3\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"A\",\n                    check: \"Number\",\n                },\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"%{BKY_MATH_ADDITION_SYMBOL}\", \"ADD\"],\n                        [\"%{BKY_MATH_SUBTRACTION_SYMBOL}\", \"MINUS\"],\n                        [\"%{BKY_MATH_MULTIPLICATION_SYMBOL}\", \"MULTIPLY\"],\n                        [\"%{BKY_MATH_DIVISION_SYMBOL}\", \"DIVIDE\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"B\",\n                    check: \"Number\",\n                },\n            ],\n            inputsInline: true,\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_ARITHMETIC_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_single\",\n            message0: \"%1 %2\",\n            args0: [\n                <OptionsInputDefinition>{\n                    type: \"field_dropdown\",\n                    name: \"OP\",\n                    options: [\n                        [\"-\", \"NEG\"],\n                        [\"%{BKY_MATH_SINGLE_OP_ABSOLUTE}\", \"ABS\"],\n                    ],\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"NUM\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            helpUrl: \"%{BKY_MATH_SINGLE_HELPURL}\",\n            extensions: [\"math_op_tooltip\"],\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_random\",\n            message0: \"random\",\n            args0: [],\n            output: \"Number\",\n            style: \"math_blocks\",\n            vm: function () {\n                return Math.random()\n            },\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: \"jacdac_math_clamp\",\n            message0: \"clamp %1 in [%2, %3]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"minInclusive\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"maxInclusive\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n            vm: function (\n                value: number,\n                minInclusive: number,\n                maxInclusive: number\n            ) {\n                return value < minInclusive\n                    ? minInclusive\n                    : value > maxInclusive\n                    ? maxInclusive\n                    : value\n            },\n        },\n        {\n            kind: \"block\",\n            type: \"jacdac_math_map\",\n            message0: \"map %1 from [%2, %3] to [%4, %5]\",\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"fromMax\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMin\",\n                    check: \"Number\",\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"toMax\",\n                    check: \"Number\",\n                },\n            ],\n            output: \"Number\",\n            style: \"math_blocks\",\n        },\n    ],\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Math\",\n            colour: \"%{BKY_MATH_HUE}\",\n            contents: [\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_arithmetic\",\n                    values: {\n                        A: { kind: \"block\", type: \"math_number\" },\n                        B: { kind: \"block\", type: \"math_number\" },\n                    },\n                },\n                {\n                    kind: \"block\",\n                    type: \"jacdac_math_single\",\n                    values: {\n                        NUM: {\n                            kind: \"block\",\n                            type: \"math_number\",\n                        },\n                    },\n                },\n                <BlockReference>{ kind: \"block\", type: \"jacdac_math_random\" },\n                { kind: \"block\", type: \"jacdac_math_map\" },\n                { kind: \"block\", type: \"math_number\" },\n            ],\n        },\n    ],\n    compileExpressionToVM: ({\n        event,\n        block,\n        blockToExpressionInner,\n    }): ExpressionWithErrors => {\n        const { type, inputs } = block\n        switch (type) {\n            case \"math_single\": // built-in blockly\n            case \"jacdac_math_single\": {\n                const argument = blockToExpressionInner(event, inputs[0].child)\n                const op = inputs[0].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.UnaryExpression>{\n                        type: \"UnaryExpression\",\n                        operator: ops[op] || op,\n                        argument,\n                        prefix: false, // TODO: handle math-negate\n                    },\n                    errors: [],\n                }\n            }\n            case \"math_arithmetic\": // built-in blockly\n            case \"jacdac_math_arithmetic\": {\n                const left = blockToExpressionInner(event, inputs[0].child)\n                const right = blockToExpressionInner(event, inputs[1].child)\n                const op = inputs[1].fields[\"op\"].value as string\n                return {\n                    expr: <jsep.BinaryExpression>{\n                        type: \"BinaryExpression\",\n                        operator: ops[op] || op,\n                        left,\n                        right,\n                    },\n                    errors: [],\n                }\n            }\n        }\n        return undefined\n    },\n}\n\nexport default mathDsl\n","import jsep from \"jsep\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport {\n    toIdentifier,\n    toMemberExpression,\n} from \"../../../../jacdac-ts/src/vm/compile\"\nimport { makeVMBase } from \"../../vm/VMgenerator\"\n\nconst variablesDsl: BlockDomainSpecificLanguage = {\n    id: \"variables\",\n    types: [\"variables_get\", \"variables_set\", \"math_change\"],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"Variables\",\n            colour: \"%{BKY_VARIABLES_HUE}\",\n            custom: \"VARIABLE\",\n        },\n    ],\n    compileExpressionToVM: ({ block /*definition*/ }) => {\n        const { type, inputs } = block\n        if (type === \"variables_get\") {\n            const { value: variable } = inputs[0].fields.var\n            const ret = {\n                expr: toMemberExpression(\"$var\", variable.toString()),\n                errors: [],\n            }\n            return ret\n        }\n        return undefined\n    },\n    compileCommandToVM: ({\n        event,\n        block,\n        /*definition,*/ blockToExpression,\n    }) => {\n        const { type, inputs } = block\n        if (type === \"math_change\" || type === \"variables_set\") {\n            const { expr, errors } = blockToExpression(event, inputs[0].child)\n            const { value: variable } = inputs[0].fields.var\n            return {\n                cmd: makeVMBase(block, {\n                    type: \"CallExpression\",\n                    arguments: [\n                        toMemberExpression(\"$var\", variable.toString()),\n                        type === \"variables_set\"\n                            ? expr\n                            : ({\n                                  type: \"BinaryExpression\",\n                                  operator: \"+\",\n                                  left: toMemberExpression(\n                                      \"$var\",\n                                      variable.toString()\n                                  ),\n                                  right: expr,\n                              } as jsep.BinaryExpression),\n                    ],\n                    callee: toIdentifier(\"writeLocal\"),\n                }),\n                errors,\n            }\n        }\n        return undefined\n    },\n}\nexport default variablesDsl\n","import {\n    BlockDefinition,\n    BlockReference,\n    BOOLEAN_TYPE,\n    DummyInputDefinition,\n    JSON_TYPE,\n    LabelDefinition,\n    PRIMITIVE_TYPES,\n    StatementInputDefinition,\n    TextInputDefinition,\n    ValueInputDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage, {\n    CompileExpressionToVMOptions,\n} from \"./dsl\"\nimport { paletteColorByIndex } from \"./palette\"\n\nconst colour = paletteColorByIndex(-2)\nconst JSON_FIELD_TYPE = \"JSONField\"\nconst JSON_OBJECT_BLOCK = \"json_object\"\nconst JSON_FIELD_SET_BLOCK = \"json_field_set\"\nconst JSON_FIELD_GET_TEMPLATE = \"jsonFieldGet\"\nconst JSON_FIELD_VALUE_TYPE = [...PRIMITIVE_TYPES, JSON_TYPE]\nconst JSON_FIELD_HAS_BLOCK = \"json_field_has\"\n\nconst jsonDSL: BlockDomainSpecificLanguage = {\n    id: \"json\",\n    createBlocks: () => [\n        <BlockDefinition>{\n            kind: \"block\",\n            type: JSON_OBJECT_BLOCK,\n            message0: \"{ %1 %2 }\",\n            args0: [\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                <StatementInputDefinition>{\n                    type: \"input_statement\",\n                    name: \"fields\",\n                    check: JSON_FIELD_TYPE,\n                },\n            ],\n            output: JSON_TYPE,\n            colour,\n        },\n        <BlockDefinition>{\n            kind: \"block\",\n            type: JSON_FIELD_SET_BLOCK,\n            message0: \"%1: %2\",\n            args0: [\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"name\",\n                    spellcheck: false,\n                },\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: JSON_FIELD_VALUE_TYPE,\n                },\n            ],\n            previousStatement: JSON_FIELD_TYPE,\n            nextStatement: JSON_FIELD_TYPE,\n            colour,\n        },\n        ...PRIMITIVE_TYPES.map(\n            output =>\n                <BlockDefinition>{\n                    kind: \"block\",\n                    type: `json_field_get_as_${output.toLowerCase()}`,\n                    message0: `%1 [ %2 ] as ${output.toLowerCase()}`,\n                    args0: [\n                        <ValueInputDefinition>{\n                            type: \"input_value\",\n                            name: \"value\",\n                            check: JSON_TYPE,\n                        },\n                        <TextInputDefinition>{\n                            type: \"field_input\",\n                            name: \"name\",\n                            spellcheck: false,\n                        },\n                    ],\n                    output,\n                    colour,\n                    template: JSON_FIELD_GET_TEMPLATE,\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    vm: (value: any, name: string) => value?.[name],\n                }\n        ),\n        {\n            kind: \"block\",\n            type: JSON_FIELD_HAS_BLOCK,\n            message0: `has %1 [ %2 ]`,\n            args0: [\n                <ValueInputDefinition>{\n                    type: \"input_value\",\n                    name: \"value\",\n                    check: JSON_TYPE,\n                },\n                <TextInputDefinition>{\n                    type: \"field_input\",\n                    name: \"name\",\n                    spellcheck: false,\n                },\n            ],\n            output: BOOLEAN_TYPE,\n            colour,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            vm: (value: any, name: string) => !!value?.[name],\n        },\n    ],\n    createCategory: () => [\n        {\n            kind: \"category\",\n            name: \"JSON\",\n            colour,\n            contents: [\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Create\",\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: JSON_OBJECT_BLOCK,\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: JSON_FIELD_SET_BLOCK,\n                    values: {\n                        value: {\n                            kind: \"block\",\n                            type: \"math_number\",\n                        },\n                    },\n                },\n                <LabelDefinition>{\n                    kind: \"label\",\n                    text: \"Read\",\n                },\n                ...PRIMITIVE_TYPES.map(output => ({\n                    kind: \"block\",\n                    type: `json_field_get_as_${output.toLowerCase()}`,\n                    values: {\n                        value: <BlockReference>{\n                            kind: \"block\",\n                            type: \"variables_get\",\n                            check: JSON_TYPE,\n                        },\n                    },\n                })),\n                {\n                    kind: \"block\",\n                    type: JSON_FIELD_HAS_BLOCK,\n                },\n            ],\n        },\n    ],\n\n    compileExpressionToVM(options: CompileExpressionToVMOptions) {\n        const { event, block, definition, blockToExpressionInner } = options\n        const { type } = block\n        const { template } = definition\n        if (type === JSON_OBJECT_BLOCK) {\n            // TODO: handle json field set block\n        } else if (type === JSON_FIELD_SET_BLOCK) {\n            // TODO: handle json field get block\n        } else if (template === JSON_FIELD_GET_TEMPLATE) {\n            // TODO: generate json expression\n            console.log(\"json expr\", {\n                event,\n                block,\n                definition,\n                blockToExpressionInner,\n            })\n            return undefined\n        }\n        // don't know\n        return undefined\n    },\n}\n\nexport default jsonDSL\n","import {\n    BlockReference,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    DummyInputDefinition,\n    identityTransformData,\n    NumberInputDefinition,\n    toolsColour,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport DataColumnChooserField from \"../fields/DataColumnChooserField\"\nimport GaugeWidgetField from \"../fields/GaugeWidgetField\"\n\nconst DASHBOARD_GAUGE_BLOCK = \"jacdac_widget_gauge\"\n\nconst colour = toolsColour\nconst widgetDSL: BlockDomainSpecificLanguage = {\n    id: \"widget\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: DASHBOARD_GAUGE_BLOCK,\n            message0: \"gauge min %1 max %2 %3 %4 %5\",\n            args0: [\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"min\",\n                },\n                <NumberInputDefinition>{\n                    type: \"field_number\",\n                    name: \"max\",\n                    value: 100,\n                },\n                {\n                    type: DataColumnChooserField.KEY,\n                    name: \"field\",\n                    dataType: \"number\",\n                },\n                <DummyInputDefinition>{\n                    type: \"input_dummy\",\n                },\n                {\n                    type: GaugeWidgetField.KEY,\n                    name: \"widget\",\n                },\n            ],\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour,\n            template: \"meta\",\n            inputsInline: false,\n            transformData: identityTransformData,\n        },\n    ],\n\n    createCategory: () => [\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"Widgets\",\n            contents: [\n                <BlockReference>{ kind: \"block\", type: DASHBOARD_GAUGE_BLOCK },\n            ],\n            colour,\n        },\n    ],\n}\n\nexport default widgetDSL\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { Block, Events, Workspace, alert } from \"blockly\"\nimport {\n    BlockReference,\n    ButtonDefinition,\n    CategoryDefinition,\n    DATA_SCIENCE_STATEMENT_TYPE,\n    SeparatorDefinition,\n} from \"../toolbox\"\nimport BlockDomainSpecificLanguage from \"./dsl\"\nimport { predictRequest } from \"../../blockly/dsl/workers/tf.proxy\"\nimport type {\n    TFModelPredictRequest,\n    TFModelPredictResponse,\n} from \"../../../workers/tf/dist/node_modules/tf.worker\"\nimport { resolveWorkspaceServices } from \"../WorkspaceContext\"\nimport UseModelField from \"../fields/UseModelField\"\nimport palette from \"./palette\"\n\nimport { importModelJSONIntoWorkspace } from \"../../fs/fs\"\n\nconst DATA_DATAVARIABLE_WRITE_BLOCK = \"data_dataset_write\"\nconst MODEL_ADD_CLASSIFIER_CALLBACK = \"model_add_variable\"\n\nexport const MODEL_BLOCKS = \"model_block_\"\nexport const MB_CLASSIFIER_VAR_TYPE = \"ModelBlockClassifier\"\n\nconst mlBlocksColour = palette()[3]\n\nconst mlBlocksDsl: BlockDomainSpecificLanguage = {\n    id: \"mlBlocks\",\n    createBlocks: () => [\n        {\n            kind: \"block\",\n            type: MODEL_BLOCKS + \"classifier\",\n            message0: \"predict with %1\",\n            args0: [\n                {\n                    type: UseModelField.KEY,\n                    name: \"modelFile\",\n                },\n            ],\n            inputsInline: false,\n            previousStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            nextStatement: DATA_SCIENCE_STATEMENT_TYPE,\n            colour: mlBlocksColour,\n            template: \"meta\",\n            dataPreviewField: true,\n            passthroughData: false,\n            transformData: async (b: Block, data: object[]) => {\n                const modelField = b.getField(\"modelFile\") as UseModelField\n                const model = await modelField.getModel()\n\n                if (data) data = data.slice(data.length - model.inputShape[0])\n\n                if (data && data.length >= model.inputShape[0]) {\n                    const inputData = [\n                        data.map(row =>\n                            model.inputTypes.map(inputType => row[inputType])\n                        ),\n                    ]\n                    const predictMsg = {\n                        worker: \"tf\",\n                        type: \"predict\",\n                        data: {\n                            zData: inputData,\n                            model: model,\n                        },\n                    } as TFModelPredictRequest\n                    const predResult = (await predictRequest(\n                        predictMsg\n                    )) as TFModelPredictResponse\n\n                    const transposedResult = []\n                    for (const label in predResult.data.predictAll[0]) {\n                        transposedResult.push({\n                            label: label,\n                            confidence: predResult.data.predictAll[0][label],\n                        })\n                    }\n\n                    return transposedResult\n                }\n                return Promise.resolve([])\n            },\n            tooltip: \"Use this block to run inference on vm sensor data.\",\n            helpUrl: \"\",\n        },\n    ],\n    createCategory: () => [\n        <SeparatorDefinition>{\n            kind: \"sep\",\n        },\n        <CategoryDefinition>{\n            kind: \"category\",\n            name: \"ML classifiers\",\n            colour: mlBlocksColour,\n            contents: [\n                <ButtonDefinition>{\n                    kind: \"button\",\n                    text: \"Import ML model\",\n                    callbackKey: MODEL_ADD_CLASSIFIER_CALLBACK,\n                    callback: (workspace: Workspace) => {\n                        const services = resolveWorkspaceServices(workspace)\n                        const directory = services?.workingDirectory\n                        if (!directory)\n                            alert(\n                                \"You need to open a directory to import a model classifier.\"\n                            )\n                        else {\n                            importModelJSONIntoWorkspace(directory.handle)\n                                .then(() => directory.sync())\n                                .then(() => alert(\"Files imported!\"))\n                        }\n                    },\n                },\n                <BlockReference>{\n                    kind: \"block\",\n                    type: MODEL_BLOCKS + \"classifier\",\n                },\n            ],\n        },\n    ],\n    createWorkspaceChangeListener: () => (event: Events.Abstract) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const { type, blockId } = event as any\n        const isBlockChange =\n            type === Events.BLOCK_CHANGE || type === Events.BLOCK_MOVE\n\n        if (isBlockChange) {\n            const workspace = event.getEventWorkspace_()\n            const block = workspace.getBlockById(blockId)\n            if (block?.type !== DATA_DATAVARIABLE_WRITE_BLOCK) return // nothing so see here\n        }\n    },\n}\nexport default mlBlocksDsl\n","import servicesDSL from \"../blockly/dsl/servicesdsl\"\nimport serverServicesDSL from \"../blockly/dsl/serverservicesdsl\"\nimport toolsDsl from \"../blockly/dsl/toolsdsl\"\nimport loopsDsl from \"../blockly/dsl/loopsdsl\"\nimport logicDsl from \"../blockly/dsl/logicdsl\"\nimport mathDsl from \"../blockly/dsl/mathdsl\"\nimport variablesDsl from \"../blockly/dsl/variablesdsl\"\nimport shadowDsl from \"../blockly/dsl/shadowdsl\"\nimport fieldsDsl from \"../blockly/dsl/fieldsdsl\"\nimport jsonDsl from \"../blockly/dsl/jsondsl\"\nimport chartDsl from \"../blockly/dsl/chartdsl\"\nimport dataDsl from \"../blockly/dsl/datadsl\"\nimport widgetDSL from \"../blockly/dsl/widgetdsl\"\nimport mlBlocksDsl from \"../blockly/dsl/mlblocksdsl\"\nimport { createIFrameDSL } from \"../blockly/dsl/iframedsl\"\n\nconst vmDsls = [\n    servicesDSL,\n    serverServicesDSL,\n    loopsDsl,\n    logicDsl,\n    mathDsl,\n    jsonDsl,\n    variablesDsl,\n    toolsDsl,\n    widgetDSL,\n    dataDsl,\n    chartDsl,\n    shadowDsl,\n    fieldsDsl,\n    mlBlocksDsl,\n    createIFrameDSL(\"hostvm\", \"*\"),\n]\nexport default vmDsls\n","import { Grid, NoSsr } from \"@mui/material\"\nimport React, {\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\nimport useVMRunner from \"./useVMRunner\"\nimport VMDiagnostics from \"./VMDiagnostics\"\nimport VMToolbar from \"./VMToolbar\"\nimport { VMProgram } from \"../../../jacdac-ts/src/vm/ir\"\nimport BlockContext, { BlockProvider } from \"../blockly/BlockContext\"\nimport BlockDiagnostics from \"../blockly/BlockDiagnostics\"\nimport workspaceJSONToVMProgram from \"./VMgenerator\"\nimport BlockEditor from \"../blockly/BlockEditor\"\nimport { arrayConcatMany } from \"../../../jacdac-ts/src/jdom/utils\"\nimport vmDsls from \"./vmdsls\"\nimport { VMStatus } from \"../../../jacdac-ts/src/vm/runner\"\nimport { VM_WARNINGS_CATEGORY, WORKSPACE_FILENAME } from \"../blockly/toolbox\"\nimport FileTabs from \"../fs/FileTabs\"\nimport { WorkspaceFile } from \"../blockly/dsl/workspacejson\"\nimport FileSystemContext from \"../FileSystemContext\"\nimport { resolveWorkspaceServices } from \"../blockly/WorkspaceContext\"\n\nconst VM_EDITOR_ID = \"vm\"\nconst VM_SOURCE_STORAGE_KEY = \"tools:vmeditor\"\nconst VM_NEW_FILE_CONTENT = JSON.stringify({\n    editor: VM_EDITOR_ID,\n    xml: \"\",\n} as WorkspaceFile)\n\nfunction VMEditorWithContext() {\n    const {\n        dsls,\n        workspace,\n        workspaceJSON,\n        roleManager,\n        setWarnings,\n        dragging,\n    } = useContext(BlockContext)\n    const { fileSystem } = useContext(FileSystemContext)\n    const [program, setProgram] = useState<VMProgram>()\n    const autoStart = true\n    const { runner, run, cancel } = useVMRunner(roleManager, program, autoStart)\n\n    // don't run the VM while dragging as it glitches the Ui\n    useEffect(() => {\n        if (runner?.status === VMStatus.Running) cancel()\n    }, [runner, dragging])\n    useEffect(() => {\n        try {\n            const newProgram = workspaceJSONToVMProgram(workspaceJSON, dsls)\n            if (JSON.stringify(newProgram) !== JSON.stringify(program))\n                setProgram(newProgram)\n        } catch (e) {\n            console.error(e)\n            setProgram(undefined)\n        }\n    }, [dsls, workspaceJSON])\n    useEffect(\n        () =>\n            program &&\n            roleManager?.updateRoles([\n                ...program.roles,\n                ...program.serverRoles.map(r => ({\n                    role: r.role,\n                    serviceClass: r.serviceClass,\n                    preferredDeviceId: \"TBD\",\n                })),\n            ]),\n        [roleManager, program]\n    )\n    useEffect(\n        () =>\n            setWarnings(\n                VM_WARNINGS_CATEGORY,\n                arrayConcatMany(program?.handlers.map(h => h.errors))\n            ),\n        [program]\n    )\n\n    useEffect(() => {\n        const services = resolveWorkspaceServices(workspace)\n        if (services) {\n            services.runner = runner\n        }\n    }, [workspace, runner])\n\n    return (\n        <Grid container direction=\"column\" spacing={1}>\n            {!!fileSystem && (\n                <Grid item xs={12}>\n                    <FileTabs\n                        newFileName={WORKSPACE_FILENAME}\n                        newFileContent={VM_NEW_FILE_CONTENT}\n                        hideFiles={true}\n                    />\n                </Grid>\n            )}\n            <Grid item xs={12}>\n                <VMToolbar runner={runner} run={run} cancel={cancel} />\n            </Grid>\n            <Grid item xs={12}>\n                <BlockEditor editorId={VM_EDITOR_ID} />\n            </Grid>\n            {Flags.diagnostics && (\n                <>\n                    <VMDiagnostics program={program} />\n                    <BlockDiagnostics />\n                </>\n            )}\n        </Grid>\n    )\n}\n\nexport default function VMEditor() {\n    const dsls = useMemo(() => {\n        return vmDsls\n    }, [])\n    const handleOnBeforeSaveWorkspaceFile = useCallback(\n        (file: WorkspaceFile) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const f = file as any\n            f.vm = workspaceJSONToVMProgram(file.json, dsls)\n        },\n        []\n    )\n\n    return (\n        <NoSsr>\n            <BlockProvider\n                storageKey={VM_SOURCE_STORAGE_KEY}\n                dsls={dsls}\n                onBeforeSaveWorkspaceFile={\n                    Flags.diagnostics\n                        ? handleOnBeforeSaveWorkspaceFile\n                        : undefined\n                }\n            >\n                <VMEditorWithContext />\n            </BlockProvider>\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport VMEditor from \"../../components/vm/VMEditor\"\n\nexport default function Page() {\n    return <VMEditor />\n}\n"],"names":["builtins","jacdac_on_off","block","getFieldValue","jacdac_yes_no","jacdac_time_picker","Number","jacdac_angle","jacdac_percent","jacdac_ratio","shadowDsl","id","createBlocks","kind","type","message0","args0","name","options","style","output","min","max","precision","colour","colourOptions","columns","blockToValue","isHighLevelRegister","isHighLevelEvent","isCommand","jdpack","CHANGE","JDRegisterServer","SensorServer","VM_EXTERNAL_REQUEST","VMRegisterServer","serviceServer","reg","defaultValue","identifier","sendGetAsync","raiseGetRegisterEvent","theRealSendGetAsync","VMServiceServer","role","spec","classIdentifier","readingValues","streamingInterval","eventNameToId","regNameToId","regFieldToId","commandPackets","cmdFieldToId","packets","filter","map","regServer","addExistingRegister","fields","forEach","pkt","index","subscribe","emit","tgt","cmd","addCommand","decoded","regName","respondToGetRegisterEvent","register","sendEventNameAsync","eventName","values","find","p","sendEvent","packFormat","lookupRegister","root","fld","value","undefined","writeRegister","ev","setValues","isEvent","isRegister","isIntensity","JDServiceClient","EVENT","REPORT_UPDATE","SystemReg","VMServiceClient","service","_registers","_reportUpdate","_events","registerRegister","handler","specification","mount","registerEvent","event","sendCommandAsync","commandName","sendCmdAsync","writeRegisterAsync","code","Value","setEnabled","writeRegAsync","jdreg","sendSetPackedAsync","Intensity","lookupRegisterAsync","reportUpdate","refresh","unpackedValue","field","f","assert","JDEventSource","serviceSpecificationFromClassIdentifier","GLOBAL_CHANGE","REGISTER_CHANGE","EXTERNAL_REQUEST","VMExceptionCode","VMException","data","Error","VMEnvironment","registers","events","serverRoles","_currentRequest","_clientEnvs","_serverEnvs","_globals","_rolesBound","_rolesUnbound","setupServers","serviceClass","globals","servers","Object","keys","k","server","serviceChanged","unmount","push","r","e","roleBound","serviceEnv","getService","getRootName","object","s","getServer","property","lookupAsync","roleName","startsWith","me","local","ep","writeGlobal","firstType","TypeMismatch","toString","clearExternalStimulii","rolesReset","hasRequest","op","completeRequest","request","initRoles","slice","roleTransition","unsubscribe","vs","unparse","ae","elements","join","caller","callee","arguments","computed","be","left","operator","right","ue","argument","raw","VMExprEvaluator","env","callEval","exprStack","tos","length","pop","evalAsync","visitExpressionAsync","ret","top","Math","abs","val","lit","VMFunctions","args","prompt","context","parseIntFloat","exprVisitor","parent","current","structVisit","Array","isArray","c","key","SpecSymbolResolver","role2spec","error","reset","roles","check","specResolve","shortName","client","rest","obj","indexOf","destructAccessPath","expectIdentifier","lookupEvent","resolve","_","lookupRegisterRaw","getRegister","isBoolOrNumericFormat","lookupReplace","child","replace","lookup","i","VMChecker","resolver","supportedExpression","checkCommand","funs","cmdIndex","findIndex","theCommand","command","commands","processSpecCommandFunction","processTestFunction","arg","visitReplace","minArgs","argsRequiredOptional","maxArgs","newExpressions","def","concat","processTestArguments","optional","a","eventSymTable","argType","message","member","fmt","test","lookupField","serviceSpecificationFromName","toIdentifier","toMemberExpression","handlerVisitor","visitITE","visitCommand","visitBase","base","ite","else","then","compileProgram","handlers","newProgram","startBlock","h","removeIfThenElse","errors","checkCall","cid","shift","newSequence","labels","labelId","time","end","expr","getServiceFromRole","info","roleFound","pair","checkProgram","prog","allErrors","goodHandlers","errorFun","sourceId","symbolResolver","checker","errorCount","split","Mutex","promises","acquire","Promise","reject","v","ROLE_BOUND","ROLE_UNBOUND","SERVICE_PROVIDER_REMOVED","TRACE","VM_GLOBAL_CHANGE","VM_COMMAND_FAILED","VM_WATCH_CHANGE","VM_BREAKPOINT","VM_INTERNAL_ERROR","VM_LOG_ENTRY","VM_ROLE_MISSING","JDClient","JDServerServiceProvider","VMInternalStatus","VM_WAKE_SLEEPER","VMJumpException","label","VMTimerException","ms","VMRequestException","VMCommandEvaluator","_regSaved","_changeSaved","_started","trace","msg","ee","namespace","funName","InternalError","newEval","evalExpressionAsync","checkExpressionAsync","startAsync","inst","evaluate","neededStart","Running","Completed","regValue","watch","evString","writeLog","Stopped","VMCommandRunner","handlerId","_status","_eval","stepAsync","status","VMHandlerRunner","_commandIndex","_currentCommand","stopped","_labelToIndex","gotoTop","Ready","commandIndex","wake","next","runToCompletionAsync","singleStep","singleStepCheckBreakAsync","getCommand","sid","breakpointOnAsync","singleStepAsync","Sleeping","sleepAsync","handlerWokeOnRequest","isEveryHandler","isRegisterChangeHandler","VMStatus","MAX_LOG","VMProgramRunner","roleManager","program","_handlerRunners","_roles","_serverRoles","_waitQueue","_everyQueue","_runQueue","_sleepQueue","_watch","_log","_breaks","_onCompletionOfExternalRequest","_in_run","compiled","console","debug","_env","_waitRunMutex","_breaksMutex","_sleepMutex","waitingToRunning","bus","provider","_provider","wakeSleeper","initializeRoleManagement","g","setStatus","last","text","count","lookupWatch","setBreakpointsAsync","breaks","b","clearBreakpointsAsync","setTimeout","handlerRunner","device","stopSleepers","startProvider","_device","cancel","resumeAsync","Paused","runAsync","getCurrentRunner","runHandlerAsync","postProcessHandler","newHead","emitBreakpoint","atTop","oneStep","brkCommand","ex","RoleNoService","done","moveToWait","unshift","q","del","splice","handlersStarted","newRunners","sleepingRunners","hs","clearTimeout","addRoleService","addServiceProvider","updateRole","deviceId","statusCode","removeServiceProvider","useContext","useEffect","useState","AppContext","ERROR","Flags","useVMRunner","autoRun","setError","runner","setRunner","_autoStart","_setAutoStart","run","newTestRunner","handleTrace","diagnostics","Grid","Typography","React","CodeBlock","VMDiagnostics","props","JSON","stringify","BlockContext","JacdacContext","DeviceAvatar","serviceProviderDefinitionFromServiceClass","useServiceServer","CancelIcon","Chip","Tooltip","TWIN_BLOCK","RoleChip","workspace","preferredDeviceId","handleRoleClick","twinBlock","getTopBlocks","inputList","fieldRow","getVariable","newBlock","variable","log","setValue","getId","m","getMetrics","moveBy","viewWidth","viewHeight","initSvg","render","centerOnBlock","handleDelete","useChange","BlockClientRoles","useMemo","PlayArrowIcon","StopIcon","IconButtonWithTooltip","PauseIcon","arrayConcatMany","PlayForWorkIcon","useMounted","IconButtonWithProgress","BugReportIcon","useWorkspaceBreakpoints","breakpoints","meta","setBreakpointHighlight","highlightBlock","VMRunnerButtons","t","indeterminate","setIndeterminate","breakpoint","setBreakpoint","pausing","paused","mounted","disabled","handleRun","handleCancel","handleResume","handlePause","handleStep","AddIcon","VMStartSimulatorButton","toggleShowDeviceHostsDialog","VMToolbar","withPrefix","humanify","isNumericType","BuzzerCmd","JoystickReg","ServoReg","SRV_BOOTLOADER","SRV_BUZZER","SRV_CONTROL","SRV_JOYSTICK","SRV_LOGGER","SRV_PROTO_TEST","SRV_ROLE_MANAGER","SRV_SERVO","isSensor","serviceSpecifications","splitFilter","toMap","uniqueMap","NoteField","ServoAngleField","BOOLEAN_TYPE","CODE_STATEMENT_TYPE","JSON_TYPE","NUMBER_TYPE","resolveBlockDefinition","STRING_TYPE","makeVMBase","Variables","paletteColorByIndex","SET_STATUS_LIGHT_BLOCK","ROLE_BOUND_EVENT_BLOCK","ROLE_BOUND_BLOCK","isBooleanField","isStringField","toBlocklyType","encoding","enumInfo","srv","enums","ignoredServices","customMessages","Direction","get","customShadows","Angle","shadow","SHADOW","PlayNote","lookupCustomShadow","cs","fieldsSupported","every","fieldName","fieldToShadow","unit","typicalMin","absoluteMin","typicalMax","absoluteMax","variableName","camelName","toLowerCase","isEnabledRegister","customMessage","eventFieldGroups","toRoleType","parseRoleType","parseInt","fieldsToFieldInputs","fieldsToValues","fieldsToMessage","serviceHelp","shortId","sensorColor","otherColor","createServiceColor","theme","serviceColor","roleVariable","variableTypes","defaultType","getServiceInfo","allServices","supportedServices","registerSimples","registerComposites","registerSimpleTypes","registerSimpleOthers","registerSimpleEnumTypes","einfo","registerCompositeEnumTypes","kv","lowLevel","ServicesBaseDSL","_serviceBlocks","_eventFieldBlocks","makeRegisterSimpleGetBlocks","inputsInline","tooltip","description","helpUrl","template","makeRegisterSetBlocks","previousStatement","nextStatement","makeRegisterChangeByEventBlocks","some","makeRegisterNumericsGetBlocks","re","makeRegisterEnumGetBlocks","members","makeFieldBlocks","sps","worker","sp","createCategoryHelper","source","liveServices","blockServices","variables","vt","usedEvents","Set","blocks","definition","inputs","jdBlocks","services","toolboxServices","sort","l","localeCompare","getFieldBlocks","fieldBlocks","has","makeCategory","isClient","serviceBlocks","eventFieldBLocks","contents","callbackKey","callback","createVariableButtonHandler","eventFieldBlocks","serviceClient","sc","compileEventToVM","makeAwaitEvent","expression","blockToExpression","compileExpressionToVM","eventInfo","compileCommandToVM","exprsErrors","flatMap","serviceCommand","BUILTIN_TYPES","Blockly","resolveDsl","processErrors","workspaceJSONToVMProgram","dsls","EmptyExpression","blockIn","blockToExpressionInner","dsl","warn","d","Blocks","res","blockToCommand","thenHandler","elseHandler","addCommands","children","exprErrors","ifThenElse","dslRes","nop","topEvent","topErrors","topMeta","SRV_HID_KEYBOARD","SRV_LED","SRV_DOT_MATRIX","SRV_SEVEN_SEGMENT_DISPLAY","KeyboardKeyField","LEDColorField","LEDMatrixField","DATA_SCIENCE_STATEMENT_TYPE","identityTransformData","toolsColour","JDomTreeField","TwinField","postTransformData","RECORD_WINDOW_BLOCK","INSPECT_BLOCK","commandColor","ServicesBlockDomainSpecificLanguage","resolveService","cls","customClientBlockDefinitions","KEY","color","speed","digits","eventClientBlocks","registerChangeByEventClientBlocks","registerSimpleGetClientBlocks","registerEnumGetClientBlocks","registerNumericsGetClientBlocks","registerSetClientBlocks","commandClientBlocks","_roleBlocks","toolsBlocks","transformData","dataPreviewField","previousData","horizon","createCategory","makeServicesCategories","clientServicesCategories","commonCategory","toolsCategory","servicesDSL","ServerServicesBlockDomainSpecificLanguage","makeRegisterGetSetRequestBlocks","isGet","eventServerBlocks","eventsNoArgs","retNoArgs","eventsArgs","retArgs","registerSimpleGetServerBlocks","registerEnumGetServerBlocks","registerNumericsGetServerBlocks","registerSetServerBlocks","registerSetRequestBlocks","registerGetRequestBlocks","commandServerBlocks","serverServicesCategories","serverServicesDSL","LogViewField","VariablesField","WatchValueField","WATCH_BLOCK","LOG_BLOCK","VIEW_LOG_BLOCK","VARIABLES_BLOCK","toolsDSL","WAIT_BLOCK","ON_START_BLOCK","REPEAT_EVERY_BLOCK","loopsDsl","interval","ops","AND","OR","EQ","NEQ","LT","GT","LTE","GTE","NEG","logicDsl","types","A","B","BOOL","prefix","ADD","MULTIPLY","DIVIDE","MINUS","mathDsl","extensions","vm","random","minInclusive","maxInclusive","NUM","variablesDsl","custom","var","PRIMITIVE_TYPES","JSON_FIELD_TYPE","JSON_OBJECT_BLOCK","JSON_FIELD_SET_BLOCK","JSON_FIELD_GET_TEMPLATE","JSON_FIELD_VALUE_TYPE","JSON_FIELD_HAS_BLOCK","jsonDSL","spellcheck","DataColumnChooserField","GaugeWidgetField","DASHBOARD_GAUGE_BLOCK","widgetDSL","dataType","Events","alert","predictRequest","resolveWorkspaceServices","UseModelField","palette","importModelJSONIntoWorkspace","DATA_DATAVARIABLE_WRITE_BLOCK","MODEL_ADD_CLASSIFIER_CALLBACK","MODEL_BLOCKS","MB_CLASSIFIER_VAR_TYPE","mlBlocksColour","mlBlocksDsl","passthroughData","modelField","getField","model","getModel","inputShape","inputData","row","inputTypes","inputType","predictMsg","zData","predResult","transposedResult","predictAll","confidence","directory","workingDirectory","handle","sync","createWorkspaceChangeListener","blockId","isBlockChange","BLOCK_CHANGE","BLOCK_MOVE","getEventWorkspace_","getBlockById","toolsDsl","fieldsDsl","jsonDsl","chartDsl","dataDsl","createIFrameDSL","vmDsls","NoSsr","useCallback","BlockProvider","BlockDiagnostics","BlockEditor","VM_WARNINGS_CATEGORY","WORKSPACE_FILENAME","FileTabs","FileSystemContext","VM_EDITOR_ID","VM_SOURCE_STORAGE_KEY","VM_NEW_FILE_CONTENT","editor","xml","VMEditorWithContext","workspaceJSON","setWarnings","dragging","fileSystem","setProgram","autoStart","updateRoles","VMEditor","handleOnBeforeSaveWorkspaceFile","file","json","Page"],"sourceRoot":""}