{"version":3,"file":"component---src-pages-tools-device-qr-code-tsx-5c08511b627b31b57f92.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/ui/SwitchWithLabel.tsx","webpack://jacdac-docs/./src/pages/tools/device-qr-code.tsx"],"sourcesContent":["import { FormControlLabel, Switch, SwitchProps } from \"@mui/material\"\nimport React, { CSSProperties } from \"react\"\n\nexport default function SwitchWithLabel(\n    props: {\n        label: string | number | JSX.Element\n        labelPlacement?: \"end\" | \"start\" | \"top\" | \"bottom\"\n        labelStyle?: CSSProperties\n    } & SwitchProps\n) {\n    const { label, labelPlacement, labelStyle, ...rest } = props\n    return (\n        <FormControlLabel\n            control={<Switch {...rest} />}\n            label={label}\n            style={labelStyle}\n            labelPlacement={labelPlacement}\n        />\n    )\n}\n","import { Alert, Grid, TextField } from \"@mui/material\"\nimport React, { ChangeEvent, lazy, useState } from \"react\"\nimport Suspense from \"../../components/ui/Suspense\"\nimport SwitchWithLabel from \"../../components/ui/SwitchWithLabel\"\nconst SilkQRCode = lazy(() => import(\"../../components/widgets/SilkQrCode\"))\n\nexport default function DeviceQRCodeGenerator() {\n    const [url, setURL] = useState(``)\n    const [mirror, setMirror] = useState(false)\n    const [size, setSize] = useState(0.3)\n    const [error, setError] = useState(\"\")\n    const handleUrlChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const vanity = (ev.target.value || \"\").trim()\n        setURL(vanity)\n        setError(\n            !/^https?:\\/\\/./i.test(vanity)\n                ? \"Must start with http:// or https://\"\n                : undefined\n        )\n    }\n    const handleSizeChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const s = Number(ev.target.value)\n        if (!isNaN(s)) setSize(s)\n    }\n    const handleMirror = (ev: ChangeEvent<HTMLInputElement>) => {\n        setMirror(!!ev.target.checked)\n    }\n    return (\n        <>\n            <h1>Device Silk QR Code generator</h1>\n            <p>Enter a short URL to be encoded as a silk compatible QR code.</p>\n            <Alert severity=\"info\" sx={{ mb: 1 }}>\n                Keep the url as short as possible and use capital letters to get\n                the smallest QR code.\n            </Alert>\n            <Grid container spacing={1}>\n                <Grid item xs>\n                    <TextField\n                        fullWidth={true}\n                        label=\"url\"\n                        value={url}\n                        placeholder=\"\"\n                        onChange={handleUrlChange}\n                        error={!!error}\n                        helperText={error || \"Use _very_ short URL and CAPITAL letters for best results.\"}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        label=\"block size (mm)\"\n                        type=\"number\"\n                        value={size}\n                        inputProps={{ step: 0.1 }}\n                        onChange={handleSizeChange}\n                        helperText=\"Image size equals block size times number of blocks needed to encode URL.\"\n                    />\n                </Grid>\n                <Grid item>\n                    <SwitchWithLabel\n                        checked={mirror}\n                        onChange={handleMirror}\n                        label=\"mirror\"\n                    />\n                </Grid>\n            </Grid>\n            {url && !error && (\n                <>\n                    <h2>\n                        QR codes for{\" \"}\n                        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            {url}\n                        </a>\n                    </h2>\n                    <Suspense>\n                        <SilkQRCode url={url} mirror={mirror} size={size} />\n                    </Suspense>\n                </>\n            )}\n        </>\n    )\n}\n"],"names":["FormControlLabel","Switch","React","SwitchWithLabel","props","label","labelPlacement","labelStyle","rest","Alert","Grid","TextField","lazy","useState","Suspense","SilkQRCode","DeviceQRCodeGenerator","url","setURL","mirror","setMirror","size","setSize","error","setError","handleUrlChange","ev","vanity","target","value","trim","test","undefined","handleSizeChange","s","Number","isNaN","handleMirror","checked","mb","step"],"sourceRoot":""}