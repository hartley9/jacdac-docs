{"version":3,"file":"component---src-pages-tools-model-uploader-tsx-f2206bbb0cd4ceb9b737.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/icons-material/Bluetooth.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Usb.js","webpack://jacdac-docs/./node_modules/@mui/icons-material/Wifi.js","webpack://jacdac-docs/./node_modules/@mui/material/CardActions/cardActionsClasses.js","webpack://jacdac-docs/./node_modules/@mui/material/CardActions/CardActions.js","webpack://jacdac-docs/./jacdac-ts/src/clients/sensoraggregatorclient.ts","webpack://jacdac-docs/./src/components/alert/ConnectAlert.tsx","webpack://jacdac-docs/./src/components/buttons/ConnectButton.tsx","webpack://jacdac-docs/./src/components/buttons/ConnectButtons.tsx","webpack://jacdac-docs/./src/components/devices/DeviceCardMedia.tsx","webpack://jacdac-docs/./src/components/devices/DeviceCardHeader.tsx","webpack://jacdac-docs/./src/components/icons/SerialIcon.tsx","webpack://jacdac-docs/./src/components/icons/TransportIcon.tsx","webpack://jacdac-docs/./src/components/ui/Button.tsx","webpack://jacdac-docs/./src/components/ui/CircularProgressWithLabel.tsx","webpack://jacdac-docs/./src/components/useGridBreakpoints.ts","webpack://jacdac-docs/./src/components/ServiceList.tsx","webpack://jacdac-docs/./src/components/useDb.ts","webpack://jacdac-docs/./jacdac-ts/src/clients/modelrunnerclient.ts","webpack://jacdac-docs/./src/components/SensorAggregatorConfigView.tsx","webpack://jacdac-docs/./src/components/useCall.tsx","webpack://jacdac-docs/./node_modules/@mui/icons-material/esm/Link.js","webpack://jacdac-docs/./src/pages/tools/model-uploader.tsx"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17.71 7.71 12 2h-1v7.59L6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 11 14.41V22h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 5.83l1.88 1.88L13 9.59V5.83zm1.88 10.46L13 18.17v-3.76l1.88 1.88z\"\n}), 'Bluetooth');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15 7v4h1v2h-3V5h2l-3-4-3 4h2v8H8v-2.07c.7-.37 1.2-1.08 1.2-1.93 0-1.21-.99-2.2-2.2-2.2-1.21 0-2.2.99-2.2 2.2 0 .85.5 1.56 1.2 1.93V13c0 1.11.89 2 2 2h3v3.05c-.71.37-1.2 1.1-1.2 1.95 0 1.22.99 2.2 2.2 2.2 1.21 0 2.2-.98 2.2-2.2 0-.85-.49-1.58-1.2-1.95V15h3c1.11 0 2-.89 2-2v-2h1V7h-4z\"\n}), 'Usb');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m1 9 2 2c4.97-4.97 13.03-4.97 18 0l2-2C16.93 2.93 7.08 2.93 1 9zm8 8 3 3 3-3c-1.65-1.66-4.34-1.66-6 0zm-4-4 2 2c2.76-2.76 7.24-2.76 10 0l2-2C15.14 9.14 8.87 9.14 5 13z\"\n}), 'Wifi');\n\nexports.default = _default;","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nvar cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"disableSpacing\", \"className\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardActionsUtilityClass } from './cardActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = ownerState => {\n  var {\n    classes,\n    disableSpacing\n  } = ownerState;\n  var slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\n\nvar CardActionsRoot = styled('div', {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    var {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(_ref => {\n  var {\n    ownerState\n  } = _ref;\n  return _extends({\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  }, !ownerState.disableSpacing && {\n    '& > :not(:first-of-type)': {\n      marginLeft: 8\n    }\n  });\n});\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n\n  var {\n    disableSpacing = false,\n    className\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var ownerState = _extends({}, props, {\n    disableSpacing\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default CardActions;","import {\n    SensorAggregatorReg,\n    SensorAggregatorSampleType,\n    SRV_SENSOR_AGGREGATOR,\n} from \"../../jacdac-spec/dist/specconstants\"\nimport { bufferToArray, NumberFormat } from \"../jdom/buffer\"\nimport { JD_SERIAL_MAX_PAYLOAD_SIZE, REPORT_RECEIVE } from \"../jdom/constants\"\nimport { jdpack } from \"../jdom/pack\"\nimport JDRegister from \"../jdom/register\"\nimport JDService from \"../jdom/service\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport {\n    isReading,\n    serviceSpecificationFromClassIdentifier,\n} from \"../jdom/spec\"\nimport { assert, bufferConcat, bufferConcatMany, fromHex } from \"../jdom/utils\"\n\nexport interface SensorAggregatorInputConfig {\n    serviceClass: number\n    // if specified, also specify serviceIndex\n    deviceId?: string\n    serviceIndex?: number\n}\n\nexport interface SensorAggregatorConfig {\n    samplingInterval: number // ms\n    samplesInWindow: number\n    inputs: SensorAggregatorInputConfig[]\n}\n\nexport interface SensorAggregatorStats {\n    numSamples: number\n    sampleSize: number\n}\n\n/**\n * A client for the sensor aggregator service\n * @category Clients\n */\nexport class SensorAggregatorClient extends JDServiceClient {\n    constructor(service: JDService) {\n        super(service)\n        assert(service.serviceClass === SRV_SENSOR_AGGREGATOR)\n        this.service.registersUseAcks = true\n    }\n\n    async setInputs(cfg: SensorAggregatorConfig) {\n        function error(msg: string) {\n            throw new Error(\"Aggregator inputs: \" + msg)\n        }\n        function mapType(tp: number) {\n            switch (tp) {\n                case 1:\n                    return SensorAggregatorSampleType.U8\n                case 2:\n                    return SensorAggregatorSampleType.U16\n                case 4:\n                    return SensorAggregatorSampleType.U32\n                case -1:\n                    return SensorAggregatorSampleType.I8\n                case -2:\n                    return SensorAggregatorSampleType.I16\n                case -4:\n                    return SensorAggregatorSampleType.I32\n                default:\n                    error(\"unknown storage type\")\n            }\n        }\n\n        if (!cfg || !cfg.inputs) error(\"invalid input format\")\n\n        let totalSampleSize = 0\n        const inputs = cfg.inputs?.map(input => {\n            const { deviceId, serviceIndex, serviceClass } = input\n            if (!!deviceId !== !!serviceIndex)\n                error(`deviceId and serviceIndex must be specified together`)\n            const specification =\n                serviceSpecificationFromClassIdentifier(serviceClass)\n            if (!specification)\n                error(\n                    `missing specification from service 0x${serviceClass.toString(\n                        16\n                    )}`\n                )\n            const freeze = !!deviceId\n            const readingReg = specification.packets.find(isReading)\n            if (!readingReg)\n                error(\n                    `service 0x${serviceClass.toString(\n                        16\n                    )} does not have a reading register`\n                )\n            let sampleType: SensorAggregatorSampleType = undefined\n            let sampleSize = 0\n            let sampleShift = 0\n            for (const field of readingReg.fields) {\n                sampleSize += Math.abs(field.storage)\n                if (sampleType === undefined) {\n                    sampleType = mapType(field.storage)\n                    sampleShift = field.shift || 0\n                }\n                if (\n                    sampleType != mapType(field.storage) ||\n                    sampleShift != (field.shift || 0)\n                )\n                    error(\"heterogenous field types\")\n            }\n            totalSampleSize += sampleSize\n            return bufferConcat(\n                freeze ? fromHex(deviceId) : new Uint8Array(8),\n                jdpack(\"u32 u8 u8 u8 i8\", [\n                    serviceClass,\n                    freeze ? serviceIndex : 0,\n                    sampleSize,\n                    sampleType,\n                    sampleShift,\n                ])\n            )\n        })\n\n        if (totalSampleSize > JD_SERIAL_MAX_PAYLOAD_SIZE)\n            error(\"samples won't fit in packet\")\n\n        // u32 is x[4]\n        inputs.unshift(\n            jdpack(\"u16 u16 u32\", [\n                cfg.samplingInterval,\n                cfg.samplesInWindow,\n                0,\n            ])\n        )\n        await this.service\n            .register(SensorAggregatorReg.Inputs)\n            .sendSetAsync(bufferConcatMany(inputs))\n    }\n\n    async collect(numSamples: number) {\n        await this.service\n            .register(SensorAggregatorReg.StreamingSamples)\n            .sendSetPackedAsync([numSamples])\n    }\n\n    subscribeSample(handler: (sample: number[]) => void): () => void {\n        const reg = this.service.register(SensorAggregatorReg.CurrentSample)\n        return this.mount(\n            reg.subscribe(REPORT_RECEIVE, () =>\n                handler(bufferToArray(reg.data, NumberFormat.Float32LE))\n            )\n        )\n    }\n\n    private async getReg(id: SensorAggregatorReg, f: (v: JDRegister) => any) {\n        const reg = this.service.register(id)\n        await reg.refresh()\n        return f(reg)\n    }\n\n    async stats(): Promise<SensorAggregatorStats> {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const info: any = {\n            numSamples: this.getReg(\n                SensorAggregatorReg.NumSamples,\n                r => r.intValue\n            ),\n            sampleSize: this.getReg(\n                SensorAggregatorReg.SampleSize,\n                r => r.intValue\n            ),\n        }\n        for (const id of Object.keys(info)) {\n            info[id] = await info[id]\n        }\n        return info\n    }\n}\nexport default SensorAggregatorClient\n","// tslint:disable-next-line: no-submodule-imports\nimport { Box } from \"@mui/material\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport React, { useContext } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport { NoSsr } from \"@mui/material\"\nimport ConnectButtons from \"../buttons/ConnectButtons\"\nimport useDevices from \"../hooks/useDevices\"\n\nfunction NoSsrConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    const { serviceClass, closeable } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { transports } = bus\n    const devices = useDevices({ serviceClass, ignoreInfrastructure: true })\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n\n    // don't show if no transport, some devices\n    if (!transports.length || devices?.length) return null\n\n    return (\n        <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={closeable}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                <Box component=\"span\" ml={2}>\n                    <ConnectButtons full=\"always\" transparent={true} />\n                </Box>\n            </Alert>\n        </Box>\n    )\n}\n\nexport default function ConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    return (\n        <NoSsr>\n            <NoSsrConnectAlert {...props} />\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport Button from \"../ui/Button\"\nimport Transport, {\n    ConnectionState,\n} from \"../../../jacdac-ts/src/jdom/transport/transport\"\nimport { Badge } from \"@mui/material\"\nimport IconButtonWithProgress from \"../ui/IconButtonWithProgress\"\nimport TransportIcon from \"../icons/TransportIcon\"\nimport useChange from \"../../jacdac/useChange\"\nimport useMediaQueries from \"../hooks/useMediaQueries\"\n\nexport default function ConnectButton(props: {\n    full?: boolean\n    className?: string\n    transparent?: boolean\n    specification?: jdspec.DeviceSpec\n    transport: Transport\n    typeInTitle?: boolean\n    onClick?: () => void\n}) {\n    const {\n        full,\n        className,\n        transparent,\n        transport,\n        onClick,\n        specification,\n        typeInTitle,\n    } = props\n    const { type } = transport\n    const connectionState = useChange(transport, t => t.connectionState)\n    const showDisconnect =\n        connectionState == ConnectionState.Connected ||\n        connectionState == ConnectionState.Disconnecting\n    const inProgress =\n        connectionState == ConnectionState.Connecting ||\n        connectionState == ConnectionState.Disconnecting\n    const { mobile } = useMediaQueries()\n    const small = full !== true && (!full || mobile)\n    const disabled =\n        connectionState != ConnectionState.Connected &&\n        connectionState != ConnectionState.Disconnected\n    const handleClick = showDisconnect\n        ? async () => {\n              onClick?.()\n              await transport.disconnect()\n          }\n        : async () => {\n              onClick?.()\n              await transport.connect()\n          }\n    const icon = (\n        <Badge color=\"primary\" variant=\"dot\" invisible={!showDisconnect}>\n            <TransportIcon type={transport.type} />\n        </Badge>\n    )\n    const label = showDisconnect\n        ? `disconnect from ${type}`\n        : `connect to ${specification?.name || type}`\n    const title = showDisconnect\n        ? typeInTitle\n            ? `disconnect ${type}`\n            : `disconnect`\n        : typeInTitle\n        ? `connect ${type}`\n        : `connect`\n    const trackName = `transport.connect.${type}`\n    const trackProperties = {\n        transport: type,\n    }\n\n    if (small)\n        return (\n            <span>\n                <IconButtonWithProgress\n                    aria-label={label}\n                    title={label}\n                    color={transparent ? \"inherit\" : \"primary\"}\n                    className={className}\n                    disabled={disabled}\n                    indeterminate={inProgress}\n                    onClick={handleClick}\n                >\n                    {icon}\n                </IconButtonWithProgress>\n            </span>\n        )\n    else\n        return (\n            <Button\n                trackName={trackName}\n                trackProperties={trackProperties}\n                aria-label={label}\n                title={label}\n                size=\"small\"\n                variant={transparent ? \"outlined\" : \"contained\"}\n                color={transparent ? \"inherit\" : \"primary\"}\n                className={className}\n                startIcon={icon}\n                disabled={disabled}\n                onClick={handleClick}\n            >\n                {title}\n            </Button>\n        )\n}\n","import React, { useContext, useState } from \"react\"\nimport ConnectButton from \"./ConnectButton\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport IconButtonWithTooltip from \"../ui/IconButtonWithTooltip\"\nimport useMediaQueries from \"../hooks/useMediaQueries\"\nimport useChange from \"../../jacdac/useChange\"\nimport Button from \"../ui/Button\"\nimport AppContext from \"../AppContext\"\nimport JacdacIcon from \"../icons/JacdacIcon\"\n\nfunction DisconnectedButton(props: {\n    full?: \"disconnected\" | \"always\"\n    className?: string\n    transparent?: boolean\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { mobile } = useMediaQueries()\n    const { toggleShowConnectTransportDialog } = useContext(AppContext)\n    const { full, transparent, className } = props\n    const [working, setWorking] = useState(false)\n    const small = !full || mobile\n    const trackName = `transport.connect.start`\n\n    const handleConnect = async () => {\n        try {\n            setWorking(true)\n            await bus.connect(true)\n            if (!bus.connected) toggleShowConnectTransportDialog()\n        } finally {\n            setWorking(false)\n        }\n    }\n\n    if (small)\n        return (\n            <span>\n                <IconButtonWithTooltip\n                    title={\"Connect to a physical device\"}\n                    color={transparent ? \"inherit\" : \"primary\"}\n                    className={className}\n                    onClick={handleConnect}\n                    disabled={working}\n                >\n                    <JacdacIcon />\n                </IconButtonWithTooltip>\n            </span>\n        )\n    else\n        return (\n            <Button\n                trackName={trackName}\n                title=\"Connect to a physical device\"\n                size=\"small\"\n                variant={transparent ? \"outlined\" : \"contained\"}\n                color={transparent ? \"inherit\" : \"primary\"}\n                className={className}\n                startIcon={<JacdacIcon />}\n                onClick={handleConnect}\n                disabled={working}\n            >\n                Connect\n            </Button>\n        )\n}\n\nexport default function ConnectButtons(props: {\n    full?: \"disconnected\" | \"always\"\n    className?: string\n    transparent?: boolean\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { full, ...rest } = props\n    const { transports } = bus\n    const disconnected = useChange(bus, _ => _.disconnected)\n\n    if (!transports?.length) return null\n\n    return disconnected ? (\n        <DisconnectedButton {...props} />\n    ) : (\n        <>\n            {transports\n                .filter(tr => !tr.disconnected)\n                .map(transport => (\n                    <ConnectButton\n                        key={transport.type}\n                        transport={transport}\n                        {...rest}\n                        full={full === \"always\"}\n                    />\n                ))}\n        </>\n    )\n}\n","import React from \"react\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport useDeviceSpecification from \"../../jacdac/useDeviceSpecification\"\nimport useDeviceImage from \"./useDeviceImage\"\nimport CardMediaWithSkeleton from \"../ui/CardMediaWithSkeleton\"\n\nexport default function DeviceCardMedia(props: { device: JDDevice }) {\n    const { device } = props\n    const specification = useDeviceSpecification(device)\n    const imageUrl = useDeviceImage(specification, \"preview\")\n\n    return (\n        <CardMediaWithSkeleton image={imageUrl} title={specification?.name} />\n    )\n}\n","import { ControlReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { CardHeader, Chip, Typography } from \"@mui/material\"\n// tslint:disable-next-line: no-submodule-imports\nimport { Link } from \"gatsby-theme-material-ui\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport React from \"react\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport DeviceActions from \"./DeviceActions\"\nimport DeviceName from \"./DeviceName\"\nimport DeviceCardMedia from \"./DeviceCardMedia\"\nimport useDeviceSpecification from \"../../jacdac/useDeviceSpecification\"\nimport { identifierToUrlPath } from \"../../../jacdac-ts/src/jdom/spec\"\nimport DeviceAvatar from \"./DeviceAvatar\"\nimport useChange from \"../../jacdac/useChange\"\nimport Flags from \"../../../jacdac-ts/src/jdom/flags\"\n\nfunction DeviceProductIdentifierChip(props: { device: JDDevice }) {\n    const { device } = props\n    const register = useChange(device, _ =>\n        _?.service(0)?.register(ControlReg.ProductIdentifier)\n    )\n    const [productIdentifier] = useRegisterUnpackedValue<[number]>(register)\n    if (isNaN(productIdentifier)) return null\n\n    return (\n        <Chip size=\"small\" label={`pid: 0x${productIdentifier.toString(16)}`} />\n    )\n}\n\nfunction DeviceFirmwareVersionChip(props: { device: JDDevice }) {\n    const { device } = props\n    const firmwareVersionRegister = useChange(device, _ =>\n        _?.service(0)?.register(ControlReg.FirmwareVersion)\n    )\n    const [firmwareVersion] = useRegisterUnpackedValue<[string]>(\n        firmwareVersionRegister\n    )\n    if (!firmwareVersion) return null\n\n    return <Chip size=\"small\" label={firmwareVersion} />\n}\n\nfunction DeviceTemperatureChip(props: { device: JDDevice }) {\n    const { device } = props\n    const tempRegister = useChange(device, _ =>\n        _?.service(0)?.register(ControlReg.McuTemperature)\n    )\n    const [temperature] = useRegisterUnpackedValue<[number]>(tempRegister)\n    if (isNaN(temperature)) return null\n    return <Chip size=\"small\" label={`${temperature}°`} />\n}\n\nexport default function DeviceCardHeader(props: {\n    device: JDDevice\n    showAvatar?: boolean\n    showDeviceId?: boolean\n    showFirmware?: boolean\n    showTemperature?: boolean\n    showMedia?: boolean\n    showSettings?: boolean\n    showReset?: boolean\n}) {\n    const {\n        device,\n        showFirmware,\n        showTemperature,\n        showMedia,\n        showDeviceId,\n        showAvatar,\n        showSettings,\n        showReset,\n    } = props\n    const specification = useDeviceSpecification(device)\n\n    return (\n        <>\n            {showMedia && <DeviceCardMedia device={device} />}\n            <CardHeader\n                avatar={showAvatar && <DeviceAvatar device={device} />}\n                action={\n                    <DeviceActions\n                        device={device}\n                        showReset={showReset}\n                        showSettings={showSettings}\n                        hideIdentity={showAvatar}\n                    />\n                }\n                title={\n                    <Link\n                        color=\"textPrimary\"\n                        underline=\"hover\"\n                        to={`/devices/${\n                            identifierToUrlPath(specification?.id) || \"\"\n                        }`}\n                    >\n                        <DeviceName device={device} />\n                    </Link>\n                }\n                subheader={\n                    <>\n                        <Typography variant=\"caption\" gutterBottom>\n                            {[\n                                specification?.name,\n                                showDeviceId && device.deviceId,\n                            ]\n                                .filter(s => !!s)\n                                .join(\", \")}\n                        </Typography>\n                        {showFirmware && Flags.diagnostics && (\n                            <DeviceProductIdentifierChip device={device} />\n                        )}\n                        {showFirmware && (\n                            <DeviceFirmwareVersionChip device={device} />\n                        )}\n                        {showTemperature && (\n                            <DeviceTemperatureChip device={device} />\n                        )}\n                    </>\n                }\n            />\n        </>\n    )\n}\n","import { SvgIcon, SvgIconProps } from \"@mui/material\"\nimport React from \"react\"\n\nexport default function SerialIcon(props: SvgIconProps) {\n    return (\n        <SvgIcon titleAccess=\"Serial port\" {...props}>\n            <path d=\"M20.605,7.172l-17.21,-0c0,-0 -0.299,0.052 -0.507,0.097c-0.993,0.213 -1.745,1.03 -1.873,2.039l-0.009,0.126c-0.03,0.586 0.059,1.173 0.261,1.724c0.47,1.283 1.396,3.811 1.489,4.066l0.083,0.187l-0.004,-0.009c0.371,0.802 1.174,1.315 2.057,1.315l14.216,-0c0.883,-0 1.686,-0.513 2.057,-1.315l0.079,-0.178c0.093,-0.255 1.02,-2.783 1.489,-4.066c0.201,-0.547 0.29,-1.129 0.262,-1.711l-0.009,-0.139c-0.129,-1.009 -0.88,-1.826 -1.874,-2.039l-0.397,-0.085c-0.035,-0.008 -0.072,-0.012 -0.11,-0.012Zm-17.156,1.023l17.102,-0l0.346,0.074c0.566,0.121 0.994,0.584 1.072,1.156l0.005,0.068c0.02,0.452 -0.048,0.896 -0.201,1.314l-1.483,4.049l-0.054,0.119c-0.204,0.439 -0.644,0.719 -1.128,0.719l-14.216,0c-0.484,0 -0.925,-0.281 -1.129,-0.72l-0.053,-0.118l-1.483,-4.049c-0.154,-0.422 -0.223,-0.871 -0.2,-1.32l0.004,-0.062c0.078,-0.572 0.506,-1.035 1.072,-1.156l0.346,-0.074Zm0.326,6.805l0.002,0.008l-0.002,-0.008Zm6.531,-2.571c0.47,-0 0.852,0.382 0.852,0.852c-0,0.47 -0.382,0.852 -0.852,0.852c-0.471,0 -0.853,-0.382 -0.853,-0.852c0,-0.47 0.382,-0.852 0.853,-0.852Zm-3.389,-0c0.47,-0 0.852,0.382 0.852,0.852c-0,0.47 -0.382,0.852 -0.852,0.852c-0.471,0 -0.853,-0.382 -0.853,-0.852c0,-0.47 0.382,-0.852 0.853,-0.852Zm6.777,-0c0.471,-0 0.853,0.382 0.853,0.852c-0,0.47 -0.382,0.852 -0.853,0.852c-0.47,0 -0.852,-0.382 -0.852,-0.852c0,-0.47 0.382,-0.852 0.852,-0.852Zm3.389,-0c0.471,-0 0.853,0.382 0.853,0.852c-0,0.47 -0.382,0.852 -0.853,0.852c-0.47,0 -0.852,-0.382 -0.852,-0.852c0,-0.47 0.382,-0.852 0.852,-0.852Zm-11.861,-2.674c0.471,0 0.853,0.382 0.853,0.853c-0,0.47 -0.382,0.852 -0.853,0.852c-0.47,-0 -0.852,-0.382 -0.852,-0.852c0,-0.471 0.382,-0.853 0.852,-0.853Zm3.389,0c0.471,0 0.852,0.382 0.852,0.853c0,0.47 -0.381,0.852 -0.852,0.852c-0.47,-0 -0.852,-0.382 -0.852,-0.852c-0,-0.471 0.382,-0.853 0.852,-0.853Zm3.389,0c0.47,0 0.852,0.382 0.852,0.853c0,0.47 -0.382,0.852 -0.852,0.852c-0.47,-0 -0.852,-0.382 -0.852,-0.852c-0,-0.471 0.382,-0.853 0.852,-0.853Zm3.389,0c0.47,0 0.852,0.382 0.852,0.853c0,0.47 -0.382,0.852 -0.852,0.852c-0.47,-0 -0.852,-0.382 -0.852,-0.852c-0,-0.471 0.382,-0.853 0.852,-0.853Zm3.389,0c0.47,0 0.852,0.382 0.852,0.853c0,0.47 -0.382,0.852 -0.852,0.852c-0.471,-0 -0.852,-0.382 -0.852,-0.852c-0,-0.471 0.381,-0.853 0.852,-0.853Zm-16.752,-0.26l-0.003,0.029l0.003,-0.029Z\" />\n        </SvgIcon>\n    )\n}\n","import React from \"react\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport UsbIcon from \"@mui/icons-material/Usb\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport BluetoothIcon from \"@mui/icons-material/Bluetooth\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport WifiIcon from \"@mui/icons-material/Wifi\"\nimport {\n    BLUETOOTH_TRANSPORT,\n    PACKETIO_TRANSPORT,\n    SERIAL_TRANSPORT,\n    USB_TRANSPORT,\n    WEBSOCKET_TRANSPORT,\n    VIRTUAL_DEVICE_NODE_NAME,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport KindIcon from \"../KindIcon\"\nimport SerialIcon from \"./SerialIcon\"\n\nexport default function TransportIcon(props: {\n    type: string\n    className?: string\n}) {\n    const { type, className } = props\n    switch (type) {\n        case PACKETIO_TRANSPORT:\n        case USB_TRANSPORT:\n            return <UsbIcon className={className} />\n        case BLUETOOTH_TRANSPORT:\n            return <BluetoothIcon className={className} />\n        case SERIAL_TRANSPORT:\n            return <SerialIcon className={className} />\n        case WEBSOCKET_TRANSPORT:\n            return <WifiIcon className={className} />\n        default:\n            return (\n                <KindIcon\n                    kind={VIRTUAL_DEVICE_NODE_NAME}\n                    className={className}\n                />\n            )\n    }\n}\n","import React from \"react\"\nimport { ButtonProps } from \"@mui/material\"\nimport { Button as GatsbyButton } from \"gatsby-theme-material-ui\"\nimport useAnalytics, { EventProperties } from \"../hooks/useAnalytics\"\n\nexport default function Button(\n    props: {\n        trackName?: string\n        trackProperties?: EventProperties\n    } & ButtonProps\n) {\n    const { trackName, trackProperties, onClick, ...rest } = props\n    const { trackEvent } = useAnalytics()\n    const handleClick =\n        !trackName || !trackEvent || !onClick\n            ? onClick\n            : ev => {\n                  trackEvent(trackName, trackProperties)\n                  onClick(ev)\n              }\n    return <GatsbyButton onClick={handleClick} {...rest} />\n}\n","import React from \"react\"\nimport {\n    CircularProgressProps,\n    Box,\n    CircularProgress,\n    Typography,\n} from \"@mui/material\"\n\nexport default function CircularProgressWithLabel(\n    props: CircularProgressProps & { value: number }\n) {\n    return (\n        <Box position=\"relative\" display=\"inline-flex\">\n            <CircularProgress variant=\"determinate\" {...props} />\n            <Box\n                top={0}\n                left={0}\n                bottom={0}\n                right={0}\n                position=\"absolute\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n            >\n                <Typography\n                    variant=\"caption\"\n                    component=\"div\"\n                    color=\"textSecondary\"\n                >{`${Math.round(props.value)}%`}</Typography>\n            </Box>\n        </Box>\n    )\n}\n","import { GridSize } from \"@mui/material\"\nimport React, { useContext } from \"react\"\nimport AppContext, { DrawerType } from \"./AppContext\"\n\nexport interface GridBreakpoints {\n    xs?: GridSize\n    md?: GridSize\n    sm?: GridSize\n    lg?: GridSize\n    xl?: GridSize\n}\n\nexport default function useGridBreakpoints(\n    itemCount?: number\n): GridBreakpoints {\n    const { drawerType } = useContext(AppContext)\n\n    if (itemCount !== undefined) {\n        switch (itemCount) {\n            case 1:\n            case 2:\n                return { xs: 12, sm: 6, md: 6, lg: 6, xl: 6 }\n            case 3:\n                return { xs: 12, sm: 6, md: 6, lg: 4, xl: 4 }\n        }\n    }\n\n    if (drawerType != DrawerType.None)\n        return { xs: 12, md: 6, sm: 6, lg: 6, xl: 4 }\n    else\n        return {\n            xs: 12,\n            sm: 6,\n            md: 4,\n            lg: 4,\n            xl: 3,\n        }\n}\n","import React, { useContext } from \"react\"\nimport {\n    Grid,\n    CardContent,\n    Card,\n    CardActions,\n    Switch,\n    Box,\n} from \"@mui/material\"\nimport useChange from \"../jacdac/useChange\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\"\nimport useGridBreakpoints from \"./useGridBreakpoints\"\nimport DeviceCardHeader from \"./devices/DeviceCardHeader\"\nimport JDService from \"../../jacdac-ts/src/jdom/service\"\nimport { DeviceLostAlert } from \"./alert/DeviceLostAlert\"\nimport Alert from \"./ui/Alert\"\n\nfunction ServiceListItem(props: {\n    service: JDService\n    content?: JSX.Element | JSX.Element[]\n    checked?: boolean\n    checkedDisabled?: boolean\n    toggleChecked?: () => void\n    actions?: JSX.Element | JSX.Element[]\n}) {\n    const {\n        service,\n        content,\n        checked,\n        checkedDisabled,\n        toggleChecked,\n        actions,\n    } = props\n    const { device } = service\n\n    const handleCheck = () => toggleChecked()\n\n    return (\n        <Card>\n            <DeviceCardHeader device={device} showMedia={true} />\n            <CardContent>\n                <DeviceLostAlert device={device} />\n                {content}\n            </CardContent>\n            <CardActions>\n                {checked !== undefined && (\n                    <Switch\n                        disabled={checkedDisabled}\n                        onChange={handleCheck}\n                        checked={checked}\n                    />\n                )}\n                {actions}\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function ServiceList(props: {\n    serviceClass: number\n    selected?: (service: JDService) => boolean\n    toggleSelected?: (service: JDService) => void\n    content?: (service: JDService) => JSX.Element | JSX.Element[]\n    actions?: (service: JDService) => JSX.Element | JSX.Element[]\n    alertMissing?: string\n}) {\n    const {\n        serviceClass,\n        selected,\n        toggleSelected,\n        content,\n        actions,\n        alertMissing,\n    } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const services = useChange(bus, n => n.services({ serviceClass }))\n    const gridBreakpoints = useGridBreakpoints(services?.length)\n\n    const handleSelected = (service: JDService) => selected && selected(service)\n    const handleChecked = (service: JDService) => () =>\n        toggleSelected && toggleSelected(service)\n    const serviceContent = (service: JDService) => content && content(service)\n    const serviceActions = (service: JDService) => actions && actions(service)\n\n    if (alertMissing && !services?.length)\n        return <Alert severity=\"info\">{alertMissing}</Alert>\n\n    return (\n        <Box mb={1}>\n            <Grid container spacing={2}>\n                {services?.map(service => (\n                    <Grid key={service.id} item {...gridBreakpoints}>\n                        <ServiceListItem\n                            service={service}\n                            checked={handleSelected(service)}\n                            toggleChecked={handleChecked(service)}\n                            content={serviceContent(service)}\n                            actions={serviceActions(service)}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n        </Box>\n    )\n}\n","import React, { useContext, useEffect, useState } from \"react\"\nimport {\n    JSONTryParse,\n    readBlobToText,\n    readBlobToUint8Array,\n} from \"../../jacdac-ts/src/jdom/utils\"\nimport DbContext, { DB_VALUE_CHANGE } from \"./DbContext\"\nimport useEffectAsync from \"./useEffectAsync\"\n\nexport function useDbBlob(id: string) {\n    const { db } = useContext(DbContext)\n    const [_value, _setValue] = useState<Blob>(undefined)\n    const values = db?.blobs\n\n    // listen to change\n    useEffect(() => {\n        let _mounted = true\n        return values?.subscribe(DB_VALUE_CHANGE, async changed => {\n            if (changed === id) {\n                try {\n                    const v = await values.get(id)\n                    if (_mounted) {\n                        _setValue(v)\n                    }\n                } catch (e) {\n                    console.log(e)\n                    await values?.set(id, undefined)\n                }\n            }\n            return () => {\n                _mounted = false\n            }\n        })\n    }, [values])\n\n    // load intial value\n    useEffectAsync(\n        async mounted => {\n            try {\n                const v = await values?.get(id)\n                if (mounted()) _setValue(v)\n            } catch (e) {\n                console.log(e)\n                // trash data\n                await values?.set(id, undefined)\n            }\n        },\n        [values]\n    )\n\n    return {\n        blob: _value,\n        setBlob: async (blob: Blob) => {\n            await values?.set(id, blob)\n        },\n    }\n}\n\nexport function useDbUint8Array(blobName: string) {\n    const { blob, setBlob } = useDbBlob(blobName)\n    const [model, setModel] = useState<Uint8Array>(undefined)\n\n    useEffectAsync(\n        async mounted => {\n            if (!blob) {\n                setModel(undefined)\n            } else {\n                const buf = await readBlobToUint8Array(blob)\n                if (mounted()) setModel(buf)\n            }\n        },\n        [blob]\n    )\n\n    return {\n        data: model,\n        setBlob,\n    }\n}\n\nexport function useDbString(blobName: string) {\n    const { blob, setBlob } = useDbBlob(blobName)\n    const [model, setModel] = useState<string>(undefined)\n\n    useEffectAsync(async () => {\n        if (!blob) {\n            setModel(undefined)\n        } else {\n            const t = await readBlobToText(blob)\n            setModel(t)\n        }\n    }, [blob])\n\n    return {\n        data: model,\n        setBlob,\n    }\n}\n\nexport function useDbJSON<T>(blobName: string) {\n    const { data, setBlob } = useDbString(blobName)\n    const value: T = JSONTryParse(data) as T\n    return {\n        value,\n        setBlob: async (blob: Blob) => {\n            await setBlob(blob)\n        },\n    }\n}\n","import Packet from \"../jdom/packet\"\nimport { REPORT_RECEIVE, SRV_MODEL_RUNNER } from \"../jdom/constants\"\nimport JDService from \"../jdom/service\"\nimport { ModelRunnerCmd, ModelRunnerReg } from \"../jdom/constants\"\nimport { bufferToArray, NumberFormat } from \"../jdom/buffer\"\nimport { OutPipe } from \"../jdom/pipes\"\nimport JDRegister from \"../jdom/register\"\nimport { JDServiceClient } from \"../jdom/serviceclient\"\nimport { serviceSpecificationFromClassIdentifier } from \"../jdom/spec\"\nimport { jdunpack } from \"../jdom/pack\"\nimport { assert, read32, toHex, uint8ArrayToString } from \"../jdom/utils\"\n\n/*\n    enum SampleType : u8 {\n        U8 = 0x08\n        I8 = 0x88\n        U16 = 0x10\n        I16 = 0x90\n        U32 = 0x20\n        I32 = 0xA0\n    }\n    rw inputs @ 0x80 {\n        sampling_interval: u16 ms\n        samples_in_window: u16\n        reserved: u32\n    repeats:\n        device_id: devid\n        service_class: u32\n        service_num: u8\n        sample_size: u8 B\n        sample_type: SampleType\n        sample_shift: i8\n    }\n*/\n\nexport function isMLModelSupported(model: Uint8Array, formatRegValue: number) {\n    return (\n        read32(model, 0) == formatRegValue || read32(model, 4) == formatRegValue\n    )\n}\n\nexport function getMLModelFormatName(model: Uint8Array) {\n    const map =\n        serviceSpecificationFromClassIdentifier(SRV_MODEL_RUNNER).enums[\n            \"ModelFormat\"\n        ].members\n    const m0 = read32(model, 0)\n    const m1 = read32(model, 4)\n    for (const v of Object.keys(map)) {\n        if (map[v] == m0 || map[v] == m1) return v\n    }\n    return \"0x\" + toHex(model.slice(0, 8))\n}\n\n/**\n * A client for the model runner service\n * @category Clients\n */\nexport class ModelRunnerClient extends JDServiceClient {\n    constructor(service: JDService) {\n        super(service)\n        assert(service.serviceClass == SRV_MODEL_RUNNER)\n        this.service.registersUseAcks = true\n    }\n\n    // TODO this should use some caching?\n    async isModelSupported(model: Uint8Array) {\n        const reg = this.service.register(ModelRunnerReg.Format)\n        await reg.refresh()\n        return reg.data == null || isMLModelSupported(model, reg.intValue >>> 0)\n    }\n\n    subscribeResults(handler: (sample: number[]) => void): () => void {\n        const reg = this.service.register(ModelRunnerReg.Outputs)\n        return reg.subscribe(REPORT_RECEIVE, () => {\n            handler(bufferToArray(reg.data, NumberFormat.Float32LE))\n        })\n    }\n\n    async deployModel(model: Uint8Array, onProgress?: (p: number) => void) {\n        onProgress?.(0)\n        const resp = await this.service.sendCmdAwaitResponseAsync(\n            Packet.jdpacked(ModelRunnerCmd.SetModel, \"u32\", [model.length]),\n            3000\n        )\n        onProgress?.(0.05)\n        const [pipePort] = jdunpack<[number]>(resp.data, \"u16\")\n        if (!pipePort) throw new Error(\"wrong port \" + pipePort)\n        const pipe = new OutPipe(this.service.device, pipePort)\n        const chunkSize = 224 // has to be divisible by 8\n        for (let i = 0; i < model.length; i += chunkSize) {\n            await pipe.send(model.slice(i, i + chunkSize))\n            onProgress?.(0.05 + (i / model.length) * 0.9)\n        }\n        try {\n            await pipe.close()\n        } catch {\n            // the device may restart before we manage to close\n        }\n        onProgress?.(1)\n    }\n\n    async autoInvoke(everySamples = 1) {\n        await this.service\n            .register(ModelRunnerReg.AutoInvokeEvery)\n            .sendSetPackedAsync([everySamples])\n    }\n\n    private async getReg(id: ModelRunnerReg, f: (v: JDRegister) => any) {\n        const reg = this.service.register(id)\n        await reg.refresh()\n        return f(reg)\n    }\n\n    async modelStats(): Promise<TFModelStats> {\n        const info: any = {\n            modelSize: this.getReg(ModelRunnerReg.ModelSize, r => r.intValue),\n            arenaSize: this.getReg(\n                ModelRunnerReg.AllocatedArenaSize,\n                r => r.intValue\n            ),\n            inputShape: this.getReg(ModelRunnerReg.InputShape, r =>\n                bufferToArray(r.data, NumberFormat.UInt16LE)\n            ),\n            outputShape: this.getReg(ModelRunnerReg.OutputShape, r =>\n                bufferToArray(r.data, NumberFormat.UInt16LE)\n            ),\n            lastError: this.getReg(ModelRunnerReg.LastError, r =>\n                uint8ArrayToString(r.data)\n            ),\n        }\n        for (const id of Object.keys(info)) {\n            info[id] = await info[id]\n        }\n        return info\n    }\n}\nexport default ModelRunnerClient\n\nexport interface TFModelStats {\n    modelSize: number\n    arenaSize: number\n    inputShape: number[]\n    outputShape: number[]\n    lastError: string\n}\n\n/*\nexport async function testAGG(bus: JDBus) {\n    const aggService = bus.services({ serviceClass: SRV_SENSOR_AGGREGATOR })[0]\n    if (!aggService) {\n        console.log(\"no agg service\")\n        return\n    }\n    const agg = new SensorAggregatorClient(aggService)\n\n    let acc = bus.services({ serviceClass: SRV_ACCELEROMETER })\n    if (acc.length == 0) {\n        console.log(\"no acc service\")\n        return\n    }\n\n    await agg.setInputs({\n        samplesInWindow: 50,\n        samplingInterval: 20,\n        inputs: acc\n    })\n\n    agg.subscribeSample(sample => {\n        console.log(\"SAMPLE\", sample)\n    })\n\n}\n\nexport async function testTF(bus: JDBus, model: Uint8Array) {\n    const tfService = bus.services({ serviceClass: SRV_MODEL_RUNNER })[0]\n    if (!tfService) {\n        console.log(\"no tflite service\")\n        return\n    }\n    const tf = new TFLiteClient(tfService)\n\n    if (model)\n        await tf.deployModel(model, p => console.log(\"deploy\", p.toFixed(3)))\n\n    const st = await tf.modelStats()\n    console.log(st)\n\n    const classNames = ['noise', 'punch', 'left', 'right'];\n    tf.subscribeResults(outp => {\n        for (let i = 0; i < outp.length; ++i) {\n            if (outp[i] > 0.7) {\n                console.log(outp[i].toFixed(3) + \" \" + classNames[i])\n            }\n        }\n         console.log(\"OUT\", outp)\n    })\n\n    await tf.autoInvoke(8)\n\n    console.log(\"autoinvoked\")\n\n}\n*/\n","import { Paper } from \"@mui/material\"\nimport React, { useContext } from \"react\"\nimport { serviceName } from \"../../jacdac-ts/src/jdom/pretty\"\nimport {\n    SensorAggregatorConfig,\n    SensorAggregatorInputConfig,\n} from \"../../jacdac-ts/src/clients/sensoraggregatorclient\"\nimport JacdacContext, { JacdacContextProps } from \"../jacdac/Context\"\nimport DeviceName from \"./devices/DeviceName\"\n\nfunction SensorAggregatorInputConfigView(props: {\n    input: SensorAggregatorInputConfig\n}) {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { input } = props\n    const { serviceClass, deviceId, serviceIndex } = input\n\n    const device = deviceId && bus.device(deviceId)\n\n    return (\n        <>\n            {serviceName(serviceClass)}\n            {device && (\n                <DeviceName device={device} serviceIndex={serviceIndex} />\n            )}\n            {!device && deviceId && (\n                <span>\n                    {deviceId}[{serviceIndex}]\n                </span>\n            )}\n            {!deviceId && <span>/ any device</span>}\n        </>\n    )\n}\n\nexport default function SensorAggregatorConfigView(props: {\n    config: SensorAggregatorConfig\n}) {\n    const { config } = props\n\n    if (!config?.inputs) return <></>\n\n    return (\n        <Paper>\n            <ul>\n                <li>\n                    samples interval (ms):{\" \"}\n                    <code>{config.samplingInterval}</code>\n                </li>\n                <li>\n                    samples window (# samples):{\" \"}\n                    <code>{config.samplesInWindow}</code>\n                </li>\n                <li>\n                    inputs ({config.inputs.length})\n                    <ul>\n                        {config.inputs.map((input, i) => (\n                            <li key={\"input\" + i}>\n                                <SensorAggregatorInputConfigView\n                                    input={input}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n                </li>\n            </ul>\n        </Paper>\n    )\n}\n","import React, { useContext, useState } from \"react\"\nimport Alert from \"./ui/Alert\"\nimport AppContext from \"./AppContext\"\n\nexport type ProgressHandler = (p: number) => void\n\nexport default function useCall() {\n    const { setError: setAppError } = useContext(AppContext)\n    const [error, setError] = useState<Error>()\n    const [running, setRunning] = useState(false)\n    const [progress, setProgress] = useState(0)\n\n    const handleProgress = (p: number) => setProgress(p)\n\n    const call = (handler: (onProgress?: ProgressHandler) => void) => {\n        try {\n            setRunning(true)\n            setError(undefined)\n            handler(handleProgress)\n        } catch (e) {\n            setError(e)\n            setAppError(e)\n        } finally {\n            setRunning(false)\n        }\n    }\n    const callAsync = async (\n        handler: (onProgress?: (p: number) => void) => Promise<void>\n    ) => {\n        try {\n            setRunning(true)\n            setError(undefined)\n            await handler(handleProgress)\n        } catch (e) {\n            setError(e)\n            setAppError(e)\n        } finally {\n            setRunning(false)\n        }\n    }\n    const alert = error && <Alert severity=\"error\">{error}</Alert>\n\n    return {\n        running,\n        error,\n        progress,\n        alert,\n        call,\n        callAsync,\n    }\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"\n}), 'Link');","import { List, ListItem, ListItemText, Typography } from \"@mui/material\"\nimport React, { lazy, useContext, useState } from \"react\"\nimport {\n    SRV_SENSOR_AGGREGATOR,\n    SRV_MODEL_RUNNER,\n    ModelRunnerReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport ServiceList from \"../../components/ServiceList\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport { useDbJSON, useDbUint8Array } from \"../../components/useDb\"\nimport Alert from \"../../components/ui/Alert\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport ModelRunnerClient from \"../../../jacdac-ts/src/clients/modelrunnerclient\"\nimport RegisterInput from \"../../components/RegisterInput\"\nimport CircularProgressWithLabel from \"../../components/ui/CircularProgressWithLabel\"\nimport SensorAggregatorClient, {\n    SensorAggregatorConfig,\n} from \"../../../jacdac-ts/src/clients/sensoraggregatorclient\"\nimport SensorAggregatorConfigView from \"../../components/SensorAggregatorConfigView\"\nimport ServiceManagerContext from \"../../components/ServiceManagerContext\"\nimport useChange from \"../../jacdac/useChange\"\nimport { IFile } from \"../../../jacdac-ts/src/embed/protocol\"\nimport { prettySize } from \"../../../jacdac-ts/src/jdom/pretty\"\nimport RegisterTrend from \"../../components/RegisterTrend\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useCall from \"../../components/useCall\"\n\nimport Suspense from \"../../components/ui/Suspense\"\nimport { Link } from \"@mui/icons-material\"\nimport useRegister from \"../../components/hooks/useRegister\"\nconst ImportButton = lazy(() => import(\"../../components/ImportButton\"))\n\nexport function ModelContent(props: { service: JDService }) {\n    const { service } = props\n\n    const modelSizeRegister = useRegister(service, ModelRunnerReg.ModelSize)\n    const lastErrorRegister = useRegister(service, ModelRunnerReg.LastError)\n    const autoInvokeEveryRegister = useRegister(\n        service,\n        ModelRunnerReg.AutoInvokeEvery\n    )\n    const outputsRegister = useRegister(service, ModelRunnerReg.Outputs)\n\n    const [modelSize] = useRegisterUnpackedValue<[number]>(modelSizeRegister)\n    const [lastError] = useRegisterUnpackedValue<[number]>(lastErrorRegister)\n\n    return (\n        <>\n            {lastError && <Alert severity=\"warning\">{lastError}</Alert>}\n            <Typography>\n                model size:{\" \"}\n                {modelSize === undefined ? \"...\" : prettySize(modelSize)}\n            </Typography>\n            <RegisterInput register={autoInvokeEveryRegister} visible={true} />\n            <RegisterTrend showName register={outputsRegister} mini={true} />\n        </>\n    )\n}\n\nexport function ModelActions(props: {\n    service: JDService\n    model: Uint8Array\n    sensorAggregatorService?: JDService\n    sensorInput?: SensorAggregatorConfig\n}) {\n    const { service, model, sensorAggregatorService, sensorInput } = props\n    const { running, progress, alert, callAsync } = useCall()\n\n    const modelDisabled = !service || !model || running\n\n    const handleDeployModel = async () =>\n        await callAsync(async setProgress => {\n            if (sensorAggregatorService && sensorInput) {\n                const aggregator = new SensorAggregatorClient(\n                    sensorAggregatorService\n                )\n                await aggregator.setInputs(sensorInput)\n            }\n            if (service && model) {\n                const runner = new ModelRunnerClient(service)\n                await runner.deployModel(model, setProgress)\n            }\n        })\n\n    return (\n        <>\n            {!running && (\n                <Button\n                    disabled={modelDisabled}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleDeployModel}\n                >\n                    {sensorInput\n                        ? \"Deploy model and configuration\"\n                        : \"Deploy model\"}\n                </Button>\n            )}\n            {running && <CircularProgressWithLabel value={progress * 100} />}\n            {alert}\n        </>\n    )\n}\n\nexport default function ModelUploader() {\n    const [importing, setImporting] = useState(false)\n    const { data: model, setBlob: setModel } = useDbUint8Array(\"model.tflite\")\n    const { value: sensorConfig, setBlob: setSensorConfig } =\n        useDbJSON<SensorAggregatorConfig>(\"sensor-input.json\")\n    const { modelStore } = useContext(ServiceManagerContext)\n\n    const handleTfmodelFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setModel(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearModel = async () => {\n        try {\n            setImporting(true)\n            await setModel(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleSensorConfigFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setSensorConfig(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearConfiguration = async () => {\n        try {\n            setImporting(true)\n            await setSensorConfig(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadModel = (model: IFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model)\n            console.log(`loaded content`, blob)\n            if (blob) {\n                setModel(blob)\n            }\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadInputConfiguration = (model: IFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model)\n            console.log(`loaded content`, blob)\n            if (blob) {\n                setSensorConfig(blob)\n            }\n        } finally {\n            setImporting(false)\n        }\n    }\n\n    const models = useChange(modelStore, _ => _?.models())\n    const inputConfigurations = useChange(modelStore, _ =>\n        _?.inputConfigurations()\n    )\n\n    return (\n        <>\n            <h1>Model uploader</h1>\n            <p>\n                Upload Machine Learning Models (like TensorFlow Lite) into your{\" \"}\n                <Link to=\"/services/model-runner/\">ML module runners</Link>.\n            </p>\n            <h3>Load a machine learning model</h3>\n            <p>\n                Machine learning models are typically stored in a{\" \"}\n                <code>.tflite</code> file.\n            </p>\n            {model && (\n                <Alert severity={\"success\"}>\n                    Model loaded ({prettySize(model.byteLength)})\n                </Alert>\n            )}\n            {model && <p />}\n            <Suspense>\n                <ImportButton\n                    disabled={importing}\n                    text={\"Import model\"}\n                    onFilesUploaded={handleTfmodelFiles}\n                />\n            </Suspense>\n            <Button\n                aria-label=\"clear model\"\n                disabled={importing}\n                onClick={handleClearModel}\n            >\n                clear model\n            </Button>\n            {models?.length && (\n                <List>\n                    {models.map(model => (\n                        <ListItem\n                            key={model.path}\n                            button\n                            onClick={handleLoadModel(model)}\n                        >\n                            <ListItemText\n                                primary={model.name}\n                                secondary={`${model.path} ${prettySize(\n                                    model.size\n                                )}`}\n                            />\n                        </ListItem>\n                    ))}\n                </List>\n            )}\n            <h3>Configure sensors</h3>\n            <p>\n                Sensor configuration files are stored in a <code>.jd.json</code>{\" \"}\n                file.\n            </p>\n            {sensorConfig && (\n                <Alert severity={\"success\"}>Sensor configuration loaded</Alert>\n            )}\n            {sensorConfig && (\n                <SensorAggregatorConfigView config={sensorConfig} />\n            )}\n            {sensorConfig && <p />}\n            <Suspense>\n                <ImportButton\n                    disabled={importing}\n                    text={\"Import configuration\"}\n                    onFilesUploaded={handleSensorConfigFiles}\n                />\n            </Suspense>\n            <Button\n                aria-label=\"clear configuration\"\n                disabled={importing}\n                onClick={handleClearConfiguration}\n            >\n                clear configuration\n            </Button>\n            {inputConfigurations?.length && (\n                <List>\n                    {inputConfigurations.map(iconfig => (\n                        <ListItem\n                            key={iconfig.path}\n                            button\n                            onClick={handleLoadInputConfiguration(iconfig)}\n                        >\n                            <ListItemText\n                                primary={iconfig.name}\n                                secondary={`${iconfig.path} ${prettySize(\n                                    iconfig.size\n                                )}`}\n                            />\n                        </ListItem>\n                    ))}\n                </List>\n            )}\n            <h3>Deploy model to machine learning services</h3>\n            <ConnectAlert serviceClass={SRV_MODEL_RUNNER} />\n            <ServiceList\n                serviceClass={SRV_MODEL_RUNNER}\n                content={service => <ModelContent service={service} />}\n                actions={service => (\n                    <ModelActions\n                        service={service}\n                        model={model}\n                        sensorAggregatorService={\n                            service?.device.services({\n                                serviceClass: SRV_SENSOR_AGGREGATOR,\n                            })?.[0]\n                        }\n                        sensorInput={sensorConfig}\n                    />\n                )}\n            />\n        </>\n    )\n}\n"],"names":["SensorAggregatorReg","SensorAggregatorSampleType","SRV_SENSOR_AGGREGATOR","bufferToArray","NumberFormat","JD_SERIAL_MAX_PAYLOAD_SIZE","REPORT_RECEIVE","jdpack","JDServiceClient","isReading","serviceSpecificationFromClassIdentifier","assert","bufferConcat","bufferConcatMany","fromHex","SensorAggregatorClient","service","serviceClass","registersUseAcks","setInputs","cfg","error","msg","Error","mapType","tp","U8","U16","U32","I8","I16","I32","inputs","totalSampleSize","map","input","deviceId","serviceIndex","specification","toString","freeze","readingReg","packets","find","sampleType","undefined","sampleSize","sampleShift","field","fields","Math","abs","storage","shift","Uint8Array","unshift","samplingInterval","samplesInWindow","register","Inputs","sendSetAsync","collect","numSamples","StreamingSamples","sendSetPackedAsync","subscribeSample","handler","reg","CurrentSample","mount","subscribe","data","Float32LE","getReg","id","f","refresh","stats","info","NumSamples","r","intValue","SampleSize","Object","keys","Box","Alert","React","useContext","JacdacContext","NoSsr","ConnectButtons","useDevices","NoSsrConnectAlert","props","closeable","bus","transports","devices","ignoreInfrastructure","spec","length","name","ConnectAlert","Button","ConnectionState","Badge","IconButtonWithProgress","TransportIcon","useChange","useMediaQueries","ConnectButton","full","className","transparent","transport","onClick","typeInTitle","type","connectionState","t","showDisconnect","Connected","Disconnecting","inProgress","Connecting","mobile","small","disabled","Disconnected","handleClick","disconnect","connect","icon","label","title","trackName","trackProperties","useState","IconButtonWithTooltip","AppContext","JacdacIcon","DisconnectedButton","toggleShowConnectTransportDialog","working","setWorking","handleConnect","connected","rest","disconnected","_","filter","tr","useDeviceSpecification","useDeviceImage","CardMediaWithSkeleton","DeviceCardMedia","device","imageUrl","ControlReg","CardHeader","Chip","Typography","Link","useRegisterUnpackedValue","DeviceActions","DeviceName","identifierToUrlPath","DeviceAvatar","Flags","DeviceProductIdentifierChip","ProductIdentifier","productIdentifier","isNaN","DeviceFirmwareVersionChip","firmwareVersionRegister","FirmwareVersion","firmwareVersion","DeviceTemperatureChip","tempRegister","McuTemperature","temperature","DeviceCardHeader","showFirmware","showTemperature","showMedia","showDeviceId","showAvatar","showSettings","showReset","s","join","diagnostics","SvgIcon","SerialIcon","UsbIcon","BluetoothIcon","WifiIcon","BLUETOOTH_TRANSPORT","PACKETIO_TRANSPORT","SERIAL_TRANSPORT","USB_TRANSPORT","WEBSOCKET_TRANSPORT","VIRTUAL_DEVICE_NODE_NAME","KindIcon","GatsbyButton","useAnalytics","trackEvent","ev","CircularProgress","CircularProgressWithLabel","round","value","DrawerType","useGridBreakpoints","itemCount","drawerType","xs","sm","md","lg","xl","None","Grid","CardContent","Card","CardActions","Switch","DeviceLostAlert","ServiceListItem","content","checked","checkedDisabled","toggleChecked","actions","handleCheck","ServiceList","selected","toggleSelected","alertMissing","services","n","gridBreakpoints","handleSelected","handleChecked","serviceContent","serviceActions","useEffect","JSONTryParse","readBlobToText","readBlobToUint8Array","DbContext","DB_VALUE_CHANGE","useEffectAsync","useDbBlob","db","_value","_setValue","values","blobs","_mounted","changed","v","get","e","console","log","set","mounted","blob","setBlob","useDbUint8Array","blobName","model","setModel","buf","useDbString","useDbJSON","Packet","SRV_MODEL_RUNNER","ModelRunnerCmd","ModelRunnerReg","OutPipe","jdunpack","read32","toHex","uint8ArrayToString","isMLModelSupported","formatRegValue","getMLModelFormatName","enums","members","m0","m1","slice","ModelRunnerClient","isModelSupported","Format","subscribeResults","Outputs","deployModel","onProgress","resp","sendCmdAwaitResponseAsync","jdpacked","SetModel","pipePort","pipe","chunkSize","i","send","close","autoInvoke","everySamples","AutoInvokeEvery","modelStats","modelSize","ModelSize","arenaSize","AllocatedArenaSize","inputShape","InputShape","UInt16LE","outputShape","OutputShape","lastError","LastError","Paper","serviceName","SensorAggregatorInputConfigView","SensorAggregatorConfigView","config","useCall","setError","setAppError","running","setRunning","progress","setProgress","handleProgress","p","call","callAsync","alert","List","ListItem","ListItemText","lazy","RegisterInput","ServiceManagerContext","prettySize","RegisterTrend","Suspense","useRegister","ImportButton","ModelContent","modelSizeRegister","lastErrorRegister","autoInvokeEveryRegister","outputsRegister","ModelActions","sensorAggregatorService","sensorInput","modelDisabled","handleDeployModel","aggregator","runner","ModelUploader","importing","setImporting","sensorConfig","setSensorConfig","modelStore","handleTfmodelFiles","files","file","handleClearModel","handleSensorConfigFiles","handleClearConfiguration","handleLoadModel","loadFile","handleLoadInputConfiguration","models","inputConfigurations","byteLength","path","size","iconfig"],"sourceRoot":""}