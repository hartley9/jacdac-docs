{"version":3,"file":"7364-04bc060425c69fa9b44c.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;CAaA;;AACA;AAEA;AACA;AAEA,IAAMe,WAAW,GAAG,SAApB;AACA,IAAMC,UAAU,GAAG,UAAnB;AACA,IAAMC,WAAW,GAAG,SAApB;AACA,IAAMC,UAAU,GAAG,UAAnB;AACA,IAAMC,MAAM,GAAG,QAAf;AACA,IAAMC,KAAK,GAAG,OAAd;AAEe,SAASC,mBAAT,CAA6BC,KAA7B,EAKZ;AACC,MAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,MAAjB;AAAyBC,IAAAA;AAAzB,MAAuCJ,KAA7C;AAEA,MAAM;AAAA,OAACK,cAAD;AAAA,OAAiBC;AAAjB,MAAsC3B,+CAAQ,CAAC,EAAD,CAApD;AACA,MAAM;AAAA,OAAC4B,cAAD;AAAA,OAAiBC;AAAjB,MAAsC7B,+CAAQ,CAAC,SAAD,CAApD;;AAEA,MAAM8B,qBAAqB,GAAG,MAAM;AAChC,QAAMC,iBAAiB,GAAGL,cAAc,IAAI,aAA5C,CADgC,CAEhC;;AACA,QAAIE,cAAJ,EAAoB;AAChB,UAAI,CAAChB,kEAAA,CAA8BmB,iBAA9B,EAAiDN,SAAjD,CAAL,EAAkE;AAC9D;AACAA,QAAAA,SAAS,CAACQ,cAAV,CACIF,iBADJ,EAEIlB,yFAFJ;AAIH,OAPe,CAShB;;;AACA,UAAIe,cAAc,IAAId,WAAtB,EAAmC;AAC/BH,QAAAA,6DAAA,CACIA,4DAAA,2GACsGoB,iBADtG,6nCADJ,EAIIN,SAJJ;AAMH,OAPD,MAOO,IAAIG,cAAc,IAAIZ,WAAtB,EAAmC;AACtCL,QAAAA,6DAAA,CACIA,4DAAA,2GACsGoB,iBADtG,6nCADJ,EAIIN,SAJJ;AAMH,OAPM,MAOA,IAAIG,cAAc,IAAIb,UAAtB,EAAkC;AACrCJ,QAAAA,6DAAA,CACIA,4DAAA,2GACsGoB,iBADtG,y9DADJ,EAIIN,SAJJ;AAMH,OAPM,MAOA,IAAIG,cAAc,IAAIX,UAAtB,EAAkC;AACrCN,QAAAA,6DAAA,CACIA,4DAAA,2GACsGoB,iBADtG,y9DADJ,EAIIN,SAJJ;AAMH,OAPM,MAOA,IAAIG,cAAc,IAAIV,MAAtB,EAA8B;AACjCP,QAAAA,6DAAA,CACIA,4DAAA,2GACsGoB,iBADtG,qnCADJ,EAIIN,SAJJ;AAMH,OAPM,MAOA,IAAIG,cAAc,IAAIT,KAAtB,EAA6B;AAChCR,QAAAA,6DAAA,CACIA,4DAAA,2GACsGoB,iBADtG,iTADJ,EAIIN,SAJJ;AAMH;AACJ;AACJ,GAzDD;AA2DA;;;AACA,MAAMY,0BAA0B,GAC5BC,KAD+B,IAE9B;AACDX,IAAAA,iBAAiB,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,EAAD,CAAjB;AACH,GAJD;;AAMA,MAAMC,0BAA0B,GAC5BJ,KAD+B,IAE9B;AACDT,IAAAA,iBAAiB,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAjB;AACH,GAJD;;AAMA,MAAMG,YAAY,GAAG,MAAM;AACvB;AACAnB,IAAAA,MAAM;AACT,GAHD;;AAKA,MAAMoB,UAAU,GAAG,MAAM;AACrB;AACAd,IAAAA,qBAAqB,GAFA,CAIrB;;AACAN,IAAAA,MAAM;AACT,GAND;;AAQA,sBACI,iDAAC,8DAAD;AAAQ,QAAI,EAAED,IAAd;AAAoB,WAAO,EAAEqB;AAA7B,kBACI,iDAAC,8DAAD,qBACI,iDAAC,+DAAD;AAAM,aAAS,MAAf;AAAgB,aAAS,EAAE;AAA3B,kBACI,iDAAC,+DAAD;AAAM,QAAI;AAAV,kBACI,qFADJ,eAEI,iDAAC,8DAAD;AACI,aAAS,EAAEtB,OAAO,CAACuB,KADvB;AAEI,SAAK,EAAC,iBAFV;AAGI,gBAAY,EAAC,aAHjB;AAII,WAAO,EAAC,UAJZ;AAKI,YAAQ,EAAER;AALd,IAFJ,CADJ,eAWI,iDAAC,+DAAD;AAAM,QAAI;AAAV,kBACI,iDAAC,8DAAD;AAAY,MAAE,EAAC;AAAf,0BACsB,GADtB,CADJ,eAII,iDAAC,8DAAD;AACI,WAAO,EAAC,eADZ;AAEI,aAAS,EAAEf,OAAO,CAACuB,KAFvB;AAGI,SAAK,EAAEjB,cAHX;AAII,WAAO,EAAC,UAJZ;AAKI,YAAQ,EAAEc;AALd,kBAOI,iDAAC,8DAAD;AAAU,SAAK,EAAE5B;AAAjB,sBAPJ,eAUI,iDAAC,8DAAD;AAAU,SAAK,EAAEE;AAAjB,sBAVJ,eAaI,iDAAC,8DAAD;AAAU,SAAK,EAAED;AAAjB,uBAbJ,eAgBI,iDAAC,8DAAD;AAAU,SAAK,EAAEE;AAAjB,uBAhBJ,eAmBI,iDAAC,8DAAD;AAAU,SAAK,EAAEC;AAAjB,0BAnBJ,eAsBI,iDAAC,8DAAD;AAAU,SAAK,EAAEC;AAAjB,aAtBJ,CAJJ,CAXJ,CADJ,CADJ,eA4CI,iDAAC,+DAAD,qBACI,iDAAC,+DAAD;AAAQ,WAAO,EAAC,WAAhB;AAA4B,WAAO,EAAEwB;AAArC,cADJ,eAII,iDAAC,+DAAD;AACI,WAAO,EAAC,WADZ;AAEI,SAAK,EAAC,SAFV;AAGI,WAAO,eAAE,iDAAC,kFAAD,OAHb;AAII,WAAO,EAAEC;AAJb,YAJJ,CA5CJ,CADJ;AA4DH","sources":["webpack://jacdac-docs/./src/components/dialogs/mb/NewClassifierDialog.tsx"],"sourcesContent":["import React, { useState } from \"react\"\n\nimport {\n    Button,\n    Grid,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n} from \"@mui/material\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\"\n\nimport Blockly, { Variables, WorkspaceSvg } from \"blockly\"\nimport { MB_CLASSIFIER_VAR_TYPE } from \"../../model-editor/modelblockdsl\"\n\nconst FIVE_CNN_1D = \"5-cnn1d\"\nconst TEN_CNN_1D = \"10-cnn1d\"\nconst FIVE_CNN_2D = \"5-cnn2d\"\nconst TEN_CNN_2D = \"10-cnn2d\"\nconst FC_ANN = \"fc-ann\"\nconst EMPTY = \"empty\"\n\nexport default function NewClassifierDialog(props: {\n    classes: any\n    open: boolean\n    onDone: () => void\n    workspace: WorkspaceSvg\n}) {\n    const { classes, open, onDone, workspace } = props\n\n    const [classifierName, setClassifierName] = useState(\"\")\n    const [classifierType, setClassifierType] = useState(\"5-cnn2d\")\n\n    const addNewClassifierBlock = () => {\n        const newClassifierName = classifierName || \"classifier1\"\n        // check if name is already used\n        if (classifierType) {\n            if (!Variables.nameUsedWithAnyType(newClassifierName, workspace)) {\n                // get or create new classifier typed variable\n                workspace.createVariable(\n                    newClassifierName,\n                    MB_CLASSIFIER_VAR_TYPE\n                )\n            }\n\n            // create new block with new classifier name\n            if (classifierType == FIVE_CNN_1D) {\n                Blockly.Xml.domToBlock(\n                    Blockly.Xml.textToDom(\n                        `<block type=\"model_block_nn\"><field name=\"CLASSIFIER_NAME\" variabletype=\"ModelBlockClassifier\">${newClassifierName}</field><field name=\"NN_TRAINING\" variabletype=\"ModelBlockDataSet\">dataset1</field><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"optimizer\":\"adam\",\"numEpochs\":200,\"lossFn\":\"categoricalCrossentropy\",\"metrics\":\"acc\"}</field><field name=\"NN_BUTTONS\">{}</field><statement name=\"LAYER_INPUTS\"><block type=\"model_block_conv1d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numFilters\":16,\"kernelSize\":4,\"strideSize\":1,\"activation\":\"relu\"}</field><next><block type=\"model_block_maxpool1d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"poolSize\":2,\"strideSize\":1}</field><next><block type=\"model_block_dropout_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"rate\":0.1}</field><next><block type=\"model_block_flatten_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false}</field><next><block type=\"model_block_dense_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numUnits\":4,\"activation\":\"softmax\"}</field></block></next></block></next></block></next></block></next></block></statement></block>`\n                    ),\n                    workspace\n                )\n            } else if (classifierType == FIVE_CNN_2D) {\n                Blockly.Xml.domToBlock(\n                    Blockly.Xml.textToDom(\n                        `<block type=\"model_block_nn\"><field name=\"CLASSIFIER_NAME\" variabletype=\"ModelBlockClassifier\">${newClassifierName}</field><field name=\"NN_TRAINING\" variabletype=\"ModelBlockDataSet\">dataset1</field><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"optimizer\":\"adam\",\"numEpochs\":200,\"lossFn\":\"categoricalCrossentropy\",\"metrics\":\"acc\"}</field><field name=\"NN_BUTTONS\">{}</field><statement name=\"LAYER_INPUTS\"><block type=\"model_block_conv2d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numFilters\":16,\"kernelSize\":4,\"strideSize\":1,\"activation\":\"relu\"}</field><next><block type=\"model_block_maxpool2d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"poolSize\":2,\"strideSize\":1}</field><next><block type=\"model_block_dropout_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"rate\":0.1}</field><next><block type=\"model_block_flatten_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false}</field><next><block type=\"model_block_dense_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numUnits\":4,\"activation\":\"softmax\"}</field></block></next></block></next></block></next></block></next></block></statement></block>`\n                    ),\n                    workspace\n                )\n            } else if (classifierType == TEN_CNN_1D) {\n                Blockly.Xml.domToBlock(\n                    Blockly.Xml.textToDom(\n                        `<block type=\"model_block_nn\"><field name=\"CLASSIFIER_NAME\" variabletype=\"ModelBlockClassifier\">${newClassifierName}</field><field name=\"NN_TRAINING\" variabletype=\"ModelBlockDataSet\">dataset1</field><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"optimizer\":\"adam\",\"numEpochs\":200,\"lossFn\":\"categoricalCrossentropy\",\"metrics\":\"acc\"}</field><field name=\"NN_BUTTONS\">{}</field><statement name=\"LAYER_INPUTS\"><block type=\"model_block_conv1d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numFilters\":16,\"kernelSize\":4,\"strideSize\":1,\"activation\":\"relu\"}</field><next><block type=\"model_block_maxpool1d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"poolSize\":2,\"strideSize\":1}</field><next><block type=\"model_block_dropout_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"rate\":0.1}</field><next><block type=\"model_block_conv1d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numFilters\":16,\"kernelSize\":2,\"strideSize\":1,\"activation\":\"relu\"}</field><next><block type=\"model_block_maxpool1d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"poolSize\":2,\"strideSize\":1}</field><next><block type=\"model_block_dropout_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"rate\":0.1}</field><next><block type=\"model_block_conv1d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numFilters\":16,\"kernelSize\":2,\"strideSize\":1,\"activation\":\"relu\"}</field><next><block type=\"model_block_dropout_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"rate\":0.1}</field><next><block type=\"model_block_flatten_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false}</field><next><block type=\"model_block_dense_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numUnits\":4,\"activation\":\"softmax\"}</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block>`\n                    ),\n                    workspace\n                )\n            } else if (classifierType == TEN_CNN_2D) {\n                Blockly.Xml.domToBlock(\n                    Blockly.Xml.textToDom(\n                        `<block type=\"model_block_nn\"><field name=\"CLASSIFIER_NAME\" variabletype=\"ModelBlockClassifier\">${newClassifierName}</field><field name=\"NN_TRAINING\" variabletype=\"ModelBlockDataSet\">dataset1</field><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"optimizer\":\"adam\",\"numEpochs\":200,\"lossFn\":\"categoricalCrossentropy\",\"metrics\":\"acc\"}</field><field name=\"NN_BUTTONS\">{}</field><statement name=\"LAYER_INPUTS\"><block type=\"model_block_conv2d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numFilters\":16,\"kernelSize\":4,\"strideSize\":1,\"activation\":\"relu\"}</field><next><block type=\"model_block_maxpool2d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"poolSize\":2,\"strideSize\":1}</field><next><block type=\"model_block_dropout_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"rate\":0.1}</field><next><block type=\"model_block_conv2d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numFilters\":16,\"kernelSize\":2,\"strideSize\":1,\"activation\":\"relu\"}</field><next><block type=\"model_block_maxpool2d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"poolSize\":2,\"strideSize\":1}</field><next><block type=\"model_block_dropout_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"rate\":0.1}</field><next><block type=\"model_block_conv2d_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numFilters\":16,\"kernelSize\":2,\"strideSize\":1,\"activation\":\"relu\"}</field><next><block type=\"model_block_dropout_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"rate\":0.1}</field><next><block type=\"model_block_flatten_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false}</field><next><block type=\"model_block_dense_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numUnits\":4,\"activation\":\"softmax\"}</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block>`\n                    ),\n                    workspace\n                )\n            } else if (classifierType == FC_ANN) {\n                Blockly.Xml.domToBlock(\n                    Blockly.Xml.textToDom(\n                        `<block type=\"model_block_nn\"><field name=\"CLASSIFIER_NAME\" variabletype=\"ModelBlockClassifier\">${newClassifierName}</field><field name=\"NN_TRAINING\" variabletype=\"ModelBlockDataSet\">dataset1</field><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"optimizer\":\"adam\",\"numEpochs\":200,\"lossFn\":\"categoricalCrossentropy\",\"metrics\":\"acc\"}</field><field name=\"NN_BUTTONS\">{}</field><statement name=\"LAYER_INPUTS\"><block type=\"model_block_flatten_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false}</field><next><block type=\"model_block_dense_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numUnits\":16,\"activation\":\"relu\"}</field><next><block type=\"model_block_dense_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numUnits\":16,\"activation\":\"relu\"}</field><next><block type=\"model_block_dense_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numUnits\":16,\"activation\":\"relu\"}</field><next><block type=\"model_block_dense_layer\"><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"numUnits\":4,\"activation\":\"softmax\"}</field></block></next></block></next></block></next></block></next></block></statement></block>`\n                    ),\n                    workspace\n                )\n            } else if (classifierType == EMPTY) {\n                Blockly.Xml.domToBlock(\n                    Blockly.Xml.textToDom(\n                        `<block type=\"model_block_nn\"><field name=\"CLASSIFIER_NAME\" variabletype=\"ModelBlockClassifier\">${newClassifierName}</field><field name=\"NN_TRAINING\" variabletype=\"ModelBlockDataSet\">dataset1</field><field name=\"EXPAND_BUTTON\">{\"parametersVisible\":false,\"optimizer\":\"adam\",\"numEpochs\":200,\"lossFn\":\"categoricalCrossentropy\",\"metrics\":\"acc\"}</field><field name=\"NN_BUTTONS\">{}</field></block>`\n                    ),\n                    workspace\n                )\n            }\n        }\n    }\n\n    /* For interface controls */\n    const handleClassifierNameChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        setClassifierName(event.target.value.trim())\n    }\n\n    const handleClassifierTypeChange = (\n        event: React.ChangeEvent<{ value: unknown }>\n    ) => {\n        setClassifierType(event.target.value as string)\n    }\n\n    const handleCancel = () => {\n        // call the done function\n        onDone()\n    }\n\n    const handleDone = () => {\n        // create and add the new block\n        addNewClassifierBlock()\n\n        // call the done function\n        onDone()\n    }\n\n    return (\n        <Dialog open={open} onClose={handleDone}>\n            <DialogContent>\n                <Grid container direction={\"column\"}>\n                    <Grid item>\n                        <h3>Create new classifier</h3>\n                        <TextField\n                            className={classes.field}\n                            label=\"Classifier name\"\n                            defaultValue=\"classifier1\"\n                            variant=\"outlined\"\n                            onChange={handleClassifierNameChange}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <InputLabel id=\"starter-label\">\n                            Base architecture{\" \"}\n                        </InputLabel>\n                        <Select\n                            labelId=\"starter-label\"\n                            className={classes.field}\n                            value={classifierType}\n                            variant=\"outlined\"\n                            onChange={handleClassifierTypeChange}\n                        >\n                            <MenuItem value={FIVE_CNN_1D}>\n                                5-Layer 1D CNN\n                            </MenuItem>\n                            <MenuItem value={FIVE_CNN_2D}>\n                                5-Layer 2D CNN\n                            </MenuItem>\n                            <MenuItem value={TEN_CNN_1D}>\n                                10-Layer 1D CNN\n                            </MenuItem>\n                            <MenuItem value={TEN_CNN_2D}>\n                                10-Layer 2D CNN\n                            </MenuItem>\n                            <MenuItem value={FC_ANN}>\n                                Fully Connected NN\n                            </MenuItem>\n                            <MenuItem value={EMPTY}>Empty</MenuItem>\n                        </Select>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"contained\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    endIcon={<NavigateNextIcon />}\n                    onClick={handleDone}\n                >\n                    Done\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n"],"names":["React","useState","Button","Grid","Dialog","DialogActions","DialogContent","InputLabel","MenuItem","Select","TextField","NavigateNextIcon","Blockly","Variables","MB_CLASSIFIER_VAR_TYPE","FIVE_CNN_1D","TEN_CNN_1D","FIVE_CNN_2D","TEN_CNN_2D","FC_ANN","EMPTY","NewClassifierDialog","props","classes","open","onDone","workspace","classifierName","setClassifierName","classifierType","setClassifierType","addNewClassifierBlock","newClassifierName","nameUsedWithAnyType","createVariable","Xml","domToBlock","textToDom","handleClassifierNameChange","event","target","value","trim","handleClassifierTypeChange","handleCancel","handleDone","field"],"sourceRoot":""}