{"version":3,"file":"component---src-pages-tools-flood-test-tsx-1a3cbad73710744f0dab.js","mappings":"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","sources":["webpack://jacdac-docs/./src/components/alert/ConnectAlert.tsx","webpack://jacdac-docs/./src/components/ui/GridHeader.tsx","webpack://jacdac-docs/./src/pages/tools/flood-test.tsx"],"sourcesContent":["// tslint:disable-next-line: no-submodule-imports\nimport { Box } from \"@material-ui/core\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport React, { useContext } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport { NoSsr } from \"@material-ui/core\"\nimport useChange from \"../../jacdac/useChange\"\nimport ConnectButtons from \"../buttons/ConnectButtons\"\n\nfunction NoSsrConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    const { serviceClass, closeable } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { transports } = bus\n    const devices = useChange(bus, b =>\n        b.devices({ serviceClass, ignoreInfrastructure: true })\n    )\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n\n    // don't show if no transport, some devices\n    if (!transports.length || devices?.length) return null\n\n    return (\n        <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={closeable}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                <Box component=\"span\" ml={2}>\n                    <ConnectButtons full=\"always\" transparent={true} />\n                </Box>\n            </Alert>\n        </Box>\n    )\n}\n\nexport default function ConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    return (\n        <NoSsr>\n            <NoSsrConnectAlert {...props} />\n        </NoSsr>\n    )\n}\n","import {\n    Box,\n    Chip,\n    createStyles,\n    Grid,\n    makeStyles,\n    Typography,\n} from \"@material-ui/core\"\nimport React from \"react\"\nimport clsx from \"clsx\"\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        hr: {\n            background: theme.palette.text.disabled,\n            marginBottom: \"unset\",\n        },\n        start: {\n            width: theme.spacing(2),\n        },\n    })\n)\n\nexport default function GridHeader(props: {\n    title?: string\n    count?: number\n    variant?: \"subtitle1\" | \"caption\" | \"subtitle2\"\n    action?: JSX.Element\n}) {\n    const { title, count, variant, action } = props\n    const classes = useStyles()\n    return (\n        <Grid item xs={12}>\n            <Grid\n                container\n                direction=\"row\"\n                spacing={1}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item>\n                    <hr className={clsx(classes.hr, classes.start)} />\n                </Grid>\n                <Grid item>\n                    {action && (\n                        <Box component=\"span\" mr={1}>\n                            {action}\n                        </Box>\n                    )}\n                    <Typography\n                        component=\"span\"\n                        variant={variant || \"subtitle1\"}\n                    >\n                        {title}\n                    </Typography>\n                    {count !== undefined && (\n                        <Box component=\"span\" ml={0.5}>\n                            <Chip label={count} />\n                        </Box>\n                    )}\n                </Grid>\n                <Grid item xs>\n                    <hr className={classes.hr} />\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n","import {\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Grid,\n    TextField,\n} from \"@material-ui/core\"\nimport React, { ChangeEvent, useState } from \"react\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport CmdButton from \"../../components/CmdButton\"\nimport { ControlCmd } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport ConnectButtons from \"../../components/buttons/ConnectButtons\"\n\nfunction FloodCard(props: {\n    device: JDDevice\n    numResponses: number\n    startCounter: number\n    size: number\n}) {\n    const { device, numResponses, startCounter, size } = props\n    const handleClick = async () => {\n        const service = device.service(0)\n        const data = jdpack<[number, number, number]>(\"u32 u32 u8\", [\n            numResponses,\n            startCounter,\n            size,\n        ])\n        await service.sendCmdAsync(ControlCmd.FloodPing, data)\n    }\n    return (\n        <Card>\n            <DeviceCardHeader device={device} />\n            <CardActions>\n                <CmdButton onClick={handleClick}>Flood</CmdButton>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function Page() {\n    const devices = useDevices({})\n    const [numResponses, setNumResponses] = useState(100)\n    const [startCounter, setStartCounter] = useState(0)\n    const [size, setSize] = useState(32)\n\n    const handleChangeNumberResponses = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setNumResponses(i)\n    }\n    const handleChangeStartCounter = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setStartCounter(Math.max(0, i))\n    }\n    const handleChangeSize = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setSize(Math.max(1, i))\n    }\n\n    return (\n        <>\n            <h1>Flood Test</h1>\n            <Card>\n                <CardHeader title=\"Configuration\" />\n                <CardContent>\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <TextField\n                                label=\"number of responses\"\n                                value={numResponses}\n                                onChange={handleChangeNumberResponses}\n                                type=\"number\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"start counter\"\n                                value={startCounter}\n                                onChange={handleChangeStartCounter}\n                                type=\"number\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"size\"\n                                value={size}\n                                onChange={handleChangeSize}\n                                type=\"number\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n            <Grid container spacing={1}>\n                <GridHeader\n                    action={<ConnectButtons full={false} transparent={true} />}\n                    title={\"Devices\"}\n                />\n                {devices.map(device => (\n                    <Grid key={device.id} item>\n                        <FloodCard\n                            device={device}\n                            numResponses={numResponses}\n                            startCounter={startCounter}\n                            size={size}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n            <ConnectAlert />\n        </>\n    )\n}\n"],"names":["Box","Alert","React","useContext","serviceSpecificationFromClassIdentifier","JacdacContext","NoSsr","useChange","ConnectButtons","NoSsrConnectAlert","props","serviceClass","closeable","bus","transports","devices","b","ignoreInfrastructure","spec","length","name","ConnectAlert","Chip","createStyles","Grid","makeStyles","Typography","clsx","useStyles","theme","hr","background","palette","text","disabled","marginBottom","start","width","spacing","GridHeader","title","count","variant","action","classes","undefined","Card","CardActions","CardContent","CardHeader","TextField","useState","useDevices","DeviceCardHeader","CmdButton","ControlCmd","jdpack","FloodCard","device","numResponses","startCounter","size","handleClick","service","data","sendCmdAsync","FloodPing","Page","setNumResponses","setStartCounter","setSize","handleChangeNumberResponses","ev","i","parseInt","target","value","isNaN","handleChangeStartCounter","Math","max","handleChangeSize","map","id"],"sourceRoot":""}