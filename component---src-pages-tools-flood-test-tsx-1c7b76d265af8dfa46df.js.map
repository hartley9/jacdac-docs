{"version":3,"file":"component---src-pages-tools-flood-test-tsx-1c7b76d265af8dfa46df.js","mappings":"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","sources":["webpack://jacdac-docs/./node_modules/@mui/material/CardActions/cardActionsClasses.js","webpack://jacdac-docs/./node_modules/@mui/material/CardActions/CardActions.js","webpack://jacdac-docs/./src/components/alert/ConnectAlert.tsx","webpack://jacdac-docs/./src/components/devices/DeviceCardMedia.tsx","webpack://jacdac-docs/./src/components/devices/DeviceCardHeader.tsx","webpack://jacdac-docs/./src/components/ui/GridHeader.tsx","webpack://jacdac-docs/./src/pages/tools/flood-test.tsx"],"sourcesContent":["import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nvar cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"disableSpacing\", \"className\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardActionsUtilityClass } from './cardActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = ownerState => {\n  var {\n    classes,\n    disableSpacing\n  } = ownerState;\n  var slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\n\nvar CardActionsRoot = styled('div', {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    var {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(_ref => {\n  var {\n    ownerState\n  } = _ref;\n  return _extends({\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  }, !ownerState.disableSpacing && {\n    '& > :not(:first-of-type)': {\n      marginLeft: 8\n    }\n  });\n});\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n\n  var {\n    disableSpacing = false,\n    className\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var ownerState = _extends({}, props, {\n    disableSpacing\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default CardActions;","// tslint:disable-next-line: no-submodule-imports\nimport { Box } from \"@mui/material\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../ui/Alert\"\nimport React, { useContext } from \"react\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport { NoSsr } from \"@mui/material\"\nimport ConnectButtons from \"../buttons/ConnectButtons\"\nimport useDevices from \"../hooks/useDevices\"\n\nfunction NoSsrConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    const { serviceClass, closeable } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { transports } = bus\n    const devices = useDevices({ serviceClass, ignoreInfrastructure: true })\n    const spec = serviceSpecificationFromClassIdentifier(serviceClass)\n\n    // don't show if no transport, some devices\n    if (!transports.length || devices?.length) return null\n\n    return (\n        <Box displayPrint=\"none\">\n            <Alert severity=\"info\" closeable={closeable}>\n                {!spec && <span>Did you connect your device?</span>}\n                {spec && <span>Did you connect a {spec.name} device?</span>}\n                <Box component=\"span\" ml={2}>\n                    <ConnectButtons full=\"always\" transparent={true} />\n                </Box>\n            </Alert>\n        </Box>\n    )\n}\n\nexport default function ConnectAlert(props: {\n    serviceClass?: number\n    closeable?: boolean\n}) {\n    return (\n        <NoSsr>\n            <NoSsrConnectAlert {...props} />\n        </NoSsr>\n    )\n}\n","import React from \"react\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport useDeviceSpecification from \"../../jacdac/useDeviceSpecification\"\nimport useDeviceImage from \"./useDeviceImage\"\nimport CardMediaWithSkeleton from \"../ui/CardMediaWithSkeleton\"\n\nexport default function DeviceCardMedia(props: { device: JDDevice }) {\n    const { device } = props\n    const specification = useDeviceSpecification(device)\n    const imageUrl = useDeviceImage(specification, \"preview\")\n\n    return (\n        <CardMediaWithSkeleton image={imageUrl} title={specification?.name} />\n    )\n}\n","import {\n    ControlReg,\n    JD_SERVICE_INDEX_CTRL,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { CardHeader, Chip, Grid, Typography } from \"@mui/material\"\n// tslint:disable-next-line: no-submodule-imports\nimport { Link } from \"gatsby-theme-material-ui\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport React from \"react\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport DeviceActions from \"./DeviceActions\"\nimport DeviceName from \"./DeviceName\"\nimport DeviceCardMedia from \"./DeviceCardMedia\"\nimport useDeviceSpecification from \"../../jacdac/useDeviceSpecification\"\nimport { identifierToUrlPath } from \"../../../jacdac-ts/src/jdom/spec\"\nimport DeviceAvatar from \"./DeviceAvatar\"\nimport useChange from \"../../jacdac/useChange\"\nimport useRegister from \"../hooks/useRegister\"\n\nfunction DeviceFirmwareVersionChip(props: { device: JDDevice }) {\n    const { device } = props\n    const specification = useDeviceSpecification(device)\n    const control = useChange(device, _ => _?.service(JD_SERVICE_INDEX_CTRL))\n    const productIdentifierRegister = useRegister(\n        control,\n        ControlReg.ProductIdentifier\n    )\n    const [productIdentifier] = useRegisterUnpackedValue<[number]>(\n        productIdentifierRegister\n    )\n    const firmwareVersionRegister = useRegister(\n        control,\n        ControlReg.FirmwareVersion\n    )\n    const [firmwareVersion] = useRegisterUnpackedValue<[string]>(\n        firmwareVersionRegister\n    )\n    if (firmwareVersion == undefined) return null\n\n    const firmwareName =\n        !!productIdentifier &&\n        specification?.firmwares?.find(\n            fw => fw.productIdentifier === productIdentifier\n        )?.name\n\n    return (\n        <Chip\n            size=\"small\"\n            label={[firmwareName, firmwareVersion].filter(f => !!f).join(\" \")}\n        />\n    )\n}\n\nfunction DeviceTemperatureChip(props: { device: JDDevice }) {\n    const { device } = props\n    const tempRegister = useChange(device, _ =>\n        _?.service(0)?.register(ControlReg.McuTemperature)\n    )\n    const [temperature] = useRegisterUnpackedValue<[number]>(tempRegister)\n    if (isNaN(temperature)) return null\n    return <Chip size=\"small\" label={`${temperature}°`} />\n}\n\nexport default function DeviceCardHeader(props: {\n    device: JDDevice\n    showAvatar?: boolean\n    showDeviceId?: boolean\n    showFirmware?: boolean\n    showTemperature?: boolean\n    showMedia?: boolean\n    showSettings?: boolean\n    showReset?: boolean\n}) {\n    const {\n        device,\n        showFirmware,\n        showTemperature,\n        showMedia,\n        showDeviceId,\n        showAvatar,\n        showSettings,\n        showReset,\n    } = props\n    const specification = useDeviceSpecification(device)\n\n    return (\n        <>\n            {showMedia && <DeviceCardMedia device={device} />}\n            <CardHeader\n                avatar={showAvatar && <DeviceAvatar device={device} />}\n                action={\n                    <DeviceActions\n                        device={device}\n                        showReset={showReset}\n                        showSettings={showSettings}\n                        hideIdentity={showAvatar}\n                    />\n                }\n                title={\n                    <Link\n                        color=\"textPrimary\"\n                        underline=\"hover\"\n                        to={`/devices/${\n                            identifierToUrlPath(specification?.id) || \"\"\n                        }`}\n                    >\n                        <DeviceName device={device} />\n                    </Link>\n                }\n                subheader={\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <Typography variant=\"caption\" gutterBottom>\n                                {[\n                                    specification?.name,\n                                    showDeviceId && device.deviceId,\n                                ]\n                                    .filter(s => !!s)\n                                    .join(\", \")}\n                            </Typography>\n                        </Grid>\n                        {showFirmware && (\n                            <Grid item>\n                                <DeviceFirmwareVersionChip device={device} />\n                            </Grid>\n                        )}\n                        {showTemperature && (\n                            <Grid item>\n                                <DeviceTemperatureChip device={device} />\n                            </Grid>\n                        )}\n                    </Grid>\n                }\n            />\n        </>\n    )\n}\n","import { Box, Chip, Grid, Typography } from \"@mui/material\"\nimport { styled } from \"@mui/material/styles\"\nimport React from \"react\"\nimport clsx from \"clsx\"\n\nconst PREFIX = \"GridHeader\"\n\nconst classes = {\n    hr: `${PREFIX}-hr`,\n    start: `${PREFIX}-start`,\n}\n\nconst StyledGrid = styled(Grid)(({ theme }) => ({\n    [`& .${classes.hr}`]: {\n        background: theme.palette.text.disabled,\n        marginBottom: \"unset\",\n    },\n\n    [`& .${classes.start}`]: {\n        width: theme.spacing(2),\n    },\n}))\n\nexport default function GridHeader(props: {\n    title?: string\n    count?: number\n    variant?: \"subtitle1\" | \"caption\" | \"subtitle2\"\n    action?: JSX.Element\n}) {\n    const { title, count, variant, action } = props\n\n    return (\n        <StyledGrid item xs={12}>\n            <Grid\n                container\n                direction=\"row\"\n                spacing={1}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item>\n                    <hr className={clsx(classes.hr, classes.start)} />\n                </Grid>\n                <Grid item>\n                    {action && (\n                        <Box component=\"span\" mr={1}>\n                            {action}\n                        </Box>\n                    )}\n                    <Typography\n                        component=\"span\"\n                        variant={variant || \"subtitle1\"}\n                    >\n                        {title}\n                    </Typography>\n                    {count !== undefined && (\n                        <Box component=\"span\" ml={0.5}>\n                            <Chip label={count} />\n                        </Box>\n                    )}\n                </Grid>\n                <Grid item xs>\n                    <hr className={classes.hr} />\n                </Grid>\n            </Grid>\n        </StyledGrid>\n    )\n}\n","import {\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Grid,\n    TextField,\n} from \"@mui/material\"\nimport React, { ChangeEvent, useState } from \"react\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport DeviceCardHeader from \"../../components/devices/DeviceCardHeader\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport CmdButton from \"../../components/CmdButton\"\nimport { ControlCmd } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport ConnectButtons from \"../../components/buttons/ConnectButtons\"\n\nfunction FloodCard(props: {\n    device: JDDevice\n    numResponses: number\n    startCounter: number\n    size: number\n}) {\n    const { device, numResponses, startCounter, size } = props\n    const handleClick = async () => {\n        const service = device.service(0)\n        const data = jdpack<[number, number, number]>(\"u32 u32 u8\", [\n            numResponses,\n            startCounter,\n            size,\n        ])\n        await service.sendCmdAsync(ControlCmd.FloodPing, data)\n    }\n    return (\n        <Card>\n            <DeviceCardHeader device={device} />\n            <CardActions>\n                <CmdButton onClick={handleClick}>Flood</CmdButton>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function Page() {\n    const devices = useDevices({})\n    const [numResponses, setNumResponses] = useState(100)\n    const [startCounter, setStartCounter] = useState(0)\n    const [size, setSize] = useState(32)\n\n    const handleChangeNumberResponses = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setNumResponses(i)\n    }\n    const handleChangeStartCounter = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setStartCounter(Math.max(0, i))\n    }\n    const handleChangeSize = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setSize(Math.max(1, i))\n    }\n\n    return (\n        <>\n            <h1>Flood Test</h1>\n            <Card>\n                <CardHeader title=\"Configuration\" />\n                <CardContent>\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <TextField\n                                label=\"number of responses\"\n                                value={numResponses}\n                                onChange={handleChangeNumberResponses}\n                                type=\"number\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"start counter\"\n                                value={startCounter}\n                                onChange={handleChangeStartCounter}\n                                type=\"number\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"size\"\n                                value={size}\n                                onChange={handleChangeSize}\n                                type=\"number\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n            <Grid container spacing={1}>\n                <GridHeader\n                    action={<ConnectButtons full={false} transparent={true} />}\n                    title={\"Devices\"}\n                />\n                {devices.map(device => (\n                    <Grid key={device.id} item>\n                        <FloodCard\n                            device={device}\n                            numResponses={numResponses}\n                            startCounter={startCounter}\n                            size={size}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n            <ConnectAlert />\n        </>\n    )\n}\n"],"names":["Box","Alert","React","useContext","serviceSpecificationFromClassIdentifier","JacdacContext","NoSsr","ConnectButtons","useDevices","NoSsrConnectAlert","props","serviceClass","closeable","bus","transports","devices","ignoreInfrastructure","spec","length","name","ConnectAlert","useDeviceSpecification","useDeviceImage","CardMediaWithSkeleton","DeviceCardMedia","device","specification","imageUrl","ControlReg","JD_SERVICE_INDEX_CTRL","CardHeader","Chip","Grid","Typography","Link","useRegisterUnpackedValue","DeviceActions","DeviceName","identifierToUrlPath","DeviceAvatar","useChange","useRegister","DeviceFirmwareVersionChip","control","_","service","productIdentifierRegister","ProductIdentifier","productIdentifier","firmwareVersionRegister","FirmwareVersion","firmwareVersion","undefined","firmwareName","firmwares","find","fw","filter","f","join","DeviceTemperatureChip","tempRegister","register","McuTemperature","temperature","isNaN","DeviceCardHeader","showFirmware","showTemperature","showMedia","showDeviceId","showAvatar","showSettings","showReset","id","deviceId","s","styled","clsx","PREFIX","classes","hr","start","StyledGrid","theme","background","palette","text","disabled","marginBottom","width","spacing","GridHeader","title","count","variant","action","Card","CardActions","CardContent","TextField","useState","CmdButton","ControlCmd","jdpack","FloodCard","numResponses","startCounter","size","handleClick","data","sendCmdAsync","FloodPing","Page","setNumResponses","setStartCounter","setSize","handleChangeNumberResponses","ev","i","parseInt","target","value","handleChangeStartCounter","Math","max","handleChangeSize","map"],"sourceRoot":""}