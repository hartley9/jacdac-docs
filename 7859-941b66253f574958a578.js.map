{"version":3,"file":"7859-941b66253f574958a578.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEe,SAASY,qBAAT,CAA+BC,KAA/B,EAA6D;AACxE,MAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA;AAArB,MAAiCH,KAAvC;AAEA,MAAMI,SAAS,GAAGhB,6CAAM,EAAxB;AACA,MAAMiB,eAAe,GAAGP,uEAAW,CAACG,OAAD,EAAUZ,qGAAV,CAAnC;AACA,MAAMkB,cAAc,GAAGT,uEAAW,CAACG,OAAD,EAAUZ,mGAAV,CAAlC;AACA,MAAMoB,YAAY,GAAGX,uEAAW,CAACG,OAAD,EAAUZ,+FAAV,CAAhC;AACA,MAAMsB,eAAe,GAAGb,uEAAW,CAACG,OAAD,EAAUZ,qGAAV,CAAnC;AAEA,MAAM,CAACwB,OAAD,IAAYvB,4FAAwB,CACtCe,eADsC,EAEtCL,KAFsC,CAA1C;AAIA,MAAM,CAACc,MAAD,IAAWxB,4FAAwB,CACrCiB,cADqC,EAErCP,KAFqC,CAAzC;AAIA,MAAM,CAACe,IAAD,IAASzB,4FAAwB,CAAWmB,YAAX,EAAyBT,KAAzB,CAAvC;AACA,MAAM,CAACgB,OAAD,IAAY1B,4FAAwB,CAAWqB,eAAX,EAA4BX,KAA5B,CAA1C;AACA,MAAMiB,MAAM,GAAGxB,4EAAgB,CAAqBQ,OAArB,CAA/B;AACA,MAAMiB,KAAK,GAAGD,MAAM,GAAG,WAAH,GAAiB,SAArC;AACA,MAAM;AAAEE,IAAAA,UAAF;AAAcC,IAAAA,iBAAd;AAAiCC,IAAAA,MAAjC;AAAyCC,IAAAA;AAAzC,MACF9B,4EAAc,CAAC0B,KAAD,CADlB;AAEA,MAAMK,UAAU,GAAG1B,2EAAa,CAACM,OAAD,EAAUD,QAAV,aAAUA,QAAV,uBAAUA,QAAQ,CAAEsB,MAApB,CAAhC,CAvBwE,CAyBxE;;AACA,MAAIT,IAAI,KAAKU,SAAT,IAAsBT,OAAO,KAAKS,SAAtC,EAAiD,oBAAO,iDAAC,oEAAD,OAAP;AAEjD,MAAMC,UAAU,GAAG,CAAC,CAACT,MAArB,CA5BwE,CA6BxE;;AACA,MAAMU,EAAE,GAAG,CAAX;AACA,MAAMC,EAAE,GAAG,CAAX;AACA,MAAMC,EAAE,GAAG,GAAX;AACA,MAAMC,EAAE,GAAG,CAAX;AACA,MAAMC,CAAC,GAAG,CAAV;AACA,MAAMC,CAAC,GAAGhB,OAAO,GAAGW,EAAV,GAAe,CAACX,OAAO,GAAG,CAAX,IAAgBe,CAAzC;AACA,MAAME,CAAC,GAAGlB,IAAI,GAAGa,EAAP,GAAY,CAACb,IAAI,GAAG,CAAR,IAAagB,CAAnC;;AAEA,MAAMG,cAAc,GAAIC,KAAD,IAAmB,MAAM;AAC5ClB,IAAAA,MAAM,CAACmB,EAAP,CAAUD,KAAV;AACA9B,IAAAA,eAAe,CAACgC,OAAhB;AACH,GAHD;;AAIA,MAAMC,gBAAgB,GAAIH,KAAD,IAAmB,MAAM;AAC9ClB,IAAAA,MAAM,CAACsB,IAAP,CAAYJ,KAAZ;AACA9B,IAAAA,eAAe,CAACgC,OAAhB;AACH,GAHD,CA1CwE,CA+CxE;;;AACA,MAAMG,MAAM,GAAG,MAAM;AACjB,QAAMC,MAAqB,GAAG,EAA9B;AACA,QAAMC,QAAkC,GAAG;AACvCC,MAAAA,SAAS,EAAEjB,UAAU,GAAG,YAAH,GAAkBD,SADA;AAEvCmB,MAAAA,IAAI,EAAElB,UAAU,GAAG,QAAH,GAAc,EAFS;AAGvCmB,MAAAA,QAAQ,EAAEnB,UAAU,GAAG,CAAH,GAAOD;AAHY,KAA3C;AAMA,QAAIqB,CAAC,GAAGf,CAAR;;AACA,SAAK,IAAIgB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGhC,IAAxB,EAA8BgC,GAAG,EAAjC,EAAqC;AACjC,UAAIC,CAAC,GAAGjB,CAAR;;AADiC,iCAExBkB,GAFwB;AAAA;;AAG7B,YAAMd,KAAK,GAAGY,GAAG,GAAG/B,OAAN,GAAgBiC,GAA9B;AACA,YAAMC,EAAE,GAAG,CAAArC,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEsC,SAAT,CAAmBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASjB,KAAjC,KAA0C,CAAC,CAAtD;AACA,YAAMkB,KAAK,GAAGvC,MAAH,aAAGA,MAAH,wCAAGA,MAAM,CAAGqB,KAAH,CAAT,kDAAG,cAAkB,CAAlB,CAAd;AAEA,YAAMmB,QAAQ,GAAG5B,UAAU,GAAGQ,cAAc,CAACC,KAAD,CAAjB,GAA2BV,SAAtD;AACA,YAAM8B,UAAU,GAAG7B,UAAU,GACvBY,gBAAgB,CAACH,KAAD,CADO,GAEvBV,SAFN;AAGA,YAAM+B,MAAM,GAAG9D,sEAAU,CAAC4D,QAAD,CAAzB;AACA,YAAMG,QAAQ,GAAG/D,sEAAU,CAAC6D,UAAD,CAA3B;AAEAd,QAAAA,MAAM,CAACiB,IAAP,eACI;AACI,aAAG,QAAMX,GAAN,SAAaE,GADpB;AAEI,WAAC,EAAED,CAFP;AAGI,WAAC,EAAEF,CAHP;AAII,eAAK,EAAEnB,EAJX;AAKI,gBAAM,EAAEC,EALZ;AAMI,YAAE,EAAEE,EANR;AAOI,YAAE,EAAEA,EAPR;AAQI,cAAI,EAAEoB,EAAE,GAAG7B,MAAH,GAAYD,iBARxB;AASI,gBAAM,EAAE,MATZ;AAUI,qBAAW,EAAES;AAVjB,WAWQa,QAXR;AAYI,wBAAYW,KAAK,aAAWN,GAAX,SAAkBE,GAZvC;AAaI,mBAAS,EAAEQ,QAbf;AAcI,iBAAO,EAAED,MAdb;AAeI,uBAAa,EAAED,UAfnB;AAgBI,qBAAW,EAAED;AAhBjB,WADJ;;AAoBA,YAAID,KAAJ,EAAW;AACPZ,UAAAA,MAAM,CAACiB,IAAP,eACI;AACI,eAAG,QAAMX,GAAN,SAAaE,GADpB;AAEI,oBAAQ,EAAGrB,EAAE,GAAG,CAAN,GAAW;AAFzB,aAGQN,SAHR;AAII,aAAC,EAAE0B,CAAC,GAAGrB,EAAE,GAAG,CAJhB;AAKI,aAAC,EAAEmB,CAAC,GAAGlB,EAAE,GAAG;AALhB,cAOKyB,KAPL,CADJ;AAWH;;AACDL,QAAAA,CAAC,IAAIrB,EAAE,GAAGI,CAAV;AA/C6B;;AAEjC,WAAK,IAAIkB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGjC,OAAxB,EAAiCiC,GAAG,EAApC,EAAwC;AAAA,cAA/BA,GAA+B;AA8CvC;;AACDH,MAAAA,CAAC,IAAIlB,EAAE,GAAGG,CAAV;AACH;;AACD,WAAO;AAAEU,MAAAA;AAAF,KAAP;AACH,GA7DD;;AA+DA,MAAM;AAAEA,IAAAA;AAAF,MAAaD,MAAM,EAAzB;AACA,MAAMmB,QAAQ,GAAGhE,uFAA0B,CAACS,SAAS,CAACwD,OAAX,CAA3C;AACA,sBACI,iDAAC,mEAAD;AAAW,SAAK,EAAE5B,CAAlB;AAAqB,UAAM,EAAEC,CAA7B;AAAgC,QAAI,EAAEV;AAAtC,kBACI;AACI,KAAC,EAAE,CADP;AAEI,KAAC,EAAE,CAFP;AAGI,SAAK,EAAES,CAHX;AAII,UAAM,EAAEC,CAJZ;AAKI,MAAE,EAAEH,EALR;AAMI,MAAE,EAAEA,EANR;AAOI,QAAI,EAAEX;AAPV,IADJ,eAUI;AAAG,OAAG,EAAEf;AAAR,KAAuBuD,QAAvB,GACKlB,MADL,CAVJ,CADJ;AAgBH;;;;;;;;;;;;;;;;AC9ID;AAEA,IAAMqB,QAAQ,GAAG,EAAjB;AACA,IAAMC,MAAM,GAAG,EAAf;AACA,IAAMC,SAAS,GAAG,EAAlB;AACA,IAAMC,QAAQ,GAAG,EAAjB;AAEe,SAASC,YAAT,CAAsBC,OAAtB,EAMZ;AACC,MAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA,MAAzB;AAAiCC,IAAAA;AAAjC,MAA+CL,OAArD;AAEA,MAAI,CAACC,MAAD,IAAW,CAACC,IAAZ,IAAoB,CAACC,OAArB,IAAgC,CAACC,MAArC,EAA6C,OAAO9C,SAAP;AAE7C,MAAMgD,QAAQ,GAAG;AACb,KAACX,QAAD,GAAYM,MADC;AAEb,KAACJ,SAAD,GAAaM,OAFA;AAGb,KAACP,MAAD,GAAUM,IAAI,IAAKG,SAAS,IAAIF,OAHnB;AAIb,KAACL,QAAD,GAAYM,MAAM,IAAKC,SAAS,IAAIJ;AAJvB,GAAjB;AAOA,SAAQM,CAAD,IAA+B;AAClC,QAAMC,QAAQ,GAAGd,sCAAgB,CAACa,CAAD,CAAjC;AACA,QAAME,OAAO,GAAGH,QAAQ,CAACE,QAAD,CAAxB;;AACA,QAAIC,OAAJ,EAAa;AACTF,MAAAA,CAAC,CAACG,cAAF;AACAD,MAAAA,OAAO;AACV;AACJ,GAPD;AAQH;;AClCc,SAASE,qBAAT,CAA+BC,SAA/B,EAAmD;AAC9D,MAAMC,KAAK,GAAG,gBAAd;;AACA,MAAMC,MAAM,GAAIC,MAAD,IAAoB,MAAM;AACrCC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B;AAAEF,MAAAA;AAAF,KAA7B;AACA,QAAMG,SAAS,GAAGC,KAAK,CAACC,IAAN,CACd,CAAAR,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAES,gBAAX,CAA4BR,KAA5B,MAAsC,EADxB,CAAlB;;AAGA,QAAIK,SAAS,CAAC7D,MAAd,EAAsB;AAClB,UAAMiE,EAAE,GAAGJ,SAAS,CAAClC,SAAV,CAAoBuC,CAAC,IAAIA,CAAC,KAAKC,QAAQ,CAACC,aAAxC,CAAX;AACA,UAAMC,IAAI,GAAG,CAACJ,EAAE,GAAGP,MAAL,GAAcG,SAAS,CAAC7D,MAAzB,IAAmC6D,SAAS,CAAC7D,MAA1D;AACA6D,MAAAA,SAAS,CAACQ,IAAD,CAAT,CAAgBC,KAAhB;AACH;AACJ,GAVD;;AAWA,SAAOb,MAAP;AACH;;ACdD;AACA;AAEe,SAAStF,0BAAT,CACXoF,SADW,EAEXgB,QAFW,EAGb;AACE,MAAMd,MAAM,GAAGH,qBAAqB,CAACC,SAAD,CAApC;AAEA,MAAMiB,SAAS,GAAG9B,YAAY,CAAC;AAC3BE,IAAAA,MAAM,EAAE,CAAC2B,QAAD,IAAad,MAAM,CAAC,CAAC,CAAF,CADA;AAE3BX,IAAAA,OAAO,EAAE,CAACyB,QAAD,IAAad,MAAM,CAAC,CAAD,CAFD;AAG3BV,IAAAA,MAAM,EAAEwB,QAAQ,IAAId,MAAM,CAAC,CAAD,CAHC;AAI3BZ,IAAAA,IAAI,EAAE0B,QAAQ,IAAId,MAAM,CAAC,CAAC,CAAF;AAJG,GAAD,CAA9B;AAOA,SAAO;AACHe,IAAAA,SAAS,EAAEjB,SAAS,IAAIiB;AADrB,GAAP;AAGH","sources":["webpack://jacdac-docs/./src/components/dashboard/DashboardMatrixKeypad.tsx","webpack://jacdac-docs/./src/components/hooks/useArrowKeys.ts","webpack://jacdac-docs/./src/components/hooks/useKeyboardNavigation.ts","webpack://jacdac-docs/./src/components/hooks/useKeyboardNavigationProps.ts"],"sourcesContent":["import React, { SVGProps, useRef } from \"react\"\nimport { MatrixKeypadReg } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { DashboardServiceProps } from \"./DashboardServiceWidget\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport SvgWidget from \"../widgets/SvgWidget\"\nimport useWidgetTheme from \"../widgets/useWidgetTheme\"\nimport useServiceServer from \"../hooks/useServiceServer\"\nimport useFireKey from \"../hooks/useFireKey\"\nimport useKeyboardNavigationProps from \"../hooks/useKeyboardNavigationProps\"\nimport MatrixKeypadServer from \"../../../jacdac-ts/src/servers/matrixkeypadserver\"\nimport LoadingProgress from \"../ui/LoadingProgress\"\nimport useWidgetSize from \"../widgets/useWidgetSize\"\nimport useRegister from \"../hooks/useRegister\"\n\nexport default function DashboardMatrixKeypad(props: DashboardServiceProps) {\n    const { service, services, variant } = props\n\n    const widgetRef = useRef<SVGGElement>()\n    const pressedRegister = useRegister(service, MatrixKeypadReg.Pressed)\n    const labelsRegister = useRegister(service, MatrixKeypadReg.Labels)\n    const rowsRegister = useRegister(service, MatrixKeypadReg.Rows)\n    const columnsRegister = useRegister(service, MatrixKeypadReg.Columns)\n\n    const [pressed] = useRegisterUnpackedValue<[[number][]]>(\n        pressedRegister,\n        props\n    )\n    const [labels] = useRegisterUnpackedValue<[[string][]]>(\n        labelsRegister,\n        props\n    )\n    const [rows] = useRegisterUnpackedValue<[number]>(rowsRegister, props)\n    const [columns] = useRegisterUnpackedValue<[number]>(columnsRegister, props)\n    const server = useServiceServer<MatrixKeypadServer>(service)\n    const color = server ? \"secondary\" : \"primary\"\n    const { background, controlBackground, active, textProps } =\n        useWidgetTheme(color)\n    const widgetSize = useWidgetSize(variant, services?.length)\n\n    // no data about layout\n    if (rows === undefined || columns === undefined) return <LoadingProgress />\n\n    const clickeable = !!server\n    // compute size\n    const pw = 8\n    const ph = 8\n    const ps = 0.5\n    const pr = 1\n    const m = 2\n    const w = columns * pw + (columns + 1) * m\n    const h = rows * ph + (rows + 1) * m\n\n    const handleButtonUp = (index: number) => () => {\n        server.up(index)\n        pressedRegister.refresh()\n    }\n    const handleButtonDown = (index: number) => () => {\n        server.down(index)\n        pressedRegister.refresh()\n    }\n\n    // add leds\n    const render = () => {\n        const ledEls: JSX.Element[] = []\n        const ledProps: SVGProps<SVGRectElement> = {\n            className: clickeable ? \"clickeable\" : undefined,\n            role: clickeable ? \"button\" : \"\",\n            tabIndex: clickeable ? 0 : undefined,\n        }\n\n        let y = m\n        for (let row = 0; row < rows; row++) {\n            let x = m\n            for (let col = 0; col < columns; col++) {\n                const index = row * columns + col\n                const on = pressed?.findIndex(p => p[0] === index) > -1\n                const label = labels?.[index]?.[0]\n\n                const handleUp = clickeable ? handleButtonUp(index) : undefined\n                const handleDown = clickeable\n                    ? handleButtonDown(index)\n                    : undefined\n                const fireUp = useFireKey(handleUp)\n                const fireDown = useFireKey(handleDown)\n\n                ledEls.push(\n                    <rect\n                        key={`l${row}-${col}`}\n                        x={x}\n                        y={y}\n                        width={pw}\n                        height={ph}\n                        rx={pr}\n                        ry={pr}\n                        fill={on ? active : controlBackground}\n                        stroke={\"none\"}\n                        strokeWidth={ps}\n                        {...ledProps}\n                        aria-label={label || `key ${row},${col}`}\n                        onKeyDown={fireDown}\n                        onKeyUp={fireUp}\n                        onPointerDown={handleDown}\n                        onPointerUp={handleUp}\n                    />\n                )\n                if (label) {\n                    ledEls.push(\n                        <text\n                            key={`t${row}-${col}`}\n                            fontSize={(ph * 2) / 3}\n                            {...textProps}\n                            x={x + pw / 2}\n                            y={y + ph / 2}\n                        >\n                            {label}\n                        </text>\n                    )\n                }\n                x += pw + m\n            }\n            y += ph + m\n        }\n        return { ledEls }\n    }\n\n    const { ledEls } = render()\n    const navProps = useKeyboardNavigationProps(widgetRef.current)\n    return (\n        <SvgWidget width={w} height={h} size={widgetSize}>\n            <rect\n                x={0}\n                y={0}\n                width={w}\n                height={h}\n                rx={pr}\n                ry={pr}\n                fill={background}\n            />\n            <g ref={widgetRef} {...navProps}>\n                {ledEls}\n            </g>\n        </SvgWidget>\n    )\n}\n","import { KeyboardEvent } from \"react\"\nimport { keyCodeFromEvent } from \"./useFireKey\"\n\nconst LEFT_KEY = 37\nconst UP_KEY = 38\nconst RIGHT_KEY = 39\nconst DOWN_KEY = 40\n\nexport default function useArrowKeys(options: {\n    onLeft?: () => void\n    onRight?: () => void\n    onUp?: () => void\n    onDown?: () => void\n    symmetric?: boolean\n}) {\n    const { onLeft, onUp, onRight, onDown, symmetric } = options\n\n    if (!onLeft && !onUp && !onRight && !onDown) return undefined\n\n    const handlers = {\n        [LEFT_KEY]: onLeft,\n        [RIGHT_KEY]: onRight,\n        [UP_KEY]: onUp || (symmetric && onRight),\n        [DOWN_KEY]: onDown || (symmetric && onLeft),\n    }\n\n    return (e: KeyboardEvent<Element>) => {\n        const charCode = keyCodeFromEvent(e)\n        const handler = handlers[charCode]\n        if (handler) {\n            e.preventDefault()\n            handler()\n        }\n    }\n}\n","export default function useKeyboardNavigation(parentRef: Element) {\n    const query = '[tabindex=\"0\"]'\n    const onMove = (offset: number) => () => {\n        console.log(\"keyboard move\", { offset })\n        const focusable = Array.from<SVGElement>(\n            parentRef?.querySelectorAll(query) || []\n        )\n        if (focusable.length) {\n            const me = focusable.findIndex(f => f === document.activeElement)\n            const next = (me + offset + focusable.length) % focusable.length\n            focusable[next].focus()\n        }\n    }\n    return onMove\n}\n","import useArrowKeys from \"./useArrowKeys\"\nimport useKeyboardNavigation from \"./useKeyboardNavigation\"\n\nexport default function useKeyboardNavigationProps(\n    parentRef: Element,\n    vertical?: boolean\n) {\n    const onMove = useKeyboardNavigation(parentRef)\n\n    const onKeyDown = useArrowKeys({\n        onLeft: !vertical && onMove(-1),\n        onRight: !vertical && onMove(1),\n        onDown: vertical && onMove(1),\n        onUp: vertical && onMove(-1),\n    })\n\n    return {\n        onKeyDown: parentRef && onKeyDown,\n    }\n}\n"],"names":["React","useRef","MatrixKeypadReg","useRegisterUnpackedValue","SvgWidget","useWidgetTheme","useServiceServer","useFireKey","useKeyboardNavigationProps","LoadingProgress","useWidgetSize","useRegister","DashboardMatrixKeypad","props","service","services","variant","widgetRef","pressedRegister","Pressed","labelsRegister","Labels","rowsRegister","Rows","columnsRegister","Columns","pressed","labels","rows","columns","server","color","background","controlBackground","active","textProps","widgetSize","length","undefined","clickeable","pw","ph","ps","pr","m","w","h","handleButtonUp","index","up","refresh","handleButtonDown","down","render","ledEls","ledProps","className","role","tabIndex","y","row","x","col","on","findIndex","p","label","handleUp","handleDown","fireUp","fireDown","push","navProps","current","keyCodeFromEvent","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","useArrowKeys","options","onLeft","onUp","onRight","onDown","symmetric","handlers","e","charCode","handler","preventDefault","useKeyboardNavigation","parentRef","query","onMove","offset","console","log","focusable","Array","from","querySelectorAll","me","f","document","activeElement","next","focus","vertical","onKeyDown"],"sourceRoot":""}